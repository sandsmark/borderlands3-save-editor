// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OakShared.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_OakShared_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_OakShared_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_OakShared_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_OakShared_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_OakShared_2eproto;
namespace OakSave {
class ChallengeSaveGameData;
class ChallengeSaveGameDataDefaultTypeInternal;
extern ChallengeSaveGameDataDefaultTypeInternal _ChallengeSaveGameData_default_instance_;
class ChallengeStatSaveGameData;
class ChallengeStatSaveGameDataDefaultTypeInternal;
extern ChallengeStatSaveGameDataDefaultTypeInternal _ChallengeStatSaveGameData_default_instance_;
class GameStatSaveGameData;
class GameStatSaveGameDataDefaultTypeInternal;
extern GameStatSaveGameDataDefaultTypeInternal _GameStatSaveGameData_default_instance_;
class InventoryCategorySaveData;
class InventoryCategorySaveDataDefaultTypeInternal;
extern InventoryCategorySaveDataDefaultTypeInternal _InventoryCategorySaveData_default_instance_;
class OakChallengeRewardSaveGameData;
class OakChallengeRewardSaveGameDataDefaultTypeInternal;
extern OakChallengeRewardSaveGameDataDefaultTypeInternal _OakChallengeRewardSaveGameData_default_instance_;
class OakSDUSaveGameData;
class OakSDUSaveGameDataDefaultTypeInternal;
extern OakSDUSaveGameDataDefaultTypeInternal _OakSDUSaveGameData_default_instance_;
class RegisteredDownloadableEntitlement;
class RegisteredDownloadableEntitlementDefaultTypeInternal;
extern RegisteredDownloadableEntitlementDefaultTypeInternal _RegisteredDownloadableEntitlement_default_instance_;
class RegisteredDownloadableEntitlements;
class RegisteredDownloadableEntitlementsDefaultTypeInternal;
extern RegisteredDownloadableEntitlementsDefaultTypeInternal _RegisteredDownloadableEntitlements_default_instance_;
class Vec3;
class Vec3DefaultTypeInternal;
extern Vec3DefaultTypeInternal _Vec3_default_instance_;
}  // namespace OakSave
PROTOBUF_NAMESPACE_OPEN
template<> ::OakSave::ChallengeSaveGameData* Arena::CreateMaybeMessage<::OakSave::ChallengeSaveGameData>(Arena*);
template<> ::OakSave::ChallengeStatSaveGameData* Arena::CreateMaybeMessage<::OakSave::ChallengeStatSaveGameData>(Arena*);
template<> ::OakSave::GameStatSaveGameData* Arena::CreateMaybeMessage<::OakSave::GameStatSaveGameData>(Arena*);
template<> ::OakSave::InventoryCategorySaveData* Arena::CreateMaybeMessage<::OakSave::InventoryCategorySaveData>(Arena*);
template<> ::OakSave::OakChallengeRewardSaveGameData* Arena::CreateMaybeMessage<::OakSave::OakChallengeRewardSaveGameData>(Arena*);
template<> ::OakSave::OakSDUSaveGameData* Arena::CreateMaybeMessage<::OakSave::OakSDUSaveGameData>(Arena*);
template<> ::OakSave::RegisteredDownloadableEntitlement* Arena::CreateMaybeMessage<::OakSave::RegisteredDownloadableEntitlement>(Arena*);
template<> ::OakSave::RegisteredDownloadableEntitlements* Arena::CreateMaybeMessage<::OakSave::RegisteredDownloadableEntitlements>(Arena*);
template<> ::OakSave::Vec3* Arena::CreateMaybeMessage<::OakSave::Vec3>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace OakSave {

// ===================================================================

class Vec3 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.Vec3) */ {
 public:
  inline Vec3() : Vec3(nullptr) {};
  virtual ~Vec3();

  Vec3(const Vec3& from);
  Vec3(Vec3&& from) noexcept
    : Vec3() {
    *this = ::std::move(from);
  }

  inline Vec3& operator=(const Vec3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vec3& operator=(Vec3&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vec3& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vec3* internal_default_instance() {
    return reinterpret_cast<const Vec3*>(
               &_Vec3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Vec3& a, Vec3& b) {
    a.Swap(&b);
  }
  inline void Swap(Vec3* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vec3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vec3* New() const final {
    return CreateMaybeMessage<Vec3>(nullptr);
  }

  Vec3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vec3>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vec3& from);
  void MergeFrom(const Vec3& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vec3* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.Vec3";
  }
  protected:
  explicit Vec3(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakShared_2eproto);
    return ::descriptor_table_OakShared_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:OakSave.Vec3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakShared_2eproto;
};
// -------------------------------------------------------------------

class GameStatSaveGameData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.GameStatSaveGameData) */ {
 public:
  inline GameStatSaveGameData() : GameStatSaveGameData(nullptr) {};
  virtual ~GameStatSaveGameData();

  GameStatSaveGameData(const GameStatSaveGameData& from);
  GameStatSaveGameData(GameStatSaveGameData&& from) noexcept
    : GameStatSaveGameData() {
    *this = ::std::move(from);
  }

  inline GameStatSaveGameData& operator=(const GameStatSaveGameData& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameStatSaveGameData& operator=(GameStatSaveGameData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameStatSaveGameData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameStatSaveGameData* internal_default_instance() {
    return reinterpret_cast<const GameStatSaveGameData*>(
               &_GameStatSaveGameData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GameStatSaveGameData& a, GameStatSaveGameData& b) {
    a.Swap(&b);
  }
  inline void Swap(GameStatSaveGameData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameStatSaveGameData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameStatSaveGameData* New() const final {
    return CreateMaybeMessage<GameStatSaveGameData>(nullptr);
  }

  GameStatSaveGameData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameStatSaveGameData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameStatSaveGameData& from);
  void MergeFrom(const GameStatSaveGameData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameStatSaveGameData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.GameStatSaveGameData";
  }
  protected:
  explicit GameStatSaveGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakShared_2eproto);
    return ::descriptor_table_OakShared_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatPathFieldNumber = 2,
    kStatValueFieldNumber = 1,
  };
  // string stat_path = 2;
  void clear_stat_path();
  const std::string& stat_path() const;
  void set_stat_path(const std::string& value);
  void set_stat_path(std::string&& value);
  void set_stat_path(const char* value);
  void set_stat_path(const char* value, size_t size);
  std::string* mutable_stat_path();
  std::string* release_stat_path();
  void set_allocated_stat_path(std::string* stat_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_stat_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_stat_path(
      std::string* stat_path);
  private:
  const std::string& _internal_stat_path() const;
  void _internal_set_stat_path(const std::string& value);
  std::string* _internal_mutable_stat_path();
  public:

  // int32 stat_value = 1;
  void clear_stat_value();
  ::PROTOBUF_NAMESPACE_ID::int32 stat_value() const;
  void set_stat_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stat_value() const;
  void _internal_set_stat_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:OakSave.GameStatSaveGameData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stat_path_;
  ::PROTOBUF_NAMESPACE_ID::int32 stat_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakShared_2eproto;
};
// -------------------------------------------------------------------

class InventoryCategorySaveData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.InventoryCategorySaveData) */ {
 public:
  inline InventoryCategorySaveData() : InventoryCategorySaveData(nullptr) {};
  virtual ~InventoryCategorySaveData();

  InventoryCategorySaveData(const InventoryCategorySaveData& from);
  InventoryCategorySaveData(InventoryCategorySaveData&& from) noexcept
    : InventoryCategorySaveData() {
    *this = ::std::move(from);
  }

  inline InventoryCategorySaveData& operator=(const InventoryCategorySaveData& from) {
    CopyFrom(from);
    return *this;
  }
  inline InventoryCategorySaveData& operator=(InventoryCategorySaveData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InventoryCategorySaveData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InventoryCategorySaveData* internal_default_instance() {
    return reinterpret_cast<const InventoryCategorySaveData*>(
               &_InventoryCategorySaveData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(InventoryCategorySaveData& a, InventoryCategorySaveData& b) {
    a.Swap(&b);
  }
  inline void Swap(InventoryCategorySaveData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InventoryCategorySaveData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InventoryCategorySaveData* New() const final {
    return CreateMaybeMessage<InventoryCategorySaveData>(nullptr);
  }

  InventoryCategorySaveData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InventoryCategorySaveData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InventoryCategorySaveData& from);
  void MergeFrom(const InventoryCategorySaveData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InventoryCategorySaveData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.InventoryCategorySaveData";
  }
  protected:
  explicit InventoryCategorySaveData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakShared_2eproto);
    return ::descriptor_table_OakShared_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseCategoryDefinitionHashFieldNumber = 1,
    kQuantityFieldNumber = 2,
  };
  // uint32 base_category_definition_hash = 1;
  void clear_base_category_definition_hash();
  ::PROTOBUF_NAMESPACE_ID::uint32 base_category_definition_hash() const;
  void set_base_category_definition_hash(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_base_category_definition_hash() const;
  void _internal_set_base_category_definition_hash(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 quantity = 2;
  void clear_quantity();
  ::PROTOBUF_NAMESPACE_ID::int32 quantity() const;
  void set_quantity(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_quantity() const;
  void _internal_set_quantity(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:OakSave.InventoryCategorySaveData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 base_category_definition_hash_;
  ::PROTOBUF_NAMESPACE_ID::int32 quantity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakShared_2eproto;
};
// -------------------------------------------------------------------

class OakSDUSaveGameData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.OakSDUSaveGameData) */ {
 public:
  inline OakSDUSaveGameData() : OakSDUSaveGameData(nullptr) {};
  virtual ~OakSDUSaveGameData();

  OakSDUSaveGameData(const OakSDUSaveGameData& from);
  OakSDUSaveGameData(OakSDUSaveGameData&& from) noexcept
    : OakSDUSaveGameData() {
    *this = ::std::move(from);
  }

  inline OakSDUSaveGameData& operator=(const OakSDUSaveGameData& from) {
    CopyFrom(from);
    return *this;
  }
  inline OakSDUSaveGameData& operator=(OakSDUSaveGameData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OakSDUSaveGameData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OakSDUSaveGameData* internal_default_instance() {
    return reinterpret_cast<const OakSDUSaveGameData*>(
               &_OakSDUSaveGameData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(OakSDUSaveGameData& a, OakSDUSaveGameData& b) {
    a.Swap(&b);
  }
  inline void Swap(OakSDUSaveGameData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OakSDUSaveGameData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OakSDUSaveGameData* New() const final {
    return CreateMaybeMessage<OakSDUSaveGameData>(nullptr);
  }

  OakSDUSaveGameData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OakSDUSaveGameData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OakSDUSaveGameData& from);
  void MergeFrom(const OakSDUSaveGameData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OakSDUSaveGameData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.OakSDUSaveGameData";
  }
  protected:
  explicit OakSDUSaveGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakShared_2eproto);
    return ::descriptor_table_OakShared_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSduDataPathFieldNumber = 2,
    kSduLevelFieldNumber = 1,
  };
  // string sdu_data_path = 2;
  void clear_sdu_data_path();
  const std::string& sdu_data_path() const;
  void set_sdu_data_path(const std::string& value);
  void set_sdu_data_path(std::string&& value);
  void set_sdu_data_path(const char* value);
  void set_sdu_data_path(const char* value, size_t size);
  std::string* mutable_sdu_data_path();
  std::string* release_sdu_data_path();
  void set_allocated_sdu_data_path(std::string* sdu_data_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sdu_data_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sdu_data_path(
      std::string* sdu_data_path);
  private:
  const std::string& _internal_sdu_data_path() const;
  void _internal_set_sdu_data_path(const std::string& value);
  std::string* _internal_mutable_sdu_data_path();
  public:

  // int32 sdu_level = 1;
  void clear_sdu_level();
  ::PROTOBUF_NAMESPACE_ID::int32 sdu_level() const;
  void set_sdu_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sdu_level() const;
  void _internal_set_sdu_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:OakSave.OakSDUSaveGameData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sdu_data_path_;
  ::PROTOBUF_NAMESPACE_ID::int32 sdu_level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakShared_2eproto;
};
// -------------------------------------------------------------------

class RegisteredDownloadableEntitlement PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.RegisteredDownloadableEntitlement) */ {
 public:
  inline RegisteredDownloadableEntitlement() : RegisteredDownloadableEntitlement(nullptr) {};
  virtual ~RegisteredDownloadableEntitlement();

  RegisteredDownloadableEntitlement(const RegisteredDownloadableEntitlement& from);
  RegisteredDownloadableEntitlement(RegisteredDownloadableEntitlement&& from) noexcept
    : RegisteredDownloadableEntitlement() {
    *this = ::std::move(from);
  }

  inline RegisteredDownloadableEntitlement& operator=(const RegisteredDownloadableEntitlement& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisteredDownloadableEntitlement& operator=(RegisteredDownloadableEntitlement&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisteredDownloadableEntitlement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisteredDownloadableEntitlement* internal_default_instance() {
    return reinterpret_cast<const RegisteredDownloadableEntitlement*>(
               &_RegisteredDownloadableEntitlement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RegisteredDownloadableEntitlement& a, RegisteredDownloadableEntitlement& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisteredDownloadableEntitlement* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisteredDownloadableEntitlement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisteredDownloadableEntitlement* New() const final {
    return CreateMaybeMessage<RegisteredDownloadableEntitlement>(nullptr);
  }

  RegisteredDownloadableEntitlement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisteredDownloadableEntitlement>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisteredDownloadableEntitlement& from);
  void MergeFrom(const RegisteredDownloadableEntitlement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisteredDownloadableEntitlement* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.RegisteredDownloadableEntitlement";
  }
  protected:
  explicit RegisteredDownloadableEntitlement(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakShared_2eproto);
    return ::descriptor_table_OakShared_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kConsumedFieldNumber = 2,
    kRegisteredFieldNumber = 3,
    kSeenFieldNumber = 4,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 consumed = 2;
  void clear_consumed();
  ::PROTOBUF_NAMESPACE_ID::uint32 consumed() const;
  void set_consumed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_consumed() const;
  void _internal_set_consumed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool registered = 3;
  void clear_registered();
  bool registered() const;
  void set_registered(bool value);
  private:
  bool _internal_registered() const;
  void _internal_set_registered(bool value);
  public:

  // bool seen = 4;
  void clear_seen();
  bool seen() const;
  void set_seen(bool value);
  private:
  bool _internal_seen() const;
  void _internal_set_seen(bool value);
  public:

  // @@protoc_insertion_point(class_scope:OakSave.RegisteredDownloadableEntitlement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 consumed_;
  bool registered_;
  bool seen_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakShared_2eproto;
};
// -------------------------------------------------------------------

class RegisteredDownloadableEntitlements PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.RegisteredDownloadableEntitlements) */ {
 public:
  inline RegisteredDownloadableEntitlements() : RegisteredDownloadableEntitlements(nullptr) {};
  virtual ~RegisteredDownloadableEntitlements();

  RegisteredDownloadableEntitlements(const RegisteredDownloadableEntitlements& from);
  RegisteredDownloadableEntitlements(RegisteredDownloadableEntitlements&& from) noexcept
    : RegisteredDownloadableEntitlements() {
    *this = ::std::move(from);
  }

  inline RegisteredDownloadableEntitlements& operator=(const RegisteredDownloadableEntitlements& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisteredDownloadableEntitlements& operator=(RegisteredDownloadableEntitlements&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisteredDownloadableEntitlements& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisteredDownloadableEntitlements* internal_default_instance() {
    return reinterpret_cast<const RegisteredDownloadableEntitlements*>(
               &_RegisteredDownloadableEntitlements_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RegisteredDownloadableEntitlements& a, RegisteredDownloadableEntitlements& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisteredDownloadableEntitlements* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisteredDownloadableEntitlements* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisteredDownloadableEntitlements* New() const final {
    return CreateMaybeMessage<RegisteredDownloadableEntitlements>(nullptr);
  }

  RegisteredDownloadableEntitlements* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisteredDownloadableEntitlements>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisteredDownloadableEntitlements& from);
  void MergeFrom(const RegisteredDownloadableEntitlements& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisteredDownloadableEntitlements* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.RegisteredDownloadableEntitlements";
  }
  protected:
  explicit RegisteredDownloadableEntitlements(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakShared_2eproto);
    return ::descriptor_table_OakShared_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntitlementIdsFieldNumber = 2,
    kEntitlementsFieldNumber = 3,
    kEntitlementSourceAssetPathFieldNumber = 1,
  };
  // repeated int64 entitlement_ids = 2;
  int entitlement_ids_size() const;
  private:
  int _internal_entitlement_ids_size() const;
  public:
  void clear_entitlement_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_entitlement_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_entitlement_ids() const;
  void _internal_add_entitlement_ids(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_entitlement_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 entitlement_ids(int index) const;
  void set_entitlement_ids(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_entitlement_ids(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      entitlement_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_entitlement_ids();

  // repeated .OakSave.RegisteredDownloadableEntitlement entitlements = 3;
  int entitlements_size() const;
  private:
  int _internal_entitlements_size() const;
  public:
  void clear_entitlements();
  ::OakSave::RegisteredDownloadableEntitlement* mutable_entitlements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::RegisteredDownloadableEntitlement >*
      mutable_entitlements();
  private:
  const ::OakSave::RegisteredDownloadableEntitlement& _internal_entitlements(int index) const;
  ::OakSave::RegisteredDownloadableEntitlement* _internal_add_entitlements();
  public:
  const ::OakSave::RegisteredDownloadableEntitlement& entitlements(int index) const;
  ::OakSave::RegisteredDownloadableEntitlement* add_entitlements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::RegisteredDownloadableEntitlement >&
      entitlements() const;

  // string entitlement_source_asset_path = 1;
  void clear_entitlement_source_asset_path();
  const std::string& entitlement_source_asset_path() const;
  void set_entitlement_source_asset_path(const std::string& value);
  void set_entitlement_source_asset_path(std::string&& value);
  void set_entitlement_source_asset_path(const char* value);
  void set_entitlement_source_asset_path(const char* value, size_t size);
  std::string* mutable_entitlement_source_asset_path();
  std::string* release_entitlement_source_asset_path();
  void set_allocated_entitlement_source_asset_path(std::string* entitlement_source_asset_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_entitlement_source_asset_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_entitlement_source_asset_path(
      std::string* entitlement_source_asset_path);
  private:
  const std::string& _internal_entitlement_source_asset_path() const;
  void _internal_set_entitlement_source_asset_path(const std::string& value);
  std::string* _internal_mutable_entitlement_source_asset_path();
  public:

  // @@protoc_insertion_point(class_scope:OakSave.RegisteredDownloadableEntitlements)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > entitlement_ids_;
  mutable std::atomic<int> _entitlement_ids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::RegisteredDownloadableEntitlement > entitlements_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entitlement_source_asset_path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakShared_2eproto;
};
// -------------------------------------------------------------------

class ChallengeStatSaveGameData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.ChallengeStatSaveGameData) */ {
 public:
  inline ChallengeStatSaveGameData() : ChallengeStatSaveGameData(nullptr) {};
  virtual ~ChallengeStatSaveGameData();

  ChallengeStatSaveGameData(const ChallengeStatSaveGameData& from);
  ChallengeStatSaveGameData(ChallengeStatSaveGameData&& from) noexcept
    : ChallengeStatSaveGameData() {
    *this = ::std::move(from);
  }

  inline ChallengeStatSaveGameData& operator=(const ChallengeStatSaveGameData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChallengeStatSaveGameData& operator=(ChallengeStatSaveGameData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChallengeStatSaveGameData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChallengeStatSaveGameData* internal_default_instance() {
    return reinterpret_cast<const ChallengeStatSaveGameData*>(
               &_ChallengeStatSaveGameData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ChallengeStatSaveGameData& a, ChallengeStatSaveGameData& b) {
    a.Swap(&b);
  }
  inline void Swap(ChallengeStatSaveGameData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChallengeStatSaveGameData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChallengeStatSaveGameData* New() const final {
    return CreateMaybeMessage<ChallengeStatSaveGameData>(nullptr);
  }

  ChallengeStatSaveGameData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChallengeStatSaveGameData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChallengeStatSaveGameData& from);
  void MergeFrom(const ChallengeStatSaveGameData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChallengeStatSaveGameData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.ChallengeStatSaveGameData";
  }
  protected:
  explicit ChallengeStatSaveGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakShared_2eproto);
    return ::descriptor_table_OakShared_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChallengeStatPathFieldNumber = 2,
    kCurrentStatValueFieldNumber = 1,
  };
  // string challenge_stat_path = 2;
  void clear_challenge_stat_path();
  const std::string& challenge_stat_path() const;
  void set_challenge_stat_path(const std::string& value);
  void set_challenge_stat_path(std::string&& value);
  void set_challenge_stat_path(const char* value);
  void set_challenge_stat_path(const char* value, size_t size);
  std::string* mutable_challenge_stat_path();
  std::string* release_challenge_stat_path();
  void set_allocated_challenge_stat_path(std::string* challenge_stat_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_challenge_stat_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_challenge_stat_path(
      std::string* challenge_stat_path);
  private:
  const std::string& _internal_challenge_stat_path() const;
  void _internal_set_challenge_stat_path(const std::string& value);
  std::string* _internal_mutable_challenge_stat_path();
  public:

  // int32 current_stat_value = 1;
  void clear_current_stat_value();
  ::PROTOBUF_NAMESPACE_ID::int32 current_stat_value() const;
  void set_current_stat_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_current_stat_value() const;
  void _internal_set_current_stat_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:OakSave.ChallengeStatSaveGameData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr challenge_stat_path_;
  ::PROTOBUF_NAMESPACE_ID::int32 current_stat_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakShared_2eproto;
};
// -------------------------------------------------------------------

class OakChallengeRewardSaveGameData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.OakChallengeRewardSaveGameData) */ {
 public:
  inline OakChallengeRewardSaveGameData() : OakChallengeRewardSaveGameData(nullptr) {};
  virtual ~OakChallengeRewardSaveGameData();

  OakChallengeRewardSaveGameData(const OakChallengeRewardSaveGameData& from);
  OakChallengeRewardSaveGameData(OakChallengeRewardSaveGameData&& from) noexcept
    : OakChallengeRewardSaveGameData() {
    *this = ::std::move(from);
  }

  inline OakChallengeRewardSaveGameData& operator=(const OakChallengeRewardSaveGameData& from) {
    CopyFrom(from);
    return *this;
  }
  inline OakChallengeRewardSaveGameData& operator=(OakChallengeRewardSaveGameData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OakChallengeRewardSaveGameData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OakChallengeRewardSaveGameData* internal_default_instance() {
    return reinterpret_cast<const OakChallengeRewardSaveGameData*>(
               &_OakChallengeRewardSaveGameData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(OakChallengeRewardSaveGameData& a, OakChallengeRewardSaveGameData& b) {
    a.Swap(&b);
  }
  inline void Swap(OakChallengeRewardSaveGameData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OakChallengeRewardSaveGameData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OakChallengeRewardSaveGameData* New() const final {
    return CreateMaybeMessage<OakChallengeRewardSaveGameData>(nullptr);
  }

  OakChallengeRewardSaveGameData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OakChallengeRewardSaveGameData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OakChallengeRewardSaveGameData& from);
  void MergeFrom(const OakChallengeRewardSaveGameData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OakChallengeRewardSaveGameData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.OakChallengeRewardSaveGameData";
  }
  protected:
  explicit OakChallengeRewardSaveGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakShared_2eproto);
    return ::descriptor_table_OakShared_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChallengeRewardClaimedFieldNumber = 1,
  };
  // bool challenge_reward_claimed = 1;
  void clear_challenge_reward_claimed();
  bool challenge_reward_claimed() const;
  void set_challenge_reward_claimed(bool value);
  private:
  bool _internal_challenge_reward_claimed() const;
  void _internal_set_challenge_reward_claimed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:OakSave.OakChallengeRewardSaveGameData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool challenge_reward_claimed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakShared_2eproto;
};
// -------------------------------------------------------------------

class ChallengeSaveGameData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.ChallengeSaveGameData) */ {
 public:
  inline ChallengeSaveGameData() : ChallengeSaveGameData(nullptr) {};
  virtual ~ChallengeSaveGameData();

  ChallengeSaveGameData(const ChallengeSaveGameData& from);
  ChallengeSaveGameData(ChallengeSaveGameData&& from) noexcept
    : ChallengeSaveGameData() {
    *this = ::std::move(from);
  }

  inline ChallengeSaveGameData& operator=(const ChallengeSaveGameData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChallengeSaveGameData& operator=(ChallengeSaveGameData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChallengeSaveGameData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChallengeSaveGameData* internal_default_instance() {
    return reinterpret_cast<const ChallengeSaveGameData*>(
               &_ChallengeSaveGameData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ChallengeSaveGameData& a, ChallengeSaveGameData& b) {
    a.Swap(&b);
  }
  inline void Swap(ChallengeSaveGameData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChallengeSaveGameData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChallengeSaveGameData* New() const final {
    return CreateMaybeMessage<ChallengeSaveGameData>(nullptr);
  }

  ChallengeSaveGameData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChallengeSaveGameData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChallengeSaveGameData& from);
  void MergeFrom(const ChallengeSaveGameData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChallengeSaveGameData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.ChallengeSaveGameData";
  }
  protected:
  explicit ChallengeSaveGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakShared_2eproto);
    return ::descriptor_table_OakShared_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatInstanceStateFieldNumber = 6,
    kChallengeRewardInfoFieldNumber = 8,
    kChallengeClassPathFieldNumber = 7,
    kCompletedCountFieldNumber = 1,
    kIsActiveFieldNumber = 2,
    kCurrentlyCompletedFieldNumber = 3,
    kCompletedProgressLevelFieldNumber = 4,
    kProgressCounterFieldNumber = 5,
  };
  // repeated .OakSave.ChallengeStatSaveGameData stat_instance_state = 6;
  int stat_instance_state_size() const;
  private:
  int _internal_stat_instance_state_size() const;
  public:
  void clear_stat_instance_state();
  ::OakSave::ChallengeStatSaveGameData* mutable_stat_instance_state(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::ChallengeStatSaveGameData >*
      mutable_stat_instance_state();
  private:
  const ::OakSave::ChallengeStatSaveGameData& _internal_stat_instance_state(int index) const;
  ::OakSave::ChallengeStatSaveGameData* _internal_add_stat_instance_state();
  public:
  const ::OakSave::ChallengeStatSaveGameData& stat_instance_state(int index) const;
  ::OakSave::ChallengeStatSaveGameData* add_stat_instance_state();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::ChallengeStatSaveGameData >&
      stat_instance_state() const;

  // repeated .OakSave.OakChallengeRewardSaveGameData challenge_reward_info = 8;
  int challenge_reward_info_size() const;
  private:
  int _internal_challenge_reward_info_size() const;
  public:
  void clear_challenge_reward_info();
  ::OakSave::OakChallengeRewardSaveGameData* mutable_challenge_reward_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::OakChallengeRewardSaveGameData >*
      mutable_challenge_reward_info();
  private:
  const ::OakSave::OakChallengeRewardSaveGameData& _internal_challenge_reward_info(int index) const;
  ::OakSave::OakChallengeRewardSaveGameData* _internal_add_challenge_reward_info();
  public:
  const ::OakSave::OakChallengeRewardSaveGameData& challenge_reward_info(int index) const;
  ::OakSave::OakChallengeRewardSaveGameData* add_challenge_reward_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::OakChallengeRewardSaveGameData >&
      challenge_reward_info() const;

  // string challenge_class_path = 7;
  void clear_challenge_class_path();
  const std::string& challenge_class_path() const;
  void set_challenge_class_path(const std::string& value);
  void set_challenge_class_path(std::string&& value);
  void set_challenge_class_path(const char* value);
  void set_challenge_class_path(const char* value, size_t size);
  std::string* mutable_challenge_class_path();
  std::string* release_challenge_class_path();
  void set_allocated_challenge_class_path(std::string* challenge_class_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_challenge_class_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_challenge_class_path(
      std::string* challenge_class_path);
  private:
  const std::string& _internal_challenge_class_path() const;
  void _internal_set_challenge_class_path(const std::string& value);
  std::string* _internal_mutable_challenge_class_path();
  public:

  // int32 completed_count = 1;
  void clear_completed_count();
  ::PROTOBUF_NAMESPACE_ID::int32 completed_count() const;
  void set_completed_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_completed_count() const;
  void _internal_set_completed_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_active = 2;
  void clear_is_active();
  bool is_active() const;
  void set_is_active(bool value);
  private:
  bool _internal_is_active() const;
  void _internal_set_is_active(bool value);
  public:

  // bool currently_completed = 3;
  void clear_currently_completed();
  bool currently_completed() const;
  void set_currently_completed(bool value);
  private:
  bool _internal_currently_completed() const;
  void _internal_set_currently_completed(bool value);
  public:

  // int32 completed_progress_level = 4;
  void clear_completed_progress_level();
  ::PROTOBUF_NAMESPACE_ID::int32 completed_progress_level() const;
  void set_completed_progress_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_completed_progress_level() const;
  void _internal_set_completed_progress_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 progress_counter = 5;
  void clear_progress_counter();
  ::PROTOBUF_NAMESPACE_ID::int32 progress_counter() const;
  void set_progress_counter(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_progress_counter() const;
  void _internal_set_progress_counter(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:OakSave.ChallengeSaveGameData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::ChallengeStatSaveGameData > stat_instance_state_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::OakChallengeRewardSaveGameData > challenge_reward_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr challenge_class_path_;
  ::PROTOBUF_NAMESPACE_ID::int32 completed_count_;
  bool is_active_;
  bool currently_completed_;
  ::PROTOBUF_NAMESPACE_ID::int32 completed_progress_level_;
  ::PROTOBUF_NAMESPACE_ID::int32 progress_counter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakShared_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vec3

// float x = 1;
inline void Vec3::clear_x() {
  x_ = 0;
}
inline float Vec3::_internal_x() const {
  return x_;
}
inline float Vec3::x() const {
  // @@protoc_insertion_point(field_get:OakSave.Vec3.x)
  return _internal_x();
}
inline void Vec3::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Vec3::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:OakSave.Vec3.x)
}

// float y = 2;
inline void Vec3::clear_y() {
  y_ = 0;
}
inline float Vec3::_internal_y() const {
  return y_;
}
inline float Vec3::y() const {
  // @@protoc_insertion_point(field_get:OakSave.Vec3.y)
  return _internal_y();
}
inline void Vec3::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Vec3::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:OakSave.Vec3.y)
}

// float z = 3;
inline void Vec3::clear_z() {
  z_ = 0;
}
inline float Vec3::_internal_z() const {
  return z_;
}
inline float Vec3::z() const {
  // @@protoc_insertion_point(field_get:OakSave.Vec3.z)
  return _internal_z();
}
inline void Vec3::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Vec3::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:OakSave.Vec3.z)
}

// -------------------------------------------------------------------

// GameStatSaveGameData

// int32 stat_value = 1;
inline void GameStatSaveGameData::clear_stat_value() {
  stat_value_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameStatSaveGameData::_internal_stat_value() const {
  return stat_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameStatSaveGameData::stat_value() const {
  // @@protoc_insertion_point(field_get:OakSave.GameStatSaveGameData.stat_value)
  return _internal_stat_value();
}
inline void GameStatSaveGameData::_internal_set_stat_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  stat_value_ = value;
}
inline void GameStatSaveGameData::set_stat_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stat_value(value);
  // @@protoc_insertion_point(field_set:OakSave.GameStatSaveGameData.stat_value)
}

// string stat_path = 2;
inline void GameStatSaveGameData::clear_stat_path() {
  stat_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GameStatSaveGameData::stat_path() const {
  // @@protoc_insertion_point(field_get:OakSave.GameStatSaveGameData.stat_path)
  return _internal_stat_path();
}
inline void GameStatSaveGameData::set_stat_path(const std::string& value) {
  _internal_set_stat_path(value);
  // @@protoc_insertion_point(field_set:OakSave.GameStatSaveGameData.stat_path)
}
inline std::string* GameStatSaveGameData::mutable_stat_path() {
  // @@protoc_insertion_point(field_mutable:OakSave.GameStatSaveGameData.stat_path)
  return _internal_mutable_stat_path();
}
inline const std::string& GameStatSaveGameData::_internal_stat_path() const {
  return stat_path_.Get();
}
inline void GameStatSaveGameData::_internal_set_stat_path(const std::string& value) {
  
  stat_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GameStatSaveGameData::set_stat_path(std::string&& value) {
  
  stat_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.GameStatSaveGameData.stat_path)
}
inline void GameStatSaveGameData::set_stat_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stat_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.GameStatSaveGameData.stat_path)
}
inline void GameStatSaveGameData::set_stat_path(const char* value,
    size_t size) {
  
  stat_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.GameStatSaveGameData.stat_path)
}
inline std::string* GameStatSaveGameData::_internal_mutable_stat_path() {
  
  return stat_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GameStatSaveGameData::release_stat_path() {
  // @@protoc_insertion_point(field_release:OakSave.GameStatSaveGameData.stat_path)
  return stat_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GameStatSaveGameData::set_allocated_stat_path(std::string* stat_path) {
  if (stat_path != nullptr) {
    
  } else {
    
  }
  stat_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stat_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.GameStatSaveGameData.stat_path)
}
inline std::string* GameStatSaveGameData::unsafe_arena_release_stat_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.GameStatSaveGameData.stat_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return stat_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GameStatSaveGameData::unsafe_arena_set_allocated_stat_path(
    std::string* stat_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (stat_path != nullptr) {
    
  } else {
    
  }
  stat_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      stat_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.GameStatSaveGameData.stat_path)
}

// -------------------------------------------------------------------

// InventoryCategorySaveData

// uint32 base_category_definition_hash = 1;
inline void InventoryCategorySaveData::clear_base_category_definition_hash() {
  base_category_definition_hash_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InventoryCategorySaveData::_internal_base_category_definition_hash() const {
  return base_category_definition_hash_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InventoryCategorySaveData::base_category_definition_hash() const {
  // @@protoc_insertion_point(field_get:OakSave.InventoryCategorySaveData.base_category_definition_hash)
  return _internal_base_category_definition_hash();
}
inline void InventoryCategorySaveData::_internal_set_base_category_definition_hash(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  base_category_definition_hash_ = value;
}
inline void InventoryCategorySaveData::set_base_category_definition_hash(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_base_category_definition_hash(value);
  // @@protoc_insertion_point(field_set:OakSave.InventoryCategorySaveData.base_category_definition_hash)
}

// int32 quantity = 2;
inline void InventoryCategorySaveData::clear_quantity() {
  quantity_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InventoryCategorySaveData::_internal_quantity() const {
  return quantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InventoryCategorySaveData::quantity() const {
  // @@protoc_insertion_point(field_get:OakSave.InventoryCategorySaveData.quantity)
  return _internal_quantity();
}
inline void InventoryCategorySaveData::_internal_set_quantity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  quantity_ = value;
}
inline void InventoryCategorySaveData::set_quantity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:OakSave.InventoryCategorySaveData.quantity)
}

// -------------------------------------------------------------------

// OakSDUSaveGameData

// int32 sdu_level = 1;
inline void OakSDUSaveGameData::clear_sdu_level() {
  sdu_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OakSDUSaveGameData::_internal_sdu_level() const {
  return sdu_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OakSDUSaveGameData::sdu_level() const {
  // @@protoc_insertion_point(field_get:OakSave.OakSDUSaveGameData.sdu_level)
  return _internal_sdu_level();
}
inline void OakSDUSaveGameData::_internal_set_sdu_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sdu_level_ = value;
}
inline void OakSDUSaveGameData::set_sdu_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sdu_level(value);
  // @@protoc_insertion_point(field_set:OakSave.OakSDUSaveGameData.sdu_level)
}

// string sdu_data_path = 2;
inline void OakSDUSaveGameData::clear_sdu_data_path() {
  sdu_data_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OakSDUSaveGameData::sdu_data_path() const {
  // @@protoc_insertion_point(field_get:OakSave.OakSDUSaveGameData.sdu_data_path)
  return _internal_sdu_data_path();
}
inline void OakSDUSaveGameData::set_sdu_data_path(const std::string& value) {
  _internal_set_sdu_data_path(value);
  // @@protoc_insertion_point(field_set:OakSave.OakSDUSaveGameData.sdu_data_path)
}
inline std::string* OakSDUSaveGameData::mutable_sdu_data_path() {
  // @@protoc_insertion_point(field_mutable:OakSave.OakSDUSaveGameData.sdu_data_path)
  return _internal_mutable_sdu_data_path();
}
inline const std::string& OakSDUSaveGameData::_internal_sdu_data_path() const {
  return sdu_data_path_.Get();
}
inline void OakSDUSaveGameData::_internal_set_sdu_data_path(const std::string& value) {
  
  sdu_data_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OakSDUSaveGameData::set_sdu_data_path(std::string&& value) {
  
  sdu_data_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.OakSDUSaveGameData.sdu_data_path)
}
inline void OakSDUSaveGameData::set_sdu_data_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sdu_data_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.OakSDUSaveGameData.sdu_data_path)
}
inline void OakSDUSaveGameData::set_sdu_data_path(const char* value,
    size_t size) {
  
  sdu_data_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.OakSDUSaveGameData.sdu_data_path)
}
inline std::string* OakSDUSaveGameData::_internal_mutable_sdu_data_path() {
  
  return sdu_data_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OakSDUSaveGameData::release_sdu_data_path() {
  // @@protoc_insertion_point(field_release:OakSave.OakSDUSaveGameData.sdu_data_path)
  return sdu_data_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OakSDUSaveGameData::set_allocated_sdu_data_path(std::string* sdu_data_path) {
  if (sdu_data_path != nullptr) {
    
  } else {
    
  }
  sdu_data_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sdu_data_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.OakSDUSaveGameData.sdu_data_path)
}
inline std::string* OakSDUSaveGameData::unsafe_arena_release_sdu_data_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.OakSDUSaveGameData.sdu_data_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return sdu_data_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OakSDUSaveGameData::unsafe_arena_set_allocated_sdu_data_path(
    std::string* sdu_data_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (sdu_data_path != nullptr) {
    
  } else {
    
  }
  sdu_data_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sdu_data_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.OakSDUSaveGameData.sdu_data_path)
}

// -------------------------------------------------------------------

// RegisteredDownloadableEntitlement

// int32 id = 1;
inline void RegisteredDownloadableEntitlement::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisteredDownloadableEntitlement::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisteredDownloadableEntitlement::id() const {
  // @@protoc_insertion_point(field_get:OakSave.RegisteredDownloadableEntitlement.id)
  return _internal_id();
}
inline void RegisteredDownloadableEntitlement::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void RegisteredDownloadableEntitlement::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:OakSave.RegisteredDownloadableEntitlement.id)
}

// uint32 consumed = 2;
inline void RegisteredDownloadableEntitlement::clear_consumed() {
  consumed_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RegisteredDownloadableEntitlement::_internal_consumed() const {
  return consumed_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RegisteredDownloadableEntitlement::consumed() const {
  // @@protoc_insertion_point(field_get:OakSave.RegisteredDownloadableEntitlement.consumed)
  return _internal_consumed();
}
inline void RegisteredDownloadableEntitlement::_internal_set_consumed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  consumed_ = value;
}
inline void RegisteredDownloadableEntitlement::set_consumed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_consumed(value);
  // @@protoc_insertion_point(field_set:OakSave.RegisteredDownloadableEntitlement.consumed)
}

// bool registered = 3;
inline void RegisteredDownloadableEntitlement::clear_registered() {
  registered_ = false;
}
inline bool RegisteredDownloadableEntitlement::_internal_registered() const {
  return registered_;
}
inline bool RegisteredDownloadableEntitlement::registered() const {
  // @@protoc_insertion_point(field_get:OakSave.RegisteredDownloadableEntitlement.registered)
  return _internal_registered();
}
inline void RegisteredDownloadableEntitlement::_internal_set_registered(bool value) {
  
  registered_ = value;
}
inline void RegisteredDownloadableEntitlement::set_registered(bool value) {
  _internal_set_registered(value);
  // @@protoc_insertion_point(field_set:OakSave.RegisteredDownloadableEntitlement.registered)
}

// bool seen = 4;
inline void RegisteredDownloadableEntitlement::clear_seen() {
  seen_ = false;
}
inline bool RegisteredDownloadableEntitlement::_internal_seen() const {
  return seen_;
}
inline bool RegisteredDownloadableEntitlement::seen() const {
  // @@protoc_insertion_point(field_get:OakSave.RegisteredDownloadableEntitlement.seen)
  return _internal_seen();
}
inline void RegisteredDownloadableEntitlement::_internal_set_seen(bool value) {
  
  seen_ = value;
}
inline void RegisteredDownloadableEntitlement::set_seen(bool value) {
  _internal_set_seen(value);
  // @@protoc_insertion_point(field_set:OakSave.RegisteredDownloadableEntitlement.seen)
}

// -------------------------------------------------------------------

// RegisteredDownloadableEntitlements

// string entitlement_source_asset_path = 1;
inline void RegisteredDownloadableEntitlements::clear_entitlement_source_asset_path() {
  entitlement_source_asset_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RegisteredDownloadableEntitlements::entitlement_source_asset_path() const {
  // @@protoc_insertion_point(field_get:OakSave.RegisteredDownloadableEntitlements.entitlement_source_asset_path)
  return _internal_entitlement_source_asset_path();
}
inline void RegisteredDownloadableEntitlements::set_entitlement_source_asset_path(const std::string& value) {
  _internal_set_entitlement_source_asset_path(value);
  // @@protoc_insertion_point(field_set:OakSave.RegisteredDownloadableEntitlements.entitlement_source_asset_path)
}
inline std::string* RegisteredDownloadableEntitlements::mutable_entitlement_source_asset_path() {
  // @@protoc_insertion_point(field_mutable:OakSave.RegisteredDownloadableEntitlements.entitlement_source_asset_path)
  return _internal_mutable_entitlement_source_asset_path();
}
inline const std::string& RegisteredDownloadableEntitlements::_internal_entitlement_source_asset_path() const {
  return entitlement_source_asset_path_.Get();
}
inline void RegisteredDownloadableEntitlements::_internal_set_entitlement_source_asset_path(const std::string& value) {
  
  entitlement_source_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RegisteredDownloadableEntitlements::set_entitlement_source_asset_path(std::string&& value) {
  
  entitlement_source_asset_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.RegisteredDownloadableEntitlements.entitlement_source_asset_path)
}
inline void RegisteredDownloadableEntitlements::set_entitlement_source_asset_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  entitlement_source_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.RegisteredDownloadableEntitlements.entitlement_source_asset_path)
}
inline void RegisteredDownloadableEntitlements::set_entitlement_source_asset_path(const char* value,
    size_t size) {
  
  entitlement_source_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.RegisteredDownloadableEntitlements.entitlement_source_asset_path)
}
inline std::string* RegisteredDownloadableEntitlements::_internal_mutable_entitlement_source_asset_path() {
  
  return entitlement_source_asset_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RegisteredDownloadableEntitlements::release_entitlement_source_asset_path() {
  // @@protoc_insertion_point(field_release:OakSave.RegisteredDownloadableEntitlements.entitlement_source_asset_path)
  return entitlement_source_asset_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisteredDownloadableEntitlements::set_allocated_entitlement_source_asset_path(std::string* entitlement_source_asset_path) {
  if (entitlement_source_asset_path != nullptr) {
    
  } else {
    
  }
  entitlement_source_asset_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), entitlement_source_asset_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.RegisteredDownloadableEntitlements.entitlement_source_asset_path)
}
inline std::string* RegisteredDownloadableEntitlements::unsafe_arena_release_entitlement_source_asset_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.RegisteredDownloadableEntitlements.entitlement_source_asset_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return entitlement_source_asset_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RegisteredDownloadableEntitlements::unsafe_arena_set_allocated_entitlement_source_asset_path(
    std::string* entitlement_source_asset_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (entitlement_source_asset_path != nullptr) {
    
  } else {
    
  }
  entitlement_source_asset_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      entitlement_source_asset_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.RegisteredDownloadableEntitlements.entitlement_source_asset_path)
}

// repeated int64 entitlement_ids = 2;
inline int RegisteredDownloadableEntitlements::_internal_entitlement_ids_size() const {
  return entitlement_ids_.size();
}
inline int RegisteredDownloadableEntitlements::entitlement_ids_size() const {
  return _internal_entitlement_ids_size();
}
inline void RegisteredDownloadableEntitlements::clear_entitlement_ids() {
  entitlement_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RegisteredDownloadableEntitlements::_internal_entitlement_ids(int index) const {
  return entitlement_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RegisteredDownloadableEntitlements::entitlement_ids(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.RegisteredDownloadableEntitlements.entitlement_ids)
  return _internal_entitlement_ids(index);
}
inline void RegisteredDownloadableEntitlements::set_entitlement_ids(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  entitlement_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:OakSave.RegisteredDownloadableEntitlements.entitlement_ids)
}
inline void RegisteredDownloadableEntitlements::_internal_add_entitlement_ids(::PROTOBUF_NAMESPACE_ID::int64 value) {
  entitlement_ids_.Add(value);
}
inline void RegisteredDownloadableEntitlements::add_entitlement_ids(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_entitlement_ids(value);
  // @@protoc_insertion_point(field_add:OakSave.RegisteredDownloadableEntitlements.entitlement_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
RegisteredDownloadableEntitlements::_internal_entitlement_ids() const {
  return entitlement_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
RegisteredDownloadableEntitlements::entitlement_ids() const {
  // @@protoc_insertion_point(field_list:OakSave.RegisteredDownloadableEntitlements.entitlement_ids)
  return _internal_entitlement_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
RegisteredDownloadableEntitlements::_internal_mutable_entitlement_ids() {
  return &entitlement_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
RegisteredDownloadableEntitlements::mutable_entitlement_ids() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.RegisteredDownloadableEntitlements.entitlement_ids)
  return _internal_mutable_entitlement_ids();
}

// repeated .OakSave.RegisteredDownloadableEntitlement entitlements = 3;
inline int RegisteredDownloadableEntitlements::_internal_entitlements_size() const {
  return entitlements_.size();
}
inline int RegisteredDownloadableEntitlements::entitlements_size() const {
  return _internal_entitlements_size();
}
inline void RegisteredDownloadableEntitlements::clear_entitlements() {
  entitlements_.Clear();
}
inline ::OakSave::RegisteredDownloadableEntitlement* RegisteredDownloadableEntitlements::mutable_entitlements(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.RegisteredDownloadableEntitlements.entitlements)
  return entitlements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::RegisteredDownloadableEntitlement >*
RegisteredDownloadableEntitlements::mutable_entitlements() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.RegisteredDownloadableEntitlements.entitlements)
  return &entitlements_;
}
inline const ::OakSave::RegisteredDownloadableEntitlement& RegisteredDownloadableEntitlements::_internal_entitlements(int index) const {
  return entitlements_.Get(index);
}
inline const ::OakSave::RegisteredDownloadableEntitlement& RegisteredDownloadableEntitlements::entitlements(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.RegisteredDownloadableEntitlements.entitlements)
  return _internal_entitlements(index);
}
inline ::OakSave::RegisteredDownloadableEntitlement* RegisteredDownloadableEntitlements::_internal_add_entitlements() {
  return entitlements_.Add();
}
inline ::OakSave::RegisteredDownloadableEntitlement* RegisteredDownloadableEntitlements::add_entitlements() {
  // @@protoc_insertion_point(field_add:OakSave.RegisteredDownloadableEntitlements.entitlements)
  return _internal_add_entitlements();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::RegisteredDownloadableEntitlement >&
RegisteredDownloadableEntitlements::entitlements() const {
  // @@protoc_insertion_point(field_list:OakSave.RegisteredDownloadableEntitlements.entitlements)
  return entitlements_;
}

// -------------------------------------------------------------------

// ChallengeStatSaveGameData

// int32 current_stat_value = 1;
inline void ChallengeStatSaveGameData::clear_current_stat_value() {
  current_stat_value_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChallengeStatSaveGameData::_internal_current_stat_value() const {
  return current_stat_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChallengeStatSaveGameData::current_stat_value() const {
  // @@protoc_insertion_point(field_get:OakSave.ChallengeStatSaveGameData.current_stat_value)
  return _internal_current_stat_value();
}
inline void ChallengeStatSaveGameData::_internal_set_current_stat_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  current_stat_value_ = value;
}
inline void ChallengeStatSaveGameData::set_current_stat_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_current_stat_value(value);
  // @@protoc_insertion_point(field_set:OakSave.ChallengeStatSaveGameData.current_stat_value)
}

// string challenge_stat_path = 2;
inline void ChallengeStatSaveGameData::clear_challenge_stat_path() {
  challenge_stat_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ChallengeStatSaveGameData::challenge_stat_path() const {
  // @@protoc_insertion_point(field_get:OakSave.ChallengeStatSaveGameData.challenge_stat_path)
  return _internal_challenge_stat_path();
}
inline void ChallengeStatSaveGameData::set_challenge_stat_path(const std::string& value) {
  _internal_set_challenge_stat_path(value);
  // @@protoc_insertion_point(field_set:OakSave.ChallengeStatSaveGameData.challenge_stat_path)
}
inline std::string* ChallengeStatSaveGameData::mutable_challenge_stat_path() {
  // @@protoc_insertion_point(field_mutable:OakSave.ChallengeStatSaveGameData.challenge_stat_path)
  return _internal_mutable_challenge_stat_path();
}
inline const std::string& ChallengeStatSaveGameData::_internal_challenge_stat_path() const {
  return challenge_stat_path_.Get();
}
inline void ChallengeStatSaveGameData::_internal_set_challenge_stat_path(const std::string& value) {
  
  challenge_stat_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ChallengeStatSaveGameData::set_challenge_stat_path(std::string&& value) {
  
  challenge_stat_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.ChallengeStatSaveGameData.challenge_stat_path)
}
inline void ChallengeStatSaveGameData::set_challenge_stat_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  challenge_stat_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.ChallengeStatSaveGameData.challenge_stat_path)
}
inline void ChallengeStatSaveGameData::set_challenge_stat_path(const char* value,
    size_t size) {
  
  challenge_stat_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.ChallengeStatSaveGameData.challenge_stat_path)
}
inline std::string* ChallengeStatSaveGameData::_internal_mutable_challenge_stat_path() {
  
  return challenge_stat_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ChallengeStatSaveGameData::release_challenge_stat_path() {
  // @@protoc_insertion_point(field_release:OakSave.ChallengeStatSaveGameData.challenge_stat_path)
  return challenge_stat_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChallengeStatSaveGameData::set_allocated_challenge_stat_path(std::string* challenge_stat_path) {
  if (challenge_stat_path != nullptr) {
    
  } else {
    
  }
  challenge_stat_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), challenge_stat_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.ChallengeStatSaveGameData.challenge_stat_path)
}
inline std::string* ChallengeStatSaveGameData::unsafe_arena_release_challenge_stat_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.ChallengeStatSaveGameData.challenge_stat_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return challenge_stat_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ChallengeStatSaveGameData::unsafe_arena_set_allocated_challenge_stat_path(
    std::string* challenge_stat_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (challenge_stat_path != nullptr) {
    
  } else {
    
  }
  challenge_stat_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      challenge_stat_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.ChallengeStatSaveGameData.challenge_stat_path)
}

// -------------------------------------------------------------------

// OakChallengeRewardSaveGameData

// bool challenge_reward_claimed = 1;
inline void OakChallengeRewardSaveGameData::clear_challenge_reward_claimed() {
  challenge_reward_claimed_ = false;
}
inline bool OakChallengeRewardSaveGameData::_internal_challenge_reward_claimed() const {
  return challenge_reward_claimed_;
}
inline bool OakChallengeRewardSaveGameData::challenge_reward_claimed() const {
  // @@protoc_insertion_point(field_get:OakSave.OakChallengeRewardSaveGameData.challenge_reward_claimed)
  return _internal_challenge_reward_claimed();
}
inline void OakChallengeRewardSaveGameData::_internal_set_challenge_reward_claimed(bool value) {
  
  challenge_reward_claimed_ = value;
}
inline void OakChallengeRewardSaveGameData::set_challenge_reward_claimed(bool value) {
  _internal_set_challenge_reward_claimed(value);
  // @@protoc_insertion_point(field_set:OakSave.OakChallengeRewardSaveGameData.challenge_reward_claimed)
}

// -------------------------------------------------------------------

// ChallengeSaveGameData

// int32 completed_count = 1;
inline void ChallengeSaveGameData::clear_completed_count() {
  completed_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChallengeSaveGameData::_internal_completed_count() const {
  return completed_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChallengeSaveGameData::completed_count() const {
  // @@protoc_insertion_point(field_get:OakSave.ChallengeSaveGameData.completed_count)
  return _internal_completed_count();
}
inline void ChallengeSaveGameData::_internal_set_completed_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  completed_count_ = value;
}
inline void ChallengeSaveGameData::set_completed_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_completed_count(value);
  // @@protoc_insertion_point(field_set:OakSave.ChallengeSaveGameData.completed_count)
}

// bool is_active = 2;
inline void ChallengeSaveGameData::clear_is_active() {
  is_active_ = false;
}
inline bool ChallengeSaveGameData::_internal_is_active() const {
  return is_active_;
}
inline bool ChallengeSaveGameData::is_active() const {
  // @@protoc_insertion_point(field_get:OakSave.ChallengeSaveGameData.is_active)
  return _internal_is_active();
}
inline void ChallengeSaveGameData::_internal_set_is_active(bool value) {
  
  is_active_ = value;
}
inline void ChallengeSaveGameData::set_is_active(bool value) {
  _internal_set_is_active(value);
  // @@protoc_insertion_point(field_set:OakSave.ChallengeSaveGameData.is_active)
}

// bool currently_completed = 3;
inline void ChallengeSaveGameData::clear_currently_completed() {
  currently_completed_ = false;
}
inline bool ChallengeSaveGameData::_internal_currently_completed() const {
  return currently_completed_;
}
inline bool ChallengeSaveGameData::currently_completed() const {
  // @@protoc_insertion_point(field_get:OakSave.ChallengeSaveGameData.currently_completed)
  return _internal_currently_completed();
}
inline void ChallengeSaveGameData::_internal_set_currently_completed(bool value) {
  
  currently_completed_ = value;
}
inline void ChallengeSaveGameData::set_currently_completed(bool value) {
  _internal_set_currently_completed(value);
  // @@protoc_insertion_point(field_set:OakSave.ChallengeSaveGameData.currently_completed)
}

// int32 completed_progress_level = 4;
inline void ChallengeSaveGameData::clear_completed_progress_level() {
  completed_progress_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChallengeSaveGameData::_internal_completed_progress_level() const {
  return completed_progress_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChallengeSaveGameData::completed_progress_level() const {
  // @@protoc_insertion_point(field_get:OakSave.ChallengeSaveGameData.completed_progress_level)
  return _internal_completed_progress_level();
}
inline void ChallengeSaveGameData::_internal_set_completed_progress_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  completed_progress_level_ = value;
}
inline void ChallengeSaveGameData::set_completed_progress_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_completed_progress_level(value);
  // @@protoc_insertion_point(field_set:OakSave.ChallengeSaveGameData.completed_progress_level)
}

// int32 progress_counter = 5;
inline void ChallengeSaveGameData::clear_progress_counter() {
  progress_counter_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChallengeSaveGameData::_internal_progress_counter() const {
  return progress_counter_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChallengeSaveGameData::progress_counter() const {
  // @@protoc_insertion_point(field_get:OakSave.ChallengeSaveGameData.progress_counter)
  return _internal_progress_counter();
}
inline void ChallengeSaveGameData::_internal_set_progress_counter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  progress_counter_ = value;
}
inline void ChallengeSaveGameData::set_progress_counter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_progress_counter(value);
  // @@protoc_insertion_point(field_set:OakSave.ChallengeSaveGameData.progress_counter)
}

// repeated .OakSave.ChallengeStatSaveGameData stat_instance_state = 6;
inline int ChallengeSaveGameData::_internal_stat_instance_state_size() const {
  return stat_instance_state_.size();
}
inline int ChallengeSaveGameData::stat_instance_state_size() const {
  return _internal_stat_instance_state_size();
}
inline void ChallengeSaveGameData::clear_stat_instance_state() {
  stat_instance_state_.Clear();
}
inline ::OakSave::ChallengeStatSaveGameData* ChallengeSaveGameData::mutable_stat_instance_state(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.ChallengeSaveGameData.stat_instance_state)
  return stat_instance_state_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::ChallengeStatSaveGameData >*
ChallengeSaveGameData::mutable_stat_instance_state() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.ChallengeSaveGameData.stat_instance_state)
  return &stat_instance_state_;
}
inline const ::OakSave::ChallengeStatSaveGameData& ChallengeSaveGameData::_internal_stat_instance_state(int index) const {
  return stat_instance_state_.Get(index);
}
inline const ::OakSave::ChallengeStatSaveGameData& ChallengeSaveGameData::stat_instance_state(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.ChallengeSaveGameData.stat_instance_state)
  return _internal_stat_instance_state(index);
}
inline ::OakSave::ChallengeStatSaveGameData* ChallengeSaveGameData::_internal_add_stat_instance_state() {
  return stat_instance_state_.Add();
}
inline ::OakSave::ChallengeStatSaveGameData* ChallengeSaveGameData::add_stat_instance_state() {
  // @@protoc_insertion_point(field_add:OakSave.ChallengeSaveGameData.stat_instance_state)
  return _internal_add_stat_instance_state();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::ChallengeStatSaveGameData >&
ChallengeSaveGameData::stat_instance_state() const {
  // @@protoc_insertion_point(field_list:OakSave.ChallengeSaveGameData.stat_instance_state)
  return stat_instance_state_;
}

// string challenge_class_path = 7;
inline void ChallengeSaveGameData::clear_challenge_class_path() {
  challenge_class_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ChallengeSaveGameData::challenge_class_path() const {
  // @@protoc_insertion_point(field_get:OakSave.ChallengeSaveGameData.challenge_class_path)
  return _internal_challenge_class_path();
}
inline void ChallengeSaveGameData::set_challenge_class_path(const std::string& value) {
  _internal_set_challenge_class_path(value);
  // @@protoc_insertion_point(field_set:OakSave.ChallengeSaveGameData.challenge_class_path)
}
inline std::string* ChallengeSaveGameData::mutable_challenge_class_path() {
  // @@protoc_insertion_point(field_mutable:OakSave.ChallengeSaveGameData.challenge_class_path)
  return _internal_mutable_challenge_class_path();
}
inline const std::string& ChallengeSaveGameData::_internal_challenge_class_path() const {
  return challenge_class_path_.Get();
}
inline void ChallengeSaveGameData::_internal_set_challenge_class_path(const std::string& value) {
  
  challenge_class_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ChallengeSaveGameData::set_challenge_class_path(std::string&& value) {
  
  challenge_class_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.ChallengeSaveGameData.challenge_class_path)
}
inline void ChallengeSaveGameData::set_challenge_class_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  challenge_class_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.ChallengeSaveGameData.challenge_class_path)
}
inline void ChallengeSaveGameData::set_challenge_class_path(const char* value,
    size_t size) {
  
  challenge_class_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.ChallengeSaveGameData.challenge_class_path)
}
inline std::string* ChallengeSaveGameData::_internal_mutable_challenge_class_path() {
  
  return challenge_class_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ChallengeSaveGameData::release_challenge_class_path() {
  // @@protoc_insertion_point(field_release:OakSave.ChallengeSaveGameData.challenge_class_path)
  return challenge_class_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChallengeSaveGameData::set_allocated_challenge_class_path(std::string* challenge_class_path) {
  if (challenge_class_path != nullptr) {
    
  } else {
    
  }
  challenge_class_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), challenge_class_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.ChallengeSaveGameData.challenge_class_path)
}
inline std::string* ChallengeSaveGameData::unsafe_arena_release_challenge_class_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.ChallengeSaveGameData.challenge_class_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return challenge_class_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ChallengeSaveGameData::unsafe_arena_set_allocated_challenge_class_path(
    std::string* challenge_class_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (challenge_class_path != nullptr) {
    
  } else {
    
  }
  challenge_class_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      challenge_class_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.ChallengeSaveGameData.challenge_class_path)
}

// repeated .OakSave.OakChallengeRewardSaveGameData challenge_reward_info = 8;
inline int ChallengeSaveGameData::_internal_challenge_reward_info_size() const {
  return challenge_reward_info_.size();
}
inline int ChallengeSaveGameData::challenge_reward_info_size() const {
  return _internal_challenge_reward_info_size();
}
inline void ChallengeSaveGameData::clear_challenge_reward_info() {
  challenge_reward_info_.Clear();
}
inline ::OakSave::OakChallengeRewardSaveGameData* ChallengeSaveGameData::mutable_challenge_reward_info(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.ChallengeSaveGameData.challenge_reward_info)
  return challenge_reward_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::OakChallengeRewardSaveGameData >*
ChallengeSaveGameData::mutable_challenge_reward_info() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.ChallengeSaveGameData.challenge_reward_info)
  return &challenge_reward_info_;
}
inline const ::OakSave::OakChallengeRewardSaveGameData& ChallengeSaveGameData::_internal_challenge_reward_info(int index) const {
  return challenge_reward_info_.Get(index);
}
inline const ::OakSave::OakChallengeRewardSaveGameData& ChallengeSaveGameData::challenge_reward_info(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.ChallengeSaveGameData.challenge_reward_info)
  return _internal_challenge_reward_info(index);
}
inline ::OakSave::OakChallengeRewardSaveGameData* ChallengeSaveGameData::_internal_add_challenge_reward_info() {
  return challenge_reward_info_.Add();
}
inline ::OakSave::OakChallengeRewardSaveGameData* ChallengeSaveGameData::add_challenge_reward_info() {
  // @@protoc_insertion_point(field_add:OakSave.ChallengeSaveGameData.challenge_reward_info)
  return _internal_add_challenge_reward_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::OakChallengeRewardSaveGameData >&
ChallengeSaveGameData::challenge_reward_info() const {
  // @@protoc_insertion_point(field_list:OakSave.ChallengeSaveGameData.challenge_reward_info)
  return challenge_reward_info_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace OakSave

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_OakShared_2eproto
