// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OakSave.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_OakSave_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_OakSave_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "OakShared.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_OakSave_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_OakSave_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[46]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_OakSave_2eproto;
namespace OakSave {
class ActiveFastTravelSaveData;
class ActiveFastTravelSaveDataDefaultTypeInternal;
extern ActiveFastTravelSaveDataDefaultTypeInternal _ActiveFastTravelSaveData_default_instance_;
class ChallengeCategoryProgressSaveData;
class ChallengeCategoryProgressSaveDataDefaultTypeInternal;
extern ChallengeCategoryProgressSaveDataDefaultTypeInternal _ChallengeCategoryProgressSaveData_default_instance_;
class Character;
class CharacterDefaultTypeInternal;
extern CharacterDefaultTypeInternal _Character_default_instance_;
class Character_ActiveLeagueInstanceForEventEntry;
class Character_ActiveLeagueInstanceForEventEntryDefaultTypeInternal;
extern Character_ActiveLeagueInstanceForEventEntryDefaultTypeInternal _Character_ActiveLeagueInstanceForEventEntry_default_instance_;
class Character_NicknameMappingsEntry;
class Character_NicknameMappingsEntryDefaultTypeInternal;
extern Character_NicknameMappingsEntryDefaultTypeInternal _Character_NicknameMappingsEntry_default_instance_;
class CrewQuartersDecorationSaveData;
class CrewQuartersDecorationSaveDataDefaultTypeInternal;
extern CrewQuartersDecorationSaveDataDefaultTypeInternal _CrewQuartersDecorationSaveData_default_instance_;
class CrewQuartersGunRackItemSaveData;
class CrewQuartersGunRackItemSaveDataDefaultTypeInternal;
extern CrewQuartersGunRackItemSaveDataDefaultTypeInternal _CrewQuartersGunRackItemSaveData_default_instance_;
class CrewQuartersGunRackSaveData;
class CrewQuartersGunRackSaveDataDefaultTypeInternal;
extern CrewQuartersGunRackSaveDataDefaultTypeInternal _CrewQuartersGunRackSaveData_default_instance_;
class CrewQuartersSaveData;
class CrewQuartersSaveDataDefaultTypeInternal;
extern CrewQuartersSaveDataDefaultTypeInternal _CrewQuartersSaveData_default_instance_;
class CustomPlayerColorSaveGameData;
class CustomPlayerColorSaveGameDataDefaultTypeInternal;
extern CustomPlayerColorSaveGameDataDefaultTypeInternal _CustomPlayerColorSaveGameData_default_instance_;
class DiscoveredAreaInfo;
class DiscoveredAreaInfoDefaultTypeInternal;
extern DiscoveredAreaInfoDefaultTypeInternal _DiscoveredAreaInfo_default_instance_;
class DiscoveredLevelInfo;
class DiscoveredLevelInfoDefaultTypeInternal;
extern DiscoveredLevelInfoDefaultTypeInternal _DiscoveredLevelInfo_default_instance_;
class DiscoveredPlanetInfo;
class DiscoveredPlanetInfoDefaultTypeInternal;
extern DiscoveredPlanetInfoDefaultTypeInternal _DiscoveredPlanetInfo_default_instance_;
class DiscoverySaveData;
class DiscoverySaveDataDefaultTypeInternal;
extern DiscoverySaveDataDefaultTypeInternal _DiscoverySaveData_default_instance_;
class EchoLogSaveGameData;
class EchoLogSaveGameDataDefaultTypeInternal;
extern EchoLogSaveGameDataDefaultTypeInternal _EchoLogSaveGameData_default_instance_;
class EquippedInventorySaveGameData;
class EquippedInventorySaveGameDataDefaultTypeInternal;
extern EquippedInventorySaveGameDataDefaultTypeInternal _EquippedInventorySaveGameData_default_instance_;
class GameStateSaveData;
class GameStateSaveDataDefaultTypeInternal;
extern GameStateSaveDataDefaultTypeInternal _GameStateSaveData_default_instance_;
class GbxZoneMapFODSaveGameData;
class GbxZoneMapFODSaveGameDataDefaultTypeInternal;
extern GbxZoneMapFODSaveGameDataDefaultTypeInternal _GbxZoneMapFODSaveGameData_default_instance_;
class GbxZoneMapFODSavedLevelData;
class GbxZoneMapFODSavedLevelDataDefaultTypeInternal;
extern GbxZoneMapFODSavedLevelDataDefaultTypeInternal _GbxZoneMapFODSavedLevelData_default_instance_;
class GuardianRankCharacterSaveGameData;
class GuardianRankCharacterSaveGameDataDefaultTypeInternal;
extern GuardianRankCharacterSaveGameDataDefaultTypeInternal _GuardianRankCharacterSaveGameData_default_instance_;
class GuardianRankPerkCharacterSaveGameData;
class GuardianRankPerkCharacterSaveGameDataDefaultTypeInternal;
extern GuardianRankPerkCharacterSaveGameDataDefaultTypeInternal _GuardianRankPerkCharacterSaveGameData_default_instance_;
class GuardianRankRewardCharacterSaveGameData;
class GuardianRankRewardCharacterSaveGameDataDefaultTypeInternal;
extern GuardianRankRewardCharacterSaveGameDataDefaultTypeInternal _GuardianRankRewardCharacterSaveGameData_default_instance_;
class GuardianRankSaveGameData;
class GuardianRankSaveGameDataDefaultTypeInternal;
extern GuardianRankSaveGameDataDefaultTypeInternal _GuardianRankSaveGameData_default_instance_;
class InventoryBalanceStateInitializationData;
class InventoryBalanceStateInitializationDataDefaultTypeInternal;
extern InventoryBalanceStateInitializationDataDefaultTypeInternal _InventoryBalanceStateInitializationData_default_instance_;
class LevelPersistence_Actor_SaveGameData;
class LevelPersistence_Actor_SaveGameDataDefaultTypeInternal;
extern LevelPersistence_Actor_SaveGameDataDefaultTypeInternal _LevelPersistence_Actor_SaveGameData_default_instance_;
class LevelPersistence_Level_SaveGameData;
class LevelPersistence_Level_SaveGameDataDefaultTypeInternal;
extern LevelPersistence_Level_SaveGameDataDefaultTypeInternal _LevelPersistence_Level_SaveGameData_default_instance_;
class MapIDData;
class MapIDDataDefaultTypeInternal;
extern MapIDDataDefaultTypeInternal _MapIDData_default_instance_;
class MissionPlaythroughSaveGameData;
class MissionPlaythroughSaveGameDataDefaultTypeInternal;
extern MissionPlaythroughSaveGameDataDefaultTypeInternal _MissionPlaythroughSaveGameData_default_instance_;
class MissionStatusPlayerSaveGameData;
class MissionStatusPlayerSaveGameDataDefaultTypeInternal;
extern MissionStatusPlayerSaveGameDataDefaultTypeInternal _MissionStatusPlayerSaveGameData_default_instance_;
class OakAbilitySlotSaveGameData;
class OakAbilitySlotSaveGameDataDefaultTypeInternal;
extern OakAbilitySlotSaveGameDataDefaultTypeInternal _OakAbilitySlotSaveGameData_default_instance_;
class OakAbilityTreeItemSaveGameData;
class OakAbilityTreeItemSaveGameDataDefaultTypeInternal;
extern OakAbilityTreeItemSaveGameDataDefaultTypeInternal _OakAbilityTreeItemSaveGameData_default_instance_;
class OakActionAbilityAugmentConfigurationSaveGameData;
class OakActionAbilityAugmentConfigurationSaveGameDataDefaultTypeInternal;
extern OakActionAbilityAugmentConfigurationSaveGameDataDefaultTypeInternal _OakActionAbilityAugmentConfigurationSaveGameData_default_instance_;
class OakActionAbilityAugmentSaveGameData;
class OakActionAbilityAugmentSaveGameDataDefaultTypeInternal;
extern OakActionAbilityAugmentSaveGameDataDefaultTypeInternal _OakActionAbilityAugmentSaveGameData_default_instance_;
class OakCARMenuVehicleConfigSaveData;
class OakCARMenuVehicleConfigSaveDataDefaultTypeInternal;
extern OakCARMenuVehicleConfigSaveDataDefaultTypeInternal _OakCARMenuVehicleConfigSaveData_default_instance_;
class OakInventoryItemSaveGameData;
class OakInventoryItemSaveGameDataDefaultTypeInternal;
extern OakInventoryItemSaveGameDataDefaultTypeInternal _OakInventoryItemSaveGameData_default_instance_;
class OakPlayerAbilitySaveGameData;
class OakPlayerAbilitySaveGameDataDefaultTypeInternal;
extern OakPlayerAbilitySaveGameDataDefaultTypeInternal _OakPlayerAbilitySaveGameData_default_instance_;
class OakPlayerCharacterAugmentSaveGameData;
class OakPlayerCharacterAugmentSaveGameDataDefaultTypeInternal;
extern OakPlayerCharacterAugmentSaveGameDataDefaultTypeInternal _OakPlayerCharacterAugmentSaveGameData_default_instance_;
class OakPlayerCharacterSlotSaveGameData;
class OakPlayerCharacterSlotSaveGameDataDefaultTypeInternal;
extern OakPlayerCharacterSlotSaveGameDataDefaultTypeInternal _OakPlayerCharacterSlotSaveGameData_default_instance_;
class PlanetCycleInfo;
class PlanetCycleInfoDefaultTypeInternal;
extern PlanetCycleInfoDefaultTypeInternal _PlanetCycleInfo_default_instance_;
class PlayerClassSaveGameData;
class PlayerClassSaveGameDataDefaultTypeInternal;
extern PlayerClassSaveGameDataDefaultTypeInternal _PlayerClassSaveGameData_default_instance_;
class PlaythroughActiveFastTravelSaveData;
class PlaythroughActiveFastTravelSaveDataDefaultTypeInternal;
extern PlaythroughActiveFastTravelSaveDataDefaultTypeInternal _PlaythroughActiveFastTravelSaveData_default_instance_;
class RegionSaveGameData;
class RegionSaveGameDataDefaultTypeInternal;
extern RegionSaveGameDataDefaultTypeInternal _RegionSaveGameData_default_instance_;
class ResourcePoolSavegameData;
class ResourcePoolSavegameDataDefaultTypeInternal;
extern ResourcePoolSavegameDataDefaultTypeInternal _ResourcePoolSavegameData_default_instance_;
class TimeOfDaySaveGameData;
class TimeOfDaySaveGameDataDefaultTypeInternal;
extern TimeOfDaySaveGameDataDefaultTypeInternal _TimeOfDaySaveGameData_default_instance_;
class UITrackingSaveGameData;
class UITrackingSaveGameDataDefaultTypeInternal;
extern UITrackingSaveGameDataDefaultTypeInternal _UITrackingSaveGameData_default_instance_;
class VehicleUnlockedSaveGameData;
class VehicleUnlockedSaveGameDataDefaultTypeInternal;
extern VehicleUnlockedSaveGameDataDefaultTypeInternal _VehicleUnlockedSaveGameData_default_instance_;
}  // namespace OakSave
PROTOBUF_NAMESPACE_OPEN
template<> ::OakSave::ActiveFastTravelSaveData* Arena::CreateMaybeMessage<::OakSave::ActiveFastTravelSaveData>(Arena*);
template<> ::OakSave::ChallengeCategoryProgressSaveData* Arena::CreateMaybeMessage<::OakSave::ChallengeCategoryProgressSaveData>(Arena*);
template<> ::OakSave::Character* Arena::CreateMaybeMessage<::OakSave::Character>(Arena*);
template<> ::OakSave::Character_ActiveLeagueInstanceForEventEntry* Arena::CreateMaybeMessage<::OakSave::Character_ActiveLeagueInstanceForEventEntry>(Arena*);
template<> ::OakSave::Character_NicknameMappingsEntry* Arena::CreateMaybeMessage<::OakSave::Character_NicknameMappingsEntry>(Arena*);
template<> ::OakSave::CrewQuartersDecorationSaveData* Arena::CreateMaybeMessage<::OakSave::CrewQuartersDecorationSaveData>(Arena*);
template<> ::OakSave::CrewQuartersGunRackItemSaveData* Arena::CreateMaybeMessage<::OakSave::CrewQuartersGunRackItemSaveData>(Arena*);
template<> ::OakSave::CrewQuartersGunRackSaveData* Arena::CreateMaybeMessage<::OakSave::CrewQuartersGunRackSaveData>(Arena*);
template<> ::OakSave::CrewQuartersSaveData* Arena::CreateMaybeMessage<::OakSave::CrewQuartersSaveData>(Arena*);
template<> ::OakSave::CustomPlayerColorSaveGameData* Arena::CreateMaybeMessage<::OakSave::CustomPlayerColorSaveGameData>(Arena*);
template<> ::OakSave::DiscoveredAreaInfo* Arena::CreateMaybeMessage<::OakSave::DiscoveredAreaInfo>(Arena*);
template<> ::OakSave::DiscoveredLevelInfo* Arena::CreateMaybeMessage<::OakSave::DiscoveredLevelInfo>(Arena*);
template<> ::OakSave::DiscoveredPlanetInfo* Arena::CreateMaybeMessage<::OakSave::DiscoveredPlanetInfo>(Arena*);
template<> ::OakSave::DiscoverySaveData* Arena::CreateMaybeMessage<::OakSave::DiscoverySaveData>(Arena*);
template<> ::OakSave::EchoLogSaveGameData* Arena::CreateMaybeMessage<::OakSave::EchoLogSaveGameData>(Arena*);
template<> ::OakSave::EquippedInventorySaveGameData* Arena::CreateMaybeMessage<::OakSave::EquippedInventorySaveGameData>(Arena*);
template<> ::OakSave::GameStateSaveData* Arena::CreateMaybeMessage<::OakSave::GameStateSaveData>(Arena*);
template<> ::OakSave::GbxZoneMapFODSaveGameData* Arena::CreateMaybeMessage<::OakSave::GbxZoneMapFODSaveGameData>(Arena*);
template<> ::OakSave::GbxZoneMapFODSavedLevelData* Arena::CreateMaybeMessage<::OakSave::GbxZoneMapFODSavedLevelData>(Arena*);
template<> ::OakSave::GuardianRankCharacterSaveGameData* Arena::CreateMaybeMessage<::OakSave::GuardianRankCharacterSaveGameData>(Arena*);
template<> ::OakSave::GuardianRankPerkCharacterSaveGameData* Arena::CreateMaybeMessage<::OakSave::GuardianRankPerkCharacterSaveGameData>(Arena*);
template<> ::OakSave::GuardianRankRewardCharacterSaveGameData* Arena::CreateMaybeMessage<::OakSave::GuardianRankRewardCharacterSaveGameData>(Arena*);
template<> ::OakSave::GuardianRankSaveGameData* Arena::CreateMaybeMessage<::OakSave::GuardianRankSaveGameData>(Arena*);
template<> ::OakSave::InventoryBalanceStateInitializationData* Arena::CreateMaybeMessage<::OakSave::InventoryBalanceStateInitializationData>(Arena*);
template<> ::OakSave::LevelPersistence_Actor_SaveGameData* Arena::CreateMaybeMessage<::OakSave::LevelPersistence_Actor_SaveGameData>(Arena*);
template<> ::OakSave::LevelPersistence_Level_SaveGameData* Arena::CreateMaybeMessage<::OakSave::LevelPersistence_Level_SaveGameData>(Arena*);
template<> ::OakSave::MapIDData* Arena::CreateMaybeMessage<::OakSave::MapIDData>(Arena*);
template<> ::OakSave::MissionPlaythroughSaveGameData* Arena::CreateMaybeMessage<::OakSave::MissionPlaythroughSaveGameData>(Arena*);
template<> ::OakSave::MissionStatusPlayerSaveGameData* Arena::CreateMaybeMessage<::OakSave::MissionStatusPlayerSaveGameData>(Arena*);
template<> ::OakSave::OakAbilitySlotSaveGameData* Arena::CreateMaybeMessage<::OakSave::OakAbilitySlotSaveGameData>(Arena*);
template<> ::OakSave::OakAbilityTreeItemSaveGameData* Arena::CreateMaybeMessage<::OakSave::OakAbilityTreeItemSaveGameData>(Arena*);
template<> ::OakSave::OakActionAbilityAugmentConfigurationSaveGameData* Arena::CreateMaybeMessage<::OakSave::OakActionAbilityAugmentConfigurationSaveGameData>(Arena*);
template<> ::OakSave::OakActionAbilityAugmentSaveGameData* Arena::CreateMaybeMessage<::OakSave::OakActionAbilityAugmentSaveGameData>(Arena*);
template<> ::OakSave::OakCARMenuVehicleConfigSaveData* Arena::CreateMaybeMessage<::OakSave::OakCARMenuVehicleConfigSaveData>(Arena*);
template<> ::OakSave::OakInventoryItemSaveGameData* Arena::CreateMaybeMessage<::OakSave::OakInventoryItemSaveGameData>(Arena*);
template<> ::OakSave::OakPlayerAbilitySaveGameData* Arena::CreateMaybeMessage<::OakSave::OakPlayerAbilitySaveGameData>(Arena*);
template<> ::OakSave::OakPlayerCharacterAugmentSaveGameData* Arena::CreateMaybeMessage<::OakSave::OakPlayerCharacterAugmentSaveGameData>(Arena*);
template<> ::OakSave::OakPlayerCharacterSlotSaveGameData* Arena::CreateMaybeMessage<::OakSave::OakPlayerCharacterSlotSaveGameData>(Arena*);
template<> ::OakSave::PlanetCycleInfo* Arena::CreateMaybeMessage<::OakSave::PlanetCycleInfo>(Arena*);
template<> ::OakSave::PlayerClassSaveGameData* Arena::CreateMaybeMessage<::OakSave::PlayerClassSaveGameData>(Arena*);
template<> ::OakSave::PlaythroughActiveFastTravelSaveData* Arena::CreateMaybeMessage<::OakSave::PlaythroughActiveFastTravelSaveData>(Arena*);
template<> ::OakSave::RegionSaveGameData* Arena::CreateMaybeMessage<::OakSave::RegionSaveGameData>(Arena*);
template<> ::OakSave::ResourcePoolSavegameData* Arena::CreateMaybeMessage<::OakSave::ResourcePoolSavegameData>(Arena*);
template<> ::OakSave::TimeOfDaySaveGameData* Arena::CreateMaybeMessage<::OakSave::TimeOfDaySaveGameData>(Arena*);
template<> ::OakSave::UITrackingSaveGameData* Arena::CreateMaybeMessage<::OakSave::UITrackingSaveGameData>(Arena*);
template<> ::OakSave::VehicleUnlockedSaveGameData* Arena::CreateMaybeMessage<::OakSave::VehicleUnlockedSaveGameData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace OakSave {

enum MissionStatusPlayerSaveGameData_MissionState : int {
  MissionStatusPlayerSaveGameData_MissionState_MS_NotStarted = 0,
  MissionStatusPlayerSaveGameData_MissionState_MS_Active = 1,
  MissionStatusPlayerSaveGameData_MissionState_MS_Complete = 2,
  MissionStatusPlayerSaveGameData_MissionState_MS_Failed = 3,
  MissionStatusPlayerSaveGameData_MissionState_MS_Unknown = 4,
  MissionStatusPlayerSaveGameData_MissionState_MissionStatusPlayerSaveGameData_MissionState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MissionStatusPlayerSaveGameData_MissionState_MissionStatusPlayerSaveGameData_MissionState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MissionStatusPlayerSaveGameData_MissionState_IsValid(int value);
constexpr MissionStatusPlayerSaveGameData_MissionState MissionStatusPlayerSaveGameData_MissionState_MissionState_MIN = MissionStatusPlayerSaveGameData_MissionState_MS_NotStarted;
constexpr MissionStatusPlayerSaveGameData_MissionState MissionStatusPlayerSaveGameData_MissionState_MissionState_MAX = MissionStatusPlayerSaveGameData_MissionState_MS_Unknown;
constexpr int MissionStatusPlayerSaveGameData_MissionState_MissionState_ARRAYSIZE = MissionStatusPlayerSaveGameData_MissionState_MissionState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MissionStatusPlayerSaveGameData_MissionState_descriptor();
template<typename T>
inline const std::string& MissionStatusPlayerSaveGameData_MissionState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MissionStatusPlayerSaveGameData_MissionState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MissionStatusPlayerSaveGameData_MissionState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MissionStatusPlayerSaveGameData_MissionState_descriptor(), enum_t_value);
}
inline bool MissionStatusPlayerSaveGameData_MissionState_Parse(
    const std::string& name, MissionStatusPlayerSaveGameData_MissionState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MissionStatusPlayerSaveGameData_MissionState>(
    MissionStatusPlayerSaveGameData_MissionState_descriptor(), name, value);
}
// ===================================================================

class PlayerClassSaveGameData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.PlayerClassSaveGameData) */ {
 public:
  inline PlayerClassSaveGameData() : PlayerClassSaveGameData(nullptr) {};
  virtual ~PlayerClassSaveGameData();

  PlayerClassSaveGameData(const PlayerClassSaveGameData& from);
  PlayerClassSaveGameData(PlayerClassSaveGameData&& from) noexcept
    : PlayerClassSaveGameData() {
    *this = ::std::move(from);
  }

  inline PlayerClassSaveGameData& operator=(const PlayerClassSaveGameData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerClassSaveGameData& operator=(PlayerClassSaveGameData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerClassSaveGameData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerClassSaveGameData* internal_default_instance() {
    return reinterpret_cast<const PlayerClassSaveGameData*>(
               &_PlayerClassSaveGameData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PlayerClassSaveGameData& a, PlayerClassSaveGameData& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerClassSaveGameData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerClassSaveGameData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerClassSaveGameData* New() const final {
    return CreateMaybeMessage<PlayerClassSaveGameData>(nullptr);
  }

  PlayerClassSaveGameData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerClassSaveGameData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerClassSaveGameData& from);
  void MergeFrom(const PlayerClassSaveGameData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerClassSaveGameData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.PlayerClassSaveGameData";
  }
  protected:
  explicit PlayerClassSaveGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakSave_2eproto);
    return ::descriptor_table_OakSave_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerClassPathFieldNumber = 1,
    kDlcPackageIdFieldNumber = 2,
  };
  // string player_class_path = 1;
  void clear_player_class_path();
  const std::string& player_class_path() const;
  void set_player_class_path(const std::string& value);
  void set_player_class_path(std::string&& value);
  void set_player_class_path(const char* value);
  void set_player_class_path(const char* value, size_t size);
  std::string* mutable_player_class_path();
  std::string* release_player_class_path();
  void set_allocated_player_class_path(std::string* player_class_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_player_class_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_player_class_path(
      std::string* player_class_path);
  private:
  const std::string& _internal_player_class_path() const;
  void _internal_set_player_class_path(const std::string& value);
  std::string* _internal_mutable_player_class_path();
  public:

  // uint32 dlc_package_id = 2;
  void clear_dlc_package_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 dlc_package_id() const;
  void set_dlc_package_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dlc_package_id() const;
  void _internal_set_dlc_package_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:OakSave.PlayerClassSaveGameData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_class_path_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dlc_package_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakSave_2eproto;
};
// -------------------------------------------------------------------

class ResourcePoolSavegameData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.ResourcePoolSavegameData) */ {
 public:
  inline ResourcePoolSavegameData() : ResourcePoolSavegameData(nullptr) {};
  virtual ~ResourcePoolSavegameData();

  ResourcePoolSavegameData(const ResourcePoolSavegameData& from);
  ResourcePoolSavegameData(ResourcePoolSavegameData&& from) noexcept
    : ResourcePoolSavegameData() {
    *this = ::std::move(from);
  }

  inline ResourcePoolSavegameData& operator=(const ResourcePoolSavegameData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourcePoolSavegameData& operator=(ResourcePoolSavegameData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResourcePoolSavegameData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResourcePoolSavegameData* internal_default_instance() {
    return reinterpret_cast<const ResourcePoolSavegameData*>(
               &_ResourcePoolSavegameData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ResourcePoolSavegameData& a, ResourcePoolSavegameData& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourcePoolSavegameData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourcePoolSavegameData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResourcePoolSavegameData* New() const final {
    return CreateMaybeMessage<ResourcePoolSavegameData>(nullptr);
  }

  ResourcePoolSavegameData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResourcePoolSavegameData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResourcePoolSavegameData& from);
  void MergeFrom(const ResourcePoolSavegameData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourcePoolSavegameData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.ResourcePoolSavegameData";
  }
  protected:
  explicit ResourcePoolSavegameData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakSave_2eproto);
    return ::descriptor_table_OakSave_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourcePathFieldNumber = 2,
    kAmountFieldNumber = 1,
  };
  // string resource_path = 2;
  void clear_resource_path();
  const std::string& resource_path() const;
  void set_resource_path(const std::string& value);
  void set_resource_path(std::string&& value);
  void set_resource_path(const char* value);
  void set_resource_path(const char* value, size_t size);
  std::string* mutable_resource_path();
  std::string* release_resource_path();
  void set_allocated_resource_path(std::string* resource_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_resource_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_resource_path(
      std::string* resource_path);
  private:
  const std::string& _internal_resource_path() const;
  void _internal_set_resource_path(const std::string& value);
  std::string* _internal_mutable_resource_path();
  public:

  // float amount = 1;
  void clear_amount();
  float amount() const;
  void set_amount(float value);
  private:
  float _internal_amount() const;
  void _internal_set_amount(float value);
  public:

  // @@protoc_insertion_point(class_scope:OakSave.ResourcePoolSavegameData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resource_path_;
  float amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakSave_2eproto;
};
// -------------------------------------------------------------------

class RegionSaveGameData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.RegionSaveGameData) */ {
 public:
  inline RegionSaveGameData() : RegionSaveGameData(nullptr) {};
  virtual ~RegionSaveGameData();

  RegionSaveGameData(const RegionSaveGameData& from);
  RegionSaveGameData(RegionSaveGameData&& from) noexcept
    : RegionSaveGameData() {
    *this = ::std::move(from);
  }

  inline RegionSaveGameData& operator=(const RegionSaveGameData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegionSaveGameData& operator=(RegionSaveGameData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegionSaveGameData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegionSaveGameData* internal_default_instance() {
    return reinterpret_cast<const RegionSaveGameData*>(
               &_RegionSaveGameData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RegionSaveGameData& a, RegionSaveGameData& b) {
    a.Swap(&b);
  }
  inline void Swap(RegionSaveGameData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegionSaveGameData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegionSaveGameData* New() const final {
    return CreateMaybeMessage<RegionSaveGameData>(nullptr);
  }

  RegionSaveGameData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegionSaveGameData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegionSaveGameData& from);
  void MergeFrom(const RegionSaveGameData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegionSaveGameData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.RegionSaveGameData";
  }
  protected:
  explicit RegionSaveGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakSave_2eproto);
    return ::descriptor_table_OakSave_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegionPathFieldNumber = 3,
    kGameStageFieldNumber = 1,
    kPlayThroughIdxFieldNumber = 2,
    kDlcPackageIdFieldNumber = 4,
  };
  // string region_path = 3;
  void clear_region_path();
  const std::string& region_path() const;
  void set_region_path(const std::string& value);
  void set_region_path(std::string&& value);
  void set_region_path(const char* value);
  void set_region_path(const char* value, size_t size);
  std::string* mutable_region_path();
  std::string* release_region_path();
  void set_allocated_region_path(std::string* region_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_region_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_region_path(
      std::string* region_path);
  private:
  const std::string& _internal_region_path() const;
  void _internal_set_region_path(const std::string& value);
  std::string* _internal_mutable_region_path();
  public:

  // int32 game_stage = 1;
  void clear_game_stage();
  ::PROTOBUF_NAMESPACE_ID::int32 game_stage() const;
  void set_game_stage(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_game_stage() const;
  void _internal_set_game_stage(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 play_through_idx = 2;
  void clear_play_through_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 play_through_idx() const;
  void set_play_through_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_play_through_idx() const;
  void _internal_set_play_through_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 dlc_package_id = 4;
  void clear_dlc_package_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 dlc_package_id() const;
  void set_dlc_package_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dlc_package_id() const;
  void _internal_set_dlc_package_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:OakSave.RegionSaveGameData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr region_path_;
  ::PROTOBUF_NAMESPACE_ID::int32 game_stage_;
  ::PROTOBUF_NAMESPACE_ID::int32 play_through_idx_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dlc_package_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakSave_2eproto;
};
// -------------------------------------------------------------------

class InventoryBalanceStateInitializationData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.InventoryBalanceStateInitializationData) */ {
 public:
  inline InventoryBalanceStateInitializationData() : InventoryBalanceStateInitializationData(nullptr) {};
  virtual ~InventoryBalanceStateInitializationData();

  InventoryBalanceStateInitializationData(const InventoryBalanceStateInitializationData& from);
  InventoryBalanceStateInitializationData(InventoryBalanceStateInitializationData&& from) noexcept
    : InventoryBalanceStateInitializationData() {
    *this = ::std::move(from);
  }

  inline InventoryBalanceStateInitializationData& operator=(const InventoryBalanceStateInitializationData& from) {
    CopyFrom(from);
    return *this;
  }
  inline InventoryBalanceStateInitializationData& operator=(InventoryBalanceStateInitializationData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InventoryBalanceStateInitializationData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InventoryBalanceStateInitializationData* internal_default_instance() {
    return reinterpret_cast<const InventoryBalanceStateInitializationData*>(
               &_InventoryBalanceStateInitializationData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(InventoryBalanceStateInitializationData& a, InventoryBalanceStateInitializationData& b) {
    a.Swap(&b);
  }
  inline void Swap(InventoryBalanceStateInitializationData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InventoryBalanceStateInitializationData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InventoryBalanceStateInitializationData* New() const final {
    return CreateMaybeMessage<InventoryBalanceStateInitializationData>(nullptr);
  }

  InventoryBalanceStateInitializationData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InventoryBalanceStateInitializationData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InventoryBalanceStateInitializationData& from);
  void MergeFrom(const InventoryBalanceStateInitializationData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InventoryBalanceStateInitializationData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.InventoryBalanceStateInitializationData";
  }
  protected:
  explicit InventoryBalanceStateInitializationData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakSave_2eproto);
    return ::descriptor_table_OakSave_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartListFieldNumber = 5,
    kGenericPartListFieldNumber = 6,
    kCustomizationPartListFieldNumber = 8,
    kInventoryDataFieldNumber = 2,
    kInventoryBalanceDataFieldNumber = 3,
    kManufacturerDataFieldNumber = 4,
    kAdditionalDataFieldNumber = 7,
    kGameStageFieldNumber = 1,
  };
  // repeated string part_list = 5;
  int part_list_size() const;
  private:
  int _internal_part_list_size() const;
  public:
  void clear_part_list();
  const std::string& part_list(int index) const;
  std::string* mutable_part_list(int index);
  void set_part_list(int index, const std::string& value);
  void set_part_list(int index, std::string&& value);
  void set_part_list(int index, const char* value);
  void set_part_list(int index, const char* value, size_t size);
  std::string* add_part_list();
  void add_part_list(const std::string& value);
  void add_part_list(std::string&& value);
  void add_part_list(const char* value);
  void add_part_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& part_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_part_list();
  private:
  const std::string& _internal_part_list(int index) const;
  std::string* _internal_add_part_list();
  public:

  // repeated string generic_part_list = 6;
  int generic_part_list_size() const;
  private:
  int _internal_generic_part_list_size() const;
  public:
  void clear_generic_part_list();
  const std::string& generic_part_list(int index) const;
  std::string* mutable_generic_part_list(int index);
  void set_generic_part_list(int index, const std::string& value);
  void set_generic_part_list(int index, std::string&& value);
  void set_generic_part_list(int index, const char* value);
  void set_generic_part_list(int index, const char* value, size_t size);
  std::string* add_generic_part_list();
  void add_generic_part_list(const std::string& value);
  void add_generic_part_list(std::string&& value);
  void add_generic_part_list(const char* value);
  void add_generic_part_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& generic_part_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_generic_part_list();
  private:
  const std::string& _internal_generic_part_list(int index) const;
  std::string* _internal_add_generic_part_list();
  public:

  // repeated string customization_part_list = 8;
  int customization_part_list_size() const;
  private:
  int _internal_customization_part_list_size() const;
  public:
  void clear_customization_part_list();
  const std::string& customization_part_list(int index) const;
  std::string* mutable_customization_part_list(int index);
  void set_customization_part_list(int index, const std::string& value);
  void set_customization_part_list(int index, std::string&& value);
  void set_customization_part_list(int index, const char* value);
  void set_customization_part_list(int index, const char* value, size_t size);
  std::string* add_customization_part_list();
  void add_customization_part_list(const std::string& value);
  void add_customization_part_list(std::string&& value);
  void add_customization_part_list(const char* value);
  void add_customization_part_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& customization_part_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_customization_part_list();
  private:
  const std::string& _internal_customization_part_list(int index) const;
  std::string* _internal_add_customization_part_list();
  public:

  // string inventory_data = 2;
  void clear_inventory_data();
  const std::string& inventory_data() const;
  void set_inventory_data(const std::string& value);
  void set_inventory_data(std::string&& value);
  void set_inventory_data(const char* value);
  void set_inventory_data(const char* value, size_t size);
  std::string* mutable_inventory_data();
  std::string* release_inventory_data();
  void set_allocated_inventory_data(std::string* inventory_data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_inventory_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_inventory_data(
      std::string* inventory_data);
  private:
  const std::string& _internal_inventory_data() const;
  void _internal_set_inventory_data(const std::string& value);
  std::string* _internal_mutable_inventory_data();
  public:

  // string inventory_balance_data = 3;
  void clear_inventory_balance_data();
  const std::string& inventory_balance_data() const;
  void set_inventory_balance_data(const std::string& value);
  void set_inventory_balance_data(std::string&& value);
  void set_inventory_balance_data(const char* value);
  void set_inventory_balance_data(const char* value, size_t size);
  std::string* mutable_inventory_balance_data();
  std::string* release_inventory_balance_data();
  void set_allocated_inventory_balance_data(std::string* inventory_balance_data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_inventory_balance_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_inventory_balance_data(
      std::string* inventory_balance_data);
  private:
  const std::string& _internal_inventory_balance_data() const;
  void _internal_set_inventory_balance_data(const std::string& value);
  std::string* _internal_mutable_inventory_balance_data();
  public:

  // string manufacturer_data = 4;
  void clear_manufacturer_data();
  const std::string& manufacturer_data() const;
  void set_manufacturer_data(const std::string& value);
  void set_manufacturer_data(std::string&& value);
  void set_manufacturer_data(const char* value);
  void set_manufacturer_data(const char* value, size_t size);
  std::string* mutable_manufacturer_data();
  std::string* release_manufacturer_data();
  void set_allocated_manufacturer_data(std::string* manufacturer_data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_manufacturer_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_manufacturer_data(
      std::string* manufacturer_data);
  private:
  const std::string& _internal_manufacturer_data() const;
  void _internal_set_manufacturer_data(const std::string& value);
  std::string* _internal_mutable_manufacturer_data();
  public:

  // bytes additional_data = 7;
  void clear_additional_data();
  const std::string& additional_data() const;
  void set_additional_data(const std::string& value);
  void set_additional_data(std::string&& value);
  void set_additional_data(const char* value);
  void set_additional_data(const void* value, size_t size);
  std::string* mutable_additional_data();
  std::string* release_additional_data();
  void set_allocated_additional_data(std::string* additional_data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_additional_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_additional_data(
      std::string* additional_data);
  private:
  const std::string& _internal_additional_data() const;
  void _internal_set_additional_data(const std::string& value);
  std::string* _internal_mutable_additional_data();
  public:

  // int32 game_stage = 1;
  void clear_game_stage();
  ::PROTOBUF_NAMESPACE_ID::int32 game_stage() const;
  void set_game_stage(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_game_stage() const;
  void _internal_set_game_stage(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:OakSave.InventoryBalanceStateInitializationData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> part_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> generic_part_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> customization_part_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inventory_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inventory_balance_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr manufacturer_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr additional_data_;
  ::PROTOBUF_NAMESPACE_ID::int32 game_stage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakSave_2eproto;
};
// -------------------------------------------------------------------

class OakInventoryItemSaveGameData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.OakInventoryItemSaveGameData) */ {
 public:
  inline OakInventoryItemSaveGameData() : OakInventoryItemSaveGameData(nullptr) {};
  virtual ~OakInventoryItemSaveGameData();

  OakInventoryItemSaveGameData(const OakInventoryItemSaveGameData& from);
  OakInventoryItemSaveGameData(OakInventoryItemSaveGameData&& from) noexcept
    : OakInventoryItemSaveGameData() {
    *this = ::std::move(from);
  }

  inline OakInventoryItemSaveGameData& operator=(const OakInventoryItemSaveGameData& from) {
    CopyFrom(from);
    return *this;
  }
  inline OakInventoryItemSaveGameData& operator=(OakInventoryItemSaveGameData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OakInventoryItemSaveGameData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OakInventoryItemSaveGameData* internal_default_instance() {
    return reinterpret_cast<const OakInventoryItemSaveGameData*>(
               &_OakInventoryItemSaveGameData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(OakInventoryItemSaveGameData& a, OakInventoryItemSaveGameData& b) {
    a.Swap(&b);
  }
  inline void Swap(OakInventoryItemSaveGameData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OakInventoryItemSaveGameData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OakInventoryItemSaveGameData* New() const final {
    return CreateMaybeMessage<OakInventoryItemSaveGameData>(nullptr);
  }

  OakInventoryItemSaveGameData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OakInventoryItemSaveGameData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OakInventoryItemSaveGameData& from);
  void MergeFrom(const OakInventoryItemSaveGameData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OakInventoryItemSaveGameData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.OakInventoryItemSaveGameData";
  }
  protected:
  explicit OakInventoryItemSaveGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakSave_2eproto);
    return ::descriptor_table_OakSave_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemSerialNumberFieldNumber = 1,
    kWeaponSkinPathFieldNumber = 4,
    kDevelopmentSaveDataFieldNumber = 5,
    kPickupOrderIndexFieldNumber = 2,
    kFlagsFieldNumber = 3,
  };
  // bytes item_serial_number = 1;
  void clear_item_serial_number();
  const std::string& item_serial_number() const;
  void set_item_serial_number(const std::string& value);
  void set_item_serial_number(std::string&& value);
  void set_item_serial_number(const char* value);
  void set_item_serial_number(const void* value, size_t size);
  std::string* mutable_item_serial_number();
  std::string* release_item_serial_number();
  void set_allocated_item_serial_number(std::string* item_serial_number);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_item_serial_number();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_item_serial_number(
      std::string* item_serial_number);
  private:
  const std::string& _internal_item_serial_number() const;
  void _internal_set_item_serial_number(const std::string& value);
  std::string* _internal_mutable_item_serial_number();
  public:

  // string weapon_skin_path = 4;
  void clear_weapon_skin_path();
  const std::string& weapon_skin_path() const;
  void set_weapon_skin_path(const std::string& value);
  void set_weapon_skin_path(std::string&& value);
  void set_weapon_skin_path(const char* value);
  void set_weapon_skin_path(const char* value, size_t size);
  std::string* mutable_weapon_skin_path();
  std::string* release_weapon_skin_path();
  void set_allocated_weapon_skin_path(std::string* weapon_skin_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_weapon_skin_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_weapon_skin_path(
      std::string* weapon_skin_path);
  private:
  const std::string& _internal_weapon_skin_path() const;
  void _internal_set_weapon_skin_path(const std::string& value);
  std::string* _internal_mutable_weapon_skin_path();
  public:

  // .OakSave.InventoryBalanceStateInitializationData development_save_data = 5;
  bool has_development_save_data() const;
  private:
  bool _internal_has_development_save_data() const;
  public:
  void clear_development_save_data();
  const ::OakSave::InventoryBalanceStateInitializationData& development_save_data() const;
  ::OakSave::InventoryBalanceStateInitializationData* release_development_save_data();
  ::OakSave::InventoryBalanceStateInitializationData* mutable_development_save_data();
  void set_allocated_development_save_data(::OakSave::InventoryBalanceStateInitializationData* development_save_data);
  private:
  const ::OakSave::InventoryBalanceStateInitializationData& _internal_development_save_data() const;
  ::OakSave::InventoryBalanceStateInitializationData* _internal_mutable_development_save_data();
  public:
  void unsafe_arena_set_allocated_development_save_data(
      ::OakSave::InventoryBalanceStateInitializationData* development_save_data);
  ::OakSave::InventoryBalanceStateInitializationData* unsafe_arena_release_development_save_data();

  // int32 pickup_order_index = 2;
  void clear_pickup_order_index();
  ::PROTOBUF_NAMESPACE_ID::int32 pickup_order_index() const;
  void set_pickup_order_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pickup_order_index() const;
  void _internal_set_pickup_order_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 flags = 3;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::int32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:OakSave.OakInventoryItemSaveGameData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr item_serial_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr weapon_skin_path_;
  ::OakSave::InventoryBalanceStateInitializationData* development_save_data_;
  ::PROTOBUF_NAMESPACE_ID::int32 pickup_order_index_;
  ::PROTOBUF_NAMESPACE_ID::int32 flags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakSave_2eproto;
};
// -------------------------------------------------------------------

class EquippedInventorySaveGameData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.EquippedInventorySaveGameData) */ {
 public:
  inline EquippedInventorySaveGameData() : EquippedInventorySaveGameData(nullptr) {};
  virtual ~EquippedInventorySaveGameData();

  EquippedInventorySaveGameData(const EquippedInventorySaveGameData& from);
  EquippedInventorySaveGameData(EquippedInventorySaveGameData&& from) noexcept
    : EquippedInventorySaveGameData() {
    *this = ::std::move(from);
  }

  inline EquippedInventorySaveGameData& operator=(const EquippedInventorySaveGameData& from) {
    CopyFrom(from);
    return *this;
  }
  inline EquippedInventorySaveGameData& operator=(EquippedInventorySaveGameData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EquippedInventorySaveGameData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EquippedInventorySaveGameData* internal_default_instance() {
    return reinterpret_cast<const EquippedInventorySaveGameData*>(
               &_EquippedInventorySaveGameData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(EquippedInventorySaveGameData& a, EquippedInventorySaveGameData& b) {
    a.Swap(&b);
  }
  inline void Swap(EquippedInventorySaveGameData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EquippedInventorySaveGameData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EquippedInventorySaveGameData* New() const final {
    return CreateMaybeMessage<EquippedInventorySaveGameData>(nullptr);
  }

  EquippedInventorySaveGameData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EquippedInventorySaveGameData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EquippedInventorySaveGameData& from);
  void MergeFrom(const EquippedInventorySaveGameData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EquippedInventorySaveGameData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.EquippedInventorySaveGameData";
  }
  protected:
  explicit EquippedInventorySaveGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakSave_2eproto);
    return ::descriptor_table_OakSave_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlotDataPathFieldNumber = 3,
    kTrinketDataPathFieldNumber = 4,
    kInventoryListIndexFieldNumber = 1,
    kEnabledFieldNumber = 2,
  };
  // string slot_data_path = 3;
  void clear_slot_data_path();
  const std::string& slot_data_path() const;
  void set_slot_data_path(const std::string& value);
  void set_slot_data_path(std::string&& value);
  void set_slot_data_path(const char* value);
  void set_slot_data_path(const char* value, size_t size);
  std::string* mutable_slot_data_path();
  std::string* release_slot_data_path();
  void set_allocated_slot_data_path(std::string* slot_data_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_slot_data_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_slot_data_path(
      std::string* slot_data_path);
  private:
  const std::string& _internal_slot_data_path() const;
  void _internal_set_slot_data_path(const std::string& value);
  std::string* _internal_mutable_slot_data_path();
  public:

  // string trinket_data_path = 4;
  void clear_trinket_data_path();
  const std::string& trinket_data_path() const;
  void set_trinket_data_path(const std::string& value);
  void set_trinket_data_path(std::string&& value);
  void set_trinket_data_path(const char* value);
  void set_trinket_data_path(const char* value, size_t size);
  std::string* mutable_trinket_data_path();
  std::string* release_trinket_data_path();
  void set_allocated_trinket_data_path(std::string* trinket_data_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_trinket_data_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_trinket_data_path(
      std::string* trinket_data_path);
  private:
  const std::string& _internal_trinket_data_path() const;
  void _internal_set_trinket_data_path(const std::string& value);
  std::string* _internal_mutable_trinket_data_path();
  public:

  // int32 inventory_list_index = 1;
  void clear_inventory_list_index();
  ::PROTOBUF_NAMESPACE_ID::int32 inventory_list_index() const;
  void set_inventory_list_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_inventory_list_index() const;
  void _internal_set_inventory_list_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool enabled = 2;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:OakSave.EquippedInventorySaveGameData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr slot_data_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trinket_data_path_;
  ::PROTOBUF_NAMESPACE_ID::int32 inventory_list_index_;
  bool enabled_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakSave_2eproto;
};
// -------------------------------------------------------------------

class OakAbilityTreeItemSaveGameData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.OakAbilityTreeItemSaveGameData) */ {
 public:
  inline OakAbilityTreeItemSaveGameData() : OakAbilityTreeItemSaveGameData(nullptr) {};
  virtual ~OakAbilityTreeItemSaveGameData();

  OakAbilityTreeItemSaveGameData(const OakAbilityTreeItemSaveGameData& from);
  OakAbilityTreeItemSaveGameData(OakAbilityTreeItemSaveGameData&& from) noexcept
    : OakAbilityTreeItemSaveGameData() {
    *this = ::std::move(from);
  }

  inline OakAbilityTreeItemSaveGameData& operator=(const OakAbilityTreeItemSaveGameData& from) {
    CopyFrom(from);
    return *this;
  }
  inline OakAbilityTreeItemSaveGameData& operator=(OakAbilityTreeItemSaveGameData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OakAbilityTreeItemSaveGameData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OakAbilityTreeItemSaveGameData* internal_default_instance() {
    return reinterpret_cast<const OakAbilityTreeItemSaveGameData*>(
               &_OakAbilityTreeItemSaveGameData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(OakAbilityTreeItemSaveGameData& a, OakAbilityTreeItemSaveGameData& b) {
    a.Swap(&b);
  }
  inline void Swap(OakAbilityTreeItemSaveGameData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OakAbilityTreeItemSaveGameData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OakAbilityTreeItemSaveGameData* New() const final {
    return CreateMaybeMessage<OakAbilityTreeItemSaveGameData>(nullptr);
  }

  OakAbilityTreeItemSaveGameData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OakAbilityTreeItemSaveGameData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OakAbilityTreeItemSaveGameData& from);
  void MergeFrom(const OakAbilityTreeItemSaveGameData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OakAbilityTreeItemSaveGameData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.OakAbilityTreeItemSaveGameData";
  }
  protected:
  explicit OakAbilityTreeItemSaveGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakSave_2eproto);
    return ::descriptor_table_OakSave_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemAssetPathFieldNumber = 1,
    kPointsFieldNumber = 2,
    kMaxPointsFieldNumber = 3,
    kTreeIdentifierFieldNumber = 4,
  };
  // string item_asset_path = 1;
  void clear_item_asset_path();
  const std::string& item_asset_path() const;
  void set_item_asset_path(const std::string& value);
  void set_item_asset_path(std::string&& value);
  void set_item_asset_path(const char* value);
  void set_item_asset_path(const char* value, size_t size);
  std::string* mutable_item_asset_path();
  std::string* release_item_asset_path();
  void set_allocated_item_asset_path(std::string* item_asset_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_item_asset_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_item_asset_path(
      std::string* item_asset_path);
  private:
  const std::string& _internal_item_asset_path() const;
  void _internal_set_item_asset_path(const std::string& value);
  std::string* _internal_mutable_item_asset_path();
  public:

  // int32 points = 2;
  void clear_points();
  ::PROTOBUF_NAMESPACE_ID::int32 points() const;
  void set_points(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_points() const;
  void _internal_set_points(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 max_points = 3;
  void clear_max_points();
  ::PROTOBUF_NAMESPACE_ID::int32 max_points() const;
  void set_max_points(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_points() const;
  void _internal_set_max_points(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 tree_identifier = 4;
  void clear_tree_identifier();
  ::PROTOBUF_NAMESPACE_ID::int32 tree_identifier() const;
  void set_tree_identifier(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tree_identifier() const;
  void _internal_set_tree_identifier(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:OakSave.OakAbilityTreeItemSaveGameData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr item_asset_path_;
  ::PROTOBUF_NAMESPACE_ID::int32 points_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_points_;
  ::PROTOBUF_NAMESPACE_ID::int32 tree_identifier_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakSave_2eproto;
};
// -------------------------------------------------------------------

class OakAbilitySlotSaveGameData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.OakAbilitySlotSaveGameData) */ {
 public:
  inline OakAbilitySlotSaveGameData() : OakAbilitySlotSaveGameData(nullptr) {};
  virtual ~OakAbilitySlotSaveGameData();

  OakAbilitySlotSaveGameData(const OakAbilitySlotSaveGameData& from);
  OakAbilitySlotSaveGameData(OakAbilitySlotSaveGameData&& from) noexcept
    : OakAbilitySlotSaveGameData() {
    *this = ::std::move(from);
  }

  inline OakAbilitySlotSaveGameData& operator=(const OakAbilitySlotSaveGameData& from) {
    CopyFrom(from);
    return *this;
  }
  inline OakAbilitySlotSaveGameData& operator=(OakAbilitySlotSaveGameData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OakAbilitySlotSaveGameData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OakAbilitySlotSaveGameData* internal_default_instance() {
    return reinterpret_cast<const OakAbilitySlotSaveGameData*>(
               &_OakAbilitySlotSaveGameData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(OakAbilitySlotSaveGameData& a, OakAbilitySlotSaveGameData& b) {
    a.Swap(&b);
  }
  inline void Swap(OakAbilitySlotSaveGameData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OakAbilitySlotSaveGameData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OakAbilitySlotSaveGameData* New() const final {
    return CreateMaybeMessage<OakAbilitySlotSaveGameData>(nullptr);
  }

  OakAbilitySlotSaveGameData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OakAbilitySlotSaveGameData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OakAbilitySlotSaveGameData& from);
  void MergeFrom(const OakAbilitySlotSaveGameData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OakAbilitySlotSaveGameData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.OakAbilitySlotSaveGameData";
  }
  protected:
  explicit OakAbilitySlotSaveGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakSave_2eproto);
    return ::descriptor_table_OakSave_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAbilityClassPathFieldNumber = 1,
    kSlotAssetPathFieldNumber = 2,
  };
  // string ability_class_path = 1;
  void clear_ability_class_path();
  const std::string& ability_class_path() const;
  void set_ability_class_path(const std::string& value);
  void set_ability_class_path(std::string&& value);
  void set_ability_class_path(const char* value);
  void set_ability_class_path(const char* value, size_t size);
  std::string* mutable_ability_class_path();
  std::string* release_ability_class_path();
  void set_allocated_ability_class_path(std::string* ability_class_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ability_class_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ability_class_path(
      std::string* ability_class_path);
  private:
  const std::string& _internal_ability_class_path() const;
  void _internal_set_ability_class_path(const std::string& value);
  std::string* _internal_mutable_ability_class_path();
  public:

  // string slot_asset_path = 2;
  void clear_slot_asset_path();
  const std::string& slot_asset_path() const;
  void set_slot_asset_path(const std::string& value);
  void set_slot_asset_path(std::string&& value);
  void set_slot_asset_path(const char* value);
  void set_slot_asset_path(const char* value, size_t size);
  std::string* mutable_slot_asset_path();
  std::string* release_slot_asset_path();
  void set_allocated_slot_asset_path(std::string* slot_asset_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_slot_asset_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_slot_asset_path(
      std::string* slot_asset_path);
  private:
  const std::string& _internal_slot_asset_path() const;
  void _internal_set_slot_asset_path(const std::string& value);
  std::string* _internal_mutable_slot_asset_path();
  public:

  // @@protoc_insertion_point(class_scope:OakSave.OakAbilitySlotSaveGameData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ability_class_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr slot_asset_path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakSave_2eproto;
};
// -------------------------------------------------------------------

class OakActionAbilityAugmentSaveGameData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.OakActionAbilityAugmentSaveGameData) */ {
 public:
  inline OakActionAbilityAugmentSaveGameData() : OakActionAbilityAugmentSaveGameData(nullptr) {};
  virtual ~OakActionAbilityAugmentSaveGameData();

  OakActionAbilityAugmentSaveGameData(const OakActionAbilityAugmentSaveGameData& from);
  OakActionAbilityAugmentSaveGameData(OakActionAbilityAugmentSaveGameData&& from) noexcept
    : OakActionAbilityAugmentSaveGameData() {
    *this = ::std::move(from);
  }

  inline OakActionAbilityAugmentSaveGameData& operator=(const OakActionAbilityAugmentSaveGameData& from) {
    CopyFrom(from);
    return *this;
  }
  inline OakActionAbilityAugmentSaveGameData& operator=(OakActionAbilityAugmentSaveGameData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OakActionAbilityAugmentSaveGameData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OakActionAbilityAugmentSaveGameData* internal_default_instance() {
    return reinterpret_cast<const OakActionAbilityAugmentSaveGameData*>(
               &_OakActionAbilityAugmentSaveGameData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(OakActionAbilityAugmentSaveGameData& a, OakActionAbilityAugmentSaveGameData& b) {
    a.Swap(&b);
  }
  inline void Swap(OakActionAbilityAugmentSaveGameData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OakActionAbilityAugmentSaveGameData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OakActionAbilityAugmentSaveGameData* New() const final {
    return CreateMaybeMessage<OakActionAbilityAugmentSaveGameData>(nullptr);
  }

  OakActionAbilityAugmentSaveGameData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OakActionAbilityAugmentSaveGameData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OakActionAbilityAugmentSaveGameData& from);
  void MergeFrom(const OakActionAbilityAugmentSaveGameData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OakActionAbilityAugmentSaveGameData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.OakActionAbilityAugmentSaveGameData";
  }
  protected:
  explicit OakActionAbilityAugmentSaveGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakSave_2eproto);
    return ::descriptor_table_OakSave_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionAbilityClassPathFieldNumber = 1,
    kSlotAssetPathFieldNumber = 2,
    kAugmentAssetPathFieldNumber = 3,
  };
  // string action_ability_class_path = 1;
  void clear_action_ability_class_path();
  const std::string& action_ability_class_path() const;
  void set_action_ability_class_path(const std::string& value);
  void set_action_ability_class_path(std::string&& value);
  void set_action_ability_class_path(const char* value);
  void set_action_ability_class_path(const char* value, size_t size);
  std::string* mutable_action_ability_class_path();
  std::string* release_action_ability_class_path();
  void set_allocated_action_ability_class_path(std::string* action_ability_class_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_action_ability_class_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_action_ability_class_path(
      std::string* action_ability_class_path);
  private:
  const std::string& _internal_action_ability_class_path() const;
  void _internal_set_action_ability_class_path(const std::string& value);
  std::string* _internal_mutable_action_ability_class_path();
  public:

  // string slot_asset_path = 2;
  void clear_slot_asset_path();
  const std::string& slot_asset_path() const;
  void set_slot_asset_path(const std::string& value);
  void set_slot_asset_path(std::string&& value);
  void set_slot_asset_path(const char* value);
  void set_slot_asset_path(const char* value, size_t size);
  std::string* mutable_slot_asset_path();
  std::string* release_slot_asset_path();
  void set_allocated_slot_asset_path(std::string* slot_asset_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_slot_asset_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_slot_asset_path(
      std::string* slot_asset_path);
  private:
  const std::string& _internal_slot_asset_path() const;
  void _internal_set_slot_asset_path(const std::string& value);
  std::string* _internal_mutable_slot_asset_path();
  public:

  // string augment_asset_path = 3;
  void clear_augment_asset_path();
  const std::string& augment_asset_path() const;
  void set_augment_asset_path(const std::string& value);
  void set_augment_asset_path(std::string&& value);
  void set_augment_asset_path(const char* value);
  void set_augment_asset_path(const char* value, size_t size);
  std::string* mutable_augment_asset_path();
  std::string* release_augment_asset_path();
  void set_allocated_augment_asset_path(std::string* augment_asset_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_augment_asset_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_augment_asset_path(
      std::string* augment_asset_path);
  private:
  const std::string& _internal_augment_asset_path() const;
  void _internal_set_augment_asset_path(const std::string& value);
  std::string* _internal_mutable_augment_asset_path();
  public:

  // @@protoc_insertion_point(class_scope:OakSave.OakActionAbilityAugmentSaveGameData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_ability_class_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr slot_asset_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr augment_asset_path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakSave_2eproto;
};
// -------------------------------------------------------------------

class OakActionAbilityAugmentConfigurationSaveGameData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.OakActionAbilityAugmentConfigurationSaveGameData) */ {
 public:
  inline OakActionAbilityAugmentConfigurationSaveGameData() : OakActionAbilityAugmentConfigurationSaveGameData(nullptr) {};
  virtual ~OakActionAbilityAugmentConfigurationSaveGameData();

  OakActionAbilityAugmentConfigurationSaveGameData(const OakActionAbilityAugmentConfigurationSaveGameData& from);
  OakActionAbilityAugmentConfigurationSaveGameData(OakActionAbilityAugmentConfigurationSaveGameData&& from) noexcept
    : OakActionAbilityAugmentConfigurationSaveGameData() {
    *this = ::std::move(from);
  }

  inline OakActionAbilityAugmentConfigurationSaveGameData& operator=(const OakActionAbilityAugmentConfigurationSaveGameData& from) {
    CopyFrom(from);
    return *this;
  }
  inline OakActionAbilityAugmentConfigurationSaveGameData& operator=(OakActionAbilityAugmentConfigurationSaveGameData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OakActionAbilityAugmentConfigurationSaveGameData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OakActionAbilityAugmentConfigurationSaveGameData* internal_default_instance() {
    return reinterpret_cast<const OakActionAbilityAugmentConfigurationSaveGameData*>(
               &_OakActionAbilityAugmentConfigurationSaveGameData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(OakActionAbilityAugmentConfigurationSaveGameData& a, OakActionAbilityAugmentConfigurationSaveGameData& b) {
    a.Swap(&b);
  }
  inline void Swap(OakActionAbilityAugmentConfigurationSaveGameData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OakActionAbilityAugmentConfigurationSaveGameData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OakActionAbilityAugmentConfigurationSaveGameData* New() const final {
    return CreateMaybeMessage<OakActionAbilityAugmentConfigurationSaveGameData>(nullptr);
  }

  OakActionAbilityAugmentConfigurationSaveGameData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OakActionAbilityAugmentConfigurationSaveGameData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OakActionAbilityAugmentConfigurationSaveGameData& from);
  void MergeFrom(const OakActionAbilityAugmentConfigurationSaveGameData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OakActionAbilityAugmentConfigurationSaveGameData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.OakActionAbilityAugmentConfigurationSaveGameData";
  }
  protected:
  explicit OakActionAbilityAugmentConfigurationSaveGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakSave_2eproto);
    return ::descriptor_table_OakSave_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAbilityClassPathFieldNumber = 1,
    kAugmentAssetPathFieldNumber = 2,
    kModSlotAssetPathFieldNumber = 3,
    kModAssetPathFieldNumber = 4,
  };
  // string ability_class_path = 1;
  void clear_ability_class_path();
  const std::string& ability_class_path() const;
  void set_ability_class_path(const std::string& value);
  void set_ability_class_path(std::string&& value);
  void set_ability_class_path(const char* value);
  void set_ability_class_path(const char* value, size_t size);
  std::string* mutable_ability_class_path();
  std::string* release_ability_class_path();
  void set_allocated_ability_class_path(std::string* ability_class_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ability_class_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ability_class_path(
      std::string* ability_class_path);
  private:
  const std::string& _internal_ability_class_path() const;
  void _internal_set_ability_class_path(const std::string& value);
  std::string* _internal_mutable_ability_class_path();
  public:

  // string augment_asset_path = 2;
  void clear_augment_asset_path();
  const std::string& augment_asset_path() const;
  void set_augment_asset_path(const std::string& value);
  void set_augment_asset_path(std::string&& value);
  void set_augment_asset_path(const char* value);
  void set_augment_asset_path(const char* value, size_t size);
  std::string* mutable_augment_asset_path();
  std::string* release_augment_asset_path();
  void set_allocated_augment_asset_path(std::string* augment_asset_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_augment_asset_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_augment_asset_path(
      std::string* augment_asset_path);
  private:
  const std::string& _internal_augment_asset_path() const;
  void _internal_set_augment_asset_path(const std::string& value);
  std::string* _internal_mutable_augment_asset_path();
  public:

  // string mod_slot_asset_path = 3;
  void clear_mod_slot_asset_path();
  const std::string& mod_slot_asset_path() const;
  void set_mod_slot_asset_path(const std::string& value);
  void set_mod_slot_asset_path(std::string&& value);
  void set_mod_slot_asset_path(const char* value);
  void set_mod_slot_asset_path(const char* value, size_t size);
  std::string* mutable_mod_slot_asset_path();
  std::string* release_mod_slot_asset_path();
  void set_allocated_mod_slot_asset_path(std::string* mod_slot_asset_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mod_slot_asset_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mod_slot_asset_path(
      std::string* mod_slot_asset_path);
  private:
  const std::string& _internal_mod_slot_asset_path() const;
  void _internal_set_mod_slot_asset_path(const std::string& value);
  std::string* _internal_mutable_mod_slot_asset_path();
  public:

  // string mod_asset_path = 4;
  void clear_mod_asset_path();
  const std::string& mod_asset_path() const;
  void set_mod_asset_path(const std::string& value);
  void set_mod_asset_path(std::string&& value);
  void set_mod_asset_path(const char* value);
  void set_mod_asset_path(const char* value, size_t size);
  std::string* mutable_mod_asset_path();
  std::string* release_mod_asset_path();
  void set_allocated_mod_asset_path(std::string* mod_asset_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mod_asset_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mod_asset_path(
      std::string* mod_asset_path);
  private:
  const std::string& _internal_mod_asset_path() const;
  void _internal_set_mod_asset_path(const std::string& value);
  std::string* _internal_mutable_mod_asset_path();
  public:

  // @@protoc_insertion_point(class_scope:OakSave.OakActionAbilityAugmentConfigurationSaveGameData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ability_class_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr augment_asset_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mod_slot_asset_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mod_asset_path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakSave_2eproto;
};
// -------------------------------------------------------------------

class OakPlayerAbilitySaveGameData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.OakPlayerAbilitySaveGameData) */ {
 public:
  inline OakPlayerAbilitySaveGameData() : OakPlayerAbilitySaveGameData(nullptr) {};
  virtual ~OakPlayerAbilitySaveGameData();

  OakPlayerAbilitySaveGameData(const OakPlayerAbilitySaveGameData& from);
  OakPlayerAbilitySaveGameData(OakPlayerAbilitySaveGameData&& from) noexcept
    : OakPlayerAbilitySaveGameData() {
    *this = ::std::move(from);
  }

  inline OakPlayerAbilitySaveGameData& operator=(const OakPlayerAbilitySaveGameData& from) {
    CopyFrom(from);
    return *this;
  }
  inline OakPlayerAbilitySaveGameData& operator=(OakPlayerAbilitySaveGameData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OakPlayerAbilitySaveGameData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OakPlayerAbilitySaveGameData* internal_default_instance() {
    return reinterpret_cast<const OakPlayerAbilitySaveGameData*>(
               &_OakPlayerAbilitySaveGameData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(OakPlayerAbilitySaveGameData& a, OakPlayerAbilitySaveGameData& b) {
    a.Swap(&b);
  }
  inline void Swap(OakPlayerAbilitySaveGameData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OakPlayerAbilitySaveGameData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OakPlayerAbilitySaveGameData* New() const final {
    return CreateMaybeMessage<OakPlayerAbilitySaveGameData>(nullptr);
  }

  OakPlayerAbilitySaveGameData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OakPlayerAbilitySaveGameData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OakPlayerAbilitySaveGameData& from);
  void MergeFrom(const OakPlayerAbilitySaveGameData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OakPlayerAbilitySaveGameData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.OakPlayerAbilitySaveGameData";
  }
  protected:
  explicit OakPlayerAbilitySaveGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakSave_2eproto);
    return ::descriptor_table_OakSave_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTreeItemListFieldNumber = 2,
    kAbilitySlotListFieldNumber = 3,
    kAugmentSlotListFieldNumber = 4,
    kAugmentConfigurationListFieldNumber = 5,
    kAbilityPointsFieldNumber = 1,
    kTreeGradeFieldNumber = 6,
  };
  // repeated .OakSave.OakAbilityTreeItemSaveGameData tree_item_list = 2;
  int tree_item_list_size() const;
  private:
  int _internal_tree_item_list_size() const;
  public:
  void clear_tree_item_list();
  ::OakSave::OakAbilityTreeItemSaveGameData* mutable_tree_item_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::OakAbilityTreeItemSaveGameData >*
      mutable_tree_item_list();
  private:
  const ::OakSave::OakAbilityTreeItemSaveGameData& _internal_tree_item_list(int index) const;
  ::OakSave::OakAbilityTreeItemSaveGameData* _internal_add_tree_item_list();
  public:
  const ::OakSave::OakAbilityTreeItemSaveGameData& tree_item_list(int index) const;
  ::OakSave::OakAbilityTreeItemSaveGameData* add_tree_item_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::OakAbilityTreeItemSaveGameData >&
      tree_item_list() const;

  // repeated .OakSave.OakAbilitySlotSaveGameData ability_slot_list = 3;
  int ability_slot_list_size() const;
  private:
  int _internal_ability_slot_list_size() const;
  public:
  void clear_ability_slot_list();
  ::OakSave::OakAbilitySlotSaveGameData* mutable_ability_slot_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::OakAbilitySlotSaveGameData >*
      mutable_ability_slot_list();
  private:
  const ::OakSave::OakAbilitySlotSaveGameData& _internal_ability_slot_list(int index) const;
  ::OakSave::OakAbilitySlotSaveGameData* _internal_add_ability_slot_list();
  public:
  const ::OakSave::OakAbilitySlotSaveGameData& ability_slot_list(int index) const;
  ::OakSave::OakAbilitySlotSaveGameData* add_ability_slot_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::OakAbilitySlotSaveGameData >&
      ability_slot_list() const;

  // repeated .OakSave.OakActionAbilityAugmentSaveGameData augment_slot_list = 4;
  int augment_slot_list_size() const;
  private:
  int _internal_augment_slot_list_size() const;
  public:
  void clear_augment_slot_list();
  ::OakSave::OakActionAbilityAugmentSaveGameData* mutable_augment_slot_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::OakActionAbilityAugmentSaveGameData >*
      mutable_augment_slot_list();
  private:
  const ::OakSave::OakActionAbilityAugmentSaveGameData& _internal_augment_slot_list(int index) const;
  ::OakSave::OakActionAbilityAugmentSaveGameData* _internal_add_augment_slot_list();
  public:
  const ::OakSave::OakActionAbilityAugmentSaveGameData& augment_slot_list(int index) const;
  ::OakSave::OakActionAbilityAugmentSaveGameData* add_augment_slot_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::OakActionAbilityAugmentSaveGameData >&
      augment_slot_list() const;

  // repeated .OakSave.OakActionAbilityAugmentConfigurationSaveGameData augment_configuration_list = 5;
  int augment_configuration_list_size() const;
  private:
  int _internal_augment_configuration_list_size() const;
  public:
  void clear_augment_configuration_list();
  ::OakSave::OakActionAbilityAugmentConfigurationSaveGameData* mutable_augment_configuration_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::OakActionAbilityAugmentConfigurationSaveGameData >*
      mutable_augment_configuration_list();
  private:
  const ::OakSave::OakActionAbilityAugmentConfigurationSaveGameData& _internal_augment_configuration_list(int index) const;
  ::OakSave::OakActionAbilityAugmentConfigurationSaveGameData* _internal_add_augment_configuration_list();
  public:
  const ::OakSave::OakActionAbilityAugmentConfigurationSaveGameData& augment_configuration_list(int index) const;
  ::OakSave::OakActionAbilityAugmentConfigurationSaveGameData* add_augment_configuration_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::OakActionAbilityAugmentConfigurationSaveGameData >&
      augment_configuration_list() const;

  // int32 ability_points = 1;
  void clear_ability_points();
  ::PROTOBUF_NAMESPACE_ID::int32 ability_points() const;
  void set_ability_points(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ability_points() const;
  void _internal_set_ability_points(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 tree_grade = 6;
  void clear_tree_grade();
  ::PROTOBUF_NAMESPACE_ID::int32 tree_grade() const;
  void set_tree_grade(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tree_grade() const;
  void _internal_set_tree_grade(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:OakSave.OakPlayerAbilitySaveGameData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::OakAbilityTreeItemSaveGameData > tree_item_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::OakAbilitySlotSaveGameData > ability_slot_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::OakActionAbilityAugmentSaveGameData > augment_slot_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::OakActionAbilityAugmentConfigurationSaveGameData > augment_configuration_list_;
  ::PROTOBUF_NAMESPACE_ID::int32 ability_points_;
  ::PROTOBUF_NAMESPACE_ID::int32 tree_grade_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakSave_2eproto;
};
// -------------------------------------------------------------------

class MissionStatusPlayerSaveGameData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.MissionStatusPlayerSaveGameData) */ {
 public:
  inline MissionStatusPlayerSaveGameData() : MissionStatusPlayerSaveGameData(nullptr) {};
  virtual ~MissionStatusPlayerSaveGameData();

  MissionStatusPlayerSaveGameData(const MissionStatusPlayerSaveGameData& from);
  MissionStatusPlayerSaveGameData(MissionStatusPlayerSaveGameData&& from) noexcept
    : MissionStatusPlayerSaveGameData() {
    *this = ::std::move(from);
  }

  inline MissionStatusPlayerSaveGameData& operator=(const MissionStatusPlayerSaveGameData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MissionStatusPlayerSaveGameData& operator=(MissionStatusPlayerSaveGameData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MissionStatusPlayerSaveGameData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MissionStatusPlayerSaveGameData* internal_default_instance() {
    return reinterpret_cast<const MissionStatusPlayerSaveGameData*>(
               &_MissionStatusPlayerSaveGameData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(MissionStatusPlayerSaveGameData& a, MissionStatusPlayerSaveGameData& b) {
    a.Swap(&b);
  }
  inline void Swap(MissionStatusPlayerSaveGameData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MissionStatusPlayerSaveGameData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MissionStatusPlayerSaveGameData* New() const final {
    return CreateMaybeMessage<MissionStatusPlayerSaveGameData>(nullptr);
  }

  MissionStatusPlayerSaveGameData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MissionStatusPlayerSaveGameData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MissionStatusPlayerSaveGameData& from);
  void MergeFrom(const MissionStatusPlayerSaveGameData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MissionStatusPlayerSaveGameData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.MissionStatusPlayerSaveGameData";
  }
  protected:
  explicit MissionStatusPlayerSaveGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakSave_2eproto);
    return ::descriptor_table_OakSave_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef MissionStatusPlayerSaveGameData_MissionState MissionState;
  static constexpr MissionState MS_NotStarted =
    MissionStatusPlayerSaveGameData_MissionState_MS_NotStarted;
  static constexpr MissionState MS_Active =
    MissionStatusPlayerSaveGameData_MissionState_MS_Active;
  static constexpr MissionState MS_Complete =
    MissionStatusPlayerSaveGameData_MissionState_MS_Complete;
  static constexpr MissionState MS_Failed =
    MissionStatusPlayerSaveGameData_MissionState_MS_Failed;
  static constexpr MissionState MS_Unknown =
    MissionStatusPlayerSaveGameData_MissionState_MS_Unknown;
  static inline bool MissionState_IsValid(int value) {
    return MissionStatusPlayerSaveGameData_MissionState_IsValid(value);
  }
  static constexpr MissionState MissionState_MIN =
    MissionStatusPlayerSaveGameData_MissionState_MissionState_MIN;
  static constexpr MissionState MissionState_MAX =
    MissionStatusPlayerSaveGameData_MissionState_MissionState_MAX;
  static constexpr int MissionState_ARRAYSIZE =
    MissionStatusPlayerSaveGameData_MissionState_MissionState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MissionState_descriptor() {
    return MissionStatusPlayerSaveGameData_MissionState_descriptor();
  }
  template<typename T>
  static inline const std::string& MissionState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MissionState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MissionState_Name.");
    return MissionStatusPlayerSaveGameData_MissionState_Name(enum_t_value);
  }
  static inline bool MissionState_Parse(const std::string& name,
      MissionState* value) {
    return MissionStatusPlayerSaveGameData_MissionState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kObjectivesProgressFieldNumber = 3,
    kMissionClassPathFieldNumber = 4,
    kActiveObjectiveSetPathFieldNumber = 5,
    kStatusFieldNumber = 1,
    kHasBeenViewedInLogFieldNumber = 2,
    kKickoffPlayedFieldNumber = 7,
    kDlcPackageIdFieldNumber = 6,
    kLeagueInstanceFieldNumber = 8,
  };
  // repeated int32 objectives_progress = 3;
  int objectives_progress_size() const;
  private:
  int _internal_objectives_progress_size() const;
  public:
  void clear_objectives_progress();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_objectives_progress(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_objectives_progress() const;
  void _internal_add_objectives_progress(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_objectives_progress();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 objectives_progress(int index) const;
  void set_objectives_progress(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_objectives_progress(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      objectives_progress() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_objectives_progress();

  // string mission_class_path = 4;
  void clear_mission_class_path();
  const std::string& mission_class_path() const;
  void set_mission_class_path(const std::string& value);
  void set_mission_class_path(std::string&& value);
  void set_mission_class_path(const char* value);
  void set_mission_class_path(const char* value, size_t size);
  std::string* mutable_mission_class_path();
  std::string* release_mission_class_path();
  void set_allocated_mission_class_path(std::string* mission_class_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mission_class_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mission_class_path(
      std::string* mission_class_path);
  private:
  const std::string& _internal_mission_class_path() const;
  void _internal_set_mission_class_path(const std::string& value);
  std::string* _internal_mutable_mission_class_path();
  public:

  // string active_objective_set_path = 5;
  void clear_active_objective_set_path();
  const std::string& active_objective_set_path() const;
  void set_active_objective_set_path(const std::string& value);
  void set_active_objective_set_path(std::string&& value);
  void set_active_objective_set_path(const char* value);
  void set_active_objective_set_path(const char* value, size_t size);
  std::string* mutable_active_objective_set_path();
  std::string* release_active_objective_set_path();
  void set_allocated_active_objective_set_path(std::string* active_objective_set_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_active_objective_set_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_active_objective_set_path(
      std::string* active_objective_set_path);
  private:
  const std::string& _internal_active_objective_set_path() const;
  void _internal_set_active_objective_set_path(const std::string& value);
  std::string* _internal_mutable_active_objective_set_path();
  public:

  // .OakSave.MissionStatusPlayerSaveGameData.MissionState status = 1;
  void clear_status();
  ::OakSave::MissionStatusPlayerSaveGameData_MissionState status() const;
  void set_status(::OakSave::MissionStatusPlayerSaveGameData_MissionState value);
  private:
  ::OakSave::MissionStatusPlayerSaveGameData_MissionState _internal_status() const;
  void _internal_set_status(::OakSave::MissionStatusPlayerSaveGameData_MissionState value);
  public:

  // bool has_been_viewed_in_log = 2;
  void clear_has_been_viewed_in_log();
  bool has_been_viewed_in_log() const;
  void set_has_been_viewed_in_log(bool value);
  private:
  bool _internal_has_been_viewed_in_log() const;
  void _internal_set_has_been_viewed_in_log(bool value);
  public:

  // bool kickoff_played = 7;
  void clear_kickoff_played();
  bool kickoff_played() const;
  void set_kickoff_played(bool value);
  private:
  bool _internal_kickoff_played() const;
  void _internal_set_kickoff_played(bool value);
  public:

  // uint32 dlc_package_id = 6;
  void clear_dlc_package_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 dlc_package_id() const;
  void set_dlc_package_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dlc_package_id() const;
  void _internal_set_dlc_package_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 league_instance = 8;
  void clear_league_instance();
  ::PROTOBUF_NAMESPACE_ID::uint32 league_instance() const;
  void set_league_instance(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_league_instance() const;
  void _internal_set_league_instance(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:OakSave.MissionStatusPlayerSaveGameData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > objectives_progress_;
  mutable std::atomic<int> _objectives_progress_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mission_class_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr active_objective_set_path_;
  int status_;
  bool has_been_viewed_in_log_;
  bool kickoff_played_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dlc_package_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 league_instance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakSave_2eproto;
};
// -------------------------------------------------------------------

class MissionPlaythroughSaveGameData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.MissionPlaythroughSaveGameData) */ {
 public:
  inline MissionPlaythroughSaveGameData() : MissionPlaythroughSaveGameData(nullptr) {};
  virtual ~MissionPlaythroughSaveGameData();

  MissionPlaythroughSaveGameData(const MissionPlaythroughSaveGameData& from);
  MissionPlaythroughSaveGameData(MissionPlaythroughSaveGameData&& from) noexcept
    : MissionPlaythroughSaveGameData() {
    *this = ::std::move(from);
  }

  inline MissionPlaythroughSaveGameData& operator=(const MissionPlaythroughSaveGameData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MissionPlaythroughSaveGameData& operator=(MissionPlaythroughSaveGameData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MissionPlaythroughSaveGameData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MissionPlaythroughSaveGameData* internal_default_instance() {
    return reinterpret_cast<const MissionPlaythroughSaveGameData*>(
               &_MissionPlaythroughSaveGameData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(MissionPlaythroughSaveGameData& a, MissionPlaythroughSaveGameData& b) {
    a.Swap(&b);
  }
  inline void Swap(MissionPlaythroughSaveGameData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MissionPlaythroughSaveGameData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MissionPlaythroughSaveGameData* New() const final {
    return CreateMaybeMessage<MissionPlaythroughSaveGameData>(nullptr);
  }

  MissionPlaythroughSaveGameData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MissionPlaythroughSaveGameData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MissionPlaythroughSaveGameData& from);
  void MergeFrom(const MissionPlaythroughSaveGameData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MissionPlaythroughSaveGameData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.MissionPlaythroughSaveGameData";
  }
  protected:
  explicit MissionPlaythroughSaveGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakSave_2eproto);
    return ::descriptor_table_OakSave_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMissionListFieldNumber = 1,
    kTrackedMissionClassPathFieldNumber = 2,
  };
  // repeated .OakSave.MissionStatusPlayerSaveGameData mission_list = 1;
  int mission_list_size() const;
  private:
  int _internal_mission_list_size() const;
  public:
  void clear_mission_list();
  ::OakSave::MissionStatusPlayerSaveGameData* mutable_mission_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::MissionStatusPlayerSaveGameData >*
      mutable_mission_list();
  private:
  const ::OakSave::MissionStatusPlayerSaveGameData& _internal_mission_list(int index) const;
  ::OakSave::MissionStatusPlayerSaveGameData* _internal_add_mission_list();
  public:
  const ::OakSave::MissionStatusPlayerSaveGameData& mission_list(int index) const;
  ::OakSave::MissionStatusPlayerSaveGameData* add_mission_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::MissionStatusPlayerSaveGameData >&
      mission_list() const;

  // string tracked_mission_class_path = 2;
  void clear_tracked_mission_class_path();
  const std::string& tracked_mission_class_path() const;
  void set_tracked_mission_class_path(const std::string& value);
  void set_tracked_mission_class_path(std::string&& value);
  void set_tracked_mission_class_path(const char* value);
  void set_tracked_mission_class_path(const char* value, size_t size);
  std::string* mutable_tracked_mission_class_path();
  std::string* release_tracked_mission_class_path();
  void set_allocated_tracked_mission_class_path(std::string* tracked_mission_class_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_tracked_mission_class_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_tracked_mission_class_path(
      std::string* tracked_mission_class_path);
  private:
  const std::string& _internal_tracked_mission_class_path() const;
  void _internal_set_tracked_mission_class_path(const std::string& value);
  std::string* _internal_mutable_tracked_mission_class_path();
  public:

  // @@protoc_insertion_point(class_scope:OakSave.MissionPlaythroughSaveGameData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::MissionStatusPlayerSaveGameData > mission_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tracked_mission_class_path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakSave_2eproto;
};
// -------------------------------------------------------------------

class ActiveFastTravelSaveData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.ActiveFastTravelSaveData) */ {
 public:
  inline ActiveFastTravelSaveData() : ActiveFastTravelSaveData(nullptr) {};
  virtual ~ActiveFastTravelSaveData();

  ActiveFastTravelSaveData(const ActiveFastTravelSaveData& from);
  ActiveFastTravelSaveData(ActiveFastTravelSaveData&& from) noexcept
    : ActiveFastTravelSaveData() {
    *this = ::std::move(from);
  }

  inline ActiveFastTravelSaveData& operator=(const ActiveFastTravelSaveData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActiveFastTravelSaveData& operator=(ActiveFastTravelSaveData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActiveFastTravelSaveData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActiveFastTravelSaveData* internal_default_instance() {
    return reinterpret_cast<const ActiveFastTravelSaveData*>(
               &_ActiveFastTravelSaveData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ActiveFastTravelSaveData& a, ActiveFastTravelSaveData& b) {
    a.Swap(&b);
  }
  inline void Swap(ActiveFastTravelSaveData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActiveFastTravelSaveData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActiveFastTravelSaveData* New() const final {
    return CreateMaybeMessage<ActiveFastTravelSaveData>(nullptr);
  }

  ActiveFastTravelSaveData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActiveFastTravelSaveData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActiveFastTravelSaveData& from);
  void MergeFrom(const ActiveFastTravelSaveData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActiveFastTravelSaveData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.ActiveFastTravelSaveData";
  }
  protected:
  explicit ActiveFastTravelSaveData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakSave_2eproto);
    return ::descriptor_table_OakSave_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActiveTravelStationNameFieldNumber = 1,
    kBlacklistedFieldNumber = 2,
  };
  // string active_travel_station_name = 1;
  void clear_active_travel_station_name();
  const std::string& active_travel_station_name() const;
  void set_active_travel_station_name(const std::string& value);
  void set_active_travel_station_name(std::string&& value);
  void set_active_travel_station_name(const char* value);
  void set_active_travel_station_name(const char* value, size_t size);
  std::string* mutable_active_travel_station_name();
  std::string* release_active_travel_station_name();
  void set_allocated_active_travel_station_name(std::string* active_travel_station_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_active_travel_station_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_active_travel_station_name(
      std::string* active_travel_station_name);
  private:
  const std::string& _internal_active_travel_station_name() const;
  void _internal_set_active_travel_station_name(const std::string& value);
  std::string* _internal_mutable_active_travel_station_name();
  public:

  // bool blacklisted = 2;
  void clear_blacklisted();
  bool blacklisted() const;
  void set_blacklisted(bool value);
  private:
  bool _internal_blacklisted() const;
  void _internal_set_blacklisted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:OakSave.ActiveFastTravelSaveData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr active_travel_station_name_;
  bool blacklisted_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakSave_2eproto;
};
// -------------------------------------------------------------------

class PlaythroughActiveFastTravelSaveData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.PlaythroughActiveFastTravelSaveData) */ {
 public:
  inline PlaythroughActiveFastTravelSaveData() : PlaythroughActiveFastTravelSaveData(nullptr) {};
  virtual ~PlaythroughActiveFastTravelSaveData();

  PlaythroughActiveFastTravelSaveData(const PlaythroughActiveFastTravelSaveData& from);
  PlaythroughActiveFastTravelSaveData(PlaythroughActiveFastTravelSaveData&& from) noexcept
    : PlaythroughActiveFastTravelSaveData() {
    *this = ::std::move(from);
  }

  inline PlaythroughActiveFastTravelSaveData& operator=(const PlaythroughActiveFastTravelSaveData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlaythroughActiveFastTravelSaveData& operator=(PlaythroughActiveFastTravelSaveData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlaythroughActiveFastTravelSaveData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlaythroughActiveFastTravelSaveData* internal_default_instance() {
    return reinterpret_cast<const PlaythroughActiveFastTravelSaveData*>(
               &_PlaythroughActiveFastTravelSaveData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(PlaythroughActiveFastTravelSaveData& a, PlaythroughActiveFastTravelSaveData& b) {
    a.Swap(&b);
  }
  inline void Swap(PlaythroughActiveFastTravelSaveData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlaythroughActiveFastTravelSaveData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlaythroughActiveFastTravelSaveData* New() const final {
    return CreateMaybeMessage<PlaythroughActiveFastTravelSaveData>(nullptr);
  }

  PlaythroughActiveFastTravelSaveData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlaythroughActiveFastTravelSaveData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlaythroughActiveFastTravelSaveData& from);
  void MergeFrom(const PlaythroughActiveFastTravelSaveData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlaythroughActiveFastTravelSaveData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.PlaythroughActiveFastTravelSaveData";
  }
  protected:
  explicit PlaythroughActiveFastTravelSaveData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakSave_2eproto);
    return ::descriptor_table_OakSave_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActiveTravelStationsFieldNumber = 1,
  };
  // repeated .OakSave.ActiveFastTravelSaveData active_travel_stations = 1;
  int active_travel_stations_size() const;
  private:
  int _internal_active_travel_stations_size() const;
  public:
  void clear_active_travel_stations();
  ::OakSave::ActiveFastTravelSaveData* mutable_active_travel_stations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::ActiveFastTravelSaveData >*
      mutable_active_travel_stations();
  private:
  const ::OakSave::ActiveFastTravelSaveData& _internal_active_travel_stations(int index) const;
  ::OakSave::ActiveFastTravelSaveData* _internal_add_active_travel_stations();
  public:
  const ::OakSave::ActiveFastTravelSaveData& active_travel_stations(int index) const;
  ::OakSave::ActiveFastTravelSaveData* add_active_travel_stations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::ActiveFastTravelSaveData >&
      active_travel_stations() const;

  // @@protoc_insertion_point(class_scope:OakSave.PlaythroughActiveFastTravelSaveData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::ActiveFastTravelSaveData > active_travel_stations_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakSave_2eproto;
};
// -------------------------------------------------------------------

class DiscoveredAreaInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.DiscoveredAreaInfo) */ {
 public:
  inline DiscoveredAreaInfo() : DiscoveredAreaInfo(nullptr) {};
  virtual ~DiscoveredAreaInfo();

  DiscoveredAreaInfo(const DiscoveredAreaInfo& from);
  DiscoveredAreaInfo(DiscoveredAreaInfo&& from) noexcept
    : DiscoveredAreaInfo() {
    *this = ::std::move(from);
  }

  inline DiscoveredAreaInfo& operator=(const DiscoveredAreaInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiscoveredAreaInfo& operator=(DiscoveredAreaInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DiscoveredAreaInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiscoveredAreaInfo* internal_default_instance() {
    return reinterpret_cast<const DiscoveredAreaInfo*>(
               &_DiscoveredAreaInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(DiscoveredAreaInfo& a, DiscoveredAreaInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(DiscoveredAreaInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DiscoveredAreaInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DiscoveredAreaInfo* New() const final {
    return CreateMaybeMessage<DiscoveredAreaInfo>(nullptr);
  }

  DiscoveredAreaInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DiscoveredAreaInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DiscoveredAreaInfo& from);
  void MergeFrom(const DiscoveredAreaInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiscoveredAreaInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.DiscoveredAreaInfo";
  }
  protected:
  explicit DiscoveredAreaInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakSave_2eproto);
    return ::descriptor_table_OakSave_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDiscoveredAreaNameFieldNumber = 1,
    kDiscoveredPlaythroughsFieldNumber = 2,
  };
  // string discovered_area_name = 1;
  void clear_discovered_area_name();
  const std::string& discovered_area_name() const;
  void set_discovered_area_name(const std::string& value);
  void set_discovered_area_name(std::string&& value);
  void set_discovered_area_name(const char* value);
  void set_discovered_area_name(const char* value, size_t size);
  std::string* mutable_discovered_area_name();
  std::string* release_discovered_area_name();
  void set_allocated_discovered_area_name(std::string* discovered_area_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_discovered_area_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_discovered_area_name(
      std::string* discovered_area_name);
  private:
  const std::string& _internal_discovered_area_name() const;
  void _internal_set_discovered_area_name(const std::string& value);
  std::string* _internal_mutable_discovered_area_name();
  public:

  // uint32 discovered_playthroughs = 2;
  void clear_discovered_playthroughs();
  ::PROTOBUF_NAMESPACE_ID::uint32 discovered_playthroughs() const;
  void set_discovered_playthroughs(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_discovered_playthroughs() const;
  void _internal_set_discovered_playthroughs(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:OakSave.DiscoveredAreaInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr discovered_area_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 discovered_playthroughs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakSave_2eproto;
};
// -------------------------------------------------------------------

class DiscoveredLevelInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.DiscoveredLevelInfo) */ {
 public:
  inline DiscoveredLevelInfo() : DiscoveredLevelInfo(nullptr) {};
  virtual ~DiscoveredLevelInfo();

  DiscoveredLevelInfo(const DiscoveredLevelInfo& from);
  DiscoveredLevelInfo(DiscoveredLevelInfo&& from) noexcept
    : DiscoveredLevelInfo() {
    *this = ::std::move(from);
  }

  inline DiscoveredLevelInfo& operator=(const DiscoveredLevelInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiscoveredLevelInfo& operator=(DiscoveredLevelInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DiscoveredLevelInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiscoveredLevelInfo* internal_default_instance() {
    return reinterpret_cast<const DiscoveredLevelInfo*>(
               &_DiscoveredLevelInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(DiscoveredLevelInfo& a, DiscoveredLevelInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(DiscoveredLevelInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DiscoveredLevelInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DiscoveredLevelInfo* New() const final {
    return CreateMaybeMessage<DiscoveredLevelInfo>(nullptr);
  }

  DiscoveredLevelInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DiscoveredLevelInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DiscoveredLevelInfo& from);
  void MergeFrom(const DiscoveredLevelInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiscoveredLevelInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.DiscoveredLevelInfo";
  }
  protected:
  explicit DiscoveredLevelInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakSave_2eproto);
    return ::descriptor_table_OakSave_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDiscoveredAreaInfoFieldNumber = 4,
    kDiscoveredLevelNameFieldNumber = 1,
    kDiscoveredPlaythroughsFieldNumber = 3,
  };
  // repeated .OakSave.DiscoveredAreaInfo discovered_area_info = 4;
  int discovered_area_info_size() const;
  private:
  int _internal_discovered_area_info_size() const;
  public:
  void clear_discovered_area_info();
  ::OakSave::DiscoveredAreaInfo* mutable_discovered_area_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::DiscoveredAreaInfo >*
      mutable_discovered_area_info();
  private:
  const ::OakSave::DiscoveredAreaInfo& _internal_discovered_area_info(int index) const;
  ::OakSave::DiscoveredAreaInfo* _internal_add_discovered_area_info();
  public:
  const ::OakSave::DiscoveredAreaInfo& discovered_area_info(int index) const;
  ::OakSave::DiscoveredAreaInfo* add_discovered_area_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::DiscoveredAreaInfo >&
      discovered_area_info() const;

  // string discovered_level_name = 1;
  void clear_discovered_level_name();
  const std::string& discovered_level_name() const;
  void set_discovered_level_name(const std::string& value);
  void set_discovered_level_name(std::string&& value);
  void set_discovered_level_name(const char* value);
  void set_discovered_level_name(const char* value, size_t size);
  std::string* mutable_discovered_level_name();
  std::string* release_discovered_level_name();
  void set_allocated_discovered_level_name(std::string* discovered_level_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_discovered_level_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_discovered_level_name(
      std::string* discovered_level_name);
  private:
  const std::string& _internal_discovered_level_name() const;
  void _internal_set_discovered_level_name(const std::string& value);
  std::string* _internal_mutable_discovered_level_name();
  public:

  // uint32 discovered_playthroughs = 3;
  void clear_discovered_playthroughs();
  ::PROTOBUF_NAMESPACE_ID::uint32 discovered_playthroughs() const;
  void set_discovered_playthroughs(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_discovered_playthroughs() const;
  void _internal_set_discovered_playthroughs(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:OakSave.DiscoveredLevelInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::DiscoveredAreaInfo > discovered_area_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr discovered_level_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 discovered_playthroughs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakSave_2eproto;
};
// -------------------------------------------------------------------

class DiscoveredPlanetInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.DiscoveredPlanetInfo) */ {
 public:
  inline DiscoveredPlanetInfo() : DiscoveredPlanetInfo(nullptr) {};
  virtual ~DiscoveredPlanetInfo();

  DiscoveredPlanetInfo(const DiscoveredPlanetInfo& from);
  DiscoveredPlanetInfo(DiscoveredPlanetInfo&& from) noexcept
    : DiscoveredPlanetInfo() {
    *this = ::std::move(from);
  }

  inline DiscoveredPlanetInfo& operator=(const DiscoveredPlanetInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiscoveredPlanetInfo& operator=(DiscoveredPlanetInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DiscoveredPlanetInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiscoveredPlanetInfo* internal_default_instance() {
    return reinterpret_cast<const DiscoveredPlanetInfo*>(
               &_DiscoveredPlanetInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(DiscoveredPlanetInfo& a, DiscoveredPlanetInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(DiscoveredPlanetInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DiscoveredPlanetInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DiscoveredPlanetInfo* New() const final {
    return CreateMaybeMessage<DiscoveredPlanetInfo>(nullptr);
  }

  DiscoveredPlanetInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DiscoveredPlanetInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DiscoveredPlanetInfo& from);
  void MergeFrom(const DiscoveredPlanetInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiscoveredPlanetInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.DiscoveredPlanetInfo";
  }
  protected:
  explicit DiscoveredPlanetInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakSave_2eproto);
    return ::descriptor_table_OakSave_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDiscoveredPlanetFieldNumber = 1,
    kIsNewPlanetFieldNumber = 2,
  };
  // string discovered_planet = 1;
  void clear_discovered_planet();
  const std::string& discovered_planet() const;
  void set_discovered_planet(const std::string& value);
  void set_discovered_planet(std::string&& value);
  void set_discovered_planet(const char* value);
  void set_discovered_planet(const char* value, size_t size);
  std::string* mutable_discovered_planet();
  std::string* release_discovered_planet();
  void set_allocated_discovered_planet(std::string* discovered_planet);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_discovered_planet();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_discovered_planet(
      std::string* discovered_planet);
  private:
  const std::string& _internal_discovered_planet() const;
  void _internal_set_discovered_planet(const std::string& value);
  std::string* _internal_mutable_discovered_planet();
  public:

  // bool is_new_planet = 2;
  void clear_is_new_planet();
  bool is_new_planet() const;
  void set_is_new_planet(bool value);
  private:
  bool _internal_is_new_planet() const;
  void _internal_set_is_new_planet(bool value);
  public:

  // @@protoc_insertion_point(class_scope:OakSave.DiscoveredPlanetInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr discovered_planet_;
  bool is_new_planet_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakSave_2eproto;
};
// -------------------------------------------------------------------

class DiscoverySaveData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.DiscoverySaveData) */ {
 public:
  inline DiscoverySaveData() : DiscoverySaveData(nullptr) {};
  virtual ~DiscoverySaveData();

  DiscoverySaveData(const DiscoverySaveData& from);
  DiscoverySaveData(DiscoverySaveData&& from) noexcept
    : DiscoverySaveData() {
    *this = ::std::move(from);
  }

  inline DiscoverySaveData& operator=(const DiscoverySaveData& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiscoverySaveData& operator=(DiscoverySaveData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DiscoverySaveData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiscoverySaveData* internal_default_instance() {
    return reinterpret_cast<const DiscoverySaveData*>(
               &_DiscoverySaveData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(DiscoverySaveData& a, DiscoverySaveData& b) {
    a.Swap(&b);
  }
  inline void Swap(DiscoverySaveData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DiscoverySaveData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DiscoverySaveData* New() const final {
    return CreateMaybeMessage<DiscoverySaveData>(nullptr);
  }

  DiscoverySaveData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DiscoverySaveData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DiscoverySaveData& from);
  void MergeFrom(const DiscoverySaveData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiscoverySaveData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.DiscoverySaveData";
  }
  protected:
  explicit DiscoverySaveData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakSave_2eproto);
    return ::descriptor_table_OakSave_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDiscoveredLevelInfoFieldNumber = 1,
  };
  // repeated .OakSave.DiscoveredLevelInfo discovered_level_info = 1;
  int discovered_level_info_size() const;
  private:
  int _internal_discovered_level_info_size() const;
  public:
  void clear_discovered_level_info();
  ::OakSave::DiscoveredLevelInfo* mutable_discovered_level_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::DiscoveredLevelInfo >*
      mutable_discovered_level_info();
  private:
  const ::OakSave::DiscoveredLevelInfo& _internal_discovered_level_info(int index) const;
  ::OakSave::DiscoveredLevelInfo* _internal_add_discovered_level_info();
  public:
  const ::OakSave::DiscoveredLevelInfo& discovered_level_info(int index) const;
  ::OakSave::DiscoveredLevelInfo* add_discovered_level_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::DiscoveredLevelInfo >&
      discovered_level_info() const;

  // @@protoc_insertion_point(class_scope:OakSave.DiscoverySaveData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::DiscoveredLevelInfo > discovered_level_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakSave_2eproto;
};
// -------------------------------------------------------------------

class VehicleUnlockedSaveGameData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.VehicleUnlockedSaveGameData) */ {
 public:
  inline VehicleUnlockedSaveGameData() : VehicleUnlockedSaveGameData(nullptr) {};
  virtual ~VehicleUnlockedSaveGameData();

  VehicleUnlockedSaveGameData(const VehicleUnlockedSaveGameData& from);
  VehicleUnlockedSaveGameData(VehicleUnlockedSaveGameData&& from) noexcept
    : VehicleUnlockedSaveGameData() {
    *this = ::std::move(from);
  }

  inline VehicleUnlockedSaveGameData& operator=(const VehicleUnlockedSaveGameData& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleUnlockedSaveGameData& operator=(VehicleUnlockedSaveGameData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VehicleUnlockedSaveGameData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VehicleUnlockedSaveGameData* internal_default_instance() {
    return reinterpret_cast<const VehicleUnlockedSaveGameData*>(
               &_VehicleUnlockedSaveGameData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(VehicleUnlockedSaveGameData& a, VehicleUnlockedSaveGameData& b) {
    a.Swap(&b);
  }
  inline void Swap(VehicleUnlockedSaveGameData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VehicleUnlockedSaveGameData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VehicleUnlockedSaveGameData* New() const final {
    return CreateMaybeMessage<VehicleUnlockedSaveGameData>(nullptr);
  }

  VehicleUnlockedSaveGameData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VehicleUnlockedSaveGameData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VehicleUnlockedSaveGameData& from);
  void MergeFrom(const VehicleUnlockedSaveGameData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleUnlockedSaveGameData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.VehicleUnlockedSaveGameData";
  }
  protected:
  explicit VehicleUnlockedSaveGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakSave_2eproto);
    return ::descriptor_table_OakSave_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssetPathFieldNumber = 1,
    kJustUnlockedFieldNumber = 2,
  };
  // string asset_path = 1;
  void clear_asset_path();
  const std::string& asset_path() const;
  void set_asset_path(const std::string& value);
  void set_asset_path(std::string&& value);
  void set_asset_path(const char* value);
  void set_asset_path(const char* value, size_t size);
  std::string* mutable_asset_path();
  std::string* release_asset_path();
  void set_allocated_asset_path(std::string* asset_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_asset_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_asset_path(
      std::string* asset_path);
  private:
  const std::string& _internal_asset_path() const;
  void _internal_set_asset_path(const std::string& value);
  std::string* _internal_mutable_asset_path();
  public:

  // bool just_unlocked = 2;
  void clear_just_unlocked();
  bool just_unlocked() const;
  void set_just_unlocked(bool value);
  private:
  bool _internal_just_unlocked() const;
  void _internal_set_just_unlocked(bool value);
  public:

  // @@protoc_insertion_point(class_scope:OakSave.VehicleUnlockedSaveGameData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asset_path_;
  bool just_unlocked_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakSave_2eproto;
};
// -------------------------------------------------------------------

class OakCARMenuVehicleConfigSaveData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.OakCARMenuVehicleConfigSaveData) */ {
 public:
  inline OakCARMenuVehicleConfigSaveData() : OakCARMenuVehicleConfigSaveData(nullptr) {};
  virtual ~OakCARMenuVehicleConfigSaveData();

  OakCARMenuVehicleConfigSaveData(const OakCARMenuVehicleConfigSaveData& from);
  OakCARMenuVehicleConfigSaveData(OakCARMenuVehicleConfigSaveData&& from) noexcept
    : OakCARMenuVehicleConfigSaveData() {
    *this = ::std::move(from);
  }

  inline OakCARMenuVehicleConfigSaveData& operator=(const OakCARMenuVehicleConfigSaveData& from) {
    CopyFrom(from);
    return *this;
  }
  inline OakCARMenuVehicleConfigSaveData& operator=(OakCARMenuVehicleConfigSaveData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OakCARMenuVehicleConfigSaveData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OakCARMenuVehicleConfigSaveData* internal_default_instance() {
    return reinterpret_cast<const OakCARMenuVehicleConfigSaveData*>(
               &_OakCARMenuVehicleConfigSaveData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(OakCARMenuVehicleConfigSaveData& a, OakCARMenuVehicleConfigSaveData& b) {
    a.Swap(&b);
  }
  inline void Swap(OakCARMenuVehicleConfigSaveData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OakCARMenuVehicleConfigSaveData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OakCARMenuVehicleConfigSaveData* New() const final {
    return CreateMaybeMessage<OakCARMenuVehicleConfigSaveData>(nullptr);
  }

  OakCARMenuVehicleConfigSaveData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OakCARMenuVehicleConfigSaveData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OakCARMenuVehicleConfigSaveData& from);
  void MergeFrom(const OakCARMenuVehicleConfigSaveData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OakCARMenuVehicleConfigSaveData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.OakCARMenuVehicleConfigSaveData";
  }
  protected:
  explicit OakCARMenuVehicleConfigSaveData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakSave_2eproto);
    return ::descriptor_table_OakSave_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoadoutSaveNameFieldNumber = 1,
    kBodyAssetPathFieldNumber = 2,
    kWheelAssetPathFieldNumber = 3,
    kArmorAssetPathFieldNumber = 4,
    kCoreModAssetPathFieldNumber = 5,
    kGunnerWeaponAssetPathFieldNumber = 6,
    kDriverWeaponAssetPathFieldNumber = 7,
    kOrnamentAssetPathFieldNumber = 8,
    kMaterialDecalAssetPathFieldNumber = 9,
    kMaterialAssetPathFieldNumber = 10,
    kColorIndex1FieldNumber = 11,
    kColorIndex2FieldNumber = 12,
    kColorIndex3FieldNumber = 13,
  };
  // string loadout_save_name = 1;
  void clear_loadout_save_name();
  const std::string& loadout_save_name() const;
  void set_loadout_save_name(const std::string& value);
  void set_loadout_save_name(std::string&& value);
  void set_loadout_save_name(const char* value);
  void set_loadout_save_name(const char* value, size_t size);
  std::string* mutable_loadout_save_name();
  std::string* release_loadout_save_name();
  void set_allocated_loadout_save_name(std::string* loadout_save_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_loadout_save_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_loadout_save_name(
      std::string* loadout_save_name);
  private:
  const std::string& _internal_loadout_save_name() const;
  void _internal_set_loadout_save_name(const std::string& value);
  std::string* _internal_mutable_loadout_save_name();
  public:

  // string body_asset_path = 2;
  void clear_body_asset_path();
  const std::string& body_asset_path() const;
  void set_body_asset_path(const std::string& value);
  void set_body_asset_path(std::string&& value);
  void set_body_asset_path(const char* value);
  void set_body_asset_path(const char* value, size_t size);
  std::string* mutable_body_asset_path();
  std::string* release_body_asset_path();
  void set_allocated_body_asset_path(std::string* body_asset_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_body_asset_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_body_asset_path(
      std::string* body_asset_path);
  private:
  const std::string& _internal_body_asset_path() const;
  void _internal_set_body_asset_path(const std::string& value);
  std::string* _internal_mutable_body_asset_path();
  public:

  // string wheel_asset_path = 3;
  void clear_wheel_asset_path();
  const std::string& wheel_asset_path() const;
  void set_wheel_asset_path(const std::string& value);
  void set_wheel_asset_path(std::string&& value);
  void set_wheel_asset_path(const char* value);
  void set_wheel_asset_path(const char* value, size_t size);
  std::string* mutable_wheel_asset_path();
  std::string* release_wheel_asset_path();
  void set_allocated_wheel_asset_path(std::string* wheel_asset_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_wheel_asset_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_wheel_asset_path(
      std::string* wheel_asset_path);
  private:
  const std::string& _internal_wheel_asset_path() const;
  void _internal_set_wheel_asset_path(const std::string& value);
  std::string* _internal_mutable_wheel_asset_path();
  public:

  // string armor_asset_path = 4;
  void clear_armor_asset_path();
  const std::string& armor_asset_path() const;
  void set_armor_asset_path(const std::string& value);
  void set_armor_asset_path(std::string&& value);
  void set_armor_asset_path(const char* value);
  void set_armor_asset_path(const char* value, size_t size);
  std::string* mutable_armor_asset_path();
  std::string* release_armor_asset_path();
  void set_allocated_armor_asset_path(std::string* armor_asset_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_armor_asset_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_armor_asset_path(
      std::string* armor_asset_path);
  private:
  const std::string& _internal_armor_asset_path() const;
  void _internal_set_armor_asset_path(const std::string& value);
  std::string* _internal_mutable_armor_asset_path();
  public:

  // string core_mod_asset_path = 5;
  void clear_core_mod_asset_path();
  const std::string& core_mod_asset_path() const;
  void set_core_mod_asset_path(const std::string& value);
  void set_core_mod_asset_path(std::string&& value);
  void set_core_mod_asset_path(const char* value);
  void set_core_mod_asset_path(const char* value, size_t size);
  std::string* mutable_core_mod_asset_path();
  std::string* release_core_mod_asset_path();
  void set_allocated_core_mod_asset_path(std::string* core_mod_asset_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_core_mod_asset_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_core_mod_asset_path(
      std::string* core_mod_asset_path);
  private:
  const std::string& _internal_core_mod_asset_path() const;
  void _internal_set_core_mod_asset_path(const std::string& value);
  std::string* _internal_mutable_core_mod_asset_path();
  public:

  // string gunner_weapon_asset_path = 6;
  void clear_gunner_weapon_asset_path();
  const std::string& gunner_weapon_asset_path() const;
  void set_gunner_weapon_asset_path(const std::string& value);
  void set_gunner_weapon_asset_path(std::string&& value);
  void set_gunner_weapon_asset_path(const char* value);
  void set_gunner_weapon_asset_path(const char* value, size_t size);
  std::string* mutable_gunner_weapon_asset_path();
  std::string* release_gunner_weapon_asset_path();
  void set_allocated_gunner_weapon_asset_path(std::string* gunner_weapon_asset_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_gunner_weapon_asset_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_gunner_weapon_asset_path(
      std::string* gunner_weapon_asset_path);
  private:
  const std::string& _internal_gunner_weapon_asset_path() const;
  void _internal_set_gunner_weapon_asset_path(const std::string& value);
  std::string* _internal_mutable_gunner_weapon_asset_path();
  public:

  // string driver_weapon_asset_path = 7;
  void clear_driver_weapon_asset_path();
  const std::string& driver_weapon_asset_path() const;
  void set_driver_weapon_asset_path(const std::string& value);
  void set_driver_weapon_asset_path(std::string&& value);
  void set_driver_weapon_asset_path(const char* value);
  void set_driver_weapon_asset_path(const char* value, size_t size);
  std::string* mutable_driver_weapon_asset_path();
  std::string* release_driver_weapon_asset_path();
  void set_allocated_driver_weapon_asset_path(std::string* driver_weapon_asset_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_driver_weapon_asset_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_driver_weapon_asset_path(
      std::string* driver_weapon_asset_path);
  private:
  const std::string& _internal_driver_weapon_asset_path() const;
  void _internal_set_driver_weapon_asset_path(const std::string& value);
  std::string* _internal_mutable_driver_weapon_asset_path();
  public:

  // string ornament_asset_path = 8;
  void clear_ornament_asset_path();
  const std::string& ornament_asset_path() const;
  void set_ornament_asset_path(const std::string& value);
  void set_ornament_asset_path(std::string&& value);
  void set_ornament_asset_path(const char* value);
  void set_ornament_asset_path(const char* value, size_t size);
  std::string* mutable_ornament_asset_path();
  std::string* release_ornament_asset_path();
  void set_allocated_ornament_asset_path(std::string* ornament_asset_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ornament_asset_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ornament_asset_path(
      std::string* ornament_asset_path);
  private:
  const std::string& _internal_ornament_asset_path() const;
  void _internal_set_ornament_asset_path(const std::string& value);
  std::string* _internal_mutable_ornament_asset_path();
  public:

  // string material_decal_asset_path = 9;
  void clear_material_decal_asset_path();
  const std::string& material_decal_asset_path() const;
  void set_material_decal_asset_path(const std::string& value);
  void set_material_decal_asset_path(std::string&& value);
  void set_material_decal_asset_path(const char* value);
  void set_material_decal_asset_path(const char* value, size_t size);
  std::string* mutable_material_decal_asset_path();
  std::string* release_material_decal_asset_path();
  void set_allocated_material_decal_asset_path(std::string* material_decal_asset_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_material_decal_asset_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_material_decal_asset_path(
      std::string* material_decal_asset_path);
  private:
  const std::string& _internal_material_decal_asset_path() const;
  void _internal_set_material_decal_asset_path(const std::string& value);
  std::string* _internal_mutable_material_decal_asset_path();
  public:

  // string material_asset_path = 10;
  void clear_material_asset_path();
  const std::string& material_asset_path() const;
  void set_material_asset_path(const std::string& value);
  void set_material_asset_path(std::string&& value);
  void set_material_asset_path(const char* value);
  void set_material_asset_path(const char* value, size_t size);
  std::string* mutable_material_asset_path();
  std::string* release_material_asset_path();
  void set_allocated_material_asset_path(std::string* material_asset_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_material_asset_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_material_asset_path(
      std::string* material_asset_path);
  private:
  const std::string& _internal_material_asset_path() const;
  void _internal_set_material_asset_path(const std::string& value);
  std::string* _internal_mutable_material_asset_path();
  public:

  // int32 color_index_1 = 11;
  void clear_color_index_1();
  ::PROTOBUF_NAMESPACE_ID::int32 color_index_1() const;
  void set_color_index_1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_color_index_1() const;
  void _internal_set_color_index_1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 color_index_2 = 12;
  void clear_color_index_2();
  ::PROTOBUF_NAMESPACE_ID::int32 color_index_2() const;
  void set_color_index_2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_color_index_2() const;
  void _internal_set_color_index_2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 color_index_3 = 13;
  void clear_color_index_3();
  ::PROTOBUF_NAMESPACE_ID::int32 color_index_3() const;
  void set_color_index_3(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_color_index_3() const;
  void _internal_set_color_index_3(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:OakSave.OakCARMenuVehicleConfigSaveData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr loadout_save_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_asset_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr wheel_asset_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr armor_asset_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr core_mod_asset_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gunner_weapon_asset_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr driver_weapon_asset_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ornament_asset_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr material_decal_asset_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr material_asset_path_;
  ::PROTOBUF_NAMESPACE_ID::int32 color_index_1_;
  ::PROTOBUF_NAMESPACE_ID::int32 color_index_2_;
  ::PROTOBUF_NAMESPACE_ID::int32 color_index_3_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakSave_2eproto;
};
// -------------------------------------------------------------------

class CustomPlayerColorSaveGameData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.CustomPlayerColorSaveGameData) */ {
 public:
  inline CustomPlayerColorSaveGameData() : CustomPlayerColorSaveGameData(nullptr) {};
  virtual ~CustomPlayerColorSaveGameData();

  CustomPlayerColorSaveGameData(const CustomPlayerColorSaveGameData& from);
  CustomPlayerColorSaveGameData(CustomPlayerColorSaveGameData&& from) noexcept
    : CustomPlayerColorSaveGameData() {
    *this = ::std::move(from);
  }

  inline CustomPlayerColorSaveGameData& operator=(const CustomPlayerColorSaveGameData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomPlayerColorSaveGameData& operator=(CustomPlayerColorSaveGameData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CustomPlayerColorSaveGameData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CustomPlayerColorSaveGameData* internal_default_instance() {
    return reinterpret_cast<const CustomPlayerColorSaveGameData*>(
               &_CustomPlayerColorSaveGameData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CustomPlayerColorSaveGameData& a, CustomPlayerColorSaveGameData& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomPlayerColorSaveGameData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomPlayerColorSaveGameData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CustomPlayerColorSaveGameData* New() const final {
    return CreateMaybeMessage<CustomPlayerColorSaveGameData>(nullptr);
  }

  CustomPlayerColorSaveGameData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CustomPlayerColorSaveGameData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CustomPlayerColorSaveGameData& from);
  void MergeFrom(const CustomPlayerColorSaveGameData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomPlayerColorSaveGameData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.CustomPlayerColorSaveGameData";
  }
  protected:
  explicit CustomPlayerColorSaveGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakSave_2eproto);
    return ::descriptor_table_OakSave_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColorParameterFieldNumber = 1,
    kAppliedColorFieldNumber = 2,
    kSplitColorFieldNumber = 3,
    kUseDefaultColorFieldNumber = 4,
    kUseDefaultSplitColorFieldNumber = 5,
  };
  // string color_parameter = 1;
  void clear_color_parameter();
  const std::string& color_parameter() const;
  void set_color_parameter(const std::string& value);
  void set_color_parameter(std::string&& value);
  void set_color_parameter(const char* value);
  void set_color_parameter(const char* value, size_t size);
  std::string* mutable_color_parameter();
  std::string* release_color_parameter();
  void set_allocated_color_parameter(std::string* color_parameter);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_color_parameter();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_color_parameter(
      std::string* color_parameter);
  private:
  const std::string& _internal_color_parameter() const;
  void _internal_set_color_parameter(const std::string& value);
  std::string* _internal_mutable_color_parameter();
  public:

  // .OakSave.Vec3 applied_color = 2;
  bool has_applied_color() const;
  private:
  bool _internal_has_applied_color() const;
  public:
  void clear_applied_color();
  const ::OakSave::Vec3& applied_color() const;
  ::OakSave::Vec3* release_applied_color();
  ::OakSave::Vec3* mutable_applied_color();
  void set_allocated_applied_color(::OakSave::Vec3* applied_color);
  private:
  const ::OakSave::Vec3& _internal_applied_color() const;
  ::OakSave::Vec3* _internal_mutable_applied_color();
  public:
  void unsafe_arena_set_allocated_applied_color(
      ::OakSave::Vec3* applied_color);
  ::OakSave::Vec3* unsafe_arena_release_applied_color();

  // .OakSave.Vec3 split_color = 3;
  bool has_split_color() const;
  private:
  bool _internal_has_split_color() const;
  public:
  void clear_split_color();
  const ::OakSave::Vec3& split_color() const;
  ::OakSave::Vec3* release_split_color();
  ::OakSave::Vec3* mutable_split_color();
  void set_allocated_split_color(::OakSave::Vec3* split_color);
  private:
  const ::OakSave::Vec3& _internal_split_color() const;
  ::OakSave::Vec3* _internal_mutable_split_color();
  public:
  void unsafe_arena_set_allocated_split_color(
      ::OakSave::Vec3* split_color);
  ::OakSave::Vec3* unsafe_arena_release_split_color();

  // bool use_default_color = 4;
  void clear_use_default_color();
  bool use_default_color() const;
  void set_use_default_color(bool value);
  private:
  bool _internal_use_default_color() const;
  void _internal_set_use_default_color(bool value);
  public:

  // bool use_default_split_color = 5;
  void clear_use_default_split_color();
  bool use_default_split_color() const;
  void set_use_default_split_color(bool value);
  private:
  bool _internal_use_default_split_color() const;
  void _internal_set_use_default_split_color(bool value);
  public:

  // @@protoc_insertion_point(class_scope:OakSave.CustomPlayerColorSaveGameData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr color_parameter_;
  ::OakSave::Vec3* applied_color_;
  ::OakSave::Vec3* split_color_;
  bool use_default_color_;
  bool use_default_split_color_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakSave_2eproto;
};
// -------------------------------------------------------------------

class GuardianRankSaveGameData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.GuardianRankSaveGameData) */ {
 public:
  inline GuardianRankSaveGameData() : GuardianRankSaveGameData(nullptr) {};
  virtual ~GuardianRankSaveGameData();

  GuardianRankSaveGameData(const GuardianRankSaveGameData& from);
  GuardianRankSaveGameData(GuardianRankSaveGameData&& from) noexcept
    : GuardianRankSaveGameData() {
    *this = ::std::move(from);
  }

  inline GuardianRankSaveGameData& operator=(const GuardianRankSaveGameData& from) {
    CopyFrom(from);
    return *this;
  }
  inline GuardianRankSaveGameData& operator=(GuardianRankSaveGameData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GuardianRankSaveGameData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GuardianRankSaveGameData* internal_default_instance() {
    return reinterpret_cast<const GuardianRankSaveGameData*>(
               &_GuardianRankSaveGameData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(GuardianRankSaveGameData& a, GuardianRankSaveGameData& b) {
    a.Swap(&b);
  }
  inline void Swap(GuardianRankSaveGameData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GuardianRankSaveGameData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GuardianRankSaveGameData* New() const final {
    return CreateMaybeMessage<GuardianRankSaveGameData>(nullptr);
  }

  GuardianRankSaveGameData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GuardianRankSaveGameData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GuardianRankSaveGameData& from);
  void MergeFrom(const GuardianRankSaveGameData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GuardianRankSaveGameData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.GuardianRankSaveGameData";
  }
  protected:
  explicit GuardianRankSaveGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakSave_2eproto);
    return ::descriptor_table_OakSave_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuardianRankFieldNumber = 1,
    kGuardianExperienceFieldNumber = 2,
  };
  // int32 guardian_rank = 1;
  void clear_guardian_rank();
  ::PROTOBUF_NAMESPACE_ID::int32 guardian_rank() const;
  void set_guardian_rank(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_guardian_rank() const;
  void _internal_set_guardian_rank(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 guardian_experience = 2;
  void clear_guardian_experience();
  ::PROTOBUF_NAMESPACE_ID::int32 guardian_experience() const;
  void set_guardian_experience(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_guardian_experience() const;
  void _internal_set_guardian_experience(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:OakSave.GuardianRankSaveGameData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 guardian_rank_;
  ::PROTOBUF_NAMESPACE_ID::int32 guardian_experience_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakSave_2eproto;
};
// -------------------------------------------------------------------

class GuardianRankRewardCharacterSaveGameData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.GuardianRankRewardCharacterSaveGameData) */ {
 public:
  inline GuardianRankRewardCharacterSaveGameData() : GuardianRankRewardCharacterSaveGameData(nullptr) {};
  virtual ~GuardianRankRewardCharacterSaveGameData();

  GuardianRankRewardCharacterSaveGameData(const GuardianRankRewardCharacterSaveGameData& from);
  GuardianRankRewardCharacterSaveGameData(GuardianRankRewardCharacterSaveGameData&& from) noexcept
    : GuardianRankRewardCharacterSaveGameData() {
    *this = ::std::move(from);
  }

  inline GuardianRankRewardCharacterSaveGameData& operator=(const GuardianRankRewardCharacterSaveGameData& from) {
    CopyFrom(from);
    return *this;
  }
  inline GuardianRankRewardCharacterSaveGameData& operator=(GuardianRankRewardCharacterSaveGameData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GuardianRankRewardCharacterSaveGameData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GuardianRankRewardCharacterSaveGameData* internal_default_instance() {
    return reinterpret_cast<const GuardianRankRewardCharacterSaveGameData*>(
               &_GuardianRankRewardCharacterSaveGameData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(GuardianRankRewardCharacterSaveGameData& a, GuardianRankRewardCharacterSaveGameData& b) {
    a.Swap(&b);
  }
  inline void Swap(GuardianRankRewardCharacterSaveGameData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GuardianRankRewardCharacterSaveGameData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GuardianRankRewardCharacterSaveGameData* New() const final {
    return CreateMaybeMessage<GuardianRankRewardCharacterSaveGameData>(nullptr);
  }

  GuardianRankRewardCharacterSaveGameData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GuardianRankRewardCharacterSaveGameData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GuardianRankRewardCharacterSaveGameData& from);
  void MergeFrom(const GuardianRankRewardCharacterSaveGameData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GuardianRankRewardCharacterSaveGameData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.GuardianRankRewardCharacterSaveGameData";
  }
  protected:
  explicit GuardianRankRewardCharacterSaveGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakSave_2eproto);
    return ::descriptor_table_OakSave_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRewardDataPathFieldNumber = 3,
    kNumTokensFieldNumber = 1,
    kIsEnabledFieldNumber = 2,
  };
  // string reward_data_path = 3;
  void clear_reward_data_path();
  const std::string& reward_data_path() const;
  void set_reward_data_path(const std::string& value);
  void set_reward_data_path(std::string&& value);
  void set_reward_data_path(const char* value);
  void set_reward_data_path(const char* value, size_t size);
  std::string* mutable_reward_data_path();
  std::string* release_reward_data_path();
  void set_allocated_reward_data_path(std::string* reward_data_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_reward_data_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_reward_data_path(
      std::string* reward_data_path);
  private:
  const std::string& _internal_reward_data_path() const;
  void _internal_set_reward_data_path(const std::string& value);
  std::string* _internal_mutable_reward_data_path();
  public:

  // int32 num_tokens = 1;
  void clear_num_tokens();
  ::PROTOBUF_NAMESPACE_ID::int32 num_tokens() const;
  void set_num_tokens(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_tokens() const;
  void _internal_set_num_tokens(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_enabled = 2;
  void clear_is_enabled();
  bool is_enabled() const;
  void set_is_enabled(bool value);
  private:
  bool _internal_is_enabled() const;
  void _internal_set_is_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:OakSave.GuardianRankRewardCharacterSaveGameData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reward_data_path_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_tokens_;
  bool is_enabled_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakSave_2eproto;
};
// -------------------------------------------------------------------

class GuardianRankPerkCharacterSaveGameData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.GuardianRankPerkCharacterSaveGameData) */ {
 public:
  inline GuardianRankPerkCharacterSaveGameData() : GuardianRankPerkCharacterSaveGameData(nullptr) {};
  virtual ~GuardianRankPerkCharacterSaveGameData();

  GuardianRankPerkCharacterSaveGameData(const GuardianRankPerkCharacterSaveGameData& from);
  GuardianRankPerkCharacterSaveGameData(GuardianRankPerkCharacterSaveGameData&& from) noexcept
    : GuardianRankPerkCharacterSaveGameData() {
    *this = ::std::move(from);
  }

  inline GuardianRankPerkCharacterSaveGameData& operator=(const GuardianRankPerkCharacterSaveGameData& from) {
    CopyFrom(from);
    return *this;
  }
  inline GuardianRankPerkCharacterSaveGameData& operator=(GuardianRankPerkCharacterSaveGameData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GuardianRankPerkCharacterSaveGameData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GuardianRankPerkCharacterSaveGameData* internal_default_instance() {
    return reinterpret_cast<const GuardianRankPerkCharacterSaveGameData*>(
               &_GuardianRankPerkCharacterSaveGameData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(GuardianRankPerkCharacterSaveGameData& a, GuardianRankPerkCharacterSaveGameData& b) {
    a.Swap(&b);
  }
  inline void Swap(GuardianRankPerkCharacterSaveGameData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GuardianRankPerkCharacterSaveGameData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GuardianRankPerkCharacterSaveGameData* New() const final {
    return CreateMaybeMessage<GuardianRankPerkCharacterSaveGameData>(nullptr);
  }

  GuardianRankPerkCharacterSaveGameData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GuardianRankPerkCharacterSaveGameData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GuardianRankPerkCharacterSaveGameData& from);
  void MergeFrom(const GuardianRankPerkCharacterSaveGameData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GuardianRankPerkCharacterSaveGameData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.GuardianRankPerkCharacterSaveGameData";
  }
  protected:
  explicit GuardianRankPerkCharacterSaveGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakSave_2eproto);
    return ::descriptor_table_OakSave_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPerkDataPathFieldNumber = 2,
    kIsEnabledFieldNumber = 1,
  };
  // string perk_data_path = 2;
  void clear_perk_data_path();
  const std::string& perk_data_path() const;
  void set_perk_data_path(const std::string& value);
  void set_perk_data_path(std::string&& value);
  void set_perk_data_path(const char* value);
  void set_perk_data_path(const char* value, size_t size);
  std::string* mutable_perk_data_path();
  std::string* release_perk_data_path();
  void set_allocated_perk_data_path(std::string* perk_data_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_perk_data_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_perk_data_path(
      std::string* perk_data_path);
  private:
  const std::string& _internal_perk_data_path() const;
  void _internal_set_perk_data_path(const std::string& value);
  std::string* _internal_mutable_perk_data_path();
  public:

  // bool is_enabled = 1;
  void clear_is_enabled();
  bool is_enabled() const;
  void set_is_enabled(bool value);
  private:
  bool _internal_is_enabled() const;
  void _internal_set_is_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:OakSave.GuardianRankPerkCharacterSaveGameData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr perk_data_path_;
  bool is_enabled_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakSave_2eproto;
};
// -------------------------------------------------------------------

class GuardianRankCharacterSaveGameData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.GuardianRankCharacterSaveGameData) */ {
 public:
  inline GuardianRankCharacterSaveGameData() : GuardianRankCharacterSaveGameData(nullptr) {};
  virtual ~GuardianRankCharacterSaveGameData();

  GuardianRankCharacterSaveGameData(const GuardianRankCharacterSaveGameData& from);
  GuardianRankCharacterSaveGameData(GuardianRankCharacterSaveGameData&& from) noexcept
    : GuardianRankCharacterSaveGameData() {
    *this = ::std::move(from);
  }

  inline GuardianRankCharacterSaveGameData& operator=(const GuardianRankCharacterSaveGameData& from) {
    CopyFrom(from);
    return *this;
  }
  inline GuardianRankCharacterSaveGameData& operator=(GuardianRankCharacterSaveGameData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GuardianRankCharacterSaveGameData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GuardianRankCharacterSaveGameData* internal_default_instance() {
    return reinterpret_cast<const GuardianRankCharacterSaveGameData*>(
               &_GuardianRankCharacterSaveGameData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(GuardianRankCharacterSaveGameData& a, GuardianRankCharacterSaveGameData& b) {
    a.Swap(&b);
  }
  inline void Swap(GuardianRankCharacterSaveGameData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GuardianRankCharacterSaveGameData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GuardianRankCharacterSaveGameData* New() const final {
    return CreateMaybeMessage<GuardianRankCharacterSaveGameData>(nullptr);
  }

  GuardianRankCharacterSaveGameData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GuardianRankCharacterSaveGameData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GuardianRankCharacterSaveGameData& from);
  void MergeFrom(const GuardianRankCharacterSaveGameData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GuardianRankCharacterSaveGameData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.GuardianRankCharacterSaveGameData";
  }
  protected:
  explicit GuardianRankCharacterSaveGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakSave_2eproto);
    return ::descriptor_table_OakSave_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRankRewardsFieldNumber = 4,
    kRankPerksFieldNumber = 5,
    kGuardianAvailableTokensFieldNumber = 1,
    kGuardianRankFieldNumber = 2,
    kGuardianExperienceFieldNumber = 3,
    kGuardianRewardRandomSeedFieldNumber = 6,
    kNewGuardianExperienceFieldNumber = 7,
    kIsRankSystemEnabledFieldNumber = 8,
  };
  // repeated .OakSave.GuardianRankRewardCharacterSaveGameData rank_rewards = 4;
  int rank_rewards_size() const;
  private:
  int _internal_rank_rewards_size() const;
  public:
  void clear_rank_rewards();
  ::OakSave::GuardianRankRewardCharacterSaveGameData* mutable_rank_rewards(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::GuardianRankRewardCharacterSaveGameData >*
      mutable_rank_rewards();
  private:
  const ::OakSave::GuardianRankRewardCharacterSaveGameData& _internal_rank_rewards(int index) const;
  ::OakSave::GuardianRankRewardCharacterSaveGameData* _internal_add_rank_rewards();
  public:
  const ::OakSave::GuardianRankRewardCharacterSaveGameData& rank_rewards(int index) const;
  ::OakSave::GuardianRankRewardCharacterSaveGameData* add_rank_rewards();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::GuardianRankRewardCharacterSaveGameData >&
      rank_rewards() const;

  // repeated .OakSave.GuardianRankPerkCharacterSaveGameData rank_perks = 5;
  int rank_perks_size() const;
  private:
  int _internal_rank_perks_size() const;
  public:
  void clear_rank_perks();
  ::OakSave::GuardianRankPerkCharacterSaveGameData* mutable_rank_perks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::GuardianRankPerkCharacterSaveGameData >*
      mutable_rank_perks();
  private:
  const ::OakSave::GuardianRankPerkCharacterSaveGameData& _internal_rank_perks(int index) const;
  ::OakSave::GuardianRankPerkCharacterSaveGameData* _internal_add_rank_perks();
  public:
  const ::OakSave::GuardianRankPerkCharacterSaveGameData& rank_perks(int index) const;
  ::OakSave::GuardianRankPerkCharacterSaveGameData* add_rank_perks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::GuardianRankPerkCharacterSaveGameData >&
      rank_perks() const;

  // int32 guardian_available_tokens = 1;
  void clear_guardian_available_tokens();
  ::PROTOBUF_NAMESPACE_ID::int32 guardian_available_tokens() const;
  void set_guardian_available_tokens(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_guardian_available_tokens() const;
  void _internal_set_guardian_available_tokens(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 guardian_rank = 2;
  void clear_guardian_rank();
  ::PROTOBUF_NAMESPACE_ID::int32 guardian_rank() const;
  void set_guardian_rank(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_guardian_rank() const;
  void _internal_set_guardian_rank(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 guardian_experience = 3;
  void clear_guardian_experience();
  ::PROTOBUF_NAMESPACE_ID::int32 guardian_experience() const;
  void set_guardian_experience(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_guardian_experience() const;
  void _internal_set_guardian_experience(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 guardian_reward_random_seed = 6;
  void clear_guardian_reward_random_seed();
  ::PROTOBUF_NAMESPACE_ID::int32 guardian_reward_random_seed() const;
  void set_guardian_reward_random_seed(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_guardian_reward_random_seed() const;
  void _internal_set_guardian_reward_random_seed(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 new_guardian_experience = 7;
  void clear_new_guardian_experience();
  ::PROTOBUF_NAMESPACE_ID::int64 new_guardian_experience() const;
  void set_new_guardian_experience(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_new_guardian_experience() const;
  void _internal_set_new_guardian_experience(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool is_rank_system_enabled = 8;
  void clear_is_rank_system_enabled();
  bool is_rank_system_enabled() const;
  void set_is_rank_system_enabled(bool value);
  private:
  bool _internal_is_rank_system_enabled() const;
  void _internal_set_is_rank_system_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:OakSave.GuardianRankCharacterSaveGameData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::GuardianRankRewardCharacterSaveGameData > rank_rewards_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::GuardianRankPerkCharacterSaveGameData > rank_perks_;
  ::PROTOBUF_NAMESPACE_ID::int32 guardian_available_tokens_;
  ::PROTOBUF_NAMESPACE_ID::int32 guardian_rank_;
  ::PROTOBUF_NAMESPACE_ID::int32 guardian_experience_;
  ::PROTOBUF_NAMESPACE_ID::int32 guardian_reward_random_seed_;
  ::PROTOBUF_NAMESPACE_ID::int64 new_guardian_experience_;
  bool is_rank_system_enabled_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakSave_2eproto;
};
// -------------------------------------------------------------------

class CrewQuartersDecorationSaveData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.CrewQuartersDecorationSaveData) */ {
 public:
  inline CrewQuartersDecorationSaveData() : CrewQuartersDecorationSaveData(nullptr) {};
  virtual ~CrewQuartersDecorationSaveData();

  CrewQuartersDecorationSaveData(const CrewQuartersDecorationSaveData& from);
  CrewQuartersDecorationSaveData(CrewQuartersDecorationSaveData&& from) noexcept
    : CrewQuartersDecorationSaveData() {
    *this = ::std::move(from);
  }

  inline CrewQuartersDecorationSaveData& operator=(const CrewQuartersDecorationSaveData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CrewQuartersDecorationSaveData& operator=(CrewQuartersDecorationSaveData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CrewQuartersDecorationSaveData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CrewQuartersDecorationSaveData* internal_default_instance() {
    return reinterpret_cast<const CrewQuartersDecorationSaveData*>(
               &_CrewQuartersDecorationSaveData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(CrewQuartersDecorationSaveData& a, CrewQuartersDecorationSaveData& b) {
    a.Swap(&b);
  }
  inline void Swap(CrewQuartersDecorationSaveData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CrewQuartersDecorationSaveData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CrewQuartersDecorationSaveData* New() const final {
    return CreateMaybeMessage<CrewQuartersDecorationSaveData>(nullptr);
  }

  CrewQuartersDecorationSaveData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CrewQuartersDecorationSaveData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CrewQuartersDecorationSaveData& from);
  void MergeFrom(const CrewQuartersDecorationSaveData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CrewQuartersDecorationSaveData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.CrewQuartersDecorationSaveData";
  }
  protected:
  explicit CrewQuartersDecorationSaveData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakSave_2eproto);
    return ::descriptor_table_OakSave_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDecorationDataPathFieldNumber = 2,
    kDecorationIndexFieldNumber = 1,
  };
  // string decoration_data_path = 2;
  void clear_decoration_data_path();
  const std::string& decoration_data_path() const;
  void set_decoration_data_path(const std::string& value);
  void set_decoration_data_path(std::string&& value);
  void set_decoration_data_path(const char* value);
  void set_decoration_data_path(const char* value, size_t size);
  std::string* mutable_decoration_data_path();
  std::string* release_decoration_data_path();
  void set_allocated_decoration_data_path(std::string* decoration_data_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_decoration_data_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_decoration_data_path(
      std::string* decoration_data_path);
  private:
  const std::string& _internal_decoration_data_path() const;
  void _internal_set_decoration_data_path(const std::string& value);
  std::string* _internal_mutable_decoration_data_path();
  public:

  // int32 decoration_index = 1;
  void clear_decoration_index();
  ::PROTOBUF_NAMESPACE_ID::int32 decoration_index() const;
  void set_decoration_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_decoration_index() const;
  void _internal_set_decoration_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:OakSave.CrewQuartersDecorationSaveData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr decoration_data_path_;
  ::PROTOBUF_NAMESPACE_ID::int32 decoration_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakSave_2eproto;
};
// -------------------------------------------------------------------

class CrewQuartersSaveData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.CrewQuartersSaveData) */ {
 public:
  inline CrewQuartersSaveData() : CrewQuartersSaveData(nullptr) {};
  virtual ~CrewQuartersSaveData();

  CrewQuartersSaveData(const CrewQuartersSaveData& from);
  CrewQuartersSaveData(CrewQuartersSaveData&& from) noexcept
    : CrewQuartersSaveData() {
    *this = ::std::move(from);
  }

  inline CrewQuartersSaveData& operator=(const CrewQuartersSaveData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CrewQuartersSaveData& operator=(CrewQuartersSaveData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CrewQuartersSaveData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CrewQuartersSaveData* internal_default_instance() {
    return reinterpret_cast<const CrewQuartersSaveData*>(
               &_CrewQuartersSaveData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(CrewQuartersSaveData& a, CrewQuartersSaveData& b) {
    a.Swap(&b);
  }
  inline void Swap(CrewQuartersSaveData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CrewQuartersSaveData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CrewQuartersSaveData* New() const final {
    return CreateMaybeMessage<CrewQuartersSaveData>(nullptr);
  }

  CrewQuartersSaveData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CrewQuartersSaveData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CrewQuartersSaveData& from);
  void MergeFrom(const CrewQuartersSaveData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CrewQuartersSaveData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.CrewQuartersSaveData";
  }
  protected:
  explicit CrewQuartersSaveData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakSave_2eproto);
    return ::descriptor_table_OakSave_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDecorationsFieldNumber = 2,
    kRoomDataPathFieldNumber = 3,
    kPreferredRoomAssignmentFieldNumber = 1,
  };
  // repeated .OakSave.CrewQuartersDecorationSaveData decorations = 2;
  int decorations_size() const;
  private:
  int _internal_decorations_size() const;
  public:
  void clear_decorations();
  ::OakSave::CrewQuartersDecorationSaveData* mutable_decorations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::CrewQuartersDecorationSaveData >*
      mutable_decorations();
  private:
  const ::OakSave::CrewQuartersDecorationSaveData& _internal_decorations(int index) const;
  ::OakSave::CrewQuartersDecorationSaveData* _internal_add_decorations();
  public:
  const ::OakSave::CrewQuartersDecorationSaveData& decorations(int index) const;
  ::OakSave::CrewQuartersDecorationSaveData* add_decorations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::CrewQuartersDecorationSaveData >&
      decorations() const;

  // string room_data_path = 3;
  void clear_room_data_path();
  const std::string& room_data_path() const;
  void set_room_data_path(const std::string& value);
  void set_room_data_path(std::string&& value);
  void set_room_data_path(const char* value);
  void set_room_data_path(const char* value, size_t size);
  std::string* mutable_room_data_path();
  std::string* release_room_data_path();
  void set_allocated_room_data_path(std::string* room_data_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_room_data_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_room_data_path(
      std::string* room_data_path);
  private:
  const std::string& _internal_room_data_path() const;
  void _internal_set_room_data_path(const std::string& value);
  std::string* _internal_mutable_room_data_path();
  public:

  // int32 preferred_room_assignment = 1;
  void clear_preferred_room_assignment();
  ::PROTOBUF_NAMESPACE_ID::int32 preferred_room_assignment() const;
  void set_preferred_room_assignment(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_preferred_room_assignment() const;
  void _internal_set_preferred_room_assignment(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:OakSave.CrewQuartersSaveData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::CrewQuartersDecorationSaveData > decorations_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_data_path_;
  ::PROTOBUF_NAMESPACE_ID::int32 preferred_room_assignment_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakSave_2eproto;
};
// -------------------------------------------------------------------

class CrewQuartersGunRackItemSaveData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.CrewQuartersGunRackItemSaveData) */ {
 public:
  inline CrewQuartersGunRackItemSaveData() : CrewQuartersGunRackItemSaveData(nullptr) {};
  virtual ~CrewQuartersGunRackItemSaveData();

  CrewQuartersGunRackItemSaveData(const CrewQuartersGunRackItemSaveData& from);
  CrewQuartersGunRackItemSaveData(CrewQuartersGunRackItemSaveData&& from) noexcept
    : CrewQuartersGunRackItemSaveData() {
    *this = ::std::move(from);
  }

  inline CrewQuartersGunRackItemSaveData& operator=(const CrewQuartersGunRackItemSaveData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CrewQuartersGunRackItemSaveData& operator=(CrewQuartersGunRackItemSaveData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CrewQuartersGunRackItemSaveData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CrewQuartersGunRackItemSaveData* internal_default_instance() {
    return reinterpret_cast<const CrewQuartersGunRackItemSaveData*>(
               &_CrewQuartersGunRackItemSaveData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(CrewQuartersGunRackItemSaveData& a, CrewQuartersGunRackItemSaveData& b) {
    a.Swap(&b);
  }
  inline void Swap(CrewQuartersGunRackItemSaveData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CrewQuartersGunRackItemSaveData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CrewQuartersGunRackItemSaveData* New() const final {
    return CreateMaybeMessage<CrewQuartersGunRackItemSaveData>(nullptr);
  }

  CrewQuartersGunRackItemSaveData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CrewQuartersGunRackItemSaveData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CrewQuartersGunRackItemSaveData& from);
  void MergeFrom(const CrewQuartersGunRackItemSaveData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CrewQuartersGunRackItemSaveData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.CrewQuartersGunRackItemSaveData";
  }
  protected:
  explicit CrewQuartersGunRackItemSaveData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakSave_2eproto);
    return ::descriptor_table_OakSave_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncryptedSerialNumberFieldNumber = 1,
    kSlotAssetPathFieldNumber = 2,
    kDevelopmentSaveDataFieldNumber = 3,
  };
  // bytes encrypted_serial_number = 1;
  void clear_encrypted_serial_number();
  const std::string& encrypted_serial_number() const;
  void set_encrypted_serial_number(const std::string& value);
  void set_encrypted_serial_number(std::string&& value);
  void set_encrypted_serial_number(const char* value);
  void set_encrypted_serial_number(const void* value, size_t size);
  std::string* mutable_encrypted_serial_number();
  std::string* release_encrypted_serial_number();
  void set_allocated_encrypted_serial_number(std::string* encrypted_serial_number);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_encrypted_serial_number();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_encrypted_serial_number(
      std::string* encrypted_serial_number);
  private:
  const std::string& _internal_encrypted_serial_number() const;
  void _internal_set_encrypted_serial_number(const std::string& value);
  std::string* _internal_mutable_encrypted_serial_number();
  public:

  // string slot_asset_path = 2;
  void clear_slot_asset_path();
  const std::string& slot_asset_path() const;
  void set_slot_asset_path(const std::string& value);
  void set_slot_asset_path(std::string&& value);
  void set_slot_asset_path(const char* value);
  void set_slot_asset_path(const char* value, size_t size);
  std::string* mutable_slot_asset_path();
  std::string* release_slot_asset_path();
  void set_allocated_slot_asset_path(std::string* slot_asset_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_slot_asset_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_slot_asset_path(
      std::string* slot_asset_path);
  private:
  const std::string& _internal_slot_asset_path() const;
  void _internal_set_slot_asset_path(const std::string& value);
  std::string* _internal_mutable_slot_asset_path();
  public:

  // .OakSave.InventoryBalanceStateInitializationData development_save_data = 3;
  bool has_development_save_data() const;
  private:
  bool _internal_has_development_save_data() const;
  public:
  void clear_development_save_data();
  const ::OakSave::InventoryBalanceStateInitializationData& development_save_data() const;
  ::OakSave::InventoryBalanceStateInitializationData* release_development_save_data();
  ::OakSave::InventoryBalanceStateInitializationData* mutable_development_save_data();
  void set_allocated_development_save_data(::OakSave::InventoryBalanceStateInitializationData* development_save_data);
  private:
  const ::OakSave::InventoryBalanceStateInitializationData& _internal_development_save_data() const;
  ::OakSave::InventoryBalanceStateInitializationData* _internal_mutable_development_save_data();
  public:
  void unsafe_arena_set_allocated_development_save_data(
      ::OakSave::InventoryBalanceStateInitializationData* development_save_data);
  ::OakSave::InventoryBalanceStateInitializationData* unsafe_arena_release_development_save_data();

  // @@protoc_insertion_point(class_scope:OakSave.CrewQuartersGunRackItemSaveData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encrypted_serial_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr slot_asset_path_;
  ::OakSave::InventoryBalanceStateInitializationData* development_save_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakSave_2eproto;
};
// -------------------------------------------------------------------

class CrewQuartersGunRackSaveData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.CrewQuartersGunRackSaveData) */ {
 public:
  inline CrewQuartersGunRackSaveData() : CrewQuartersGunRackSaveData(nullptr) {};
  virtual ~CrewQuartersGunRackSaveData();

  CrewQuartersGunRackSaveData(const CrewQuartersGunRackSaveData& from);
  CrewQuartersGunRackSaveData(CrewQuartersGunRackSaveData&& from) noexcept
    : CrewQuartersGunRackSaveData() {
    *this = ::std::move(from);
  }

  inline CrewQuartersGunRackSaveData& operator=(const CrewQuartersGunRackSaveData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CrewQuartersGunRackSaveData& operator=(CrewQuartersGunRackSaveData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CrewQuartersGunRackSaveData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CrewQuartersGunRackSaveData* internal_default_instance() {
    return reinterpret_cast<const CrewQuartersGunRackSaveData*>(
               &_CrewQuartersGunRackSaveData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(CrewQuartersGunRackSaveData& a, CrewQuartersGunRackSaveData& b) {
    a.Swap(&b);
  }
  inline void Swap(CrewQuartersGunRackSaveData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CrewQuartersGunRackSaveData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CrewQuartersGunRackSaveData* New() const final {
    return CreateMaybeMessage<CrewQuartersGunRackSaveData>(nullptr);
  }

  CrewQuartersGunRackSaveData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CrewQuartersGunRackSaveData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CrewQuartersGunRackSaveData& from);
  void MergeFrom(const CrewQuartersGunRackSaveData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CrewQuartersGunRackSaveData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.CrewQuartersGunRackSaveData";
  }
  protected:
  explicit CrewQuartersGunRackSaveData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakSave_2eproto);
    return ::descriptor_table_OakSave_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRackSaveDataFieldNumber = 1,
  };
  // repeated .OakSave.CrewQuartersGunRackItemSaveData rack_save_data = 1;
  int rack_save_data_size() const;
  private:
  int _internal_rack_save_data_size() const;
  public:
  void clear_rack_save_data();
  ::OakSave::CrewQuartersGunRackItemSaveData* mutable_rack_save_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::CrewQuartersGunRackItemSaveData >*
      mutable_rack_save_data();
  private:
  const ::OakSave::CrewQuartersGunRackItemSaveData& _internal_rack_save_data(int index) const;
  ::OakSave::CrewQuartersGunRackItemSaveData* _internal_add_rack_save_data();
  public:
  const ::OakSave::CrewQuartersGunRackItemSaveData& rack_save_data(int index) const;
  ::OakSave::CrewQuartersGunRackItemSaveData* add_rack_save_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::CrewQuartersGunRackItemSaveData >&
      rack_save_data() const;

  // @@protoc_insertion_point(class_scope:OakSave.CrewQuartersGunRackSaveData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::CrewQuartersGunRackItemSaveData > rack_save_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakSave_2eproto;
};
// -------------------------------------------------------------------

class EchoLogSaveGameData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.EchoLogSaveGameData) */ {
 public:
  inline EchoLogSaveGameData() : EchoLogSaveGameData(nullptr) {};
  virtual ~EchoLogSaveGameData();

  EchoLogSaveGameData(const EchoLogSaveGameData& from);
  EchoLogSaveGameData(EchoLogSaveGameData&& from) noexcept
    : EchoLogSaveGameData() {
    *this = ::std::move(from);
  }

  inline EchoLogSaveGameData& operator=(const EchoLogSaveGameData& from) {
    CopyFrom(from);
    return *this;
  }
  inline EchoLogSaveGameData& operator=(EchoLogSaveGameData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EchoLogSaveGameData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EchoLogSaveGameData* internal_default_instance() {
    return reinterpret_cast<const EchoLogSaveGameData*>(
               &_EchoLogSaveGameData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(EchoLogSaveGameData& a, EchoLogSaveGameData& b) {
    a.Swap(&b);
  }
  inline void Swap(EchoLogSaveGameData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EchoLogSaveGameData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EchoLogSaveGameData* New() const final {
    return CreateMaybeMessage<EchoLogSaveGameData>(nullptr);
  }

  EchoLogSaveGameData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EchoLogSaveGameData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EchoLogSaveGameData& from);
  void MergeFrom(const EchoLogSaveGameData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EchoLogSaveGameData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.EchoLogSaveGameData";
  }
  protected:
  explicit EchoLogSaveGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakSave_2eproto);
    return ::descriptor_table_OakSave_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEchoLogPathFieldNumber = 2,
    kHasBeenSeenInLogFieldNumber = 1,
  };
  // string echo_log_path = 2;
  void clear_echo_log_path();
  const std::string& echo_log_path() const;
  void set_echo_log_path(const std::string& value);
  void set_echo_log_path(std::string&& value);
  void set_echo_log_path(const char* value);
  void set_echo_log_path(const char* value, size_t size);
  std::string* mutable_echo_log_path();
  std::string* release_echo_log_path();
  void set_allocated_echo_log_path(std::string* echo_log_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_echo_log_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_echo_log_path(
      std::string* echo_log_path);
  private:
  const std::string& _internal_echo_log_path() const;
  void _internal_set_echo_log_path(const std::string& value);
  std::string* _internal_mutable_echo_log_path();
  public:

  // bool has_been_seen_in_log = 1;
  void clear_has_been_seen_in_log();
  bool has_been_seen_in_log() const;
  void set_has_been_seen_in_log(bool value);
  private:
  bool _internal_has_been_seen_in_log() const;
  void _internal_set_has_been_seen_in_log(bool value);
  public:

  // @@protoc_insertion_point(class_scope:OakSave.EchoLogSaveGameData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr echo_log_path_;
  bool has_been_seen_in_log_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakSave_2eproto;
};
// -------------------------------------------------------------------

class MapIDData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.MapIDData) */ {
 public:
  inline MapIDData() : MapIDData(nullptr) {};
  virtual ~MapIDData();

  MapIDData(const MapIDData& from);
  MapIDData(MapIDData&& from) noexcept
    : MapIDData() {
    *this = ::std::move(from);
  }

  inline MapIDData& operator=(const MapIDData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapIDData& operator=(MapIDData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MapIDData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapIDData* internal_default_instance() {
    return reinterpret_cast<const MapIDData*>(
               &_MapIDData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(MapIDData& a, MapIDData& b) {
    a.Swap(&b);
  }
  inline void Swap(MapIDData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapIDData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MapIDData* New() const final {
    return CreateMaybeMessage<MapIDData>(nullptr);
  }

  MapIDData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MapIDData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MapIDData& from);
  void MergeFrom(const MapIDData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapIDData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.MapIDData";
  }
  protected:
  explicit MapIDData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakSave_2eproto);
    return ::descriptor_table_OakSave_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kZoneNameIdFieldNumber = 1,
    kMapNameIdFieldNumber = 2,
  };
  // uint32 zone_name_id = 1;
  void clear_zone_name_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 zone_name_id() const;
  void set_zone_name_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_zone_name_id() const;
  void _internal_set_zone_name_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 map_name_id = 2;
  void clear_map_name_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 map_name_id() const;
  void set_map_name_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_map_name_id() const;
  void _internal_set_map_name_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:OakSave.MapIDData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 zone_name_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 map_name_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakSave_2eproto;
};
// -------------------------------------------------------------------

class GameStateSaveData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.GameStateSaveData) */ {
 public:
  inline GameStateSaveData() : GameStateSaveData(nullptr) {};
  virtual ~GameStateSaveData();

  GameStateSaveData(const GameStateSaveData& from);
  GameStateSaveData(GameStateSaveData&& from) noexcept
    : GameStateSaveData() {
    *this = ::std::move(from);
  }

  inline GameStateSaveData& operator=(const GameStateSaveData& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameStateSaveData& operator=(GameStateSaveData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameStateSaveData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameStateSaveData* internal_default_instance() {
    return reinterpret_cast<const GameStateSaveData*>(
               &_GameStateSaveData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(GameStateSaveData& a, GameStateSaveData& b) {
    a.Swap(&b);
  }
  inline void Swap(GameStateSaveData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameStateSaveData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameStateSaveData* New() const final {
    return CreateMaybeMessage<GameStateSaveData>(nullptr);
  }

  GameStateSaveData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameStateSaveData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameStateSaveData& from);
  void MergeFrom(const GameStateSaveData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameStateSaveData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.GameStateSaveData";
  }
  protected:
  explicit GameStateSaveData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakSave_2eproto);
    return ::descriptor_table_OakSave_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLastTraveledMapIdFieldNumber = 1,
    kMayhemLevelFieldNumber = 2,
    kMayhemRandomSeedFieldNumber = 3,
  };
  // .OakSave.MapIDData last_traveled_map_id = 1;
  bool has_last_traveled_map_id() const;
  private:
  bool _internal_has_last_traveled_map_id() const;
  public:
  void clear_last_traveled_map_id();
  const ::OakSave::MapIDData& last_traveled_map_id() const;
  ::OakSave::MapIDData* release_last_traveled_map_id();
  ::OakSave::MapIDData* mutable_last_traveled_map_id();
  void set_allocated_last_traveled_map_id(::OakSave::MapIDData* last_traveled_map_id);
  private:
  const ::OakSave::MapIDData& _internal_last_traveled_map_id() const;
  ::OakSave::MapIDData* _internal_mutable_last_traveled_map_id();
  public:
  void unsafe_arena_set_allocated_last_traveled_map_id(
      ::OakSave::MapIDData* last_traveled_map_id);
  ::OakSave::MapIDData* unsafe_arena_release_last_traveled_map_id();

  // int32 mayhem_level = 2;
  void clear_mayhem_level();
  ::PROTOBUF_NAMESPACE_ID::int32 mayhem_level() const;
  void set_mayhem_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mayhem_level() const;
  void _internal_set_mayhem_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mayhem_random_seed = 3;
  void clear_mayhem_random_seed();
  ::PROTOBUF_NAMESPACE_ID::int32 mayhem_random_seed() const;
  void set_mayhem_random_seed(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mayhem_random_seed() const;
  void _internal_set_mayhem_random_seed(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:OakSave.GameStateSaveData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::OakSave::MapIDData* last_traveled_map_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 mayhem_level_;
  ::PROTOBUF_NAMESPACE_ID::int32 mayhem_random_seed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakSave_2eproto;
};
// -------------------------------------------------------------------

class ChallengeCategoryProgressSaveData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.ChallengeCategoryProgressSaveData) */ {
 public:
  inline ChallengeCategoryProgressSaveData() : ChallengeCategoryProgressSaveData(nullptr) {};
  virtual ~ChallengeCategoryProgressSaveData();

  ChallengeCategoryProgressSaveData(const ChallengeCategoryProgressSaveData& from);
  ChallengeCategoryProgressSaveData(ChallengeCategoryProgressSaveData&& from) noexcept
    : ChallengeCategoryProgressSaveData() {
    *this = ::std::move(from);
  }

  inline ChallengeCategoryProgressSaveData& operator=(const ChallengeCategoryProgressSaveData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChallengeCategoryProgressSaveData& operator=(ChallengeCategoryProgressSaveData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChallengeCategoryProgressSaveData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChallengeCategoryProgressSaveData* internal_default_instance() {
    return reinterpret_cast<const ChallengeCategoryProgressSaveData*>(
               &_ChallengeCategoryProgressSaveData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(ChallengeCategoryProgressSaveData& a, ChallengeCategoryProgressSaveData& b) {
    a.Swap(&b);
  }
  inline void Swap(ChallengeCategoryProgressSaveData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChallengeCategoryProgressSaveData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChallengeCategoryProgressSaveData* New() const final {
    return CreateMaybeMessage<ChallengeCategoryProgressSaveData>(nullptr);
  }

  ChallengeCategoryProgressSaveData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChallengeCategoryProgressSaveData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChallengeCategoryProgressSaveData& from);
  void MergeFrom(const ChallengeCategoryProgressSaveData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChallengeCategoryProgressSaveData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.ChallengeCategoryProgressSaveData";
  }
  protected:
  explicit ChallengeCategoryProgressSaveData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakSave_2eproto);
    return ::descriptor_table_OakSave_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCategoryProgressFieldNumber = 1,
  };
  // bytes category_progress = 1;
  void clear_category_progress();
  const std::string& category_progress() const;
  void set_category_progress(const std::string& value);
  void set_category_progress(std::string&& value);
  void set_category_progress(const char* value);
  void set_category_progress(const void* value, size_t size);
  std::string* mutable_category_progress();
  std::string* release_category_progress();
  void set_allocated_category_progress(std::string* category_progress);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_category_progress();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_category_progress(
      std::string* category_progress);
  private:
  const std::string& _internal_category_progress() const;
  void _internal_set_category_progress(const std::string& value);
  std::string* _internal_mutable_category_progress();
  public:

  // @@protoc_insertion_point(class_scope:OakSave.ChallengeCategoryProgressSaveData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr category_progress_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakSave_2eproto;
};
// -------------------------------------------------------------------

class OakPlayerCharacterAugmentSaveGameData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.OakPlayerCharacterAugmentSaveGameData) */ {
 public:
  inline OakPlayerCharacterAugmentSaveGameData() : OakPlayerCharacterAugmentSaveGameData(nullptr) {};
  virtual ~OakPlayerCharacterAugmentSaveGameData();

  OakPlayerCharacterAugmentSaveGameData(const OakPlayerCharacterAugmentSaveGameData& from);
  OakPlayerCharacterAugmentSaveGameData(OakPlayerCharacterAugmentSaveGameData&& from) noexcept
    : OakPlayerCharacterAugmentSaveGameData() {
    *this = ::std::move(from);
  }

  inline OakPlayerCharacterAugmentSaveGameData& operator=(const OakPlayerCharacterAugmentSaveGameData& from) {
    CopyFrom(from);
    return *this;
  }
  inline OakPlayerCharacterAugmentSaveGameData& operator=(OakPlayerCharacterAugmentSaveGameData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OakPlayerCharacterAugmentSaveGameData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OakPlayerCharacterAugmentSaveGameData* internal_default_instance() {
    return reinterpret_cast<const OakPlayerCharacterAugmentSaveGameData*>(
               &_OakPlayerCharacterAugmentSaveGameData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(OakPlayerCharacterAugmentSaveGameData& a, OakPlayerCharacterAugmentSaveGameData& b) {
    a.Swap(&b);
  }
  inline void Swap(OakPlayerCharacterAugmentSaveGameData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OakPlayerCharacterAugmentSaveGameData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OakPlayerCharacterAugmentSaveGameData* New() const final {
    return CreateMaybeMessage<OakPlayerCharacterAugmentSaveGameData>(nullptr);
  }

  OakPlayerCharacterAugmentSaveGameData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OakPlayerCharacterAugmentSaveGameData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OakPlayerCharacterAugmentSaveGameData& from);
  void MergeFrom(const OakPlayerCharacterAugmentSaveGameData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OakPlayerCharacterAugmentSaveGameData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.OakPlayerCharacterAugmentSaveGameData";
  }
  protected:
  explicit OakPlayerCharacterAugmentSaveGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakSave_2eproto);
    return ::descriptor_table_OakSave_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlotAssetPathFieldNumber = 1,
    kAugmentAssetPathFieldNumber = 2,
  };
  // string slot_asset_path = 1;
  void clear_slot_asset_path();
  const std::string& slot_asset_path() const;
  void set_slot_asset_path(const std::string& value);
  void set_slot_asset_path(std::string&& value);
  void set_slot_asset_path(const char* value);
  void set_slot_asset_path(const char* value, size_t size);
  std::string* mutable_slot_asset_path();
  std::string* release_slot_asset_path();
  void set_allocated_slot_asset_path(std::string* slot_asset_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_slot_asset_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_slot_asset_path(
      std::string* slot_asset_path);
  private:
  const std::string& _internal_slot_asset_path() const;
  void _internal_set_slot_asset_path(const std::string& value);
  std::string* _internal_mutable_slot_asset_path();
  public:

  // string augment_asset_path = 2;
  void clear_augment_asset_path();
  const std::string& augment_asset_path() const;
  void set_augment_asset_path(const std::string& value);
  void set_augment_asset_path(std::string&& value);
  void set_augment_asset_path(const char* value);
  void set_augment_asset_path(const char* value, size_t size);
  std::string* mutable_augment_asset_path();
  std::string* release_augment_asset_path();
  void set_allocated_augment_asset_path(std::string* augment_asset_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_augment_asset_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_augment_asset_path(
      std::string* augment_asset_path);
  private:
  const std::string& _internal_augment_asset_path() const;
  void _internal_set_augment_asset_path(const std::string& value);
  std::string* _internal_mutable_augment_asset_path();
  public:

  // @@protoc_insertion_point(class_scope:OakSave.OakPlayerCharacterAugmentSaveGameData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr slot_asset_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr augment_asset_path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakSave_2eproto;
};
// -------------------------------------------------------------------

class OakPlayerCharacterSlotSaveGameData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.OakPlayerCharacterSlotSaveGameData) */ {
 public:
  inline OakPlayerCharacterSlotSaveGameData() : OakPlayerCharacterSlotSaveGameData(nullptr) {};
  virtual ~OakPlayerCharacterSlotSaveGameData();

  OakPlayerCharacterSlotSaveGameData(const OakPlayerCharacterSlotSaveGameData& from);
  OakPlayerCharacterSlotSaveGameData(OakPlayerCharacterSlotSaveGameData&& from) noexcept
    : OakPlayerCharacterSlotSaveGameData() {
    *this = ::std::move(from);
  }

  inline OakPlayerCharacterSlotSaveGameData& operator=(const OakPlayerCharacterSlotSaveGameData& from) {
    CopyFrom(from);
    return *this;
  }
  inline OakPlayerCharacterSlotSaveGameData& operator=(OakPlayerCharacterSlotSaveGameData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OakPlayerCharacterSlotSaveGameData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OakPlayerCharacterSlotSaveGameData* internal_default_instance() {
    return reinterpret_cast<const OakPlayerCharacterSlotSaveGameData*>(
               &_OakPlayerCharacterSlotSaveGameData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(OakPlayerCharacterSlotSaveGameData& a, OakPlayerCharacterSlotSaveGameData& b) {
    a.Swap(&b);
  }
  inline void Swap(OakPlayerCharacterSlotSaveGameData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OakPlayerCharacterSlotSaveGameData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OakPlayerCharacterSlotSaveGameData* New() const final {
    return CreateMaybeMessage<OakPlayerCharacterSlotSaveGameData>(nullptr);
  }

  OakPlayerCharacterSlotSaveGameData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OakPlayerCharacterSlotSaveGameData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OakPlayerCharacterSlotSaveGameData& from);
  void MergeFrom(const OakPlayerCharacterSlotSaveGameData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OakPlayerCharacterSlotSaveGameData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.OakPlayerCharacterSlotSaveGameData";
  }
  protected:
  explicit OakPlayerCharacterSlotSaveGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakSave_2eproto);
    return ::descriptor_table_OakSave_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAugmentSlotListFieldNumber = 1,
  };
  // repeated .OakSave.OakPlayerCharacterAugmentSaveGameData augment_slot_list = 1;
  int augment_slot_list_size() const;
  private:
  int _internal_augment_slot_list_size() const;
  public:
  void clear_augment_slot_list();
  ::OakSave::OakPlayerCharacterAugmentSaveGameData* mutable_augment_slot_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::OakPlayerCharacterAugmentSaveGameData >*
      mutable_augment_slot_list();
  private:
  const ::OakSave::OakPlayerCharacterAugmentSaveGameData& _internal_augment_slot_list(int index) const;
  ::OakSave::OakPlayerCharacterAugmentSaveGameData* _internal_add_augment_slot_list();
  public:
  const ::OakSave::OakPlayerCharacterAugmentSaveGameData& augment_slot_list(int index) const;
  ::OakSave::OakPlayerCharacterAugmentSaveGameData* add_augment_slot_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::OakPlayerCharacterAugmentSaveGameData >&
      augment_slot_list() const;

  // @@protoc_insertion_point(class_scope:OakSave.OakPlayerCharacterSlotSaveGameData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::OakPlayerCharacterAugmentSaveGameData > augment_slot_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakSave_2eproto;
};
// -------------------------------------------------------------------

class UITrackingSaveGameData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.UITrackingSaveGameData) */ {
 public:
  inline UITrackingSaveGameData() : UITrackingSaveGameData(nullptr) {};
  virtual ~UITrackingSaveGameData();

  UITrackingSaveGameData(const UITrackingSaveGameData& from);
  UITrackingSaveGameData(UITrackingSaveGameData&& from) noexcept
    : UITrackingSaveGameData() {
    *this = ::std::move(from);
  }

  inline UITrackingSaveGameData& operator=(const UITrackingSaveGameData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UITrackingSaveGameData& operator=(UITrackingSaveGameData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UITrackingSaveGameData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UITrackingSaveGameData* internal_default_instance() {
    return reinterpret_cast<const UITrackingSaveGameData*>(
               &_UITrackingSaveGameData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(UITrackingSaveGameData& a, UITrackingSaveGameData& b) {
    a.Swap(&b);
  }
  inline void Swap(UITrackingSaveGameData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UITrackingSaveGameData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UITrackingSaveGameData* New() const final {
    return CreateMaybeMessage<UITrackingSaveGameData>(nullptr);
  }

  UITrackingSaveGameData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UITrackingSaveGameData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UITrackingSaveGameData& from);
  void MergeFrom(const UITrackingSaveGameData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UITrackingSaveGameData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.UITrackingSaveGameData";
  }
  protected:
  explicit UITrackingSaveGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakSave_2eproto);
    return ::descriptor_table_OakSave_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInventorySlotUnlocksSeenFieldNumber = 7,
    kHasSeenSkillMenuUnlockFieldNumber = 1,
    kHasSeenGuardianRankMenuUnlockFieldNumber = 2,
    kHasSeenEchoBootAmmoBarFieldNumber = 3,
    kHasSeenEchoBootShieldBarFieldNumber = 4,
    kHasSeenEchoBootGrenadesFieldNumber = 5,
    kHighestThvmBreadcrumbSeenFieldNumber = 6,
    kSavedSpinOffsetFieldNumber = 8,
  };
  // repeated string inventory_slot_unlocks_seen = 7;
  int inventory_slot_unlocks_seen_size() const;
  private:
  int _internal_inventory_slot_unlocks_seen_size() const;
  public:
  void clear_inventory_slot_unlocks_seen();
  const std::string& inventory_slot_unlocks_seen(int index) const;
  std::string* mutable_inventory_slot_unlocks_seen(int index);
  void set_inventory_slot_unlocks_seen(int index, const std::string& value);
  void set_inventory_slot_unlocks_seen(int index, std::string&& value);
  void set_inventory_slot_unlocks_seen(int index, const char* value);
  void set_inventory_slot_unlocks_seen(int index, const char* value, size_t size);
  std::string* add_inventory_slot_unlocks_seen();
  void add_inventory_slot_unlocks_seen(const std::string& value);
  void add_inventory_slot_unlocks_seen(std::string&& value);
  void add_inventory_slot_unlocks_seen(const char* value);
  void add_inventory_slot_unlocks_seen(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& inventory_slot_unlocks_seen() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_inventory_slot_unlocks_seen();
  private:
  const std::string& _internal_inventory_slot_unlocks_seen(int index) const;
  std::string* _internal_add_inventory_slot_unlocks_seen();
  public:

  // bool has_seen_skill_menu_unlock = 1;
  void clear_has_seen_skill_menu_unlock();
  bool has_seen_skill_menu_unlock() const;
  void set_has_seen_skill_menu_unlock(bool value);
  private:
  bool _internal_has_seen_skill_menu_unlock() const;
  void _internal_set_has_seen_skill_menu_unlock(bool value);
  public:

  // bool has_seen_guardian_rank_menu_unlock = 2;
  void clear_has_seen_guardian_rank_menu_unlock();
  bool has_seen_guardian_rank_menu_unlock() const;
  void set_has_seen_guardian_rank_menu_unlock(bool value);
  private:
  bool _internal_has_seen_guardian_rank_menu_unlock() const;
  void _internal_set_has_seen_guardian_rank_menu_unlock(bool value);
  public:

  // bool has_seen_echo_boot_ammo_bar = 3;
  void clear_has_seen_echo_boot_ammo_bar();
  bool has_seen_echo_boot_ammo_bar() const;
  void set_has_seen_echo_boot_ammo_bar(bool value);
  private:
  bool _internal_has_seen_echo_boot_ammo_bar() const;
  void _internal_set_has_seen_echo_boot_ammo_bar(bool value);
  public:

  // bool has_seen_echo_boot_shield_bar = 4;
  void clear_has_seen_echo_boot_shield_bar();
  bool has_seen_echo_boot_shield_bar() const;
  void set_has_seen_echo_boot_shield_bar(bool value);
  private:
  bool _internal_has_seen_echo_boot_shield_bar() const;
  void _internal_set_has_seen_echo_boot_shield_bar(bool value);
  public:

  // bool has_seen_echo_boot_grenades = 5;
  void clear_has_seen_echo_boot_grenades();
  bool has_seen_echo_boot_grenades() const;
  void set_has_seen_echo_boot_grenades(bool value);
  private:
  bool _internal_has_seen_echo_boot_grenades() const;
  void _internal_set_has_seen_echo_boot_grenades(bool value);
  public:

  // int32 highest_thvm_breadcrumb_seen = 6;
  void clear_highest_thvm_breadcrumb_seen();
  ::PROTOBUF_NAMESPACE_ID::int32 highest_thvm_breadcrumb_seen() const;
  void set_highest_thvm_breadcrumb_seen(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_highest_thvm_breadcrumb_seen() const;
  void _internal_set_highest_thvm_breadcrumb_seen(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 saved_spin_offset = 8;
  void clear_saved_spin_offset();
  ::PROTOBUF_NAMESPACE_ID::int32 saved_spin_offset() const;
  void set_saved_spin_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_saved_spin_offset() const;
  void _internal_set_saved_spin_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:OakSave.UITrackingSaveGameData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> inventory_slot_unlocks_seen_;
  bool has_seen_skill_menu_unlock_;
  bool has_seen_guardian_rank_menu_unlock_;
  bool has_seen_echo_boot_ammo_bar_;
  bool has_seen_echo_boot_shield_bar_;
  bool has_seen_echo_boot_grenades_;
  ::PROTOBUF_NAMESPACE_ID::int32 highest_thvm_breadcrumb_seen_;
  ::PROTOBUF_NAMESPACE_ID::int32 saved_spin_offset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakSave_2eproto;
};
// -------------------------------------------------------------------

class PlanetCycleInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.PlanetCycleInfo) */ {
 public:
  inline PlanetCycleInfo() : PlanetCycleInfo(nullptr) {};
  virtual ~PlanetCycleInfo();

  PlanetCycleInfo(const PlanetCycleInfo& from);
  PlanetCycleInfo(PlanetCycleInfo&& from) noexcept
    : PlanetCycleInfo() {
    *this = ::std::move(from);
  }

  inline PlanetCycleInfo& operator=(const PlanetCycleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlanetCycleInfo& operator=(PlanetCycleInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlanetCycleInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlanetCycleInfo* internal_default_instance() {
    return reinterpret_cast<const PlanetCycleInfo*>(
               &_PlanetCycleInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(PlanetCycleInfo& a, PlanetCycleInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PlanetCycleInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlanetCycleInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlanetCycleInfo* New() const final {
    return CreateMaybeMessage<PlanetCycleInfo>(nullptr);
  }

  PlanetCycleInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlanetCycleInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlanetCycleInfo& from);
  void MergeFrom(const PlanetCycleInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlanetCycleInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.PlanetCycleInfo";
  }
  protected:
  explicit PlanetCycleInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakSave_2eproto);
    return ::descriptor_table_OakSave_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlanetNameFieldNumber = 1,
    kCycleLengthFieldNumber = 2,
    kLastCachedTimeFieldNumber = 3,
  };
  // string planet_name = 1;
  void clear_planet_name();
  const std::string& planet_name() const;
  void set_planet_name(const std::string& value);
  void set_planet_name(std::string&& value);
  void set_planet_name(const char* value);
  void set_planet_name(const char* value, size_t size);
  std::string* mutable_planet_name();
  std::string* release_planet_name();
  void set_allocated_planet_name(std::string* planet_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_planet_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_planet_name(
      std::string* planet_name);
  private:
  const std::string& _internal_planet_name() const;
  void _internal_set_planet_name(const std::string& value);
  std::string* _internal_mutable_planet_name();
  public:

  // float cycle_length = 2;
  void clear_cycle_length();
  float cycle_length() const;
  void set_cycle_length(float value);
  private:
  float _internal_cycle_length() const;
  void _internal_set_cycle_length(float value);
  public:

  // float last_cached_time = 3;
  void clear_last_cached_time();
  float last_cached_time() const;
  void set_last_cached_time(float value);
  private:
  float _internal_last_cached_time() const;
  void _internal_set_last_cached_time(float value);
  public:

  // @@protoc_insertion_point(class_scope:OakSave.PlanetCycleInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr planet_name_;
  float cycle_length_;
  float last_cached_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakSave_2eproto;
};
// -------------------------------------------------------------------

class TimeOfDaySaveGameData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.TimeOfDaySaveGameData) */ {
 public:
  inline TimeOfDaySaveGameData() : TimeOfDaySaveGameData(nullptr) {};
  virtual ~TimeOfDaySaveGameData();

  TimeOfDaySaveGameData(const TimeOfDaySaveGameData& from);
  TimeOfDaySaveGameData(TimeOfDaySaveGameData&& from) noexcept
    : TimeOfDaySaveGameData() {
    *this = ::std::move(from);
  }

  inline TimeOfDaySaveGameData& operator=(const TimeOfDaySaveGameData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeOfDaySaveGameData& operator=(TimeOfDaySaveGameData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimeOfDaySaveGameData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimeOfDaySaveGameData* internal_default_instance() {
    return reinterpret_cast<const TimeOfDaySaveGameData*>(
               &_TimeOfDaySaveGameData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(TimeOfDaySaveGameData& a, TimeOfDaySaveGameData& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeOfDaySaveGameData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimeOfDaySaveGameData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimeOfDaySaveGameData* New() const final {
    return CreateMaybeMessage<TimeOfDaySaveGameData>(nullptr);
  }

  TimeOfDaySaveGameData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimeOfDaySaveGameData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimeOfDaySaveGameData& from);
  void MergeFrom(const TimeOfDaySaveGameData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeOfDaySaveGameData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.TimeOfDaySaveGameData";
  }
  protected:
  explicit TimeOfDaySaveGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakSave_2eproto);
    return ::descriptor_table_OakSave_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlanetCycleInfoFieldNumber = 1,
    kPlanetCycleFieldNumber = 2,
  };
  // repeated .OakSave.PlanetCycleInfo planet_cycle_info = 1;
  int planet_cycle_info_size() const;
  private:
  int _internal_planet_cycle_info_size() const;
  public:
  void clear_planet_cycle_info();
  ::OakSave::PlanetCycleInfo* mutable_planet_cycle_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::PlanetCycleInfo >*
      mutable_planet_cycle_info();
  private:
  const ::OakSave::PlanetCycleInfo& _internal_planet_cycle_info(int index) const;
  ::OakSave::PlanetCycleInfo* _internal_add_planet_cycle_info();
  public:
  const ::OakSave::PlanetCycleInfo& planet_cycle_info(int index) const;
  ::OakSave::PlanetCycleInfo* add_planet_cycle_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::PlanetCycleInfo >&
      planet_cycle_info() const;

  // string planet_cycle = 2;
  void clear_planet_cycle();
  const std::string& planet_cycle() const;
  void set_planet_cycle(const std::string& value);
  void set_planet_cycle(std::string&& value);
  void set_planet_cycle(const char* value);
  void set_planet_cycle(const char* value, size_t size);
  std::string* mutable_planet_cycle();
  std::string* release_planet_cycle();
  void set_allocated_planet_cycle(std::string* planet_cycle);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_planet_cycle();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_planet_cycle(
      std::string* planet_cycle);
  private:
  const std::string& _internal_planet_cycle() const;
  void _internal_set_planet_cycle(const std::string& value);
  std::string* _internal_mutable_planet_cycle();
  public:

  // @@protoc_insertion_point(class_scope:OakSave.TimeOfDaySaveGameData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::PlanetCycleInfo > planet_cycle_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr planet_cycle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakSave_2eproto;
};
// -------------------------------------------------------------------

class LevelPersistence_Actor_SaveGameData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.LevelPersistence_Actor_SaveGameData) */ {
 public:
  inline LevelPersistence_Actor_SaveGameData() : LevelPersistence_Actor_SaveGameData(nullptr) {};
  virtual ~LevelPersistence_Actor_SaveGameData();

  LevelPersistence_Actor_SaveGameData(const LevelPersistence_Actor_SaveGameData& from);
  LevelPersistence_Actor_SaveGameData(LevelPersistence_Actor_SaveGameData&& from) noexcept
    : LevelPersistence_Actor_SaveGameData() {
    *this = ::std::move(from);
  }

  inline LevelPersistence_Actor_SaveGameData& operator=(const LevelPersistence_Actor_SaveGameData& from) {
    CopyFrom(from);
    return *this;
  }
  inline LevelPersistence_Actor_SaveGameData& operator=(LevelPersistence_Actor_SaveGameData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LevelPersistence_Actor_SaveGameData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LevelPersistence_Actor_SaveGameData* internal_default_instance() {
    return reinterpret_cast<const LevelPersistence_Actor_SaveGameData*>(
               &_LevelPersistence_Actor_SaveGameData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(LevelPersistence_Actor_SaveGameData& a, LevelPersistence_Actor_SaveGameData& b) {
    a.Swap(&b);
  }
  inline void Swap(LevelPersistence_Actor_SaveGameData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LevelPersistence_Actor_SaveGameData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LevelPersistence_Actor_SaveGameData* New() const final {
    return CreateMaybeMessage<LevelPersistence_Actor_SaveGameData>(nullptr);
  }

  LevelPersistence_Actor_SaveGameData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LevelPersistence_Actor_SaveGameData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LevelPersistence_Actor_SaveGameData& from);
  void MergeFrom(const LevelPersistence_Actor_SaveGameData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LevelPersistence_Actor_SaveGameData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.LevelPersistence_Actor_SaveGameData";
  }
  protected:
  explicit LevelPersistence_Actor_SaveGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakSave_2eproto);
    return ::descriptor_table_OakSave_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActorNameFieldNumber = 1,
    kTimerRemainingFieldNumber = 2,
  };
  // string actor_name = 1;
  void clear_actor_name();
  const std::string& actor_name() const;
  void set_actor_name(const std::string& value);
  void set_actor_name(std::string&& value);
  void set_actor_name(const char* value);
  void set_actor_name(const char* value, size_t size);
  std::string* mutable_actor_name();
  std::string* release_actor_name();
  void set_allocated_actor_name(std::string* actor_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_actor_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_actor_name(
      std::string* actor_name);
  private:
  const std::string& _internal_actor_name() const;
  void _internal_set_actor_name(const std::string& value);
  std::string* _internal_mutable_actor_name();
  public:

  // int32 timer_remaining = 2;
  void clear_timer_remaining();
  ::PROTOBUF_NAMESPACE_ID::int32 timer_remaining() const;
  void set_timer_remaining(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_timer_remaining() const;
  void _internal_set_timer_remaining(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:OakSave.LevelPersistence_Actor_SaveGameData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr actor_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 timer_remaining_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakSave_2eproto;
};
// -------------------------------------------------------------------

class LevelPersistence_Level_SaveGameData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.LevelPersistence_Level_SaveGameData) */ {
 public:
  inline LevelPersistence_Level_SaveGameData() : LevelPersistence_Level_SaveGameData(nullptr) {};
  virtual ~LevelPersistence_Level_SaveGameData();

  LevelPersistence_Level_SaveGameData(const LevelPersistence_Level_SaveGameData& from);
  LevelPersistence_Level_SaveGameData(LevelPersistence_Level_SaveGameData&& from) noexcept
    : LevelPersistence_Level_SaveGameData() {
    *this = ::std::move(from);
  }

  inline LevelPersistence_Level_SaveGameData& operator=(const LevelPersistence_Level_SaveGameData& from) {
    CopyFrom(from);
    return *this;
  }
  inline LevelPersistence_Level_SaveGameData& operator=(LevelPersistence_Level_SaveGameData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LevelPersistence_Level_SaveGameData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LevelPersistence_Level_SaveGameData* internal_default_instance() {
    return reinterpret_cast<const LevelPersistence_Level_SaveGameData*>(
               &_LevelPersistence_Level_SaveGameData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(LevelPersistence_Level_SaveGameData& a, LevelPersistence_Level_SaveGameData& b) {
    a.Swap(&b);
  }
  inline void Swap(LevelPersistence_Level_SaveGameData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LevelPersistence_Level_SaveGameData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LevelPersistence_Level_SaveGameData* New() const final {
    return CreateMaybeMessage<LevelPersistence_Level_SaveGameData>(nullptr);
  }

  LevelPersistence_Level_SaveGameData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LevelPersistence_Level_SaveGameData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LevelPersistence_Level_SaveGameData& from);
  void MergeFrom(const LevelPersistence_Level_SaveGameData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LevelPersistence_Level_SaveGameData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.LevelPersistence_Level_SaveGameData";
  }
  protected:
  explicit LevelPersistence_Level_SaveGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakSave_2eproto);
    return ::descriptor_table_OakSave_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSavedActorsFieldNumber = 2,
    kLevelNameFieldNumber = 1,
  };
  // repeated .OakSave.LevelPersistence_Actor_SaveGameData saved_actors = 2;
  int saved_actors_size() const;
  private:
  int _internal_saved_actors_size() const;
  public:
  void clear_saved_actors();
  ::OakSave::LevelPersistence_Actor_SaveGameData* mutable_saved_actors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::LevelPersistence_Actor_SaveGameData >*
      mutable_saved_actors();
  private:
  const ::OakSave::LevelPersistence_Actor_SaveGameData& _internal_saved_actors(int index) const;
  ::OakSave::LevelPersistence_Actor_SaveGameData* _internal_add_saved_actors();
  public:
  const ::OakSave::LevelPersistence_Actor_SaveGameData& saved_actors(int index) const;
  ::OakSave::LevelPersistence_Actor_SaveGameData* add_saved_actors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::LevelPersistence_Actor_SaveGameData >&
      saved_actors() const;

  // string level_name = 1;
  void clear_level_name();
  const std::string& level_name() const;
  void set_level_name(const std::string& value);
  void set_level_name(std::string&& value);
  void set_level_name(const char* value);
  void set_level_name(const char* value, size_t size);
  std::string* mutable_level_name();
  std::string* release_level_name();
  void set_allocated_level_name(std::string* level_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_level_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_level_name(
      std::string* level_name);
  private:
  const std::string& _internal_level_name() const;
  void _internal_set_level_name(const std::string& value);
  std::string* _internal_mutable_level_name();
  public:

  // @@protoc_insertion_point(class_scope:OakSave.LevelPersistence_Level_SaveGameData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::LevelPersistence_Actor_SaveGameData > saved_actors_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr level_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakSave_2eproto;
};
// -------------------------------------------------------------------

class GbxZoneMapFODSavedLevelData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.GbxZoneMapFODSavedLevelData) */ {
 public:
  inline GbxZoneMapFODSavedLevelData() : GbxZoneMapFODSavedLevelData(nullptr) {};
  virtual ~GbxZoneMapFODSavedLevelData();

  GbxZoneMapFODSavedLevelData(const GbxZoneMapFODSavedLevelData& from);
  GbxZoneMapFODSavedLevelData(GbxZoneMapFODSavedLevelData&& from) noexcept
    : GbxZoneMapFODSavedLevelData() {
    *this = ::std::move(from);
  }

  inline GbxZoneMapFODSavedLevelData& operator=(const GbxZoneMapFODSavedLevelData& from) {
    CopyFrom(from);
    return *this;
  }
  inline GbxZoneMapFODSavedLevelData& operator=(GbxZoneMapFODSavedLevelData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GbxZoneMapFODSavedLevelData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GbxZoneMapFODSavedLevelData* internal_default_instance() {
    return reinterpret_cast<const GbxZoneMapFODSavedLevelData*>(
               &_GbxZoneMapFODSavedLevelData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(GbxZoneMapFODSavedLevelData& a, GbxZoneMapFODSavedLevelData& b) {
    a.Swap(&b);
  }
  inline void Swap(GbxZoneMapFODSavedLevelData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GbxZoneMapFODSavedLevelData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GbxZoneMapFODSavedLevelData* New() const final {
    return CreateMaybeMessage<GbxZoneMapFODSavedLevelData>(nullptr);
  }

  GbxZoneMapFODSavedLevelData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GbxZoneMapFODSavedLevelData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GbxZoneMapFODSavedLevelData& from);
  void MergeFrom(const GbxZoneMapFODSavedLevelData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GbxZoneMapFODSavedLevelData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.GbxZoneMapFODSavedLevelData";
  }
  protected:
  explicit GbxZoneMapFODSavedLevelData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakSave_2eproto);
    return ::descriptor_table_OakSave_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLevelNameFieldNumber = 1,
    kFodDataFieldNumber = 7,
    kFodTextureSizeFieldNumber = 2,
    kNumChunksFieldNumber = 3,
    kDiscoveryPercentageFieldNumber = 4,
    kDataStateFieldNumber = 5,
    kDataRevisionFieldNumber = 6,
  };
  // string level_name = 1;
  void clear_level_name();
  const std::string& level_name() const;
  void set_level_name(const std::string& value);
  void set_level_name(std::string&& value);
  void set_level_name(const char* value);
  void set_level_name(const char* value, size_t size);
  std::string* mutable_level_name();
  std::string* release_level_name();
  void set_allocated_level_name(std::string* level_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_level_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_level_name(
      std::string* level_name);
  private:
  const std::string& _internal_level_name() const;
  void _internal_set_level_name(const std::string& value);
  std::string* _internal_mutable_level_name();
  public:

  // bytes fod_data = 7;
  void clear_fod_data();
  const std::string& fod_data() const;
  void set_fod_data(const std::string& value);
  void set_fod_data(std::string&& value);
  void set_fod_data(const char* value);
  void set_fod_data(const void* value, size_t size);
  std::string* mutable_fod_data();
  std::string* release_fod_data();
  void set_allocated_fod_data(std::string* fod_data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_fod_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_fod_data(
      std::string* fod_data);
  private:
  const std::string& _internal_fod_data() const;
  void _internal_set_fod_data(const std::string& value);
  std::string* _internal_mutable_fod_data();
  public:

  // uint32 fod_texture_size = 2;
  void clear_fod_texture_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 fod_texture_size() const;
  void set_fod_texture_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fod_texture_size() const;
  void _internal_set_fod_texture_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 num_chunks = 3;
  void clear_num_chunks();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_chunks() const;
  void set_num_chunks(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_chunks() const;
  void _internal_set_num_chunks(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float discovery_percentage = 4;
  void clear_discovery_percentage();
  float discovery_percentage() const;
  void set_discovery_percentage(float value);
  private:
  float _internal_discovery_percentage() const;
  void _internal_set_discovery_percentage(float value);
  public:

  // uint32 data_state = 5;
  void clear_data_state();
  ::PROTOBUF_NAMESPACE_ID::uint32 data_state() const;
  void set_data_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_data_state() const;
  void _internal_set_data_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 data_revision = 6;
  void clear_data_revision();
  ::PROTOBUF_NAMESPACE_ID::uint32 data_revision() const;
  void set_data_revision(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_data_revision() const;
  void _internal_set_data_revision(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:OakSave.GbxZoneMapFODSavedLevelData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr level_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fod_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fod_texture_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_chunks_;
  float discovery_percentage_;
  ::PROTOBUF_NAMESPACE_ID::uint32 data_state_;
  ::PROTOBUF_NAMESPACE_ID::uint32 data_revision_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakSave_2eproto;
};
// -------------------------------------------------------------------

class GbxZoneMapFODSaveGameData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.GbxZoneMapFODSaveGameData) */ {
 public:
  inline GbxZoneMapFODSaveGameData() : GbxZoneMapFODSaveGameData(nullptr) {};
  virtual ~GbxZoneMapFODSaveGameData();

  GbxZoneMapFODSaveGameData(const GbxZoneMapFODSaveGameData& from);
  GbxZoneMapFODSaveGameData(GbxZoneMapFODSaveGameData&& from) noexcept
    : GbxZoneMapFODSaveGameData() {
    *this = ::std::move(from);
  }

  inline GbxZoneMapFODSaveGameData& operator=(const GbxZoneMapFODSaveGameData& from) {
    CopyFrom(from);
    return *this;
  }
  inline GbxZoneMapFODSaveGameData& operator=(GbxZoneMapFODSaveGameData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GbxZoneMapFODSaveGameData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GbxZoneMapFODSaveGameData* internal_default_instance() {
    return reinterpret_cast<const GbxZoneMapFODSaveGameData*>(
               &_GbxZoneMapFODSaveGameData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(GbxZoneMapFODSaveGameData& a, GbxZoneMapFODSaveGameData& b) {
    a.Swap(&b);
  }
  inline void Swap(GbxZoneMapFODSaveGameData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GbxZoneMapFODSaveGameData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GbxZoneMapFODSaveGameData* New() const final {
    return CreateMaybeMessage<GbxZoneMapFODSaveGameData>(nullptr);
  }

  GbxZoneMapFODSaveGameData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GbxZoneMapFODSaveGameData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GbxZoneMapFODSaveGameData& from);
  void MergeFrom(const GbxZoneMapFODSaveGameData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GbxZoneMapFODSaveGameData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.GbxZoneMapFODSaveGameData";
  }
  protected:
  explicit GbxZoneMapFODSaveGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakSave_2eproto);
    return ::descriptor_table_OakSave_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLevelDataFieldNumber = 1,
  };
  // repeated .OakSave.GbxZoneMapFODSavedLevelData level_data = 1;
  int level_data_size() const;
  private:
  int _internal_level_data_size() const;
  public:
  void clear_level_data();
  ::OakSave::GbxZoneMapFODSavedLevelData* mutable_level_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::GbxZoneMapFODSavedLevelData >*
      mutable_level_data();
  private:
  const ::OakSave::GbxZoneMapFODSavedLevelData& _internal_level_data(int index) const;
  ::OakSave::GbxZoneMapFODSavedLevelData* _internal_add_level_data();
  public:
  const ::OakSave::GbxZoneMapFODSavedLevelData& level_data(int index) const;
  ::OakSave::GbxZoneMapFODSavedLevelData* add_level_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::GbxZoneMapFODSavedLevelData >&
      level_data() const;

  // @@protoc_insertion_point(class_scope:OakSave.GbxZoneMapFODSaveGameData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::GbxZoneMapFODSavedLevelData > level_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakSave_2eproto;
};
// -------------------------------------------------------------------

class Character_NicknameMappingsEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.Character.NicknameMappingsEntry) */ {
 public:
  inline Character_NicknameMappingsEntry() : Character_NicknameMappingsEntry(nullptr) {};
  virtual ~Character_NicknameMappingsEntry();

  Character_NicknameMappingsEntry(const Character_NicknameMappingsEntry& from);
  Character_NicknameMappingsEntry(Character_NicknameMappingsEntry&& from) noexcept
    : Character_NicknameMappingsEntry() {
    *this = ::std::move(from);
  }

  inline Character_NicknameMappingsEntry& operator=(const Character_NicknameMappingsEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline Character_NicknameMappingsEntry& operator=(Character_NicknameMappingsEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Character_NicknameMappingsEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Character_NicknameMappingsEntry* internal_default_instance() {
    return reinterpret_cast<const Character_NicknameMappingsEntry*>(
               &_Character_NicknameMappingsEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(Character_NicknameMappingsEntry& a, Character_NicknameMappingsEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(Character_NicknameMappingsEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Character_NicknameMappingsEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Character_NicknameMappingsEntry* New() const final {
    return CreateMaybeMessage<Character_NicknameMappingsEntry>(nullptr);
  }

  Character_NicknameMappingsEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Character_NicknameMappingsEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Character_NicknameMappingsEntry& from);
  void MergeFrom(const Character_NicknameMappingsEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Character_NicknameMappingsEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.Character.NicknameMappingsEntry";
  }
  protected:
  explicit Character_NicknameMappingsEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakSave_2eproto);
    return ::descriptor_table_OakSave_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:OakSave.Character.NicknameMappingsEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakSave_2eproto;
};
// -------------------------------------------------------------------

class Character_ActiveLeagueInstanceForEventEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.Character.ActiveLeagueInstanceForEventEntry) */ {
 public:
  inline Character_ActiveLeagueInstanceForEventEntry() : Character_ActiveLeagueInstanceForEventEntry(nullptr) {};
  virtual ~Character_ActiveLeagueInstanceForEventEntry();

  Character_ActiveLeagueInstanceForEventEntry(const Character_ActiveLeagueInstanceForEventEntry& from);
  Character_ActiveLeagueInstanceForEventEntry(Character_ActiveLeagueInstanceForEventEntry&& from) noexcept
    : Character_ActiveLeagueInstanceForEventEntry() {
    *this = ::std::move(from);
  }

  inline Character_ActiveLeagueInstanceForEventEntry& operator=(const Character_ActiveLeagueInstanceForEventEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline Character_ActiveLeagueInstanceForEventEntry& operator=(Character_ActiveLeagueInstanceForEventEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Character_ActiveLeagueInstanceForEventEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Character_ActiveLeagueInstanceForEventEntry* internal_default_instance() {
    return reinterpret_cast<const Character_ActiveLeagueInstanceForEventEntry*>(
               &_Character_ActiveLeagueInstanceForEventEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(Character_ActiveLeagueInstanceForEventEntry& a, Character_ActiveLeagueInstanceForEventEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(Character_ActiveLeagueInstanceForEventEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Character_ActiveLeagueInstanceForEventEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Character_ActiveLeagueInstanceForEventEntry* New() const final {
    return CreateMaybeMessage<Character_ActiveLeagueInstanceForEventEntry>(nullptr);
  }

  Character_ActiveLeagueInstanceForEventEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Character_ActiveLeagueInstanceForEventEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Character_ActiveLeagueInstanceForEventEntry& from);
  void MergeFrom(const Character_ActiveLeagueInstanceForEventEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Character_ActiveLeagueInstanceForEventEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.Character.ActiveLeagueInstanceForEventEntry";
  }
  protected:
  explicit Character_ActiveLeagueInstanceForEventEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakSave_2eproto);
    return ::descriptor_table_OakSave_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // uint32 key = 1;
  void clear_key();
  ::PROTOBUF_NAMESPACE_ID::uint32 key() const;
  void set_key(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_key() const;
  void _internal_set_key(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 value = 2;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:OakSave.Character.ActiveLeagueInstanceForEventEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 key_;
  ::PROTOBUF_NAMESPACE_ID::uint32 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakSave_2eproto;
};
// -------------------------------------------------------------------

class Character PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.Character) */ {
 public:
  inline Character() : Character(nullptr) {};
  virtual ~Character();

  Character(const Character& from);
  Character(Character&& from) noexcept
    : Character() {
    *this = ::std::move(from);
  }

  inline Character& operator=(const Character& from) {
    CopyFrom(from);
    return *this;
  }
  inline Character& operator=(Character&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Character& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Character* internal_default_instance() {
    return reinterpret_cast<const Character*>(
               &_Character_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(Character& a, Character& b) {
    a.Swap(&b);
  }
  inline void Swap(Character* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Character* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Character* New() const final {
    return CreateMaybeMessage<Character>(nullptr);
  }

  Character* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Character>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Character& from);
  void MergeFrom(const Character& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Character* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.Character";
  }
  protected:
  explicit Character(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakSave_2eproto);
    return ::descriptor_table_OakSave_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Character_NicknameMappingsEntry NicknameMappingsEntry;
  typedef Character_ActiveLeagueInstanceForEventEntry ActiveLeagueInstanceForEventEntry;

  // accessors -------------------------------------------------------

  enum : int {
    kResourcePoolsFieldNumber = 5,
    kSavedRegionsFieldNumber = 6,
    kGameStatsDataFieldNumber = 8,
    kInventoryCategoryListFieldNumber = 9,
    kInventoryItemsFieldNumber = 10,
    kEquippedInventoryListFieldNumber = 11,
    kActiveWeaponListFieldNumber = 12,
    kMissionPlaythroughsDataFieldNumber = 17,
    kActiveTravelStationsFieldNumber = 21,
    kVehiclesUnlockedDataFieldNumber = 24,
    kVehiclePartsUnlockedFieldNumber = 25,
    kVehicleLoadoutsFieldNumber = 26,
    kChallengeDataFieldNumber = 28,
    kSduListFieldNumber = 29,
    kSelectedCustomizationsFieldNumber = 30,
    kEquippedEmoteCustomizationsFieldNumber = 31,
    kSelectedColorCustomizationsFieldNumber = 32,
    kUnlockedEchoLogsFieldNumber = 36,
    kNicknameMappingsFieldNumber = 38,
    kLevelPersistenceDataFieldNumber = 47,
    kActiveOrBlacklistedTravelStationsFieldNumber = 51,
    kLastActiveTravelStationForPlaythroughFieldNumber = 52,
    kGameStateSaveDataForPlaythroughFieldNumber = 53,
    kRegisteredDownloadableEntitlementsFieldNumber = 54,
    kActiveTravelStationsForPlaythroughFieldNumber = 55,
    kActiveLeagueInstanceForEventFieldNumber = 62,
    kLastActiveTravelStationFieldNumber = 23,
    kPreferredCharacterNameFieldNumber = 43,
    kSaveGameGuidFieldNumber = 56,
    kPlayerClassDataFieldNumber = 4,
    kAbilityDataFieldNumber = 13,
    kDiscoveryDataFieldNumber = 22,
    kGuardianRankFieldNumber = 33,
    kCrewQuartersRoomFieldNumber = 34,
    kCrewQuartersGunRackFieldNumber = 35,
    kLastTraveledMapIdFieldNumber = 39,
    kChallengeCategoryCompletionPctsFieldNumber = 40,
    kCharacterSlotSaveGameDataFieldNumber = 41,
    kUiTrackingSaveGameDataFieldNumber = 42,
    kTimeOfDaySaveGameDataFieldNumber = 46,
    kGbxZoneMapFodSaveGameDataFieldNumber = 50,
    kGuardianRankCharacterDataFieldNumber = 57,
    kLastSaveTimestampFieldNumber = 2,
    kSaveGameIdFieldNumber = 1,
    kTimePlayedSecondsFieldNumber = 3,
    kExperiencePointsFieldNumber = 7,
    kLastPlayThroughIndexFieldNumber = 14,
    kPlaythroughsCompletedFieldNumber = 15,
    kVehicleLastLoadoutIndexFieldNumber = 27,
    kShowNewPlaythroughNotificationFieldNumber = 16,
    kHasPlayedSpecialEchoLogInsertAlreadyFieldNumber = 37,
    kOptionalObjectiveRewardFixupAppliedFieldNumber = 58,
    kVehiclePartRewardsFixupAppliedFieldNumber = 59,
    kNameCharacterLimitFieldNumber = 44,
    kPreferredGroupModeFieldNumber = 45,
    kAccumulatedLevelPersistenceResetTimerSecondsFieldNumber = 48,
    kMayhemLevelFieldNumber = 49,
    kLastActiveLeagueFieldNumber = 60,
    kLastActiveLeagueInstanceFieldNumber = 61,
    kLevelledSaveVehiclePartRewardsFixupAppliedFieldNumber = 63,
  };
  // repeated .OakSave.ResourcePoolSavegameData resource_pools = 5;
  int resource_pools_size() const;
  private:
  int _internal_resource_pools_size() const;
  public:
  void clear_resource_pools();
  ::OakSave::ResourcePoolSavegameData* mutable_resource_pools(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::ResourcePoolSavegameData >*
      mutable_resource_pools();
  private:
  const ::OakSave::ResourcePoolSavegameData& _internal_resource_pools(int index) const;
  ::OakSave::ResourcePoolSavegameData* _internal_add_resource_pools();
  public:
  const ::OakSave::ResourcePoolSavegameData& resource_pools(int index) const;
  ::OakSave::ResourcePoolSavegameData* add_resource_pools();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::ResourcePoolSavegameData >&
      resource_pools() const;

  // repeated .OakSave.RegionSaveGameData saved_regions = 6;
  int saved_regions_size() const;
  private:
  int _internal_saved_regions_size() const;
  public:
  void clear_saved_regions();
  ::OakSave::RegionSaveGameData* mutable_saved_regions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::RegionSaveGameData >*
      mutable_saved_regions();
  private:
  const ::OakSave::RegionSaveGameData& _internal_saved_regions(int index) const;
  ::OakSave::RegionSaveGameData* _internal_add_saved_regions();
  public:
  const ::OakSave::RegionSaveGameData& saved_regions(int index) const;
  ::OakSave::RegionSaveGameData* add_saved_regions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::RegionSaveGameData >&
      saved_regions() const;

  // repeated .OakSave.GameStatSaveGameData game_stats_data = 8;
  int game_stats_data_size() const;
  private:
  int _internal_game_stats_data_size() const;
  public:
  void clear_game_stats_data();
  ::OakSave::GameStatSaveGameData* mutable_game_stats_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::GameStatSaveGameData >*
      mutable_game_stats_data();
  private:
  const ::OakSave::GameStatSaveGameData& _internal_game_stats_data(int index) const;
  ::OakSave::GameStatSaveGameData* _internal_add_game_stats_data();
  public:
  const ::OakSave::GameStatSaveGameData& game_stats_data(int index) const;
  ::OakSave::GameStatSaveGameData* add_game_stats_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::GameStatSaveGameData >&
      game_stats_data() const;

  // repeated .OakSave.InventoryCategorySaveData inventory_category_list = 9;
  int inventory_category_list_size() const;
  private:
  int _internal_inventory_category_list_size() const;
  public:
  void clear_inventory_category_list();
  ::OakSave::InventoryCategorySaveData* mutable_inventory_category_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::InventoryCategorySaveData >*
      mutable_inventory_category_list();
  private:
  const ::OakSave::InventoryCategorySaveData& _internal_inventory_category_list(int index) const;
  ::OakSave::InventoryCategorySaveData* _internal_add_inventory_category_list();
  public:
  const ::OakSave::InventoryCategorySaveData& inventory_category_list(int index) const;
  ::OakSave::InventoryCategorySaveData* add_inventory_category_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::InventoryCategorySaveData >&
      inventory_category_list() const;

  // repeated .OakSave.OakInventoryItemSaveGameData inventory_items = 10;
  int inventory_items_size() const;
  private:
  int _internal_inventory_items_size() const;
  public:
  void clear_inventory_items();
  ::OakSave::OakInventoryItemSaveGameData* mutable_inventory_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::OakInventoryItemSaveGameData >*
      mutable_inventory_items();
  private:
  const ::OakSave::OakInventoryItemSaveGameData& _internal_inventory_items(int index) const;
  ::OakSave::OakInventoryItemSaveGameData* _internal_add_inventory_items();
  public:
  const ::OakSave::OakInventoryItemSaveGameData& inventory_items(int index) const;
  ::OakSave::OakInventoryItemSaveGameData* add_inventory_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::OakInventoryItemSaveGameData >&
      inventory_items() const;

  // repeated .OakSave.EquippedInventorySaveGameData equipped_inventory_list = 11;
  int equipped_inventory_list_size() const;
  private:
  int _internal_equipped_inventory_list_size() const;
  public:
  void clear_equipped_inventory_list();
  ::OakSave::EquippedInventorySaveGameData* mutable_equipped_inventory_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::EquippedInventorySaveGameData >*
      mutable_equipped_inventory_list();
  private:
  const ::OakSave::EquippedInventorySaveGameData& _internal_equipped_inventory_list(int index) const;
  ::OakSave::EquippedInventorySaveGameData* _internal_add_equipped_inventory_list();
  public:
  const ::OakSave::EquippedInventorySaveGameData& equipped_inventory_list(int index) const;
  ::OakSave::EquippedInventorySaveGameData* add_equipped_inventory_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::EquippedInventorySaveGameData >&
      equipped_inventory_list() const;

  // repeated int32 active_weapon_list = 12;
  int active_weapon_list_size() const;
  private:
  int _internal_active_weapon_list_size() const;
  public:
  void clear_active_weapon_list();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_active_weapon_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_active_weapon_list() const;
  void _internal_add_active_weapon_list(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_active_weapon_list();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 active_weapon_list(int index) const;
  void set_active_weapon_list(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_active_weapon_list(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      active_weapon_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_active_weapon_list();

  // repeated .OakSave.MissionPlaythroughSaveGameData mission_playthroughs_data = 17;
  int mission_playthroughs_data_size() const;
  private:
  int _internal_mission_playthroughs_data_size() const;
  public:
  void clear_mission_playthroughs_data();
  ::OakSave::MissionPlaythroughSaveGameData* mutable_mission_playthroughs_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::MissionPlaythroughSaveGameData >*
      mutable_mission_playthroughs_data();
  private:
  const ::OakSave::MissionPlaythroughSaveGameData& _internal_mission_playthroughs_data(int index) const;
  ::OakSave::MissionPlaythroughSaveGameData* _internal_add_mission_playthroughs_data();
  public:
  const ::OakSave::MissionPlaythroughSaveGameData& mission_playthroughs_data(int index) const;
  ::OakSave::MissionPlaythroughSaveGameData* add_mission_playthroughs_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::MissionPlaythroughSaveGameData >&
      mission_playthroughs_data() const;

  // repeated string active_travel_stations = 21;
  int active_travel_stations_size() const;
  private:
  int _internal_active_travel_stations_size() const;
  public:
  void clear_active_travel_stations();
  const std::string& active_travel_stations(int index) const;
  std::string* mutable_active_travel_stations(int index);
  void set_active_travel_stations(int index, const std::string& value);
  void set_active_travel_stations(int index, std::string&& value);
  void set_active_travel_stations(int index, const char* value);
  void set_active_travel_stations(int index, const char* value, size_t size);
  std::string* add_active_travel_stations();
  void add_active_travel_stations(const std::string& value);
  void add_active_travel_stations(std::string&& value);
  void add_active_travel_stations(const char* value);
  void add_active_travel_stations(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& active_travel_stations() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_active_travel_stations();
  private:
  const std::string& _internal_active_travel_stations(int index) const;
  std::string* _internal_add_active_travel_stations();
  public:

  // repeated .OakSave.VehicleUnlockedSaveGameData vehicles_unlocked_data = 24;
  int vehicles_unlocked_data_size() const;
  private:
  int _internal_vehicles_unlocked_data_size() const;
  public:
  void clear_vehicles_unlocked_data();
  ::OakSave::VehicleUnlockedSaveGameData* mutable_vehicles_unlocked_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::VehicleUnlockedSaveGameData >*
      mutable_vehicles_unlocked_data();
  private:
  const ::OakSave::VehicleUnlockedSaveGameData& _internal_vehicles_unlocked_data(int index) const;
  ::OakSave::VehicleUnlockedSaveGameData* _internal_add_vehicles_unlocked_data();
  public:
  const ::OakSave::VehicleUnlockedSaveGameData& vehicles_unlocked_data(int index) const;
  ::OakSave::VehicleUnlockedSaveGameData* add_vehicles_unlocked_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::VehicleUnlockedSaveGameData >&
      vehicles_unlocked_data() const;

  // repeated string vehicle_parts_unlocked = 25;
  int vehicle_parts_unlocked_size() const;
  private:
  int _internal_vehicle_parts_unlocked_size() const;
  public:
  void clear_vehicle_parts_unlocked();
  const std::string& vehicle_parts_unlocked(int index) const;
  std::string* mutable_vehicle_parts_unlocked(int index);
  void set_vehicle_parts_unlocked(int index, const std::string& value);
  void set_vehicle_parts_unlocked(int index, std::string&& value);
  void set_vehicle_parts_unlocked(int index, const char* value);
  void set_vehicle_parts_unlocked(int index, const char* value, size_t size);
  std::string* add_vehicle_parts_unlocked();
  void add_vehicle_parts_unlocked(const std::string& value);
  void add_vehicle_parts_unlocked(std::string&& value);
  void add_vehicle_parts_unlocked(const char* value);
  void add_vehicle_parts_unlocked(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& vehicle_parts_unlocked() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_vehicle_parts_unlocked();
  private:
  const std::string& _internal_vehicle_parts_unlocked(int index) const;
  std::string* _internal_add_vehicle_parts_unlocked();
  public:

  // repeated .OakSave.OakCARMenuVehicleConfigSaveData vehicle_loadouts = 26;
  int vehicle_loadouts_size() const;
  private:
  int _internal_vehicle_loadouts_size() const;
  public:
  void clear_vehicle_loadouts();
  ::OakSave::OakCARMenuVehicleConfigSaveData* mutable_vehicle_loadouts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::OakCARMenuVehicleConfigSaveData >*
      mutable_vehicle_loadouts();
  private:
  const ::OakSave::OakCARMenuVehicleConfigSaveData& _internal_vehicle_loadouts(int index) const;
  ::OakSave::OakCARMenuVehicleConfigSaveData* _internal_add_vehicle_loadouts();
  public:
  const ::OakSave::OakCARMenuVehicleConfigSaveData& vehicle_loadouts(int index) const;
  ::OakSave::OakCARMenuVehicleConfigSaveData* add_vehicle_loadouts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::OakCARMenuVehicleConfigSaveData >&
      vehicle_loadouts() const;

  // repeated .OakSave.ChallengeSaveGameData challenge_data = 28;
  int challenge_data_size() const;
  private:
  int _internal_challenge_data_size() const;
  public:
  void clear_challenge_data();
  ::OakSave::ChallengeSaveGameData* mutable_challenge_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::ChallengeSaveGameData >*
      mutable_challenge_data();
  private:
  const ::OakSave::ChallengeSaveGameData& _internal_challenge_data(int index) const;
  ::OakSave::ChallengeSaveGameData* _internal_add_challenge_data();
  public:
  const ::OakSave::ChallengeSaveGameData& challenge_data(int index) const;
  ::OakSave::ChallengeSaveGameData* add_challenge_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::ChallengeSaveGameData >&
      challenge_data() const;

  // repeated .OakSave.OakSDUSaveGameData sdu_list = 29;
  int sdu_list_size() const;
  private:
  int _internal_sdu_list_size() const;
  public:
  void clear_sdu_list();
  ::OakSave::OakSDUSaveGameData* mutable_sdu_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::OakSDUSaveGameData >*
      mutable_sdu_list();
  private:
  const ::OakSave::OakSDUSaveGameData& _internal_sdu_list(int index) const;
  ::OakSave::OakSDUSaveGameData* _internal_add_sdu_list();
  public:
  const ::OakSave::OakSDUSaveGameData& sdu_list(int index) const;
  ::OakSave::OakSDUSaveGameData* add_sdu_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::OakSDUSaveGameData >&
      sdu_list() const;

  // repeated string selected_customizations = 30;
  int selected_customizations_size() const;
  private:
  int _internal_selected_customizations_size() const;
  public:
  void clear_selected_customizations();
  const std::string& selected_customizations(int index) const;
  std::string* mutable_selected_customizations(int index);
  void set_selected_customizations(int index, const std::string& value);
  void set_selected_customizations(int index, std::string&& value);
  void set_selected_customizations(int index, const char* value);
  void set_selected_customizations(int index, const char* value, size_t size);
  std::string* add_selected_customizations();
  void add_selected_customizations(const std::string& value);
  void add_selected_customizations(std::string&& value);
  void add_selected_customizations(const char* value);
  void add_selected_customizations(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& selected_customizations() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_selected_customizations();
  private:
  const std::string& _internal_selected_customizations(int index) const;
  std::string* _internal_add_selected_customizations();
  public:

  // repeated int32 equipped_emote_customizations = 31;
  int equipped_emote_customizations_size() const;
  private:
  int _internal_equipped_emote_customizations_size() const;
  public:
  void clear_equipped_emote_customizations();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_equipped_emote_customizations(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_equipped_emote_customizations() const;
  void _internal_add_equipped_emote_customizations(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_equipped_emote_customizations();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 equipped_emote_customizations(int index) const;
  void set_equipped_emote_customizations(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_equipped_emote_customizations(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      equipped_emote_customizations() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_equipped_emote_customizations();

  // repeated .OakSave.CustomPlayerColorSaveGameData selected_color_customizations = 32;
  int selected_color_customizations_size() const;
  private:
  int _internal_selected_color_customizations_size() const;
  public:
  void clear_selected_color_customizations();
  ::OakSave::CustomPlayerColorSaveGameData* mutable_selected_color_customizations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::CustomPlayerColorSaveGameData >*
      mutable_selected_color_customizations();
  private:
  const ::OakSave::CustomPlayerColorSaveGameData& _internal_selected_color_customizations(int index) const;
  ::OakSave::CustomPlayerColorSaveGameData* _internal_add_selected_color_customizations();
  public:
  const ::OakSave::CustomPlayerColorSaveGameData& selected_color_customizations(int index) const;
  ::OakSave::CustomPlayerColorSaveGameData* add_selected_color_customizations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::CustomPlayerColorSaveGameData >&
      selected_color_customizations() const;

  // repeated .OakSave.EchoLogSaveGameData unlocked_echo_logs = 36;
  int unlocked_echo_logs_size() const;
  private:
  int _internal_unlocked_echo_logs_size() const;
  public:
  void clear_unlocked_echo_logs();
  ::OakSave::EchoLogSaveGameData* mutable_unlocked_echo_logs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::EchoLogSaveGameData >*
      mutable_unlocked_echo_logs();
  private:
  const ::OakSave::EchoLogSaveGameData& _internal_unlocked_echo_logs(int index) const;
  ::OakSave::EchoLogSaveGameData* _internal_add_unlocked_echo_logs();
  public:
  const ::OakSave::EchoLogSaveGameData& unlocked_echo_logs(int index) const;
  ::OakSave::EchoLogSaveGameData* add_unlocked_echo_logs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::EchoLogSaveGameData >&
      unlocked_echo_logs() const;

  // repeated .OakSave.Character.NicknameMappingsEntry nickname_mappings = 38;
  int nickname_mappings_size() const;
  private:
  int _internal_nickname_mappings_size() const;
  public:
  void clear_nickname_mappings();
  ::OakSave::Character_NicknameMappingsEntry* mutable_nickname_mappings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::Character_NicknameMappingsEntry >*
      mutable_nickname_mappings();
  private:
  const ::OakSave::Character_NicknameMappingsEntry& _internal_nickname_mappings(int index) const;
  ::OakSave::Character_NicknameMappingsEntry* _internal_add_nickname_mappings();
  public:
  const ::OakSave::Character_NicknameMappingsEntry& nickname_mappings(int index) const;
  ::OakSave::Character_NicknameMappingsEntry* add_nickname_mappings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::Character_NicknameMappingsEntry >&
      nickname_mappings() const;

  // repeated .OakSave.LevelPersistence_Level_SaveGameData level_persistence_data = 47;
  int level_persistence_data_size() const;
  private:
  int _internal_level_persistence_data_size() const;
  public:
  void clear_level_persistence_data();
  ::OakSave::LevelPersistence_Level_SaveGameData* mutable_level_persistence_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::LevelPersistence_Level_SaveGameData >*
      mutable_level_persistence_data();
  private:
  const ::OakSave::LevelPersistence_Level_SaveGameData& _internal_level_persistence_data(int index) const;
  ::OakSave::LevelPersistence_Level_SaveGameData* _internal_add_level_persistence_data();
  public:
  const ::OakSave::LevelPersistence_Level_SaveGameData& level_persistence_data(int index) const;
  ::OakSave::LevelPersistence_Level_SaveGameData* add_level_persistence_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::LevelPersistence_Level_SaveGameData >&
      level_persistence_data() const;

  // repeated .OakSave.ActiveFastTravelSaveData active_or_blacklisted_travel_stations = 51;
  int active_or_blacklisted_travel_stations_size() const;
  private:
  int _internal_active_or_blacklisted_travel_stations_size() const;
  public:
  void clear_active_or_blacklisted_travel_stations();
  ::OakSave::ActiveFastTravelSaveData* mutable_active_or_blacklisted_travel_stations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::ActiveFastTravelSaveData >*
      mutable_active_or_blacklisted_travel_stations();
  private:
  const ::OakSave::ActiveFastTravelSaveData& _internal_active_or_blacklisted_travel_stations(int index) const;
  ::OakSave::ActiveFastTravelSaveData* _internal_add_active_or_blacklisted_travel_stations();
  public:
  const ::OakSave::ActiveFastTravelSaveData& active_or_blacklisted_travel_stations(int index) const;
  ::OakSave::ActiveFastTravelSaveData* add_active_or_blacklisted_travel_stations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::ActiveFastTravelSaveData >&
      active_or_blacklisted_travel_stations() const;

  // repeated string last_active_travel_station_for_playthrough = 52;
  int last_active_travel_station_for_playthrough_size() const;
  private:
  int _internal_last_active_travel_station_for_playthrough_size() const;
  public:
  void clear_last_active_travel_station_for_playthrough();
  const std::string& last_active_travel_station_for_playthrough(int index) const;
  std::string* mutable_last_active_travel_station_for_playthrough(int index);
  void set_last_active_travel_station_for_playthrough(int index, const std::string& value);
  void set_last_active_travel_station_for_playthrough(int index, std::string&& value);
  void set_last_active_travel_station_for_playthrough(int index, const char* value);
  void set_last_active_travel_station_for_playthrough(int index, const char* value, size_t size);
  std::string* add_last_active_travel_station_for_playthrough();
  void add_last_active_travel_station_for_playthrough(const std::string& value);
  void add_last_active_travel_station_for_playthrough(std::string&& value);
  void add_last_active_travel_station_for_playthrough(const char* value);
  void add_last_active_travel_station_for_playthrough(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& last_active_travel_station_for_playthrough() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_last_active_travel_station_for_playthrough();
  private:
  const std::string& _internal_last_active_travel_station_for_playthrough(int index) const;
  std::string* _internal_add_last_active_travel_station_for_playthrough();
  public:

  // repeated .OakSave.GameStateSaveData game_state_save_data_for_playthrough = 53;
  int game_state_save_data_for_playthrough_size() const;
  private:
  int _internal_game_state_save_data_for_playthrough_size() const;
  public:
  void clear_game_state_save_data_for_playthrough();
  ::OakSave::GameStateSaveData* mutable_game_state_save_data_for_playthrough(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::GameStateSaveData >*
      mutable_game_state_save_data_for_playthrough();
  private:
  const ::OakSave::GameStateSaveData& _internal_game_state_save_data_for_playthrough(int index) const;
  ::OakSave::GameStateSaveData* _internal_add_game_state_save_data_for_playthrough();
  public:
  const ::OakSave::GameStateSaveData& game_state_save_data_for_playthrough(int index) const;
  ::OakSave::GameStateSaveData* add_game_state_save_data_for_playthrough();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::GameStateSaveData >&
      game_state_save_data_for_playthrough() const;

  // repeated .OakSave.RegisteredDownloadableEntitlements registered_downloadable_entitlements = 54;
  int registered_downloadable_entitlements_size() const;
  private:
  int _internal_registered_downloadable_entitlements_size() const;
  public:
  void clear_registered_downloadable_entitlements();
  ::OakSave::RegisteredDownloadableEntitlements* mutable_registered_downloadable_entitlements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::RegisteredDownloadableEntitlements >*
      mutable_registered_downloadable_entitlements();
  private:
  const ::OakSave::RegisteredDownloadableEntitlements& _internal_registered_downloadable_entitlements(int index) const;
  ::OakSave::RegisteredDownloadableEntitlements* _internal_add_registered_downloadable_entitlements();
  public:
  const ::OakSave::RegisteredDownloadableEntitlements& registered_downloadable_entitlements(int index) const;
  ::OakSave::RegisteredDownloadableEntitlements* add_registered_downloadable_entitlements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::RegisteredDownloadableEntitlements >&
      registered_downloadable_entitlements() const;

  // repeated .OakSave.PlaythroughActiveFastTravelSaveData active_travel_stations_for_playthrough = 55;
  int active_travel_stations_for_playthrough_size() const;
  private:
  int _internal_active_travel_stations_for_playthrough_size() const;
  public:
  void clear_active_travel_stations_for_playthrough();
  ::OakSave::PlaythroughActiveFastTravelSaveData* mutable_active_travel_stations_for_playthrough(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::PlaythroughActiveFastTravelSaveData >*
      mutable_active_travel_stations_for_playthrough();
  private:
  const ::OakSave::PlaythroughActiveFastTravelSaveData& _internal_active_travel_stations_for_playthrough(int index) const;
  ::OakSave::PlaythroughActiveFastTravelSaveData* _internal_add_active_travel_stations_for_playthrough();
  public:
  const ::OakSave::PlaythroughActiveFastTravelSaveData& active_travel_stations_for_playthrough(int index) const;
  ::OakSave::PlaythroughActiveFastTravelSaveData* add_active_travel_stations_for_playthrough();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::PlaythroughActiveFastTravelSaveData >&
      active_travel_stations_for_playthrough() const;

  // repeated .OakSave.Character.ActiveLeagueInstanceForEventEntry active_league_instance_for_event = 62;
  int active_league_instance_for_event_size() const;
  private:
  int _internal_active_league_instance_for_event_size() const;
  public:
  void clear_active_league_instance_for_event();
  ::OakSave::Character_ActiveLeagueInstanceForEventEntry* mutable_active_league_instance_for_event(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::Character_ActiveLeagueInstanceForEventEntry >*
      mutable_active_league_instance_for_event();
  private:
  const ::OakSave::Character_ActiveLeagueInstanceForEventEntry& _internal_active_league_instance_for_event(int index) const;
  ::OakSave::Character_ActiveLeagueInstanceForEventEntry* _internal_add_active_league_instance_for_event();
  public:
  const ::OakSave::Character_ActiveLeagueInstanceForEventEntry& active_league_instance_for_event(int index) const;
  ::OakSave::Character_ActiveLeagueInstanceForEventEntry* add_active_league_instance_for_event();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::Character_ActiveLeagueInstanceForEventEntry >&
      active_league_instance_for_event() const;

  // string last_active_travel_station = 23;
  void clear_last_active_travel_station();
  const std::string& last_active_travel_station() const;
  void set_last_active_travel_station(const std::string& value);
  void set_last_active_travel_station(std::string&& value);
  void set_last_active_travel_station(const char* value);
  void set_last_active_travel_station(const char* value, size_t size);
  std::string* mutable_last_active_travel_station();
  std::string* release_last_active_travel_station();
  void set_allocated_last_active_travel_station(std::string* last_active_travel_station);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_last_active_travel_station();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_last_active_travel_station(
      std::string* last_active_travel_station);
  private:
  const std::string& _internal_last_active_travel_station() const;
  void _internal_set_last_active_travel_station(const std::string& value);
  std::string* _internal_mutable_last_active_travel_station();
  public:

  // string preferred_character_name = 43;
  void clear_preferred_character_name();
  const std::string& preferred_character_name() const;
  void set_preferred_character_name(const std::string& value);
  void set_preferred_character_name(std::string&& value);
  void set_preferred_character_name(const char* value);
  void set_preferred_character_name(const char* value, size_t size);
  std::string* mutable_preferred_character_name();
  std::string* release_preferred_character_name();
  void set_allocated_preferred_character_name(std::string* preferred_character_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_preferred_character_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_preferred_character_name(
      std::string* preferred_character_name);
  private:
  const std::string& _internal_preferred_character_name() const;
  void _internal_set_preferred_character_name(const std::string& value);
  std::string* _internal_mutable_preferred_character_name();
  public:

  // string save_game_guid = 56;
  void clear_save_game_guid();
  const std::string& save_game_guid() const;
  void set_save_game_guid(const std::string& value);
  void set_save_game_guid(std::string&& value);
  void set_save_game_guid(const char* value);
  void set_save_game_guid(const char* value, size_t size);
  std::string* mutable_save_game_guid();
  std::string* release_save_game_guid();
  void set_allocated_save_game_guid(std::string* save_game_guid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_save_game_guid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_save_game_guid(
      std::string* save_game_guid);
  private:
  const std::string& _internal_save_game_guid() const;
  void _internal_set_save_game_guid(const std::string& value);
  std::string* _internal_mutable_save_game_guid();
  public:

  // .OakSave.PlayerClassSaveGameData player_class_data = 4;
  bool has_player_class_data() const;
  private:
  bool _internal_has_player_class_data() const;
  public:
  void clear_player_class_data();
  const ::OakSave::PlayerClassSaveGameData& player_class_data() const;
  ::OakSave::PlayerClassSaveGameData* release_player_class_data();
  ::OakSave::PlayerClassSaveGameData* mutable_player_class_data();
  void set_allocated_player_class_data(::OakSave::PlayerClassSaveGameData* player_class_data);
  private:
  const ::OakSave::PlayerClassSaveGameData& _internal_player_class_data() const;
  ::OakSave::PlayerClassSaveGameData* _internal_mutable_player_class_data();
  public:
  void unsafe_arena_set_allocated_player_class_data(
      ::OakSave::PlayerClassSaveGameData* player_class_data);
  ::OakSave::PlayerClassSaveGameData* unsafe_arena_release_player_class_data();

  // .OakSave.OakPlayerAbilitySaveGameData ability_data = 13;
  bool has_ability_data() const;
  private:
  bool _internal_has_ability_data() const;
  public:
  void clear_ability_data();
  const ::OakSave::OakPlayerAbilitySaveGameData& ability_data() const;
  ::OakSave::OakPlayerAbilitySaveGameData* release_ability_data();
  ::OakSave::OakPlayerAbilitySaveGameData* mutable_ability_data();
  void set_allocated_ability_data(::OakSave::OakPlayerAbilitySaveGameData* ability_data);
  private:
  const ::OakSave::OakPlayerAbilitySaveGameData& _internal_ability_data() const;
  ::OakSave::OakPlayerAbilitySaveGameData* _internal_mutable_ability_data();
  public:
  void unsafe_arena_set_allocated_ability_data(
      ::OakSave::OakPlayerAbilitySaveGameData* ability_data);
  ::OakSave::OakPlayerAbilitySaveGameData* unsafe_arena_release_ability_data();

  // .OakSave.DiscoverySaveData discovery_data = 22;
  bool has_discovery_data() const;
  private:
  bool _internal_has_discovery_data() const;
  public:
  void clear_discovery_data();
  const ::OakSave::DiscoverySaveData& discovery_data() const;
  ::OakSave::DiscoverySaveData* release_discovery_data();
  ::OakSave::DiscoverySaveData* mutable_discovery_data();
  void set_allocated_discovery_data(::OakSave::DiscoverySaveData* discovery_data);
  private:
  const ::OakSave::DiscoverySaveData& _internal_discovery_data() const;
  ::OakSave::DiscoverySaveData* _internal_mutable_discovery_data();
  public:
  void unsafe_arena_set_allocated_discovery_data(
      ::OakSave::DiscoverySaveData* discovery_data);
  ::OakSave::DiscoverySaveData* unsafe_arena_release_discovery_data();

  // .OakSave.GuardianRankSaveGameData guardian_rank = 33;
  bool has_guardian_rank() const;
  private:
  bool _internal_has_guardian_rank() const;
  public:
  void clear_guardian_rank();
  const ::OakSave::GuardianRankSaveGameData& guardian_rank() const;
  ::OakSave::GuardianRankSaveGameData* release_guardian_rank();
  ::OakSave::GuardianRankSaveGameData* mutable_guardian_rank();
  void set_allocated_guardian_rank(::OakSave::GuardianRankSaveGameData* guardian_rank);
  private:
  const ::OakSave::GuardianRankSaveGameData& _internal_guardian_rank() const;
  ::OakSave::GuardianRankSaveGameData* _internal_mutable_guardian_rank();
  public:
  void unsafe_arena_set_allocated_guardian_rank(
      ::OakSave::GuardianRankSaveGameData* guardian_rank);
  ::OakSave::GuardianRankSaveGameData* unsafe_arena_release_guardian_rank();

  // .OakSave.CrewQuartersSaveData crew_quarters_room = 34;
  bool has_crew_quarters_room() const;
  private:
  bool _internal_has_crew_quarters_room() const;
  public:
  void clear_crew_quarters_room();
  const ::OakSave::CrewQuartersSaveData& crew_quarters_room() const;
  ::OakSave::CrewQuartersSaveData* release_crew_quarters_room();
  ::OakSave::CrewQuartersSaveData* mutable_crew_quarters_room();
  void set_allocated_crew_quarters_room(::OakSave::CrewQuartersSaveData* crew_quarters_room);
  private:
  const ::OakSave::CrewQuartersSaveData& _internal_crew_quarters_room() const;
  ::OakSave::CrewQuartersSaveData* _internal_mutable_crew_quarters_room();
  public:
  void unsafe_arena_set_allocated_crew_quarters_room(
      ::OakSave::CrewQuartersSaveData* crew_quarters_room);
  ::OakSave::CrewQuartersSaveData* unsafe_arena_release_crew_quarters_room();

  // .OakSave.CrewQuartersGunRackSaveData crew_quarters_gun_rack = 35;
  bool has_crew_quarters_gun_rack() const;
  private:
  bool _internal_has_crew_quarters_gun_rack() const;
  public:
  void clear_crew_quarters_gun_rack();
  const ::OakSave::CrewQuartersGunRackSaveData& crew_quarters_gun_rack() const;
  ::OakSave::CrewQuartersGunRackSaveData* release_crew_quarters_gun_rack();
  ::OakSave::CrewQuartersGunRackSaveData* mutable_crew_quarters_gun_rack();
  void set_allocated_crew_quarters_gun_rack(::OakSave::CrewQuartersGunRackSaveData* crew_quarters_gun_rack);
  private:
  const ::OakSave::CrewQuartersGunRackSaveData& _internal_crew_quarters_gun_rack() const;
  ::OakSave::CrewQuartersGunRackSaveData* _internal_mutable_crew_quarters_gun_rack();
  public:
  void unsafe_arena_set_allocated_crew_quarters_gun_rack(
      ::OakSave::CrewQuartersGunRackSaveData* crew_quarters_gun_rack);
  ::OakSave::CrewQuartersGunRackSaveData* unsafe_arena_release_crew_quarters_gun_rack();

  // .OakSave.MapIDData last_traveled_map_id = 39;
  bool has_last_traveled_map_id() const;
  private:
  bool _internal_has_last_traveled_map_id() const;
  public:
  void clear_last_traveled_map_id();
  const ::OakSave::MapIDData& last_traveled_map_id() const;
  ::OakSave::MapIDData* release_last_traveled_map_id();
  ::OakSave::MapIDData* mutable_last_traveled_map_id();
  void set_allocated_last_traveled_map_id(::OakSave::MapIDData* last_traveled_map_id);
  private:
  const ::OakSave::MapIDData& _internal_last_traveled_map_id() const;
  ::OakSave::MapIDData* _internal_mutable_last_traveled_map_id();
  public:
  void unsafe_arena_set_allocated_last_traveled_map_id(
      ::OakSave::MapIDData* last_traveled_map_id);
  ::OakSave::MapIDData* unsafe_arena_release_last_traveled_map_id();

  // .OakSave.ChallengeCategoryProgressSaveData challenge_category_completion_pcts = 40;
  bool has_challenge_category_completion_pcts() const;
  private:
  bool _internal_has_challenge_category_completion_pcts() const;
  public:
  void clear_challenge_category_completion_pcts();
  const ::OakSave::ChallengeCategoryProgressSaveData& challenge_category_completion_pcts() const;
  ::OakSave::ChallengeCategoryProgressSaveData* release_challenge_category_completion_pcts();
  ::OakSave::ChallengeCategoryProgressSaveData* mutable_challenge_category_completion_pcts();
  void set_allocated_challenge_category_completion_pcts(::OakSave::ChallengeCategoryProgressSaveData* challenge_category_completion_pcts);
  private:
  const ::OakSave::ChallengeCategoryProgressSaveData& _internal_challenge_category_completion_pcts() const;
  ::OakSave::ChallengeCategoryProgressSaveData* _internal_mutable_challenge_category_completion_pcts();
  public:
  void unsafe_arena_set_allocated_challenge_category_completion_pcts(
      ::OakSave::ChallengeCategoryProgressSaveData* challenge_category_completion_pcts);
  ::OakSave::ChallengeCategoryProgressSaveData* unsafe_arena_release_challenge_category_completion_pcts();

  // .OakSave.OakPlayerCharacterSlotSaveGameData character_slot_save_game_data = 41;
  bool has_character_slot_save_game_data() const;
  private:
  bool _internal_has_character_slot_save_game_data() const;
  public:
  void clear_character_slot_save_game_data();
  const ::OakSave::OakPlayerCharacterSlotSaveGameData& character_slot_save_game_data() const;
  ::OakSave::OakPlayerCharacterSlotSaveGameData* release_character_slot_save_game_data();
  ::OakSave::OakPlayerCharacterSlotSaveGameData* mutable_character_slot_save_game_data();
  void set_allocated_character_slot_save_game_data(::OakSave::OakPlayerCharacterSlotSaveGameData* character_slot_save_game_data);
  private:
  const ::OakSave::OakPlayerCharacterSlotSaveGameData& _internal_character_slot_save_game_data() const;
  ::OakSave::OakPlayerCharacterSlotSaveGameData* _internal_mutable_character_slot_save_game_data();
  public:
  void unsafe_arena_set_allocated_character_slot_save_game_data(
      ::OakSave::OakPlayerCharacterSlotSaveGameData* character_slot_save_game_data);
  ::OakSave::OakPlayerCharacterSlotSaveGameData* unsafe_arena_release_character_slot_save_game_data();

  // .OakSave.UITrackingSaveGameData ui_tracking_save_game_data = 42;
  bool has_ui_tracking_save_game_data() const;
  private:
  bool _internal_has_ui_tracking_save_game_data() const;
  public:
  void clear_ui_tracking_save_game_data();
  const ::OakSave::UITrackingSaveGameData& ui_tracking_save_game_data() const;
  ::OakSave::UITrackingSaveGameData* release_ui_tracking_save_game_data();
  ::OakSave::UITrackingSaveGameData* mutable_ui_tracking_save_game_data();
  void set_allocated_ui_tracking_save_game_data(::OakSave::UITrackingSaveGameData* ui_tracking_save_game_data);
  private:
  const ::OakSave::UITrackingSaveGameData& _internal_ui_tracking_save_game_data() const;
  ::OakSave::UITrackingSaveGameData* _internal_mutable_ui_tracking_save_game_data();
  public:
  void unsafe_arena_set_allocated_ui_tracking_save_game_data(
      ::OakSave::UITrackingSaveGameData* ui_tracking_save_game_data);
  ::OakSave::UITrackingSaveGameData* unsafe_arena_release_ui_tracking_save_game_data();

  // .OakSave.TimeOfDaySaveGameData time_of_day_save_game_data = 46;
  bool has_time_of_day_save_game_data() const;
  private:
  bool _internal_has_time_of_day_save_game_data() const;
  public:
  void clear_time_of_day_save_game_data();
  const ::OakSave::TimeOfDaySaveGameData& time_of_day_save_game_data() const;
  ::OakSave::TimeOfDaySaveGameData* release_time_of_day_save_game_data();
  ::OakSave::TimeOfDaySaveGameData* mutable_time_of_day_save_game_data();
  void set_allocated_time_of_day_save_game_data(::OakSave::TimeOfDaySaveGameData* time_of_day_save_game_data);
  private:
  const ::OakSave::TimeOfDaySaveGameData& _internal_time_of_day_save_game_data() const;
  ::OakSave::TimeOfDaySaveGameData* _internal_mutable_time_of_day_save_game_data();
  public:
  void unsafe_arena_set_allocated_time_of_day_save_game_data(
      ::OakSave::TimeOfDaySaveGameData* time_of_day_save_game_data);
  ::OakSave::TimeOfDaySaveGameData* unsafe_arena_release_time_of_day_save_game_data();

  // .OakSave.GbxZoneMapFODSaveGameData gbx_zone_map_fod_save_game_data = 50;
  bool has_gbx_zone_map_fod_save_game_data() const;
  private:
  bool _internal_has_gbx_zone_map_fod_save_game_data() const;
  public:
  void clear_gbx_zone_map_fod_save_game_data();
  const ::OakSave::GbxZoneMapFODSaveGameData& gbx_zone_map_fod_save_game_data() const;
  ::OakSave::GbxZoneMapFODSaveGameData* release_gbx_zone_map_fod_save_game_data();
  ::OakSave::GbxZoneMapFODSaveGameData* mutable_gbx_zone_map_fod_save_game_data();
  void set_allocated_gbx_zone_map_fod_save_game_data(::OakSave::GbxZoneMapFODSaveGameData* gbx_zone_map_fod_save_game_data);
  private:
  const ::OakSave::GbxZoneMapFODSaveGameData& _internal_gbx_zone_map_fod_save_game_data() const;
  ::OakSave::GbxZoneMapFODSaveGameData* _internal_mutable_gbx_zone_map_fod_save_game_data();
  public:
  void unsafe_arena_set_allocated_gbx_zone_map_fod_save_game_data(
      ::OakSave::GbxZoneMapFODSaveGameData* gbx_zone_map_fod_save_game_data);
  ::OakSave::GbxZoneMapFODSaveGameData* unsafe_arena_release_gbx_zone_map_fod_save_game_data();

  // .OakSave.GuardianRankCharacterSaveGameData guardian_rank_character_data = 57;
  bool has_guardian_rank_character_data() const;
  private:
  bool _internal_has_guardian_rank_character_data() const;
  public:
  void clear_guardian_rank_character_data();
  const ::OakSave::GuardianRankCharacterSaveGameData& guardian_rank_character_data() const;
  ::OakSave::GuardianRankCharacterSaveGameData* release_guardian_rank_character_data();
  ::OakSave::GuardianRankCharacterSaveGameData* mutable_guardian_rank_character_data();
  void set_allocated_guardian_rank_character_data(::OakSave::GuardianRankCharacterSaveGameData* guardian_rank_character_data);
  private:
  const ::OakSave::GuardianRankCharacterSaveGameData& _internal_guardian_rank_character_data() const;
  ::OakSave::GuardianRankCharacterSaveGameData* _internal_mutable_guardian_rank_character_data();
  public:
  void unsafe_arena_set_allocated_guardian_rank_character_data(
      ::OakSave::GuardianRankCharacterSaveGameData* guardian_rank_character_data);
  ::OakSave::GuardianRankCharacterSaveGameData* unsafe_arena_release_guardian_rank_character_data();

  // int64 last_save_timestamp = 2;
  void clear_last_save_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 last_save_timestamp() const;
  void set_last_save_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_last_save_timestamp() const;
  void _internal_set_last_save_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 save_game_id = 1;
  void clear_save_game_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 save_game_id() const;
  void set_save_game_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_save_game_id() const;
  void _internal_set_save_game_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 time_played_seconds = 3;
  void clear_time_played_seconds();
  ::PROTOBUF_NAMESPACE_ID::uint32 time_played_seconds() const;
  void set_time_played_seconds(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_time_played_seconds() const;
  void _internal_set_time_played_seconds(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 experience_points = 7;
  void clear_experience_points();
  ::PROTOBUF_NAMESPACE_ID::int32 experience_points() const;
  void set_experience_points(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_experience_points() const;
  void _internal_set_experience_points(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 last_play_through_index = 14;
  void clear_last_play_through_index();
  ::PROTOBUF_NAMESPACE_ID::int32 last_play_through_index() const;
  void set_last_play_through_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_last_play_through_index() const;
  void _internal_set_last_play_through_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 playthroughs_completed = 15;
  void clear_playthroughs_completed();
  ::PROTOBUF_NAMESPACE_ID::int32 playthroughs_completed() const;
  void set_playthroughs_completed(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_playthroughs_completed() const;
  void _internal_set_playthroughs_completed(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 vehicle_last_loadout_index = 27;
  void clear_vehicle_last_loadout_index();
  ::PROTOBUF_NAMESPACE_ID::int32 vehicle_last_loadout_index() const;
  void set_vehicle_last_loadout_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vehicle_last_loadout_index() const;
  void _internal_set_vehicle_last_loadout_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool show_new_playthrough_notification = 16;
  void clear_show_new_playthrough_notification();
  bool show_new_playthrough_notification() const;
  void set_show_new_playthrough_notification(bool value);
  private:
  bool _internal_show_new_playthrough_notification() const;
  void _internal_set_show_new_playthrough_notification(bool value);
  public:

  // bool has_played_special_echo_log_insert_already = 37;
  void clear_has_played_special_echo_log_insert_already();
  bool has_played_special_echo_log_insert_already() const;
  void set_has_played_special_echo_log_insert_already(bool value);
  private:
  bool _internal_has_played_special_echo_log_insert_already() const;
  void _internal_set_has_played_special_echo_log_insert_already(bool value);
  public:

  // bool optional_objective_reward_fixup_applied = 58;
  void clear_optional_objective_reward_fixup_applied();
  bool optional_objective_reward_fixup_applied() const;
  void set_optional_objective_reward_fixup_applied(bool value);
  private:
  bool _internal_optional_objective_reward_fixup_applied() const;
  void _internal_set_optional_objective_reward_fixup_applied(bool value);
  public:

  // bool vehicle_part_rewards_fixup_applied = 59;
  void clear_vehicle_part_rewards_fixup_applied();
  bool vehicle_part_rewards_fixup_applied() const;
  void set_vehicle_part_rewards_fixup_applied(bool value);
  private:
  bool _internal_vehicle_part_rewards_fixup_applied() const;
  void _internal_set_vehicle_part_rewards_fixup_applied(bool value);
  public:

  // int32 name_character_limit = 44;
  void clear_name_character_limit();
  ::PROTOBUF_NAMESPACE_ID::int32 name_character_limit() const;
  void set_name_character_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_name_character_limit() const;
  void _internal_set_name_character_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 preferred_group_mode = 45;
  void clear_preferred_group_mode();
  ::PROTOBUF_NAMESPACE_ID::uint32 preferred_group_mode() const;
  void set_preferred_group_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_preferred_group_mode() const;
  void _internal_set_preferred_group_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 accumulated_level_persistence_reset_timer_seconds = 48;
  void clear_accumulated_level_persistence_reset_timer_seconds();
  ::PROTOBUF_NAMESPACE_ID::uint32 accumulated_level_persistence_reset_timer_seconds() const;
  void set_accumulated_level_persistence_reset_timer_seconds(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_accumulated_level_persistence_reset_timer_seconds() const;
  void _internal_set_accumulated_level_persistence_reset_timer_seconds(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 mayhem_level = 49;
  void clear_mayhem_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 mayhem_level() const;
  void set_mayhem_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mayhem_level() const;
  void _internal_set_mayhem_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 last_active_league = 60;
  void clear_last_active_league();
  ::PROTOBUF_NAMESPACE_ID::uint32 last_active_league() const;
  void set_last_active_league(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_last_active_league() const;
  void _internal_set_last_active_league(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 last_active_league_instance = 61;
  void clear_last_active_league_instance();
  ::PROTOBUF_NAMESPACE_ID::uint32 last_active_league_instance() const;
  void set_last_active_league_instance(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_last_active_league_instance() const;
  void _internal_set_last_active_league_instance(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool levelled_save_vehicle_part_rewards_fixup_applied = 63;
  void clear_levelled_save_vehicle_part_rewards_fixup_applied();
  bool levelled_save_vehicle_part_rewards_fixup_applied() const;
  void set_levelled_save_vehicle_part_rewards_fixup_applied(bool value);
  private:
  bool _internal_levelled_save_vehicle_part_rewards_fixup_applied() const;
  void _internal_set_levelled_save_vehicle_part_rewards_fixup_applied(bool value);
  public:

  // @@protoc_insertion_point(class_scope:OakSave.Character)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::ResourcePoolSavegameData > resource_pools_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::RegionSaveGameData > saved_regions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::GameStatSaveGameData > game_stats_data_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::InventoryCategorySaveData > inventory_category_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::OakInventoryItemSaveGameData > inventory_items_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::EquippedInventorySaveGameData > equipped_inventory_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > active_weapon_list_;
  mutable std::atomic<int> _active_weapon_list_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::MissionPlaythroughSaveGameData > mission_playthroughs_data_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> active_travel_stations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::VehicleUnlockedSaveGameData > vehicles_unlocked_data_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> vehicle_parts_unlocked_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::OakCARMenuVehicleConfigSaveData > vehicle_loadouts_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::ChallengeSaveGameData > challenge_data_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::OakSDUSaveGameData > sdu_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> selected_customizations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > equipped_emote_customizations_;
  mutable std::atomic<int> _equipped_emote_customizations_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::CustomPlayerColorSaveGameData > selected_color_customizations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::EchoLogSaveGameData > unlocked_echo_logs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::Character_NicknameMappingsEntry > nickname_mappings_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::LevelPersistence_Level_SaveGameData > level_persistence_data_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::ActiveFastTravelSaveData > active_or_blacklisted_travel_stations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> last_active_travel_station_for_playthrough_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::GameStateSaveData > game_state_save_data_for_playthrough_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::RegisteredDownloadableEntitlements > registered_downloadable_entitlements_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::PlaythroughActiveFastTravelSaveData > active_travel_stations_for_playthrough_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::Character_ActiveLeagueInstanceForEventEntry > active_league_instance_for_event_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_active_travel_station_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr preferred_character_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr save_game_guid_;
  ::OakSave::PlayerClassSaveGameData* player_class_data_;
  ::OakSave::OakPlayerAbilitySaveGameData* ability_data_;
  ::OakSave::DiscoverySaveData* discovery_data_;
  ::OakSave::GuardianRankSaveGameData* guardian_rank_;
  ::OakSave::CrewQuartersSaveData* crew_quarters_room_;
  ::OakSave::CrewQuartersGunRackSaveData* crew_quarters_gun_rack_;
  ::OakSave::MapIDData* last_traveled_map_id_;
  ::OakSave::ChallengeCategoryProgressSaveData* challenge_category_completion_pcts_;
  ::OakSave::OakPlayerCharacterSlotSaveGameData* character_slot_save_game_data_;
  ::OakSave::UITrackingSaveGameData* ui_tracking_save_game_data_;
  ::OakSave::TimeOfDaySaveGameData* time_of_day_save_game_data_;
  ::OakSave::GbxZoneMapFODSaveGameData* gbx_zone_map_fod_save_game_data_;
  ::OakSave::GuardianRankCharacterSaveGameData* guardian_rank_character_data_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_save_timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 save_game_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 time_played_seconds_;
  ::PROTOBUF_NAMESPACE_ID::int32 experience_points_;
  ::PROTOBUF_NAMESPACE_ID::int32 last_play_through_index_;
  ::PROTOBUF_NAMESPACE_ID::int32 playthroughs_completed_;
  ::PROTOBUF_NAMESPACE_ID::int32 vehicle_last_loadout_index_;
  bool show_new_playthrough_notification_;
  bool has_played_special_echo_log_insert_already_;
  bool optional_objective_reward_fixup_applied_;
  bool vehicle_part_rewards_fixup_applied_;
  ::PROTOBUF_NAMESPACE_ID::int32 name_character_limit_;
  ::PROTOBUF_NAMESPACE_ID::uint32 preferred_group_mode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 accumulated_level_persistence_reset_timer_seconds_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mayhem_level_;
  ::PROTOBUF_NAMESPACE_ID::uint32 last_active_league_;
  ::PROTOBUF_NAMESPACE_ID::uint32 last_active_league_instance_;
  bool levelled_save_vehicle_part_rewards_fixup_applied_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakSave_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PlayerClassSaveGameData

// string player_class_path = 1;
inline void PlayerClassSaveGameData::clear_player_class_path() {
  player_class_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PlayerClassSaveGameData::player_class_path() const {
  // @@protoc_insertion_point(field_get:OakSave.PlayerClassSaveGameData.player_class_path)
  return _internal_player_class_path();
}
inline void PlayerClassSaveGameData::set_player_class_path(const std::string& value) {
  _internal_set_player_class_path(value);
  // @@protoc_insertion_point(field_set:OakSave.PlayerClassSaveGameData.player_class_path)
}
inline std::string* PlayerClassSaveGameData::mutable_player_class_path() {
  // @@protoc_insertion_point(field_mutable:OakSave.PlayerClassSaveGameData.player_class_path)
  return _internal_mutable_player_class_path();
}
inline const std::string& PlayerClassSaveGameData::_internal_player_class_path() const {
  return player_class_path_.Get();
}
inline void PlayerClassSaveGameData::_internal_set_player_class_path(const std::string& value) {
  
  player_class_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PlayerClassSaveGameData::set_player_class_path(std::string&& value) {
  
  player_class_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.PlayerClassSaveGameData.player_class_path)
}
inline void PlayerClassSaveGameData::set_player_class_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  player_class_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.PlayerClassSaveGameData.player_class_path)
}
inline void PlayerClassSaveGameData::set_player_class_path(const char* value,
    size_t size) {
  
  player_class_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.PlayerClassSaveGameData.player_class_path)
}
inline std::string* PlayerClassSaveGameData::_internal_mutable_player_class_path() {
  
  return player_class_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PlayerClassSaveGameData::release_player_class_path() {
  // @@protoc_insertion_point(field_release:OakSave.PlayerClassSaveGameData.player_class_path)
  return player_class_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlayerClassSaveGameData::set_allocated_player_class_path(std::string* player_class_path) {
  if (player_class_path != nullptr) {
    
  } else {
    
  }
  player_class_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), player_class_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.PlayerClassSaveGameData.player_class_path)
}
inline std::string* PlayerClassSaveGameData::unsafe_arena_release_player_class_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.PlayerClassSaveGameData.player_class_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return player_class_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PlayerClassSaveGameData::unsafe_arena_set_allocated_player_class_path(
    std::string* player_class_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (player_class_path != nullptr) {
    
  } else {
    
  }
  player_class_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      player_class_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.PlayerClassSaveGameData.player_class_path)
}

// uint32 dlc_package_id = 2;
inline void PlayerClassSaveGameData::clear_dlc_package_id() {
  dlc_package_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerClassSaveGameData::_internal_dlc_package_id() const {
  return dlc_package_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerClassSaveGameData::dlc_package_id() const {
  // @@protoc_insertion_point(field_get:OakSave.PlayerClassSaveGameData.dlc_package_id)
  return _internal_dlc_package_id();
}
inline void PlayerClassSaveGameData::_internal_set_dlc_package_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  dlc_package_id_ = value;
}
inline void PlayerClassSaveGameData::set_dlc_package_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dlc_package_id(value);
  // @@protoc_insertion_point(field_set:OakSave.PlayerClassSaveGameData.dlc_package_id)
}

// -------------------------------------------------------------------

// ResourcePoolSavegameData

// float amount = 1;
inline void ResourcePoolSavegameData::clear_amount() {
  amount_ = 0;
}
inline float ResourcePoolSavegameData::_internal_amount() const {
  return amount_;
}
inline float ResourcePoolSavegameData::amount() const {
  // @@protoc_insertion_point(field_get:OakSave.ResourcePoolSavegameData.amount)
  return _internal_amount();
}
inline void ResourcePoolSavegameData::_internal_set_amount(float value) {
  
  amount_ = value;
}
inline void ResourcePoolSavegameData::set_amount(float value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:OakSave.ResourcePoolSavegameData.amount)
}

// string resource_path = 2;
inline void ResourcePoolSavegameData::clear_resource_path() {
  resource_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ResourcePoolSavegameData::resource_path() const {
  // @@protoc_insertion_point(field_get:OakSave.ResourcePoolSavegameData.resource_path)
  return _internal_resource_path();
}
inline void ResourcePoolSavegameData::set_resource_path(const std::string& value) {
  _internal_set_resource_path(value);
  // @@protoc_insertion_point(field_set:OakSave.ResourcePoolSavegameData.resource_path)
}
inline std::string* ResourcePoolSavegameData::mutable_resource_path() {
  // @@protoc_insertion_point(field_mutable:OakSave.ResourcePoolSavegameData.resource_path)
  return _internal_mutable_resource_path();
}
inline const std::string& ResourcePoolSavegameData::_internal_resource_path() const {
  return resource_path_.Get();
}
inline void ResourcePoolSavegameData::_internal_set_resource_path(const std::string& value) {
  
  resource_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ResourcePoolSavegameData::set_resource_path(std::string&& value) {
  
  resource_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.ResourcePoolSavegameData.resource_path)
}
inline void ResourcePoolSavegameData::set_resource_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  resource_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.ResourcePoolSavegameData.resource_path)
}
inline void ResourcePoolSavegameData::set_resource_path(const char* value,
    size_t size) {
  
  resource_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.ResourcePoolSavegameData.resource_path)
}
inline std::string* ResourcePoolSavegameData::_internal_mutable_resource_path() {
  
  return resource_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ResourcePoolSavegameData::release_resource_path() {
  // @@protoc_insertion_point(field_release:OakSave.ResourcePoolSavegameData.resource_path)
  return resource_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResourcePoolSavegameData::set_allocated_resource_path(std::string* resource_path) {
  if (resource_path != nullptr) {
    
  } else {
    
  }
  resource_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resource_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.ResourcePoolSavegameData.resource_path)
}
inline std::string* ResourcePoolSavegameData::unsafe_arena_release_resource_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.ResourcePoolSavegameData.resource_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return resource_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ResourcePoolSavegameData::unsafe_arena_set_allocated_resource_path(
    std::string* resource_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (resource_path != nullptr) {
    
  } else {
    
  }
  resource_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      resource_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.ResourcePoolSavegameData.resource_path)
}

// -------------------------------------------------------------------

// RegionSaveGameData

// int32 game_stage = 1;
inline void RegionSaveGameData::clear_game_stage() {
  game_stage_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegionSaveGameData::_internal_game_stage() const {
  return game_stage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegionSaveGameData::game_stage() const {
  // @@protoc_insertion_point(field_get:OakSave.RegionSaveGameData.game_stage)
  return _internal_game_stage();
}
inline void RegionSaveGameData::_internal_set_game_stage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  game_stage_ = value;
}
inline void RegionSaveGameData::set_game_stage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_game_stage(value);
  // @@protoc_insertion_point(field_set:OakSave.RegionSaveGameData.game_stage)
}

// int32 play_through_idx = 2;
inline void RegionSaveGameData::clear_play_through_idx() {
  play_through_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegionSaveGameData::_internal_play_through_idx() const {
  return play_through_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegionSaveGameData::play_through_idx() const {
  // @@protoc_insertion_point(field_get:OakSave.RegionSaveGameData.play_through_idx)
  return _internal_play_through_idx();
}
inline void RegionSaveGameData::_internal_set_play_through_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  play_through_idx_ = value;
}
inline void RegionSaveGameData::set_play_through_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_play_through_idx(value);
  // @@protoc_insertion_point(field_set:OakSave.RegionSaveGameData.play_through_idx)
}

// string region_path = 3;
inline void RegionSaveGameData::clear_region_path() {
  region_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RegionSaveGameData::region_path() const {
  // @@protoc_insertion_point(field_get:OakSave.RegionSaveGameData.region_path)
  return _internal_region_path();
}
inline void RegionSaveGameData::set_region_path(const std::string& value) {
  _internal_set_region_path(value);
  // @@protoc_insertion_point(field_set:OakSave.RegionSaveGameData.region_path)
}
inline std::string* RegionSaveGameData::mutable_region_path() {
  // @@protoc_insertion_point(field_mutable:OakSave.RegionSaveGameData.region_path)
  return _internal_mutable_region_path();
}
inline const std::string& RegionSaveGameData::_internal_region_path() const {
  return region_path_.Get();
}
inline void RegionSaveGameData::_internal_set_region_path(const std::string& value) {
  
  region_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RegionSaveGameData::set_region_path(std::string&& value) {
  
  region_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.RegionSaveGameData.region_path)
}
inline void RegionSaveGameData::set_region_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  region_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.RegionSaveGameData.region_path)
}
inline void RegionSaveGameData::set_region_path(const char* value,
    size_t size) {
  
  region_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.RegionSaveGameData.region_path)
}
inline std::string* RegionSaveGameData::_internal_mutable_region_path() {
  
  return region_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RegionSaveGameData::release_region_path() {
  // @@protoc_insertion_point(field_release:OakSave.RegionSaveGameData.region_path)
  return region_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegionSaveGameData::set_allocated_region_path(std::string* region_path) {
  if (region_path != nullptr) {
    
  } else {
    
  }
  region_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), region_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.RegionSaveGameData.region_path)
}
inline std::string* RegionSaveGameData::unsafe_arena_release_region_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.RegionSaveGameData.region_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return region_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RegionSaveGameData::unsafe_arena_set_allocated_region_path(
    std::string* region_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (region_path != nullptr) {
    
  } else {
    
  }
  region_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      region_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.RegionSaveGameData.region_path)
}

// uint32 dlc_package_id = 4;
inline void RegionSaveGameData::clear_dlc_package_id() {
  dlc_package_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RegionSaveGameData::_internal_dlc_package_id() const {
  return dlc_package_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RegionSaveGameData::dlc_package_id() const {
  // @@protoc_insertion_point(field_get:OakSave.RegionSaveGameData.dlc_package_id)
  return _internal_dlc_package_id();
}
inline void RegionSaveGameData::_internal_set_dlc_package_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  dlc_package_id_ = value;
}
inline void RegionSaveGameData::set_dlc_package_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dlc_package_id(value);
  // @@protoc_insertion_point(field_set:OakSave.RegionSaveGameData.dlc_package_id)
}

// -------------------------------------------------------------------

// InventoryBalanceStateInitializationData

// int32 game_stage = 1;
inline void InventoryBalanceStateInitializationData::clear_game_stage() {
  game_stage_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InventoryBalanceStateInitializationData::_internal_game_stage() const {
  return game_stage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InventoryBalanceStateInitializationData::game_stage() const {
  // @@protoc_insertion_point(field_get:OakSave.InventoryBalanceStateInitializationData.game_stage)
  return _internal_game_stage();
}
inline void InventoryBalanceStateInitializationData::_internal_set_game_stage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  game_stage_ = value;
}
inline void InventoryBalanceStateInitializationData::set_game_stage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_game_stage(value);
  // @@protoc_insertion_point(field_set:OakSave.InventoryBalanceStateInitializationData.game_stage)
}

// string inventory_data = 2;
inline void InventoryBalanceStateInitializationData::clear_inventory_data() {
  inventory_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InventoryBalanceStateInitializationData::inventory_data() const {
  // @@protoc_insertion_point(field_get:OakSave.InventoryBalanceStateInitializationData.inventory_data)
  return _internal_inventory_data();
}
inline void InventoryBalanceStateInitializationData::set_inventory_data(const std::string& value) {
  _internal_set_inventory_data(value);
  // @@protoc_insertion_point(field_set:OakSave.InventoryBalanceStateInitializationData.inventory_data)
}
inline std::string* InventoryBalanceStateInitializationData::mutable_inventory_data() {
  // @@protoc_insertion_point(field_mutable:OakSave.InventoryBalanceStateInitializationData.inventory_data)
  return _internal_mutable_inventory_data();
}
inline const std::string& InventoryBalanceStateInitializationData::_internal_inventory_data() const {
  return inventory_data_.Get();
}
inline void InventoryBalanceStateInitializationData::_internal_set_inventory_data(const std::string& value) {
  
  inventory_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InventoryBalanceStateInitializationData::set_inventory_data(std::string&& value) {
  
  inventory_data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.InventoryBalanceStateInitializationData.inventory_data)
}
inline void InventoryBalanceStateInitializationData::set_inventory_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  inventory_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.InventoryBalanceStateInitializationData.inventory_data)
}
inline void InventoryBalanceStateInitializationData::set_inventory_data(const char* value,
    size_t size) {
  
  inventory_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.InventoryBalanceStateInitializationData.inventory_data)
}
inline std::string* InventoryBalanceStateInitializationData::_internal_mutable_inventory_data() {
  
  return inventory_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InventoryBalanceStateInitializationData::release_inventory_data() {
  // @@protoc_insertion_point(field_release:OakSave.InventoryBalanceStateInitializationData.inventory_data)
  return inventory_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InventoryBalanceStateInitializationData::set_allocated_inventory_data(std::string* inventory_data) {
  if (inventory_data != nullptr) {
    
  } else {
    
  }
  inventory_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), inventory_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.InventoryBalanceStateInitializationData.inventory_data)
}
inline std::string* InventoryBalanceStateInitializationData::unsafe_arena_release_inventory_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.InventoryBalanceStateInitializationData.inventory_data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return inventory_data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InventoryBalanceStateInitializationData::unsafe_arena_set_allocated_inventory_data(
    std::string* inventory_data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (inventory_data != nullptr) {
    
  } else {
    
  }
  inventory_data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      inventory_data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.InventoryBalanceStateInitializationData.inventory_data)
}

// string inventory_balance_data = 3;
inline void InventoryBalanceStateInitializationData::clear_inventory_balance_data() {
  inventory_balance_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InventoryBalanceStateInitializationData::inventory_balance_data() const {
  // @@protoc_insertion_point(field_get:OakSave.InventoryBalanceStateInitializationData.inventory_balance_data)
  return _internal_inventory_balance_data();
}
inline void InventoryBalanceStateInitializationData::set_inventory_balance_data(const std::string& value) {
  _internal_set_inventory_balance_data(value);
  // @@protoc_insertion_point(field_set:OakSave.InventoryBalanceStateInitializationData.inventory_balance_data)
}
inline std::string* InventoryBalanceStateInitializationData::mutable_inventory_balance_data() {
  // @@protoc_insertion_point(field_mutable:OakSave.InventoryBalanceStateInitializationData.inventory_balance_data)
  return _internal_mutable_inventory_balance_data();
}
inline const std::string& InventoryBalanceStateInitializationData::_internal_inventory_balance_data() const {
  return inventory_balance_data_.Get();
}
inline void InventoryBalanceStateInitializationData::_internal_set_inventory_balance_data(const std::string& value) {
  
  inventory_balance_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InventoryBalanceStateInitializationData::set_inventory_balance_data(std::string&& value) {
  
  inventory_balance_data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.InventoryBalanceStateInitializationData.inventory_balance_data)
}
inline void InventoryBalanceStateInitializationData::set_inventory_balance_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  inventory_balance_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.InventoryBalanceStateInitializationData.inventory_balance_data)
}
inline void InventoryBalanceStateInitializationData::set_inventory_balance_data(const char* value,
    size_t size) {
  
  inventory_balance_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.InventoryBalanceStateInitializationData.inventory_balance_data)
}
inline std::string* InventoryBalanceStateInitializationData::_internal_mutable_inventory_balance_data() {
  
  return inventory_balance_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InventoryBalanceStateInitializationData::release_inventory_balance_data() {
  // @@protoc_insertion_point(field_release:OakSave.InventoryBalanceStateInitializationData.inventory_balance_data)
  return inventory_balance_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InventoryBalanceStateInitializationData::set_allocated_inventory_balance_data(std::string* inventory_balance_data) {
  if (inventory_balance_data != nullptr) {
    
  } else {
    
  }
  inventory_balance_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), inventory_balance_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.InventoryBalanceStateInitializationData.inventory_balance_data)
}
inline std::string* InventoryBalanceStateInitializationData::unsafe_arena_release_inventory_balance_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.InventoryBalanceStateInitializationData.inventory_balance_data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return inventory_balance_data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InventoryBalanceStateInitializationData::unsafe_arena_set_allocated_inventory_balance_data(
    std::string* inventory_balance_data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (inventory_balance_data != nullptr) {
    
  } else {
    
  }
  inventory_balance_data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      inventory_balance_data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.InventoryBalanceStateInitializationData.inventory_balance_data)
}

// string manufacturer_data = 4;
inline void InventoryBalanceStateInitializationData::clear_manufacturer_data() {
  manufacturer_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InventoryBalanceStateInitializationData::manufacturer_data() const {
  // @@protoc_insertion_point(field_get:OakSave.InventoryBalanceStateInitializationData.manufacturer_data)
  return _internal_manufacturer_data();
}
inline void InventoryBalanceStateInitializationData::set_manufacturer_data(const std::string& value) {
  _internal_set_manufacturer_data(value);
  // @@protoc_insertion_point(field_set:OakSave.InventoryBalanceStateInitializationData.manufacturer_data)
}
inline std::string* InventoryBalanceStateInitializationData::mutable_manufacturer_data() {
  // @@protoc_insertion_point(field_mutable:OakSave.InventoryBalanceStateInitializationData.manufacturer_data)
  return _internal_mutable_manufacturer_data();
}
inline const std::string& InventoryBalanceStateInitializationData::_internal_manufacturer_data() const {
  return manufacturer_data_.Get();
}
inline void InventoryBalanceStateInitializationData::_internal_set_manufacturer_data(const std::string& value) {
  
  manufacturer_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InventoryBalanceStateInitializationData::set_manufacturer_data(std::string&& value) {
  
  manufacturer_data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.InventoryBalanceStateInitializationData.manufacturer_data)
}
inline void InventoryBalanceStateInitializationData::set_manufacturer_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  manufacturer_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.InventoryBalanceStateInitializationData.manufacturer_data)
}
inline void InventoryBalanceStateInitializationData::set_manufacturer_data(const char* value,
    size_t size) {
  
  manufacturer_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.InventoryBalanceStateInitializationData.manufacturer_data)
}
inline std::string* InventoryBalanceStateInitializationData::_internal_mutable_manufacturer_data() {
  
  return manufacturer_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InventoryBalanceStateInitializationData::release_manufacturer_data() {
  // @@protoc_insertion_point(field_release:OakSave.InventoryBalanceStateInitializationData.manufacturer_data)
  return manufacturer_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InventoryBalanceStateInitializationData::set_allocated_manufacturer_data(std::string* manufacturer_data) {
  if (manufacturer_data != nullptr) {
    
  } else {
    
  }
  manufacturer_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), manufacturer_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.InventoryBalanceStateInitializationData.manufacturer_data)
}
inline std::string* InventoryBalanceStateInitializationData::unsafe_arena_release_manufacturer_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.InventoryBalanceStateInitializationData.manufacturer_data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return manufacturer_data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InventoryBalanceStateInitializationData::unsafe_arena_set_allocated_manufacturer_data(
    std::string* manufacturer_data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (manufacturer_data != nullptr) {
    
  } else {
    
  }
  manufacturer_data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      manufacturer_data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.InventoryBalanceStateInitializationData.manufacturer_data)
}

// repeated string part_list = 5;
inline int InventoryBalanceStateInitializationData::_internal_part_list_size() const {
  return part_list_.size();
}
inline int InventoryBalanceStateInitializationData::part_list_size() const {
  return _internal_part_list_size();
}
inline void InventoryBalanceStateInitializationData::clear_part_list() {
  part_list_.Clear();
}
inline std::string* InventoryBalanceStateInitializationData::add_part_list() {
  // @@protoc_insertion_point(field_add_mutable:OakSave.InventoryBalanceStateInitializationData.part_list)
  return _internal_add_part_list();
}
inline const std::string& InventoryBalanceStateInitializationData::_internal_part_list(int index) const {
  return part_list_.Get(index);
}
inline const std::string& InventoryBalanceStateInitializationData::part_list(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.InventoryBalanceStateInitializationData.part_list)
  return _internal_part_list(index);
}
inline std::string* InventoryBalanceStateInitializationData::mutable_part_list(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.InventoryBalanceStateInitializationData.part_list)
  return part_list_.Mutable(index);
}
inline void InventoryBalanceStateInitializationData::set_part_list(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:OakSave.InventoryBalanceStateInitializationData.part_list)
  part_list_.Mutable(index)->assign(value);
}
inline void InventoryBalanceStateInitializationData::set_part_list(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:OakSave.InventoryBalanceStateInitializationData.part_list)
  part_list_.Mutable(index)->assign(std::move(value));
}
inline void InventoryBalanceStateInitializationData::set_part_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  part_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:OakSave.InventoryBalanceStateInitializationData.part_list)
}
inline void InventoryBalanceStateInitializationData::set_part_list(int index, const char* value, size_t size) {
  part_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:OakSave.InventoryBalanceStateInitializationData.part_list)
}
inline std::string* InventoryBalanceStateInitializationData::_internal_add_part_list() {
  return part_list_.Add();
}
inline void InventoryBalanceStateInitializationData::add_part_list(const std::string& value) {
  part_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:OakSave.InventoryBalanceStateInitializationData.part_list)
}
inline void InventoryBalanceStateInitializationData::add_part_list(std::string&& value) {
  part_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:OakSave.InventoryBalanceStateInitializationData.part_list)
}
inline void InventoryBalanceStateInitializationData::add_part_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  part_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:OakSave.InventoryBalanceStateInitializationData.part_list)
}
inline void InventoryBalanceStateInitializationData::add_part_list(const char* value, size_t size) {
  part_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:OakSave.InventoryBalanceStateInitializationData.part_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
InventoryBalanceStateInitializationData::part_list() const {
  // @@protoc_insertion_point(field_list:OakSave.InventoryBalanceStateInitializationData.part_list)
  return part_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
InventoryBalanceStateInitializationData::mutable_part_list() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.InventoryBalanceStateInitializationData.part_list)
  return &part_list_;
}

// repeated string generic_part_list = 6;
inline int InventoryBalanceStateInitializationData::_internal_generic_part_list_size() const {
  return generic_part_list_.size();
}
inline int InventoryBalanceStateInitializationData::generic_part_list_size() const {
  return _internal_generic_part_list_size();
}
inline void InventoryBalanceStateInitializationData::clear_generic_part_list() {
  generic_part_list_.Clear();
}
inline std::string* InventoryBalanceStateInitializationData::add_generic_part_list() {
  // @@protoc_insertion_point(field_add_mutable:OakSave.InventoryBalanceStateInitializationData.generic_part_list)
  return _internal_add_generic_part_list();
}
inline const std::string& InventoryBalanceStateInitializationData::_internal_generic_part_list(int index) const {
  return generic_part_list_.Get(index);
}
inline const std::string& InventoryBalanceStateInitializationData::generic_part_list(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.InventoryBalanceStateInitializationData.generic_part_list)
  return _internal_generic_part_list(index);
}
inline std::string* InventoryBalanceStateInitializationData::mutable_generic_part_list(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.InventoryBalanceStateInitializationData.generic_part_list)
  return generic_part_list_.Mutable(index);
}
inline void InventoryBalanceStateInitializationData::set_generic_part_list(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:OakSave.InventoryBalanceStateInitializationData.generic_part_list)
  generic_part_list_.Mutable(index)->assign(value);
}
inline void InventoryBalanceStateInitializationData::set_generic_part_list(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:OakSave.InventoryBalanceStateInitializationData.generic_part_list)
  generic_part_list_.Mutable(index)->assign(std::move(value));
}
inline void InventoryBalanceStateInitializationData::set_generic_part_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  generic_part_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:OakSave.InventoryBalanceStateInitializationData.generic_part_list)
}
inline void InventoryBalanceStateInitializationData::set_generic_part_list(int index, const char* value, size_t size) {
  generic_part_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:OakSave.InventoryBalanceStateInitializationData.generic_part_list)
}
inline std::string* InventoryBalanceStateInitializationData::_internal_add_generic_part_list() {
  return generic_part_list_.Add();
}
inline void InventoryBalanceStateInitializationData::add_generic_part_list(const std::string& value) {
  generic_part_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:OakSave.InventoryBalanceStateInitializationData.generic_part_list)
}
inline void InventoryBalanceStateInitializationData::add_generic_part_list(std::string&& value) {
  generic_part_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:OakSave.InventoryBalanceStateInitializationData.generic_part_list)
}
inline void InventoryBalanceStateInitializationData::add_generic_part_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  generic_part_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:OakSave.InventoryBalanceStateInitializationData.generic_part_list)
}
inline void InventoryBalanceStateInitializationData::add_generic_part_list(const char* value, size_t size) {
  generic_part_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:OakSave.InventoryBalanceStateInitializationData.generic_part_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
InventoryBalanceStateInitializationData::generic_part_list() const {
  // @@protoc_insertion_point(field_list:OakSave.InventoryBalanceStateInitializationData.generic_part_list)
  return generic_part_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
InventoryBalanceStateInitializationData::mutable_generic_part_list() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.InventoryBalanceStateInitializationData.generic_part_list)
  return &generic_part_list_;
}

// bytes additional_data = 7;
inline void InventoryBalanceStateInitializationData::clear_additional_data() {
  additional_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InventoryBalanceStateInitializationData::additional_data() const {
  // @@protoc_insertion_point(field_get:OakSave.InventoryBalanceStateInitializationData.additional_data)
  return _internal_additional_data();
}
inline void InventoryBalanceStateInitializationData::set_additional_data(const std::string& value) {
  _internal_set_additional_data(value);
  // @@protoc_insertion_point(field_set:OakSave.InventoryBalanceStateInitializationData.additional_data)
}
inline std::string* InventoryBalanceStateInitializationData::mutable_additional_data() {
  // @@protoc_insertion_point(field_mutable:OakSave.InventoryBalanceStateInitializationData.additional_data)
  return _internal_mutable_additional_data();
}
inline const std::string& InventoryBalanceStateInitializationData::_internal_additional_data() const {
  return additional_data_.Get();
}
inline void InventoryBalanceStateInitializationData::_internal_set_additional_data(const std::string& value) {
  
  additional_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InventoryBalanceStateInitializationData::set_additional_data(std::string&& value) {
  
  additional_data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.InventoryBalanceStateInitializationData.additional_data)
}
inline void InventoryBalanceStateInitializationData::set_additional_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  additional_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.InventoryBalanceStateInitializationData.additional_data)
}
inline void InventoryBalanceStateInitializationData::set_additional_data(const void* value,
    size_t size) {
  
  additional_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.InventoryBalanceStateInitializationData.additional_data)
}
inline std::string* InventoryBalanceStateInitializationData::_internal_mutable_additional_data() {
  
  return additional_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InventoryBalanceStateInitializationData::release_additional_data() {
  // @@protoc_insertion_point(field_release:OakSave.InventoryBalanceStateInitializationData.additional_data)
  return additional_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InventoryBalanceStateInitializationData::set_allocated_additional_data(std::string* additional_data) {
  if (additional_data != nullptr) {
    
  } else {
    
  }
  additional_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), additional_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.InventoryBalanceStateInitializationData.additional_data)
}
inline std::string* InventoryBalanceStateInitializationData::unsafe_arena_release_additional_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.InventoryBalanceStateInitializationData.additional_data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return additional_data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InventoryBalanceStateInitializationData::unsafe_arena_set_allocated_additional_data(
    std::string* additional_data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (additional_data != nullptr) {
    
  } else {
    
  }
  additional_data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      additional_data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.InventoryBalanceStateInitializationData.additional_data)
}

// repeated string customization_part_list = 8;
inline int InventoryBalanceStateInitializationData::_internal_customization_part_list_size() const {
  return customization_part_list_.size();
}
inline int InventoryBalanceStateInitializationData::customization_part_list_size() const {
  return _internal_customization_part_list_size();
}
inline void InventoryBalanceStateInitializationData::clear_customization_part_list() {
  customization_part_list_.Clear();
}
inline std::string* InventoryBalanceStateInitializationData::add_customization_part_list() {
  // @@protoc_insertion_point(field_add_mutable:OakSave.InventoryBalanceStateInitializationData.customization_part_list)
  return _internal_add_customization_part_list();
}
inline const std::string& InventoryBalanceStateInitializationData::_internal_customization_part_list(int index) const {
  return customization_part_list_.Get(index);
}
inline const std::string& InventoryBalanceStateInitializationData::customization_part_list(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.InventoryBalanceStateInitializationData.customization_part_list)
  return _internal_customization_part_list(index);
}
inline std::string* InventoryBalanceStateInitializationData::mutable_customization_part_list(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.InventoryBalanceStateInitializationData.customization_part_list)
  return customization_part_list_.Mutable(index);
}
inline void InventoryBalanceStateInitializationData::set_customization_part_list(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:OakSave.InventoryBalanceStateInitializationData.customization_part_list)
  customization_part_list_.Mutable(index)->assign(value);
}
inline void InventoryBalanceStateInitializationData::set_customization_part_list(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:OakSave.InventoryBalanceStateInitializationData.customization_part_list)
  customization_part_list_.Mutable(index)->assign(std::move(value));
}
inline void InventoryBalanceStateInitializationData::set_customization_part_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  customization_part_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:OakSave.InventoryBalanceStateInitializationData.customization_part_list)
}
inline void InventoryBalanceStateInitializationData::set_customization_part_list(int index, const char* value, size_t size) {
  customization_part_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:OakSave.InventoryBalanceStateInitializationData.customization_part_list)
}
inline std::string* InventoryBalanceStateInitializationData::_internal_add_customization_part_list() {
  return customization_part_list_.Add();
}
inline void InventoryBalanceStateInitializationData::add_customization_part_list(const std::string& value) {
  customization_part_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:OakSave.InventoryBalanceStateInitializationData.customization_part_list)
}
inline void InventoryBalanceStateInitializationData::add_customization_part_list(std::string&& value) {
  customization_part_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:OakSave.InventoryBalanceStateInitializationData.customization_part_list)
}
inline void InventoryBalanceStateInitializationData::add_customization_part_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  customization_part_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:OakSave.InventoryBalanceStateInitializationData.customization_part_list)
}
inline void InventoryBalanceStateInitializationData::add_customization_part_list(const char* value, size_t size) {
  customization_part_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:OakSave.InventoryBalanceStateInitializationData.customization_part_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
InventoryBalanceStateInitializationData::customization_part_list() const {
  // @@protoc_insertion_point(field_list:OakSave.InventoryBalanceStateInitializationData.customization_part_list)
  return customization_part_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
InventoryBalanceStateInitializationData::mutable_customization_part_list() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.InventoryBalanceStateInitializationData.customization_part_list)
  return &customization_part_list_;
}

// -------------------------------------------------------------------

// OakInventoryItemSaveGameData

// bytes item_serial_number = 1;
inline void OakInventoryItemSaveGameData::clear_item_serial_number() {
  item_serial_number_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OakInventoryItemSaveGameData::item_serial_number() const {
  // @@protoc_insertion_point(field_get:OakSave.OakInventoryItemSaveGameData.item_serial_number)
  return _internal_item_serial_number();
}
inline void OakInventoryItemSaveGameData::set_item_serial_number(const std::string& value) {
  _internal_set_item_serial_number(value);
  // @@protoc_insertion_point(field_set:OakSave.OakInventoryItemSaveGameData.item_serial_number)
}
inline std::string* OakInventoryItemSaveGameData::mutable_item_serial_number() {
  // @@protoc_insertion_point(field_mutable:OakSave.OakInventoryItemSaveGameData.item_serial_number)
  return _internal_mutable_item_serial_number();
}
inline const std::string& OakInventoryItemSaveGameData::_internal_item_serial_number() const {
  return item_serial_number_.Get();
}
inline void OakInventoryItemSaveGameData::_internal_set_item_serial_number(const std::string& value) {
  
  item_serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OakInventoryItemSaveGameData::set_item_serial_number(std::string&& value) {
  
  item_serial_number_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.OakInventoryItemSaveGameData.item_serial_number)
}
inline void OakInventoryItemSaveGameData::set_item_serial_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  item_serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.OakInventoryItemSaveGameData.item_serial_number)
}
inline void OakInventoryItemSaveGameData::set_item_serial_number(const void* value,
    size_t size) {
  
  item_serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.OakInventoryItemSaveGameData.item_serial_number)
}
inline std::string* OakInventoryItemSaveGameData::_internal_mutable_item_serial_number() {
  
  return item_serial_number_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OakInventoryItemSaveGameData::release_item_serial_number() {
  // @@protoc_insertion_point(field_release:OakSave.OakInventoryItemSaveGameData.item_serial_number)
  return item_serial_number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OakInventoryItemSaveGameData::set_allocated_item_serial_number(std::string* item_serial_number) {
  if (item_serial_number != nullptr) {
    
  } else {
    
  }
  item_serial_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), item_serial_number,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.OakInventoryItemSaveGameData.item_serial_number)
}
inline std::string* OakInventoryItemSaveGameData::unsafe_arena_release_item_serial_number() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.OakInventoryItemSaveGameData.item_serial_number)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return item_serial_number_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OakInventoryItemSaveGameData::unsafe_arena_set_allocated_item_serial_number(
    std::string* item_serial_number) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (item_serial_number != nullptr) {
    
  } else {
    
  }
  item_serial_number_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      item_serial_number, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.OakInventoryItemSaveGameData.item_serial_number)
}

// int32 pickup_order_index = 2;
inline void OakInventoryItemSaveGameData::clear_pickup_order_index() {
  pickup_order_index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OakInventoryItemSaveGameData::_internal_pickup_order_index() const {
  return pickup_order_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OakInventoryItemSaveGameData::pickup_order_index() const {
  // @@protoc_insertion_point(field_get:OakSave.OakInventoryItemSaveGameData.pickup_order_index)
  return _internal_pickup_order_index();
}
inline void OakInventoryItemSaveGameData::_internal_set_pickup_order_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pickup_order_index_ = value;
}
inline void OakInventoryItemSaveGameData::set_pickup_order_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pickup_order_index(value);
  // @@protoc_insertion_point(field_set:OakSave.OakInventoryItemSaveGameData.pickup_order_index)
}

// int32 flags = 3;
inline void OakInventoryItemSaveGameData::clear_flags() {
  flags_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OakInventoryItemSaveGameData::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OakInventoryItemSaveGameData::flags() const {
  // @@protoc_insertion_point(field_get:OakSave.OakInventoryItemSaveGameData.flags)
  return _internal_flags();
}
inline void OakInventoryItemSaveGameData::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  flags_ = value;
}
inline void OakInventoryItemSaveGameData::set_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:OakSave.OakInventoryItemSaveGameData.flags)
}

// string weapon_skin_path = 4;
inline void OakInventoryItemSaveGameData::clear_weapon_skin_path() {
  weapon_skin_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OakInventoryItemSaveGameData::weapon_skin_path() const {
  // @@protoc_insertion_point(field_get:OakSave.OakInventoryItemSaveGameData.weapon_skin_path)
  return _internal_weapon_skin_path();
}
inline void OakInventoryItemSaveGameData::set_weapon_skin_path(const std::string& value) {
  _internal_set_weapon_skin_path(value);
  // @@protoc_insertion_point(field_set:OakSave.OakInventoryItemSaveGameData.weapon_skin_path)
}
inline std::string* OakInventoryItemSaveGameData::mutable_weapon_skin_path() {
  // @@protoc_insertion_point(field_mutable:OakSave.OakInventoryItemSaveGameData.weapon_skin_path)
  return _internal_mutable_weapon_skin_path();
}
inline const std::string& OakInventoryItemSaveGameData::_internal_weapon_skin_path() const {
  return weapon_skin_path_.Get();
}
inline void OakInventoryItemSaveGameData::_internal_set_weapon_skin_path(const std::string& value) {
  
  weapon_skin_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OakInventoryItemSaveGameData::set_weapon_skin_path(std::string&& value) {
  
  weapon_skin_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.OakInventoryItemSaveGameData.weapon_skin_path)
}
inline void OakInventoryItemSaveGameData::set_weapon_skin_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  weapon_skin_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.OakInventoryItemSaveGameData.weapon_skin_path)
}
inline void OakInventoryItemSaveGameData::set_weapon_skin_path(const char* value,
    size_t size) {
  
  weapon_skin_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.OakInventoryItemSaveGameData.weapon_skin_path)
}
inline std::string* OakInventoryItemSaveGameData::_internal_mutable_weapon_skin_path() {
  
  return weapon_skin_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OakInventoryItemSaveGameData::release_weapon_skin_path() {
  // @@protoc_insertion_point(field_release:OakSave.OakInventoryItemSaveGameData.weapon_skin_path)
  return weapon_skin_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OakInventoryItemSaveGameData::set_allocated_weapon_skin_path(std::string* weapon_skin_path) {
  if (weapon_skin_path != nullptr) {
    
  } else {
    
  }
  weapon_skin_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), weapon_skin_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.OakInventoryItemSaveGameData.weapon_skin_path)
}
inline std::string* OakInventoryItemSaveGameData::unsafe_arena_release_weapon_skin_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.OakInventoryItemSaveGameData.weapon_skin_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return weapon_skin_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OakInventoryItemSaveGameData::unsafe_arena_set_allocated_weapon_skin_path(
    std::string* weapon_skin_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (weapon_skin_path != nullptr) {
    
  } else {
    
  }
  weapon_skin_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      weapon_skin_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.OakInventoryItemSaveGameData.weapon_skin_path)
}

// .OakSave.InventoryBalanceStateInitializationData development_save_data = 5;
inline bool OakInventoryItemSaveGameData::_internal_has_development_save_data() const {
  return this != internal_default_instance() && development_save_data_ != nullptr;
}
inline bool OakInventoryItemSaveGameData::has_development_save_data() const {
  return _internal_has_development_save_data();
}
inline void OakInventoryItemSaveGameData::clear_development_save_data() {
  if (GetArena() == nullptr && development_save_data_ != nullptr) {
    delete development_save_data_;
  }
  development_save_data_ = nullptr;
}
inline const ::OakSave::InventoryBalanceStateInitializationData& OakInventoryItemSaveGameData::_internal_development_save_data() const {
  const ::OakSave::InventoryBalanceStateInitializationData* p = development_save_data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::OakSave::InventoryBalanceStateInitializationData*>(
      &::OakSave::_InventoryBalanceStateInitializationData_default_instance_);
}
inline const ::OakSave::InventoryBalanceStateInitializationData& OakInventoryItemSaveGameData::development_save_data() const {
  // @@protoc_insertion_point(field_get:OakSave.OakInventoryItemSaveGameData.development_save_data)
  return _internal_development_save_data();
}
inline void OakInventoryItemSaveGameData::unsafe_arena_set_allocated_development_save_data(
    ::OakSave::InventoryBalanceStateInitializationData* development_save_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(development_save_data_);
  }
  development_save_data_ = development_save_data;
  if (development_save_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.OakInventoryItemSaveGameData.development_save_data)
}
inline ::OakSave::InventoryBalanceStateInitializationData* OakInventoryItemSaveGameData::release_development_save_data() {
  auto temp = unsafe_arena_release_development_save_data();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::OakSave::InventoryBalanceStateInitializationData* OakInventoryItemSaveGameData::unsafe_arena_release_development_save_data() {
  // @@protoc_insertion_point(field_release:OakSave.OakInventoryItemSaveGameData.development_save_data)
  
  ::OakSave::InventoryBalanceStateInitializationData* temp = development_save_data_;
  development_save_data_ = nullptr;
  return temp;
}
inline ::OakSave::InventoryBalanceStateInitializationData* OakInventoryItemSaveGameData::_internal_mutable_development_save_data() {
  
  if (development_save_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::OakSave::InventoryBalanceStateInitializationData>(GetArena());
    development_save_data_ = p;
  }
  return development_save_data_;
}
inline ::OakSave::InventoryBalanceStateInitializationData* OakInventoryItemSaveGameData::mutable_development_save_data() {
  // @@protoc_insertion_point(field_mutable:OakSave.OakInventoryItemSaveGameData.development_save_data)
  return _internal_mutable_development_save_data();
}
inline void OakInventoryItemSaveGameData::set_allocated_development_save_data(::OakSave::InventoryBalanceStateInitializationData* development_save_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete development_save_data_;
  }
  if (development_save_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(development_save_data);
    if (message_arena != submessage_arena) {
      development_save_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, development_save_data, submessage_arena);
    }
    
  } else {
    
  }
  development_save_data_ = development_save_data;
  // @@protoc_insertion_point(field_set_allocated:OakSave.OakInventoryItemSaveGameData.development_save_data)
}

// -------------------------------------------------------------------

// EquippedInventorySaveGameData

// int32 inventory_list_index = 1;
inline void EquippedInventorySaveGameData::clear_inventory_list_index() {
  inventory_list_index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EquippedInventorySaveGameData::_internal_inventory_list_index() const {
  return inventory_list_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EquippedInventorySaveGameData::inventory_list_index() const {
  // @@protoc_insertion_point(field_get:OakSave.EquippedInventorySaveGameData.inventory_list_index)
  return _internal_inventory_list_index();
}
inline void EquippedInventorySaveGameData::_internal_set_inventory_list_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  inventory_list_index_ = value;
}
inline void EquippedInventorySaveGameData::set_inventory_list_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_inventory_list_index(value);
  // @@protoc_insertion_point(field_set:OakSave.EquippedInventorySaveGameData.inventory_list_index)
}

// bool enabled = 2;
inline void EquippedInventorySaveGameData::clear_enabled() {
  enabled_ = false;
}
inline bool EquippedInventorySaveGameData::_internal_enabled() const {
  return enabled_;
}
inline bool EquippedInventorySaveGameData::enabled() const {
  // @@protoc_insertion_point(field_get:OakSave.EquippedInventorySaveGameData.enabled)
  return _internal_enabled();
}
inline void EquippedInventorySaveGameData::_internal_set_enabled(bool value) {
  
  enabled_ = value;
}
inline void EquippedInventorySaveGameData::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:OakSave.EquippedInventorySaveGameData.enabled)
}

// string slot_data_path = 3;
inline void EquippedInventorySaveGameData::clear_slot_data_path() {
  slot_data_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EquippedInventorySaveGameData::slot_data_path() const {
  // @@protoc_insertion_point(field_get:OakSave.EquippedInventorySaveGameData.slot_data_path)
  return _internal_slot_data_path();
}
inline void EquippedInventorySaveGameData::set_slot_data_path(const std::string& value) {
  _internal_set_slot_data_path(value);
  // @@protoc_insertion_point(field_set:OakSave.EquippedInventorySaveGameData.slot_data_path)
}
inline std::string* EquippedInventorySaveGameData::mutable_slot_data_path() {
  // @@protoc_insertion_point(field_mutable:OakSave.EquippedInventorySaveGameData.slot_data_path)
  return _internal_mutable_slot_data_path();
}
inline const std::string& EquippedInventorySaveGameData::_internal_slot_data_path() const {
  return slot_data_path_.Get();
}
inline void EquippedInventorySaveGameData::_internal_set_slot_data_path(const std::string& value) {
  
  slot_data_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EquippedInventorySaveGameData::set_slot_data_path(std::string&& value) {
  
  slot_data_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.EquippedInventorySaveGameData.slot_data_path)
}
inline void EquippedInventorySaveGameData::set_slot_data_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  slot_data_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.EquippedInventorySaveGameData.slot_data_path)
}
inline void EquippedInventorySaveGameData::set_slot_data_path(const char* value,
    size_t size) {
  
  slot_data_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.EquippedInventorySaveGameData.slot_data_path)
}
inline std::string* EquippedInventorySaveGameData::_internal_mutable_slot_data_path() {
  
  return slot_data_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EquippedInventorySaveGameData::release_slot_data_path() {
  // @@protoc_insertion_point(field_release:OakSave.EquippedInventorySaveGameData.slot_data_path)
  return slot_data_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EquippedInventorySaveGameData::set_allocated_slot_data_path(std::string* slot_data_path) {
  if (slot_data_path != nullptr) {
    
  } else {
    
  }
  slot_data_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), slot_data_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.EquippedInventorySaveGameData.slot_data_path)
}
inline std::string* EquippedInventorySaveGameData::unsafe_arena_release_slot_data_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.EquippedInventorySaveGameData.slot_data_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return slot_data_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EquippedInventorySaveGameData::unsafe_arena_set_allocated_slot_data_path(
    std::string* slot_data_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (slot_data_path != nullptr) {
    
  } else {
    
  }
  slot_data_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      slot_data_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.EquippedInventorySaveGameData.slot_data_path)
}

// string trinket_data_path = 4;
inline void EquippedInventorySaveGameData::clear_trinket_data_path() {
  trinket_data_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EquippedInventorySaveGameData::trinket_data_path() const {
  // @@protoc_insertion_point(field_get:OakSave.EquippedInventorySaveGameData.trinket_data_path)
  return _internal_trinket_data_path();
}
inline void EquippedInventorySaveGameData::set_trinket_data_path(const std::string& value) {
  _internal_set_trinket_data_path(value);
  // @@protoc_insertion_point(field_set:OakSave.EquippedInventorySaveGameData.trinket_data_path)
}
inline std::string* EquippedInventorySaveGameData::mutable_trinket_data_path() {
  // @@protoc_insertion_point(field_mutable:OakSave.EquippedInventorySaveGameData.trinket_data_path)
  return _internal_mutable_trinket_data_path();
}
inline const std::string& EquippedInventorySaveGameData::_internal_trinket_data_path() const {
  return trinket_data_path_.Get();
}
inline void EquippedInventorySaveGameData::_internal_set_trinket_data_path(const std::string& value) {
  
  trinket_data_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EquippedInventorySaveGameData::set_trinket_data_path(std::string&& value) {
  
  trinket_data_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.EquippedInventorySaveGameData.trinket_data_path)
}
inline void EquippedInventorySaveGameData::set_trinket_data_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trinket_data_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.EquippedInventorySaveGameData.trinket_data_path)
}
inline void EquippedInventorySaveGameData::set_trinket_data_path(const char* value,
    size_t size) {
  
  trinket_data_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.EquippedInventorySaveGameData.trinket_data_path)
}
inline std::string* EquippedInventorySaveGameData::_internal_mutable_trinket_data_path() {
  
  return trinket_data_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EquippedInventorySaveGameData::release_trinket_data_path() {
  // @@protoc_insertion_point(field_release:OakSave.EquippedInventorySaveGameData.trinket_data_path)
  return trinket_data_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EquippedInventorySaveGameData::set_allocated_trinket_data_path(std::string* trinket_data_path) {
  if (trinket_data_path != nullptr) {
    
  } else {
    
  }
  trinket_data_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trinket_data_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.EquippedInventorySaveGameData.trinket_data_path)
}
inline std::string* EquippedInventorySaveGameData::unsafe_arena_release_trinket_data_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.EquippedInventorySaveGameData.trinket_data_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return trinket_data_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EquippedInventorySaveGameData::unsafe_arena_set_allocated_trinket_data_path(
    std::string* trinket_data_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (trinket_data_path != nullptr) {
    
  } else {
    
  }
  trinket_data_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      trinket_data_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.EquippedInventorySaveGameData.trinket_data_path)
}

// -------------------------------------------------------------------

// OakAbilityTreeItemSaveGameData

// string item_asset_path = 1;
inline void OakAbilityTreeItemSaveGameData::clear_item_asset_path() {
  item_asset_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OakAbilityTreeItemSaveGameData::item_asset_path() const {
  // @@protoc_insertion_point(field_get:OakSave.OakAbilityTreeItemSaveGameData.item_asset_path)
  return _internal_item_asset_path();
}
inline void OakAbilityTreeItemSaveGameData::set_item_asset_path(const std::string& value) {
  _internal_set_item_asset_path(value);
  // @@protoc_insertion_point(field_set:OakSave.OakAbilityTreeItemSaveGameData.item_asset_path)
}
inline std::string* OakAbilityTreeItemSaveGameData::mutable_item_asset_path() {
  // @@protoc_insertion_point(field_mutable:OakSave.OakAbilityTreeItemSaveGameData.item_asset_path)
  return _internal_mutable_item_asset_path();
}
inline const std::string& OakAbilityTreeItemSaveGameData::_internal_item_asset_path() const {
  return item_asset_path_.Get();
}
inline void OakAbilityTreeItemSaveGameData::_internal_set_item_asset_path(const std::string& value) {
  
  item_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OakAbilityTreeItemSaveGameData::set_item_asset_path(std::string&& value) {
  
  item_asset_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.OakAbilityTreeItemSaveGameData.item_asset_path)
}
inline void OakAbilityTreeItemSaveGameData::set_item_asset_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  item_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.OakAbilityTreeItemSaveGameData.item_asset_path)
}
inline void OakAbilityTreeItemSaveGameData::set_item_asset_path(const char* value,
    size_t size) {
  
  item_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.OakAbilityTreeItemSaveGameData.item_asset_path)
}
inline std::string* OakAbilityTreeItemSaveGameData::_internal_mutable_item_asset_path() {
  
  return item_asset_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OakAbilityTreeItemSaveGameData::release_item_asset_path() {
  // @@protoc_insertion_point(field_release:OakSave.OakAbilityTreeItemSaveGameData.item_asset_path)
  return item_asset_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OakAbilityTreeItemSaveGameData::set_allocated_item_asset_path(std::string* item_asset_path) {
  if (item_asset_path != nullptr) {
    
  } else {
    
  }
  item_asset_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), item_asset_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.OakAbilityTreeItemSaveGameData.item_asset_path)
}
inline std::string* OakAbilityTreeItemSaveGameData::unsafe_arena_release_item_asset_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.OakAbilityTreeItemSaveGameData.item_asset_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return item_asset_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OakAbilityTreeItemSaveGameData::unsafe_arena_set_allocated_item_asset_path(
    std::string* item_asset_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (item_asset_path != nullptr) {
    
  } else {
    
  }
  item_asset_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      item_asset_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.OakAbilityTreeItemSaveGameData.item_asset_path)
}

// int32 points = 2;
inline void OakAbilityTreeItemSaveGameData::clear_points() {
  points_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OakAbilityTreeItemSaveGameData::_internal_points() const {
  return points_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OakAbilityTreeItemSaveGameData::points() const {
  // @@protoc_insertion_point(field_get:OakSave.OakAbilityTreeItemSaveGameData.points)
  return _internal_points();
}
inline void OakAbilityTreeItemSaveGameData::_internal_set_points(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  points_ = value;
}
inline void OakAbilityTreeItemSaveGameData::set_points(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_points(value);
  // @@protoc_insertion_point(field_set:OakSave.OakAbilityTreeItemSaveGameData.points)
}

// int32 max_points = 3;
inline void OakAbilityTreeItemSaveGameData::clear_max_points() {
  max_points_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OakAbilityTreeItemSaveGameData::_internal_max_points() const {
  return max_points_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OakAbilityTreeItemSaveGameData::max_points() const {
  // @@protoc_insertion_point(field_get:OakSave.OakAbilityTreeItemSaveGameData.max_points)
  return _internal_max_points();
}
inline void OakAbilityTreeItemSaveGameData::_internal_set_max_points(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_points_ = value;
}
inline void OakAbilityTreeItemSaveGameData::set_max_points(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_points(value);
  // @@protoc_insertion_point(field_set:OakSave.OakAbilityTreeItemSaveGameData.max_points)
}

// int32 tree_identifier = 4;
inline void OakAbilityTreeItemSaveGameData::clear_tree_identifier() {
  tree_identifier_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OakAbilityTreeItemSaveGameData::_internal_tree_identifier() const {
  return tree_identifier_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OakAbilityTreeItemSaveGameData::tree_identifier() const {
  // @@protoc_insertion_point(field_get:OakSave.OakAbilityTreeItemSaveGameData.tree_identifier)
  return _internal_tree_identifier();
}
inline void OakAbilityTreeItemSaveGameData::_internal_set_tree_identifier(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tree_identifier_ = value;
}
inline void OakAbilityTreeItemSaveGameData::set_tree_identifier(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tree_identifier(value);
  // @@protoc_insertion_point(field_set:OakSave.OakAbilityTreeItemSaveGameData.tree_identifier)
}

// -------------------------------------------------------------------

// OakAbilitySlotSaveGameData

// string ability_class_path = 1;
inline void OakAbilitySlotSaveGameData::clear_ability_class_path() {
  ability_class_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OakAbilitySlotSaveGameData::ability_class_path() const {
  // @@protoc_insertion_point(field_get:OakSave.OakAbilitySlotSaveGameData.ability_class_path)
  return _internal_ability_class_path();
}
inline void OakAbilitySlotSaveGameData::set_ability_class_path(const std::string& value) {
  _internal_set_ability_class_path(value);
  // @@protoc_insertion_point(field_set:OakSave.OakAbilitySlotSaveGameData.ability_class_path)
}
inline std::string* OakAbilitySlotSaveGameData::mutable_ability_class_path() {
  // @@protoc_insertion_point(field_mutable:OakSave.OakAbilitySlotSaveGameData.ability_class_path)
  return _internal_mutable_ability_class_path();
}
inline const std::string& OakAbilitySlotSaveGameData::_internal_ability_class_path() const {
  return ability_class_path_.Get();
}
inline void OakAbilitySlotSaveGameData::_internal_set_ability_class_path(const std::string& value) {
  
  ability_class_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OakAbilitySlotSaveGameData::set_ability_class_path(std::string&& value) {
  
  ability_class_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.OakAbilitySlotSaveGameData.ability_class_path)
}
inline void OakAbilitySlotSaveGameData::set_ability_class_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ability_class_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.OakAbilitySlotSaveGameData.ability_class_path)
}
inline void OakAbilitySlotSaveGameData::set_ability_class_path(const char* value,
    size_t size) {
  
  ability_class_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.OakAbilitySlotSaveGameData.ability_class_path)
}
inline std::string* OakAbilitySlotSaveGameData::_internal_mutable_ability_class_path() {
  
  return ability_class_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OakAbilitySlotSaveGameData::release_ability_class_path() {
  // @@protoc_insertion_point(field_release:OakSave.OakAbilitySlotSaveGameData.ability_class_path)
  return ability_class_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OakAbilitySlotSaveGameData::set_allocated_ability_class_path(std::string* ability_class_path) {
  if (ability_class_path != nullptr) {
    
  } else {
    
  }
  ability_class_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ability_class_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.OakAbilitySlotSaveGameData.ability_class_path)
}
inline std::string* OakAbilitySlotSaveGameData::unsafe_arena_release_ability_class_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.OakAbilitySlotSaveGameData.ability_class_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ability_class_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OakAbilitySlotSaveGameData::unsafe_arena_set_allocated_ability_class_path(
    std::string* ability_class_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ability_class_path != nullptr) {
    
  } else {
    
  }
  ability_class_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ability_class_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.OakAbilitySlotSaveGameData.ability_class_path)
}

// string slot_asset_path = 2;
inline void OakAbilitySlotSaveGameData::clear_slot_asset_path() {
  slot_asset_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OakAbilitySlotSaveGameData::slot_asset_path() const {
  // @@protoc_insertion_point(field_get:OakSave.OakAbilitySlotSaveGameData.slot_asset_path)
  return _internal_slot_asset_path();
}
inline void OakAbilitySlotSaveGameData::set_slot_asset_path(const std::string& value) {
  _internal_set_slot_asset_path(value);
  // @@protoc_insertion_point(field_set:OakSave.OakAbilitySlotSaveGameData.slot_asset_path)
}
inline std::string* OakAbilitySlotSaveGameData::mutable_slot_asset_path() {
  // @@protoc_insertion_point(field_mutable:OakSave.OakAbilitySlotSaveGameData.slot_asset_path)
  return _internal_mutable_slot_asset_path();
}
inline const std::string& OakAbilitySlotSaveGameData::_internal_slot_asset_path() const {
  return slot_asset_path_.Get();
}
inline void OakAbilitySlotSaveGameData::_internal_set_slot_asset_path(const std::string& value) {
  
  slot_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OakAbilitySlotSaveGameData::set_slot_asset_path(std::string&& value) {
  
  slot_asset_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.OakAbilitySlotSaveGameData.slot_asset_path)
}
inline void OakAbilitySlotSaveGameData::set_slot_asset_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  slot_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.OakAbilitySlotSaveGameData.slot_asset_path)
}
inline void OakAbilitySlotSaveGameData::set_slot_asset_path(const char* value,
    size_t size) {
  
  slot_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.OakAbilitySlotSaveGameData.slot_asset_path)
}
inline std::string* OakAbilitySlotSaveGameData::_internal_mutable_slot_asset_path() {
  
  return slot_asset_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OakAbilitySlotSaveGameData::release_slot_asset_path() {
  // @@protoc_insertion_point(field_release:OakSave.OakAbilitySlotSaveGameData.slot_asset_path)
  return slot_asset_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OakAbilitySlotSaveGameData::set_allocated_slot_asset_path(std::string* slot_asset_path) {
  if (slot_asset_path != nullptr) {
    
  } else {
    
  }
  slot_asset_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), slot_asset_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.OakAbilitySlotSaveGameData.slot_asset_path)
}
inline std::string* OakAbilitySlotSaveGameData::unsafe_arena_release_slot_asset_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.OakAbilitySlotSaveGameData.slot_asset_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return slot_asset_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OakAbilitySlotSaveGameData::unsafe_arena_set_allocated_slot_asset_path(
    std::string* slot_asset_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (slot_asset_path != nullptr) {
    
  } else {
    
  }
  slot_asset_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      slot_asset_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.OakAbilitySlotSaveGameData.slot_asset_path)
}

// -------------------------------------------------------------------

// OakActionAbilityAugmentSaveGameData

// string action_ability_class_path = 1;
inline void OakActionAbilityAugmentSaveGameData::clear_action_ability_class_path() {
  action_ability_class_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OakActionAbilityAugmentSaveGameData::action_ability_class_path() const {
  // @@protoc_insertion_point(field_get:OakSave.OakActionAbilityAugmentSaveGameData.action_ability_class_path)
  return _internal_action_ability_class_path();
}
inline void OakActionAbilityAugmentSaveGameData::set_action_ability_class_path(const std::string& value) {
  _internal_set_action_ability_class_path(value);
  // @@protoc_insertion_point(field_set:OakSave.OakActionAbilityAugmentSaveGameData.action_ability_class_path)
}
inline std::string* OakActionAbilityAugmentSaveGameData::mutable_action_ability_class_path() {
  // @@protoc_insertion_point(field_mutable:OakSave.OakActionAbilityAugmentSaveGameData.action_ability_class_path)
  return _internal_mutable_action_ability_class_path();
}
inline const std::string& OakActionAbilityAugmentSaveGameData::_internal_action_ability_class_path() const {
  return action_ability_class_path_.Get();
}
inline void OakActionAbilityAugmentSaveGameData::_internal_set_action_ability_class_path(const std::string& value) {
  
  action_ability_class_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OakActionAbilityAugmentSaveGameData::set_action_ability_class_path(std::string&& value) {
  
  action_ability_class_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.OakActionAbilityAugmentSaveGameData.action_ability_class_path)
}
inline void OakActionAbilityAugmentSaveGameData::set_action_ability_class_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  action_ability_class_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.OakActionAbilityAugmentSaveGameData.action_ability_class_path)
}
inline void OakActionAbilityAugmentSaveGameData::set_action_ability_class_path(const char* value,
    size_t size) {
  
  action_ability_class_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.OakActionAbilityAugmentSaveGameData.action_ability_class_path)
}
inline std::string* OakActionAbilityAugmentSaveGameData::_internal_mutable_action_ability_class_path() {
  
  return action_ability_class_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OakActionAbilityAugmentSaveGameData::release_action_ability_class_path() {
  // @@protoc_insertion_point(field_release:OakSave.OakActionAbilityAugmentSaveGameData.action_ability_class_path)
  return action_ability_class_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OakActionAbilityAugmentSaveGameData::set_allocated_action_ability_class_path(std::string* action_ability_class_path) {
  if (action_ability_class_path != nullptr) {
    
  } else {
    
  }
  action_ability_class_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action_ability_class_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.OakActionAbilityAugmentSaveGameData.action_ability_class_path)
}
inline std::string* OakActionAbilityAugmentSaveGameData::unsafe_arena_release_action_ability_class_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.OakActionAbilityAugmentSaveGameData.action_ability_class_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return action_ability_class_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OakActionAbilityAugmentSaveGameData::unsafe_arena_set_allocated_action_ability_class_path(
    std::string* action_ability_class_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (action_ability_class_path != nullptr) {
    
  } else {
    
  }
  action_ability_class_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      action_ability_class_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.OakActionAbilityAugmentSaveGameData.action_ability_class_path)
}

// string slot_asset_path = 2;
inline void OakActionAbilityAugmentSaveGameData::clear_slot_asset_path() {
  slot_asset_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OakActionAbilityAugmentSaveGameData::slot_asset_path() const {
  // @@protoc_insertion_point(field_get:OakSave.OakActionAbilityAugmentSaveGameData.slot_asset_path)
  return _internal_slot_asset_path();
}
inline void OakActionAbilityAugmentSaveGameData::set_slot_asset_path(const std::string& value) {
  _internal_set_slot_asset_path(value);
  // @@protoc_insertion_point(field_set:OakSave.OakActionAbilityAugmentSaveGameData.slot_asset_path)
}
inline std::string* OakActionAbilityAugmentSaveGameData::mutable_slot_asset_path() {
  // @@protoc_insertion_point(field_mutable:OakSave.OakActionAbilityAugmentSaveGameData.slot_asset_path)
  return _internal_mutable_slot_asset_path();
}
inline const std::string& OakActionAbilityAugmentSaveGameData::_internal_slot_asset_path() const {
  return slot_asset_path_.Get();
}
inline void OakActionAbilityAugmentSaveGameData::_internal_set_slot_asset_path(const std::string& value) {
  
  slot_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OakActionAbilityAugmentSaveGameData::set_slot_asset_path(std::string&& value) {
  
  slot_asset_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.OakActionAbilityAugmentSaveGameData.slot_asset_path)
}
inline void OakActionAbilityAugmentSaveGameData::set_slot_asset_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  slot_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.OakActionAbilityAugmentSaveGameData.slot_asset_path)
}
inline void OakActionAbilityAugmentSaveGameData::set_slot_asset_path(const char* value,
    size_t size) {
  
  slot_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.OakActionAbilityAugmentSaveGameData.slot_asset_path)
}
inline std::string* OakActionAbilityAugmentSaveGameData::_internal_mutable_slot_asset_path() {
  
  return slot_asset_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OakActionAbilityAugmentSaveGameData::release_slot_asset_path() {
  // @@protoc_insertion_point(field_release:OakSave.OakActionAbilityAugmentSaveGameData.slot_asset_path)
  return slot_asset_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OakActionAbilityAugmentSaveGameData::set_allocated_slot_asset_path(std::string* slot_asset_path) {
  if (slot_asset_path != nullptr) {
    
  } else {
    
  }
  slot_asset_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), slot_asset_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.OakActionAbilityAugmentSaveGameData.slot_asset_path)
}
inline std::string* OakActionAbilityAugmentSaveGameData::unsafe_arena_release_slot_asset_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.OakActionAbilityAugmentSaveGameData.slot_asset_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return slot_asset_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OakActionAbilityAugmentSaveGameData::unsafe_arena_set_allocated_slot_asset_path(
    std::string* slot_asset_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (slot_asset_path != nullptr) {
    
  } else {
    
  }
  slot_asset_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      slot_asset_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.OakActionAbilityAugmentSaveGameData.slot_asset_path)
}

// string augment_asset_path = 3;
inline void OakActionAbilityAugmentSaveGameData::clear_augment_asset_path() {
  augment_asset_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OakActionAbilityAugmentSaveGameData::augment_asset_path() const {
  // @@protoc_insertion_point(field_get:OakSave.OakActionAbilityAugmentSaveGameData.augment_asset_path)
  return _internal_augment_asset_path();
}
inline void OakActionAbilityAugmentSaveGameData::set_augment_asset_path(const std::string& value) {
  _internal_set_augment_asset_path(value);
  // @@protoc_insertion_point(field_set:OakSave.OakActionAbilityAugmentSaveGameData.augment_asset_path)
}
inline std::string* OakActionAbilityAugmentSaveGameData::mutable_augment_asset_path() {
  // @@protoc_insertion_point(field_mutable:OakSave.OakActionAbilityAugmentSaveGameData.augment_asset_path)
  return _internal_mutable_augment_asset_path();
}
inline const std::string& OakActionAbilityAugmentSaveGameData::_internal_augment_asset_path() const {
  return augment_asset_path_.Get();
}
inline void OakActionAbilityAugmentSaveGameData::_internal_set_augment_asset_path(const std::string& value) {
  
  augment_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OakActionAbilityAugmentSaveGameData::set_augment_asset_path(std::string&& value) {
  
  augment_asset_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.OakActionAbilityAugmentSaveGameData.augment_asset_path)
}
inline void OakActionAbilityAugmentSaveGameData::set_augment_asset_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  augment_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.OakActionAbilityAugmentSaveGameData.augment_asset_path)
}
inline void OakActionAbilityAugmentSaveGameData::set_augment_asset_path(const char* value,
    size_t size) {
  
  augment_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.OakActionAbilityAugmentSaveGameData.augment_asset_path)
}
inline std::string* OakActionAbilityAugmentSaveGameData::_internal_mutable_augment_asset_path() {
  
  return augment_asset_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OakActionAbilityAugmentSaveGameData::release_augment_asset_path() {
  // @@protoc_insertion_point(field_release:OakSave.OakActionAbilityAugmentSaveGameData.augment_asset_path)
  return augment_asset_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OakActionAbilityAugmentSaveGameData::set_allocated_augment_asset_path(std::string* augment_asset_path) {
  if (augment_asset_path != nullptr) {
    
  } else {
    
  }
  augment_asset_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), augment_asset_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.OakActionAbilityAugmentSaveGameData.augment_asset_path)
}
inline std::string* OakActionAbilityAugmentSaveGameData::unsafe_arena_release_augment_asset_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.OakActionAbilityAugmentSaveGameData.augment_asset_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return augment_asset_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OakActionAbilityAugmentSaveGameData::unsafe_arena_set_allocated_augment_asset_path(
    std::string* augment_asset_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (augment_asset_path != nullptr) {
    
  } else {
    
  }
  augment_asset_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      augment_asset_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.OakActionAbilityAugmentSaveGameData.augment_asset_path)
}

// -------------------------------------------------------------------

// OakActionAbilityAugmentConfigurationSaveGameData

// string ability_class_path = 1;
inline void OakActionAbilityAugmentConfigurationSaveGameData::clear_ability_class_path() {
  ability_class_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OakActionAbilityAugmentConfigurationSaveGameData::ability_class_path() const {
  // @@protoc_insertion_point(field_get:OakSave.OakActionAbilityAugmentConfigurationSaveGameData.ability_class_path)
  return _internal_ability_class_path();
}
inline void OakActionAbilityAugmentConfigurationSaveGameData::set_ability_class_path(const std::string& value) {
  _internal_set_ability_class_path(value);
  // @@protoc_insertion_point(field_set:OakSave.OakActionAbilityAugmentConfigurationSaveGameData.ability_class_path)
}
inline std::string* OakActionAbilityAugmentConfigurationSaveGameData::mutable_ability_class_path() {
  // @@protoc_insertion_point(field_mutable:OakSave.OakActionAbilityAugmentConfigurationSaveGameData.ability_class_path)
  return _internal_mutable_ability_class_path();
}
inline const std::string& OakActionAbilityAugmentConfigurationSaveGameData::_internal_ability_class_path() const {
  return ability_class_path_.Get();
}
inline void OakActionAbilityAugmentConfigurationSaveGameData::_internal_set_ability_class_path(const std::string& value) {
  
  ability_class_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OakActionAbilityAugmentConfigurationSaveGameData::set_ability_class_path(std::string&& value) {
  
  ability_class_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.OakActionAbilityAugmentConfigurationSaveGameData.ability_class_path)
}
inline void OakActionAbilityAugmentConfigurationSaveGameData::set_ability_class_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ability_class_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.OakActionAbilityAugmentConfigurationSaveGameData.ability_class_path)
}
inline void OakActionAbilityAugmentConfigurationSaveGameData::set_ability_class_path(const char* value,
    size_t size) {
  
  ability_class_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.OakActionAbilityAugmentConfigurationSaveGameData.ability_class_path)
}
inline std::string* OakActionAbilityAugmentConfigurationSaveGameData::_internal_mutable_ability_class_path() {
  
  return ability_class_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OakActionAbilityAugmentConfigurationSaveGameData::release_ability_class_path() {
  // @@protoc_insertion_point(field_release:OakSave.OakActionAbilityAugmentConfigurationSaveGameData.ability_class_path)
  return ability_class_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OakActionAbilityAugmentConfigurationSaveGameData::set_allocated_ability_class_path(std::string* ability_class_path) {
  if (ability_class_path != nullptr) {
    
  } else {
    
  }
  ability_class_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ability_class_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.OakActionAbilityAugmentConfigurationSaveGameData.ability_class_path)
}
inline std::string* OakActionAbilityAugmentConfigurationSaveGameData::unsafe_arena_release_ability_class_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.OakActionAbilityAugmentConfigurationSaveGameData.ability_class_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ability_class_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OakActionAbilityAugmentConfigurationSaveGameData::unsafe_arena_set_allocated_ability_class_path(
    std::string* ability_class_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ability_class_path != nullptr) {
    
  } else {
    
  }
  ability_class_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ability_class_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.OakActionAbilityAugmentConfigurationSaveGameData.ability_class_path)
}

// string augment_asset_path = 2;
inline void OakActionAbilityAugmentConfigurationSaveGameData::clear_augment_asset_path() {
  augment_asset_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OakActionAbilityAugmentConfigurationSaveGameData::augment_asset_path() const {
  // @@protoc_insertion_point(field_get:OakSave.OakActionAbilityAugmentConfigurationSaveGameData.augment_asset_path)
  return _internal_augment_asset_path();
}
inline void OakActionAbilityAugmentConfigurationSaveGameData::set_augment_asset_path(const std::string& value) {
  _internal_set_augment_asset_path(value);
  // @@protoc_insertion_point(field_set:OakSave.OakActionAbilityAugmentConfigurationSaveGameData.augment_asset_path)
}
inline std::string* OakActionAbilityAugmentConfigurationSaveGameData::mutable_augment_asset_path() {
  // @@protoc_insertion_point(field_mutable:OakSave.OakActionAbilityAugmentConfigurationSaveGameData.augment_asset_path)
  return _internal_mutable_augment_asset_path();
}
inline const std::string& OakActionAbilityAugmentConfigurationSaveGameData::_internal_augment_asset_path() const {
  return augment_asset_path_.Get();
}
inline void OakActionAbilityAugmentConfigurationSaveGameData::_internal_set_augment_asset_path(const std::string& value) {
  
  augment_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OakActionAbilityAugmentConfigurationSaveGameData::set_augment_asset_path(std::string&& value) {
  
  augment_asset_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.OakActionAbilityAugmentConfigurationSaveGameData.augment_asset_path)
}
inline void OakActionAbilityAugmentConfigurationSaveGameData::set_augment_asset_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  augment_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.OakActionAbilityAugmentConfigurationSaveGameData.augment_asset_path)
}
inline void OakActionAbilityAugmentConfigurationSaveGameData::set_augment_asset_path(const char* value,
    size_t size) {
  
  augment_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.OakActionAbilityAugmentConfigurationSaveGameData.augment_asset_path)
}
inline std::string* OakActionAbilityAugmentConfigurationSaveGameData::_internal_mutable_augment_asset_path() {
  
  return augment_asset_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OakActionAbilityAugmentConfigurationSaveGameData::release_augment_asset_path() {
  // @@protoc_insertion_point(field_release:OakSave.OakActionAbilityAugmentConfigurationSaveGameData.augment_asset_path)
  return augment_asset_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OakActionAbilityAugmentConfigurationSaveGameData::set_allocated_augment_asset_path(std::string* augment_asset_path) {
  if (augment_asset_path != nullptr) {
    
  } else {
    
  }
  augment_asset_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), augment_asset_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.OakActionAbilityAugmentConfigurationSaveGameData.augment_asset_path)
}
inline std::string* OakActionAbilityAugmentConfigurationSaveGameData::unsafe_arena_release_augment_asset_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.OakActionAbilityAugmentConfigurationSaveGameData.augment_asset_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return augment_asset_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OakActionAbilityAugmentConfigurationSaveGameData::unsafe_arena_set_allocated_augment_asset_path(
    std::string* augment_asset_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (augment_asset_path != nullptr) {
    
  } else {
    
  }
  augment_asset_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      augment_asset_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.OakActionAbilityAugmentConfigurationSaveGameData.augment_asset_path)
}

// string mod_slot_asset_path = 3;
inline void OakActionAbilityAugmentConfigurationSaveGameData::clear_mod_slot_asset_path() {
  mod_slot_asset_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OakActionAbilityAugmentConfigurationSaveGameData::mod_slot_asset_path() const {
  // @@protoc_insertion_point(field_get:OakSave.OakActionAbilityAugmentConfigurationSaveGameData.mod_slot_asset_path)
  return _internal_mod_slot_asset_path();
}
inline void OakActionAbilityAugmentConfigurationSaveGameData::set_mod_slot_asset_path(const std::string& value) {
  _internal_set_mod_slot_asset_path(value);
  // @@protoc_insertion_point(field_set:OakSave.OakActionAbilityAugmentConfigurationSaveGameData.mod_slot_asset_path)
}
inline std::string* OakActionAbilityAugmentConfigurationSaveGameData::mutable_mod_slot_asset_path() {
  // @@protoc_insertion_point(field_mutable:OakSave.OakActionAbilityAugmentConfigurationSaveGameData.mod_slot_asset_path)
  return _internal_mutable_mod_slot_asset_path();
}
inline const std::string& OakActionAbilityAugmentConfigurationSaveGameData::_internal_mod_slot_asset_path() const {
  return mod_slot_asset_path_.Get();
}
inline void OakActionAbilityAugmentConfigurationSaveGameData::_internal_set_mod_slot_asset_path(const std::string& value) {
  
  mod_slot_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OakActionAbilityAugmentConfigurationSaveGameData::set_mod_slot_asset_path(std::string&& value) {
  
  mod_slot_asset_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.OakActionAbilityAugmentConfigurationSaveGameData.mod_slot_asset_path)
}
inline void OakActionAbilityAugmentConfigurationSaveGameData::set_mod_slot_asset_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mod_slot_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.OakActionAbilityAugmentConfigurationSaveGameData.mod_slot_asset_path)
}
inline void OakActionAbilityAugmentConfigurationSaveGameData::set_mod_slot_asset_path(const char* value,
    size_t size) {
  
  mod_slot_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.OakActionAbilityAugmentConfigurationSaveGameData.mod_slot_asset_path)
}
inline std::string* OakActionAbilityAugmentConfigurationSaveGameData::_internal_mutable_mod_slot_asset_path() {
  
  return mod_slot_asset_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OakActionAbilityAugmentConfigurationSaveGameData::release_mod_slot_asset_path() {
  // @@protoc_insertion_point(field_release:OakSave.OakActionAbilityAugmentConfigurationSaveGameData.mod_slot_asset_path)
  return mod_slot_asset_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OakActionAbilityAugmentConfigurationSaveGameData::set_allocated_mod_slot_asset_path(std::string* mod_slot_asset_path) {
  if (mod_slot_asset_path != nullptr) {
    
  } else {
    
  }
  mod_slot_asset_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mod_slot_asset_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.OakActionAbilityAugmentConfigurationSaveGameData.mod_slot_asset_path)
}
inline std::string* OakActionAbilityAugmentConfigurationSaveGameData::unsafe_arena_release_mod_slot_asset_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.OakActionAbilityAugmentConfigurationSaveGameData.mod_slot_asset_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return mod_slot_asset_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OakActionAbilityAugmentConfigurationSaveGameData::unsafe_arena_set_allocated_mod_slot_asset_path(
    std::string* mod_slot_asset_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mod_slot_asset_path != nullptr) {
    
  } else {
    
  }
  mod_slot_asset_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mod_slot_asset_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.OakActionAbilityAugmentConfigurationSaveGameData.mod_slot_asset_path)
}

// string mod_asset_path = 4;
inline void OakActionAbilityAugmentConfigurationSaveGameData::clear_mod_asset_path() {
  mod_asset_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OakActionAbilityAugmentConfigurationSaveGameData::mod_asset_path() const {
  // @@protoc_insertion_point(field_get:OakSave.OakActionAbilityAugmentConfigurationSaveGameData.mod_asset_path)
  return _internal_mod_asset_path();
}
inline void OakActionAbilityAugmentConfigurationSaveGameData::set_mod_asset_path(const std::string& value) {
  _internal_set_mod_asset_path(value);
  // @@protoc_insertion_point(field_set:OakSave.OakActionAbilityAugmentConfigurationSaveGameData.mod_asset_path)
}
inline std::string* OakActionAbilityAugmentConfigurationSaveGameData::mutable_mod_asset_path() {
  // @@protoc_insertion_point(field_mutable:OakSave.OakActionAbilityAugmentConfigurationSaveGameData.mod_asset_path)
  return _internal_mutable_mod_asset_path();
}
inline const std::string& OakActionAbilityAugmentConfigurationSaveGameData::_internal_mod_asset_path() const {
  return mod_asset_path_.Get();
}
inline void OakActionAbilityAugmentConfigurationSaveGameData::_internal_set_mod_asset_path(const std::string& value) {
  
  mod_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OakActionAbilityAugmentConfigurationSaveGameData::set_mod_asset_path(std::string&& value) {
  
  mod_asset_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.OakActionAbilityAugmentConfigurationSaveGameData.mod_asset_path)
}
inline void OakActionAbilityAugmentConfigurationSaveGameData::set_mod_asset_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mod_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.OakActionAbilityAugmentConfigurationSaveGameData.mod_asset_path)
}
inline void OakActionAbilityAugmentConfigurationSaveGameData::set_mod_asset_path(const char* value,
    size_t size) {
  
  mod_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.OakActionAbilityAugmentConfigurationSaveGameData.mod_asset_path)
}
inline std::string* OakActionAbilityAugmentConfigurationSaveGameData::_internal_mutable_mod_asset_path() {
  
  return mod_asset_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OakActionAbilityAugmentConfigurationSaveGameData::release_mod_asset_path() {
  // @@protoc_insertion_point(field_release:OakSave.OakActionAbilityAugmentConfigurationSaveGameData.mod_asset_path)
  return mod_asset_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OakActionAbilityAugmentConfigurationSaveGameData::set_allocated_mod_asset_path(std::string* mod_asset_path) {
  if (mod_asset_path != nullptr) {
    
  } else {
    
  }
  mod_asset_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mod_asset_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.OakActionAbilityAugmentConfigurationSaveGameData.mod_asset_path)
}
inline std::string* OakActionAbilityAugmentConfigurationSaveGameData::unsafe_arena_release_mod_asset_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.OakActionAbilityAugmentConfigurationSaveGameData.mod_asset_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return mod_asset_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OakActionAbilityAugmentConfigurationSaveGameData::unsafe_arena_set_allocated_mod_asset_path(
    std::string* mod_asset_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mod_asset_path != nullptr) {
    
  } else {
    
  }
  mod_asset_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mod_asset_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.OakActionAbilityAugmentConfigurationSaveGameData.mod_asset_path)
}

// -------------------------------------------------------------------

// OakPlayerAbilitySaveGameData

// int32 ability_points = 1;
inline void OakPlayerAbilitySaveGameData::clear_ability_points() {
  ability_points_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OakPlayerAbilitySaveGameData::_internal_ability_points() const {
  return ability_points_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OakPlayerAbilitySaveGameData::ability_points() const {
  // @@protoc_insertion_point(field_get:OakSave.OakPlayerAbilitySaveGameData.ability_points)
  return _internal_ability_points();
}
inline void OakPlayerAbilitySaveGameData::_internal_set_ability_points(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ability_points_ = value;
}
inline void OakPlayerAbilitySaveGameData::set_ability_points(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ability_points(value);
  // @@protoc_insertion_point(field_set:OakSave.OakPlayerAbilitySaveGameData.ability_points)
}

// repeated .OakSave.OakAbilityTreeItemSaveGameData tree_item_list = 2;
inline int OakPlayerAbilitySaveGameData::_internal_tree_item_list_size() const {
  return tree_item_list_.size();
}
inline int OakPlayerAbilitySaveGameData::tree_item_list_size() const {
  return _internal_tree_item_list_size();
}
inline void OakPlayerAbilitySaveGameData::clear_tree_item_list() {
  tree_item_list_.Clear();
}
inline ::OakSave::OakAbilityTreeItemSaveGameData* OakPlayerAbilitySaveGameData::mutable_tree_item_list(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.OakPlayerAbilitySaveGameData.tree_item_list)
  return tree_item_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::OakAbilityTreeItemSaveGameData >*
OakPlayerAbilitySaveGameData::mutable_tree_item_list() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.OakPlayerAbilitySaveGameData.tree_item_list)
  return &tree_item_list_;
}
inline const ::OakSave::OakAbilityTreeItemSaveGameData& OakPlayerAbilitySaveGameData::_internal_tree_item_list(int index) const {
  return tree_item_list_.Get(index);
}
inline const ::OakSave::OakAbilityTreeItemSaveGameData& OakPlayerAbilitySaveGameData::tree_item_list(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.OakPlayerAbilitySaveGameData.tree_item_list)
  return _internal_tree_item_list(index);
}
inline ::OakSave::OakAbilityTreeItemSaveGameData* OakPlayerAbilitySaveGameData::_internal_add_tree_item_list() {
  return tree_item_list_.Add();
}
inline ::OakSave::OakAbilityTreeItemSaveGameData* OakPlayerAbilitySaveGameData::add_tree_item_list() {
  // @@protoc_insertion_point(field_add:OakSave.OakPlayerAbilitySaveGameData.tree_item_list)
  return _internal_add_tree_item_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::OakAbilityTreeItemSaveGameData >&
OakPlayerAbilitySaveGameData::tree_item_list() const {
  // @@protoc_insertion_point(field_list:OakSave.OakPlayerAbilitySaveGameData.tree_item_list)
  return tree_item_list_;
}

// repeated .OakSave.OakAbilitySlotSaveGameData ability_slot_list = 3;
inline int OakPlayerAbilitySaveGameData::_internal_ability_slot_list_size() const {
  return ability_slot_list_.size();
}
inline int OakPlayerAbilitySaveGameData::ability_slot_list_size() const {
  return _internal_ability_slot_list_size();
}
inline void OakPlayerAbilitySaveGameData::clear_ability_slot_list() {
  ability_slot_list_.Clear();
}
inline ::OakSave::OakAbilitySlotSaveGameData* OakPlayerAbilitySaveGameData::mutable_ability_slot_list(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.OakPlayerAbilitySaveGameData.ability_slot_list)
  return ability_slot_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::OakAbilitySlotSaveGameData >*
OakPlayerAbilitySaveGameData::mutable_ability_slot_list() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.OakPlayerAbilitySaveGameData.ability_slot_list)
  return &ability_slot_list_;
}
inline const ::OakSave::OakAbilitySlotSaveGameData& OakPlayerAbilitySaveGameData::_internal_ability_slot_list(int index) const {
  return ability_slot_list_.Get(index);
}
inline const ::OakSave::OakAbilitySlotSaveGameData& OakPlayerAbilitySaveGameData::ability_slot_list(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.OakPlayerAbilitySaveGameData.ability_slot_list)
  return _internal_ability_slot_list(index);
}
inline ::OakSave::OakAbilitySlotSaveGameData* OakPlayerAbilitySaveGameData::_internal_add_ability_slot_list() {
  return ability_slot_list_.Add();
}
inline ::OakSave::OakAbilitySlotSaveGameData* OakPlayerAbilitySaveGameData::add_ability_slot_list() {
  // @@protoc_insertion_point(field_add:OakSave.OakPlayerAbilitySaveGameData.ability_slot_list)
  return _internal_add_ability_slot_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::OakAbilitySlotSaveGameData >&
OakPlayerAbilitySaveGameData::ability_slot_list() const {
  // @@protoc_insertion_point(field_list:OakSave.OakPlayerAbilitySaveGameData.ability_slot_list)
  return ability_slot_list_;
}

// repeated .OakSave.OakActionAbilityAugmentSaveGameData augment_slot_list = 4;
inline int OakPlayerAbilitySaveGameData::_internal_augment_slot_list_size() const {
  return augment_slot_list_.size();
}
inline int OakPlayerAbilitySaveGameData::augment_slot_list_size() const {
  return _internal_augment_slot_list_size();
}
inline void OakPlayerAbilitySaveGameData::clear_augment_slot_list() {
  augment_slot_list_.Clear();
}
inline ::OakSave::OakActionAbilityAugmentSaveGameData* OakPlayerAbilitySaveGameData::mutable_augment_slot_list(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.OakPlayerAbilitySaveGameData.augment_slot_list)
  return augment_slot_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::OakActionAbilityAugmentSaveGameData >*
OakPlayerAbilitySaveGameData::mutable_augment_slot_list() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.OakPlayerAbilitySaveGameData.augment_slot_list)
  return &augment_slot_list_;
}
inline const ::OakSave::OakActionAbilityAugmentSaveGameData& OakPlayerAbilitySaveGameData::_internal_augment_slot_list(int index) const {
  return augment_slot_list_.Get(index);
}
inline const ::OakSave::OakActionAbilityAugmentSaveGameData& OakPlayerAbilitySaveGameData::augment_slot_list(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.OakPlayerAbilitySaveGameData.augment_slot_list)
  return _internal_augment_slot_list(index);
}
inline ::OakSave::OakActionAbilityAugmentSaveGameData* OakPlayerAbilitySaveGameData::_internal_add_augment_slot_list() {
  return augment_slot_list_.Add();
}
inline ::OakSave::OakActionAbilityAugmentSaveGameData* OakPlayerAbilitySaveGameData::add_augment_slot_list() {
  // @@protoc_insertion_point(field_add:OakSave.OakPlayerAbilitySaveGameData.augment_slot_list)
  return _internal_add_augment_slot_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::OakActionAbilityAugmentSaveGameData >&
OakPlayerAbilitySaveGameData::augment_slot_list() const {
  // @@protoc_insertion_point(field_list:OakSave.OakPlayerAbilitySaveGameData.augment_slot_list)
  return augment_slot_list_;
}

// repeated .OakSave.OakActionAbilityAugmentConfigurationSaveGameData augment_configuration_list = 5;
inline int OakPlayerAbilitySaveGameData::_internal_augment_configuration_list_size() const {
  return augment_configuration_list_.size();
}
inline int OakPlayerAbilitySaveGameData::augment_configuration_list_size() const {
  return _internal_augment_configuration_list_size();
}
inline void OakPlayerAbilitySaveGameData::clear_augment_configuration_list() {
  augment_configuration_list_.Clear();
}
inline ::OakSave::OakActionAbilityAugmentConfigurationSaveGameData* OakPlayerAbilitySaveGameData::mutable_augment_configuration_list(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.OakPlayerAbilitySaveGameData.augment_configuration_list)
  return augment_configuration_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::OakActionAbilityAugmentConfigurationSaveGameData >*
OakPlayerAbilitySaveGameData::mutable_augment_configuration_list() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.OakPlayerAbilitySaveGameData.augment_configuration_list)
  return &augment_configuration_list_;
}
inline const ::OakSave::OakActionAbilityAugmentConfigurationSaveGameData& OakPlayerAbilitySaveGameData::_internal_augment_configuration_list(int index) const {
  return augment_configuration_list_.Get(index);
}
inline const ::OakSave::OakActionAbilityAugmentConfigurationSaveGameData& OakPlayerAbilitySaveGameData::augment_configuration_list(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.OakPlayerAbilitySaveGameData.augment_configuration_list)
  return _internal_augment_configuration_list(index);
}
inline ::OakSave::OakActionAbilityAugmentConfigurationSaveGameData* OakPlayerAbilitySaveGameData::_internal_add_augment_configuration_list() {
  return augment_configuration_list_.Add();
}
inline ::OakSave::OakActionAbilityAugmentConfigurationSaveGameData* OakPlayerAbilitySaveGameData::add_augment_configuration_list() {
  // @@protoc_insertion_point(field_add:OakSave.OakPlayerAbilitySaveGameData.augment_configuration_list)
  return _internal_add_augment_configuration_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::OakActionAbilityAugmentConfigurationSaveGameData >&
OakPlayerAbilitySaveGameData::augment_configuration_list() const {
  // @@protoc_insertion_point(field_list:OakSave.OakPlayerAbilitySaveGameData.augment_configuration_list)
  return augment_configuration_list_;
}

// int32 tree_grade = 6;
inline void OakPlayerAbilitySaveGameData::clear_tree_grade() {
  tree_grade_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OakPlayerAbilitySaveGameData::_internal_tree_grade() const {
  return tree_grade_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OakPlayerAbilitySaveGameData::tree_grade() const {
  // @@protoc_insertion_point(field_get:OakSave.OakPlayerAbilitySaveGameData.tree_grade)
  return _internal_tree_grade();
}
inline void OakPlayerAbilitySaveGameData::_internal_set_tree_grade(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tree_grade_ = value;
}
inline void OakPlayerAbilitySaveGameData::set_tree_grade(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tree_grade(value);
  // @@protoc_insertion_point(field_set:OakSave.OakPlayerAbilitySaveGameData.tree_grade)
}

// -------------------------------------------------------------------

// MissionStatusPlayerSaveGameData

// .OakSave.MissionStatusPlayerSaveGameData.MissionState status = 1;
inline void MissionStatusPlayerSaveGameData::clear_status() {
  status_ = 0;
}
inline ::OakSave::MissionStatusPlayerSaveGameData_MissionState MissionStatusPlayerSaveGameData::_internal_status() const {
  return static_cast< ::OakSave::MissionStatusPlayerSaveGameData_MissionState >(status_);
}
inline ::OakSave::MissionStatusPlayerSaveGameData_MissionState MissionStatusPlayerSaveGameData::status() const {
  // @@protoc_insertion_point(field_get:OakSave.MissionStatusPlayerSaveGameData.status)
  return _internal_status();
}
inline void MissionStatusPlayerSaveGameData::_internal_set_status(::OakSave::MissionStatusPlayerSaveGameData_MissionState value) {
  
  status_ = value;
}
inline void MissionStatusPlayerSaveGameData::set_status(::OakSave::MissionStatusPlayerSaveGameData_MissionState value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:OakSave.MissionStatusPlayerSaveGameData.status)
}

// bool has_been_viewed_in_log = 2;
inline void MissionStatusPlayerSaveGameData::clear_has_been_viewed_in_log() {
  has_been_viewed_in_log_ = false;
}
inline bool MissionStatusPlayerSaveGameData::_internal_has_been_viewed_in_log() const {
  return has_been_viewed_in_log_;
}
inline bool MissionStatusPlayerSaveGameData::has_been_viewed_in_log() const {
  // @@protoc_insertion_point(field_get:OakSave.MissionStatusPlayerSaveGameData.has_been_viewed_in_log)
  return _internal_has_been_viewed_in_log();
}
inline void MissionStatusPlayerSaveGameData::_internal_set_has_been_viewed_in_log(bool value) {
  
  has_been_viewed_in_log_ = value;
}
inline void MissionStatusPlayerSaveGameData::set_has_been_viewed_in_log(bool value) {
  _internal_set_has_been_viewed_in_log(value);
  // @@protoc_insertion_point(field_set:OakSave.MissionStatusPlayerSaveGameData.has_been_viewed_in_log)
}

// repeated int32 objectives_progress = 3;
inline int MissionStatusPlayerSaveGameData::_internal_objectives_progress_size() const {
  return objectives_progress_.size();
}
inline int MissionStatusPlayerSaveGameData::objectives_progress_size() const {
  return _internal_objectives_progress_size();
}
inline void MissionStatusPlayerSaveGameData::clear_objectives_progress() {
  objectives_progress_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MissionStatusPlayerSaveGameData::_internal_objectives_progress(int index) const {
  return objectives_progress_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MissionStatusPlayerSaveGameData::objectives_progress(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.MissionStatusPlayerSaveGameData.objectives_progress)
  return _internal_objectives_progress(index);
}
inline void MissionStatusPlayerSaveGameData::set_objectives_progress(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  objectives_progress_.Set(index, value);
  // @@protoc_insertion_point(field_set:OakSave.MissionStatusPlayerSaveGameData.objectives_progress)
}
inline void MissionStatusPlayerSaveGameData::_internal_add_objectives_progress(::PROTOBUF_NAMESPACE_ID::int32 value) {
  objectives_progress_.Add(value);
}
inline void MissionStatusPlayerSaveGameData::add_objectives_progress(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_objectives_progress(value);
  // @@protoc_insertion_point(field_add:OakSave.MissionStatusPlayerSaveGameData.objectives_progress)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MissionStatusPlayerSaveGameData::_internal_objectives_progress() const {
  return objectives_progress_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MissionStatusPlayerSaveGameData::objectives_progress() const {
  // @@protoc_insertion_point(field_list:OakSave.MissionStatusPlayerSaveGameData.objectives_progress)
  return _internal_objectives_progress();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MissionStatusPlayerSaveGameData::_internal_mutable_objectives_progress() {
  return &objectives_progress_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MissionStatusPlayerSaveGameData::mutable_objectives_progress() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.MissionStatusPlayerSaveGameData.objectives_progress)
  return _internal_mutable_objectives_progress();
}

// string mission_class_path = 4;
inline void MissionStatusPlayerSaveGameData::clear_mission_class_path() {
  mission_class_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MissionStatusPlayerSaveGameData::mission_class_path() const {
  // @@protoc_insertion_point(field_get:OakSave.MissionStatusPlayerSaveGameData.mission_class_path)
  return _internal_mission_class_path();
}
inline void MissionStatusPlayerSaveGameData::set_mission_class_path(const std::string& value) {
  _internal_set_mission_class_path(value);
  // @@protoc_insertion_point(field_set:OakSave.MissionStatusPlayerSaveGameData.mission_class_path)
}
inline std::string* MissionStatusPlayerSaveGameData::mutable_mission_class_path() {
  // @@protoc_insertion_point(field_mutable:OakSave.MissionStatusPlayerSaveGameData.mission_class_path)
  return _internal_mutable_mission_class_path();
}
inline const std::string& MissionStatusPlayerSaveGameData::_internal_mission_class_path() const {
  return mission_class_path_.Get();
}
inline void MissionStatusPlayerSaveGameData::_internal_set_mission_class_path(const std::string& value) {
  
  mission_class_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MissionStatusPlayerSaveGameData::set_mission_class_path(std::string&& value) {
  
  mission_class_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.MissionStatusPlayerSaveGameData.mission_class_path)
}
inline void MissionStatusPlayerSaveGameData::set_mission_class_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mission_class_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.MissionStatusPlayerSaveGameData.mission_class_path)
}
inline void MissionStatusPlayerSaveGameData::set_mission_class_path(const char* value,
    size_t size) {
  
  mission_class_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.MissionStatusPlayerSaveGameData.mission_class_path)
}
inline std::string* MissionStatusPlayerSaveGameData::_internal_mutable_mission_class_path() {
  
  return mission_class_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MissionStatusPlayerSaveGameData::release_mission_class_path() {
  // @@protoc_insertion_point(field_release:OakSave.MissionStatusPlayerSaveGameData.mission_class_path)
  return mission_class_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MissionStatusPlayerSaveGameData::set_allocated_mission_class_path(std::string* mission_class_path) {
  if (mission_class_path != nullptr) {
    
  } else {
    
  }
  mission_class_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mission_class_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.MissionStatusPlayerSaveGameData.mission_class_path)
}
inline std::string* MissionStatusPlayerSaveGameData::unsafe_arena_release_mission_class_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.MissionStatusPlayerSaveGameData.mission_class_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return mission_class_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MissionStatusPlayerSaveGameData::unsafe_arena_set_allocated_mission_class_path(
    std::string* mission_class_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mission_class_path != nullptr) {
    
  } else {
    
  }
  mission_class_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mission_class_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.MissionStatusPlayerSaveGameData.mission_class_path)
}

// string active_objective_set_path = 5;
inline void MissionStatusPlayerSaveGameData::clear_active_objective_set_path() {
  active_objective_set_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MissionStatusPlayerSaveGameData::active_objective_set_path() const {
  // @@protoc_insertion_point(field_get:OakSave.MissionStatusPlayerSaveGameData.active_objective_set_path)
  return _internal_active_objective_set_path();
}
inline void MissionStatusPlayerSaveGameData::set_active_objective_set_path(const std::string& value) {
  _internal_set_active_objective_set_path(value);
  // @@protoc_insertion_point(field_set:OakSave.MissionStatusPlayerSaveGameData.active_objective_set_path)
}
inline std::string* MissionStatusPlayerSaveGameData::mutable_active_objective_set_path() {
  // @@protoc_insertion_point(field_mutable:OakSave.MissionStatusPlayerSaveGameData.active_objective_set_path)
  return _internal_mutable_active_objective_set_path();
}
inline const std::string& MissionStatusPlayerSaveGameData::_internal_active_objective_set_path() const {
  return active_objective_set_path_.Get();
}
inline void MissionStatusPlayerSaveGameData::_internal_set_active_objective_set_path(const std::string& value) {
  
  active_objective_set_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MissionStatusPlayerSaveGameData::set_active_objective_set_path(std::string&& value) {
  
  active_objective_set_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.MissionStatusPlayerSaveGameData.active_objective_set_path)
}
inline void MissionStatusPlayerSaveGameData::set_active_objective_set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  active_objective_set_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.MissionStatusPlayerSaveGameData.active_objective_set_path)
}
inline void MissionStatusPlayerSaveGameData::set_active_objective_set_path(const char* value,
    size_t size) {
  
  active_objective_set_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.MissionStatusPlayerSaveGameData.active_objective_set_path)
}
inline std::string* MissionStatusPlayerSaveGameData::_internal_mutable_active_objective_set_path() {
  
  return active_objective_set_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MissionStatusPlayerSaveGameData::release_active_objective_set_path() {
  // @@protoc_insertion_point(field_release:OakSave.MissionStatusPlayerSaveGameData.active_objective_set_path)
  return active_objective_set_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MissionStatusPlayerSaveGameData::set_allocated_active_objective_set_path(std::string* active_objective_set_path) {
  if (active_objective_set_path != nullptr) {
    
  } else {
    
  }
  active_objective_set_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), active_objective_set_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.MissionStatusPlayerSaveGameData.active_objective_set_path)
}
inline std::string* MissionStatusPlayerSaveGameData::unsafe_arena_release_active_objective_set_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.MissionStatusPlayerSaveGameData.active_objective_set_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return active_objective_set_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MissionStatusPlayerSaveGameData::unsafe_arena_set_allocated_active_objective_set_path(
    std::string* active_objective_set_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (active_objective_set_path != nullptr) {
    
  } else {
    
  }
  active_objective_set_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      active_objective_set_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.MissionStatusPlayerSaveGameData.active_objective_set_path)
}

// uint32 dlc_package_id = 6;
inline void MissionStatusPlayerSaveGameData::clear_dlc_package_id() {
  dlc_package_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MissionStatusPlayerSaveGameData::_internal_dlc_package_id() const {
  return dlc_package_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MissionStatusPlayerSaveGameData::dlc_package_id() const {
  // @@protoc_insertion_point(field_get:OakSave.MissionStatusPlayerSaveGameData.dlc_package_id)
  return _internal_dlc_package_id();
}
inline void MissionStatusPlayerSaveGameData::_internal_set_dlc_package_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  dlc_package_id_ = value;
}
inline void MissionStatusPlayerSaveGameData::set_dlc_package_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dlc_package_id(value);
  // @@protoc_insertion_point(field_set:OakSave.MissionStatusPlayerSaveGameData.dlc_package_id)
}

// bool kickoff_played = 7;
inline void MissionStatusPlayerSaveGameData::clear_kickoff_played() {
  kickoff_played_ = false;
}
inline bool MissionStatusPlayerSaveGameData::_internal_kickoff_played() const {
  return kickoff_played_;
}
inline bool MissionStatusPlayerSaveGameData::kickoff_played() const {
  // @@protoc_insertion_point(field_get:OakSave.MissionStatusPlayerSaveGameData.kickoff_played)
  return _internal_kickoff_played();
}
inline void MissionStatusPlayerSaveGameData::_internal_set_kickoff_played(bool value) {
  
  kickoff_played_ = value;
}
inline void MissionStatusPlayerSaveGameData::set_kickoff_played(bool value) {
  _internal_set_kickoff_played(value);
  // @@protoc_insertion_point(field_set:OakSave.MissionStatusPlayerSaveGameData.kickoff_played)
}

// uint32 league_instance = 8;
inline void MissionStatusPlayerSaveGameData::clear_league_instance() {
  league_instance_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MissionStatusPlayerSaveGameData::_internal_league_instance() const {
  return league_instance_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MissionStatusPlayerSaveGameData::league_instance() const {
  // @@protoc_insertion_point(field_get:OakSave.MissionStatusPlayerSaveGameData.league_instance)
  return _internal_league_instance();
}
inline void MissionStatusPlayerSaveGameData::_internal_set_league_instance(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  league_instance_ = value;
}
inline void MissionStatusPlayerSaveGameData::set_league_instance(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_league_instance(value);
  // @@protoc_insertion_point(field_set:OakSave.MissionStatusPlayerSaveGameData.league_instance)
}

// -------------------------------------------------------------------

// MissionPlaythroughSaveGameData

// repeated .OakSave.MissionStatusPlayerSaveGameData mission_list = 1;
inline int MissionPlaythroughSaveGameData::_internal_mission_list_size() const {
  return mission_list_.size();
}
inline int MissionPlaythroughSaveGameData::mission_list_size() const {
  return _internal_mission_list_size();
}
inline void MissionPlaythroughSaveGameData::clear_mission_list() {
  mission_list_.Clear();
}
inline ::OakSave::MissionStatusPlayerSaveGameData* MissionPlaythroughSaveGameData::mutable_mission_list(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.MissionPlaythroughSaveGameData.mission_list)
  return mission_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::MissionStatusPlayerSaveGameData >*
MissionPlaythroughSaveGameData::mutable_mission_list() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.MissionPlaythroughSaveGameData.mission_list)
  return &mission_list_;
}
inline const ::OakSave::MissionStatusPlayerSaveGameData& MissionPlaythroughSaveGameData::_internal_mission_list(int index) const {
  return mission_list_.Get(index);
}
inline const ::OakSave::MissionStatusPlayerSaveGameData& MissionPlaythroughSaveGameData::mission_list(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.MissionPlaythroughSaveGameData.mission_list)
  return _internal_mission_list(index);
}
inline ::OakSave::MissionStatusPlayerSaveGameData* MissionPlaythroughSaveGameData::_internal_add_mission_list() {
  return mission_list_.Add();
}
inline ::OakSave::MissionStatusPlayerSaveGameData* MissionPlaythroughSaveGameData::add_mission_list() {
  // @@protoc_insertion_point(field_add:OakSave.MissionPlaythroughSaveGameData.mission_list)
  return _internal_add_mission_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::MissionStatusPlayerSaveGameData >&
MissionPlaythroughSaveGameData::mission_list() const {
  // @@protoc_insertion_point(field_list:OakSave.MissionPlaythroughSaveGameData.mission_list)
  return mission_list_;
}

// string tracked_mission_class_path = 2;
inline void MissionPlaythroughSaveGameData::clear_tracked_mission_class_path() {
  tracked_mission_class_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MissionPlaythroughSaveGameData::tracked_mission_class_path() const {
  // @@protoc_insertion_point(field_get:OakSave.MissionPlaythroughSaveGameData.tracked_mission_class_path)
  return _internal_tracked_mission_class_path();
}
inline void MissionPlaythroughSaveGameData::set_tracked_mission_class_path(const std::string& value) {
  _internal_set_tracked_mission_class_path(value);
  // @@protoc_insertion_point(field_set:OakSave.MissionPlaythroughSaveGameData.tracked_mission_class_path)
}
inline std::string* MissionPlaythroughSaveGameData::mutable_tracked_mission_class_path() {
  // @@protoc_insertion_point(field_mutable:OakSave.MissionPlaythroughSaveGameData.tracked_mission_class_path)
  return _internal_mutable_tracked_mission_class_path();
}
inline const std::string& MissionPlaythroughSaveGameData::_internal_tracked_mission_class_path() const {
  return tracked_mission_class_path_.Get();
}
inline void MissionPlaythroughSaveGameData::_internal_set_tracked_mission_class_path(const std::string& value) {
  
  tracked_mission_class_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MissionPlaythroughSaveGameData::set_tracked_mission_class_path(std::string&& value) {
  
  tracked_mission_class_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.MissionPlaythroughSaveGameData.tracked_mission_class_path)
}
inline void MissionPlaythroughSaveGameData::set_tracked_mission_class_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tracked_mission_class_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.MissionPlaythroughSaveGameData.tracked_mission_class_path)
}
inline void MissionPlaythroughSaveGameData::set_tracked_mission_class_path(const char* value,
    size_t size) {
  
  tracked_mission_class_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.MissionPlaythroughSaveGameData.tracked_mission_class_path)
}
inline std::string* MissionPlaythroughSaveGameData::_internal_mutable_tracked_mission_class_path() {
  
  return tracked_mission_class_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MissionPlaythroughSaveGameData::release_tracked_mission_class_path() {
  // @@protoc_insertion_point(field_release:OakSave.MissionPlaythroughSaveGameData.tracked_mission_class_path)
  return tracked_mission_class_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MissionPlaythroughSaveGameData::set_allocated_tracked_mission_class_path(std::string* tracked_mission_class_path) {
  if (tracked_mission_class_path != nullptr) {
    
  } else {
    
  }
  tracked_mission_class_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tracked_mission_class_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.MissionPlaythroughSaveGameData.tracked_mission_class_path)
}
inline std::string* MissionPlaythroughSaveGameData::unsafe_arena_release_tracked_mission_class_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.MissionPlaythroughSaveGameData.tracked_mission_class_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return tracked_mission_class_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MissionPlaythroughSaveGameData::unsafe_arena_set_allocated_tracked_mission_class_path(
    std::string* tracked_mission_class_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (tracked_mission_class_path != nullptr) {
    
  } else {
    
  }
  tracked_mission_class_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      tracked_mission_class_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.MissionPlaythroughSaveGameData.tracked_mission_class_path)
}

// -------------------------------------------------------------------

// ActiveFastTravelSaveData

// string active_travel_station_name = 1;
inline void ActiveFastTravelSaveData::clear_active_travel_station_name() {
  active_travel_station_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ActiveFastTravelSaveData::active_travel_station_name() const {
  // @@protoc_insertion_point(field_get:OakSave.ActiveFastTravelSaveData.active_travel_station_name)
  return _internal_active_travel_station_name();
}
inline void ActiveFastTravelSaveData::set_active_travel_station_name(const std::string& value) {
  _internal_set_active_travel_station_name(value);
  // @@protoc_insertion_point(field_set:OakSave.ActiveFastTravelSaveData.active_travel_station_name)
}
inline std::string* ActiveFastTravelSaveData::mutable_active_travel_station_name() {
  // @@protoc_insertion_point(field_mutable:OakSave.ActiveFastTravelSaveData.active_travel_station_name)
  return _internal_mutable_active_travel_station_name();
}
inline const std::string& ActiveFastTravelSaveData::_internal_active_travel_station_name() const {
  return active_travel_station_name_.Get();
}
inline void ActiveFastTravelSaveData::_internal_set_active_travel_station_name(const std::string& value) {
  
  active_travel_station_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ActiveFastTravelSaveData::set_active_travel_station_name(std::string&& value) {
  
  active_travel_station_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.ActiveFastTravelSaveData.active_travel_station_name)
}
inline void ActiveFastTravelSaveData::set_active_travel_station_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  active_travel_station_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.ActiveFastTravelSaveData.active_travel_station_name)
}
inline void ActiveFastTravelSaveData::set_active_travel_station_name(const char* value,
    size_t size) {
  
  active_travel_station_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.ActiveFastTravelSaveData.active_travel_station_name)
}
inline std::string* ActiveFastTravelSaveData::_internal_mutable_active_travel_station_name() {
  
  return active_travel_station_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ActiveFastTravelSaveData::release_active_travel_station_name() {
  // @@protoc_insertion_point(field_release:OakSave.ActiveFastTravelSaveData.active_travel_station_name)
  return active_travel_station_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ActiveFastTravelSaveData::set_allocated_active_travel_station_name(std::string* active_travel_station_name) {
  if (active_travel_station_name != nullptr) {
    
  } else {
    
  }
  active_travel_station_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), active_travel_station_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.ActiveFastTravelSaveData.active_travel_station_name)
}
inline std::string* ActiveFastTravelSaveData::unsafe_arena_release_active_travel_station_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.ActiveFastTravelSaveData.active_travel_station_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return active_travel_station_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ActiveFastTravelSaveData::unsafe_arena_set_allocated_active_travel_station_name(
    std::string* active_travel_station_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (active_travel_station_name != nullptr) {
    
  } else {
    
  }
  active_travel_station_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      active_travel_station_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.ActiveFastTravelSaveData.active_travel_station_name)
}

// bool blacklisted = 2;
inline void ActiveFastTravelSaveData::clear_blacklisted() {
  blacklisted_ = false;
}
inline bool ActiveFastTravelSaveData::_internal_blacklisted() const {
  return blacklisted_;
}
inline bool ActiveFastTravelSaveData::blacklisted() const {
  // @@protoc_insertion_point(field_get:OakSave.ActiveFastTravelSaveData.blacklisted)
  return _internal_blacklisted();
}
inline void ActiveFastTravelSaveData::_internal_set_blacklisted(bool value) {
  
  blacklisted_ = value;
}
inline void ActiveFastTravelSaveData::set_blacklisted(bool value) {
  _internal_set_blacklisted(value);
  // @@protoc_insertion_point(field_set:OakSave.ActiveFastTravelSaveData.blacklisted)
}

// -------------------------------------------------------------------

// PlaythroughActiveFastTravelSaveData

// repeated .OakSave.ActiveFastTravelSaveData active_travel_stations = 1;
inline int PlaythroughActiveFastTravelSaveData::_internal_active_travel_stations_size() const {
  return active_travel_stations_.size();
}
inline int PlaythroughActiveFastTravelSaveData::active_travel_stations_size() const {
  return _internal_active_travel_stations_size();
}
inline void PlaythroughActiveFastTravelSaveData::clear_active_travel_stations() {
  active_travel_stations_.Clear();
}
inline ::OakSave::ActiveFastTravelSaveData* PlaythroughActiveFastTravelSaveData::mutable_active_travel_stations(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.PlaythroughActiveFastTravelSaveData.active_travel_stations)
  return active_travel_stations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::ActiveFastTravelSaveData >*
PlaythroughActiveFastTravelSaveData::mutable_active_travel_stations() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.PlaythroughActiveFastTravelSaveData.active_travel_stations)
  return &active_travel_stations_;
}
inline const ::OakSave::ActiveFastTravelSaveData& PlaythroughActiveFastTravelSaveData::_internal_active_travel_stations(int index) const {
  return active_travel_stations_.Get(index);
}
inline const ::OakSave::ActiveFastTravelSaveData& PlaythroughActiveFastTravelSaveData::active_travel_stations(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.PlaythroughActiveFastTravelSaveData.active_travel_stations)
  return _internal_active_travel_stations(index);
}
inline ::OakSave::ActiveFastTravelSaveData* PlaythroughActiveFastTravelSaveData::_internal_add_active_travel_stations() {
  return active_travel_stations_.Add();
}
inline ::OakSave::ActiveFastTravelSaveData* PlaythroughActiveFastTravelSaveData::add_active_travel_stations() {
  // @@protoc_insertion_point(field_add:OakSave.PlaythroughActiveFastTravelSaveData.active_travel_stations)
  return _internal_add_active_travel_stations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::ActiveFastTravelSaveData >&
PlaythroughActiveFastTravelSaveData::active_travel_stations() const {
  // @@protoc_insertion_point(field_list:OakSave.PlaythroughActiveFastTravelSaveData.active_travel_stations)
  return active_travel_stations_;
}

// -------------------------------------------------------------------

// DiscoveredAreaInfo

// string discovered_area_name = 1;
inline void DiscoveredAreaInfo::clear_discovered_area_name() {
  discovered_area_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DiscoveredAreaInfo::discovered_area_name() const {
  // @@protoc_insertion_point(field_get:OakSave.DiscoveredAreaInfo.discovered_area_name)
  return _internal_discovered_area_name();
}
inline void DiscoveredAreaInfo::set_discovered_area_name(const std::string& value) {
  _internal_set_discovered_area_name(value);
  // @@protoc_insertion_point(field_set:OakSave.DiscoveredAreaInfo.discovered_area_name)
}
inline std::string* DiscoveredAreaInfo::mutable_discovered_area_name() {
  // @@protoc_insertion_point(field_mutable:OakSave.DiscoveredAreaInfo.discovered_area_name)
  return _internal_mutable_discovered_area_name();
}
inline const std::string& DiscoveredAreaInfo::_internal_discovered_area_name() const {
  return discovered_area_name_.Get();
}
inline void DiscoveredAreaInfo::_internal_set_discovered_area_name(const std::string& value) {
  
  discovered_area_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DiscoveredAreaInfo::set_discovered_area_name(std::string&& value) {
  
  discovered_area_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.DiscoveredAreaInfo.discovered_area_name)
}
inline void DiscoveredAreaInfo::set_discovered_area_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  discovered_area_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.DiscoveredAreaInfo.discovered_area_name)
}
inline void DiscoveredAreaInfo::set_discovered_area_name(const char* value,
    size_t size) {
  
  discovered_area_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.DiscoveredAreaInfo.discovered_area_name)
}
inline std::string* DiscoveredAreaInfo::_internal_mutable_discovered_area_name() {
  
  return discovered_area_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DiscoveredAreaInfo::release_discovered_area_name() {
  // @@protoc_insertion_point(field_release:OakSave.DiscoveredAreaInfo.discovered_area_name)
  return discovered_area_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DiscoveredAreaInfo::set_allocated_discovered_area_name(std::string* discovered_area_name) {
  if (discovered_area_name != nullptr) {
    
  } else {
    
  }
  discovered_area_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), discovered_area_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.DiscoveredAreaInfo.discovered_area_name)
}
inline std::string* DiscoveredAreaInfo::unsafe_arena_release_discovered_area_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.DiscoveredAreaInfo.discovered_area_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return discovered_area_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DiscoveredAreaInfo::unsafe_arena_set_allocated_discovered_area_name(
    std::string* discovered_area_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (discovered_area_name != nullptr) {
    
  } else {
    
  }
  discovered_area_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      discovered_area_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.DiscoveredAreaInfo.discovered_area_name)
}

// uint32 discovered_playthroughs = 2;
inline void DiscoveredAreaInfo::clear_discovered_playthroughs() {
  discovered_playthroughs_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DiscoveredAreaInfo::_internal_discovered_playthroughs() const {
  return discovered_playthroughs_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DiscoveredAreaInfo::discovered_playthroughs() const {
  // @@protoc_insertion_point(field_get:OakSave.DiscoveredAreaInfo.discovered_playthroughs)
  return _internal_discovered_playthroughs();
}
inline void DiscoveredAreaInfo::_internal_set_discovered_playthroughs(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  discovered_playthroughs_ = value;
}
inline void DiscoveredAreaInfo::set_discovered_playthroughs(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_discovered_playthroughs(value);
  // @@protoc_insertion_point(field_set:OakSave.DiscoveredAreaInfo.discovered_playthroughs)
}

// -------------------------------------------------------------------

// DiscoveredLevelInfo

// string discovered_level_name = 1;
inline void DiscoveredLevelInfo::clear_discovered_level_name() {
  discovered_level_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DiscoveredLevelInfo::discovered_level_name() const {
  // @@protoc_insertion_point(field_get:OakSave.DiscoveredLevelInfo.discovered_level_name)
  return _internal_discovered_level_name();
}
inline void DiscoveredLevelInfo::set_discovered_level_name(const std::string& value) {
  _internal_set_discovered_level_name(value);
  // @@protoc_insertion_point(field_set:OakSave.DiscoveredLevelInfo.discovered_level_name)
}
inline std::string* DiscoveredLevelInfo::mutable_discovered_level_name() {
  // @@protoc_insertion_point(field_mutable:OakSave.DiscoveredLevelInfo.discovered_level_name)
  return _internal_mutable_discovered_level_name();
}
inline const std::string& DiscoveredLevelInfo::_internal_discovered_level_name() const {
  return discovered_level_name_.Get();
}
inline void DiscoveredLevelInfo::_internal_set_discovered_level_name(const std::string& value) {
  
  discovered_level_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DiscoveredLevelInfo::set_discovered_level_name(std::string&& value) {
  
  discovered_level_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.DiscoveredLevelInfo.discovered_level_name)
}
inline void DiscoveredLevelInfo::set_discovered_level_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  discovered_level_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.DiscoveredLevelInfo.discovered_level_name)
}
inline void DiscoveredLevelInfo::set_discovered_level_name(const char* value,
    size_t size) {
  
  discovered_level_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.DiscoveredLevelInfo.discovered_level_name)
}
inline std::string* DiscoveredLevelInfo::_internal_mutable_discovered_level_name() {
  
  return discovered_level_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DiscoveredLevelInfo::release_discovered_level_name() {
  // @@protoc_insertion_point(field_release:OakSave.DiscoveredLevelInfo.discovered_level_name)
  return discovered_level_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DiscoveredLevelInfo::set_allocated_discovered_level_name(std::string* discovered_level_name) {
  if (discovered_level_name != nullptr) {
    
  } else {
    
  }
  discovered_level_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), discovered_level_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.DiscoveredLevelInfo.discovered_level_name)
}
inline std::string* DiscoveredLevelInfo::unsafe_arena_release_discovered_level_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.DiscoveredLevelInfo.discovered_level_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return discovered_level_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DiscoveredLevelInfo::unsafe_arena_set_allocated_discovered_level_name(
    std::string* discovered_level_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (discovered_level_name != nullptr) {
    
  } else {
    
  }
  discovered_level_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      discovered_level_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.DiscoveredLevelInfo.discovered_level_name)
}

// uint32 discovered_playthroughs = 3;
inline void DiscoveredLevelInfo::clear_discovered_playthroughs() {
  discovered_playthroughs_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DiscoveredLevelInfo::_internal_discovered_playthroughs() const {
  return discovered_playthroughs_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DiscoveredLevelInfo::discovered_playthroughs() const {
  // @@protoc_insertion_point(field_get:OakSave.DiscoveredLevelInfo.discovered_playthroughs)
  return _internal_discovered_playthroughs();
}
inline void DiscoveredLevelInfo::_internal_set_discovered_playthroughs(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  discovered_playthroughs_ = value;
}
inline void DiscoveredLevelInfo::set_discovered_playthroughs(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_discovered_playthroughs(value);
  // @@protoc_insertion_point(field_set:OakSave.DiscoveredLevelInfo.discovered_playthroughs)
}

// repeated .OakSave.DiscoveredAreaInfo discovered_area_info = 4;
inline int DiscoveredLevelInfo::_internal_discovered_area_info_size() const {
  return discovered_area_info_.size();
}
inline int DiscoveredLevelInfo::discovered_area_info_size() const {
  return _internal_discovered_area_info_size();
}
inline void DiscoveredLevelInfo::clear_discovered_area_info() {
  discovered_area_info_.Clear();
}
inline ::OakSave::DiscoveredAreaInfo* DiscoveredLevelInfo::mutable_discovered_area_info(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.DiscoveredLevelInfo.discovered_area_info)
  return discovered_area_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::DiscoveredAreaInfo >*
DiscoveredLevelInfo::mutable_discovered_area_info() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.DiscoveredLevelInfo.discovered_area_info)
  return &discovered_area_info_;
}
inline const ::OakSave::DiscoveredAreaInfo& DiscoveredLevelInfo::_internal_discovered_area_info(int index) const {
  return discovered_area_info_.Get(index);
}
inline const ::OakSave::DiscoveredAreaInfo& DiscoveredLevelInfo::discovered_area_info(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.DiscoveredLevelInfo.discovered_area_info)
  return _internal_discovered_area_info(index);
}
inline ::OakSave::DiscoveredAreaInfo* DiscoveredLevelInfo::_internal_add_discovered_area_info() {
  return discovered_area_info_.Add();
}
inline ::OakSave::DiscoveredAreaInfo* DiscoveredLevelInfo::add_discovered_area_info() {
  // @@protoc_insertion_point(field_add:OakSave.DiscoveredLevelInfo.discovered_area_info)
  return _internal_add_discovered_area_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::DiscoveredAreaInfo >&
DiscoveredLevelInfo::discovered_area_info() const {
  // @@protoc_insertion_point(field_list:OakSave.DiscoveredLevelInfo.discovered_area_info)
  return discovered_area_info_;
}

// -------------------------------------------------------------------

// DiscoveredPlanetInfo

// string discovered_planet = 1;
inline void DiscoveredPlanetInfo::clear_discovered_planet() {
  discovered_planet_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DiscoveredPlanetInfo::discovered_planet() const {
  // @@protoc_insertion_point(field_get:OakSave.DiscoveredPlanetInfo.discovered_planet)
  return _internal_discovered_planet();
}
inline void DiscoveredPlanetInfo::set_discovered_planet(const std::string& value) {
  _internal_set_discovered_planet(value);
  // @@protoc_insertion_point(field_set:OakSave.DiscoveredPlanetInfo.discovered_planet)
}
inline std::string* DiscoveredPlanetInfo::mutable_discovered_planet() {
  // @@protoc_insertion_point(field_mutable:OakSave.DiscoveredPlanetInfo.discovered_planet)
  return _internal_mutable_discovered_planet();
}
inline const std::string& DiscoveredPlanetInfo::_internal_discovered_planet() const {
  return discovered_planet_.Get();
}
inline void DiscoveredPlanetInfo::_internal_set_discovered_planet(const std::string& value) {
  
  discovered_planet_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DiscoveredPlanetInfo::set_discovered_planet(std::string&& value) {
  
  discovered_planet_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.DiscoveredPlanetInfo.discovered_planet)
}
inline void DiscoveredPlanetInfo::set_discovered_planet(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  discovered_planet_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.DiscoveredPlanetInfo.discovered_planet)
}
inline void DiscoveredPlanetInfo::set_discovered_planet(const char* value,
    size_t size) {
  
  discovered_planet_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.DiscoveredPlanetInfo.discovered_planet)
}
inline std::string* DiscoveredPlanetInfo::_internal_mutable_discovered_planet() {
  
  return discovered_planet_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DiscoveredPlanetInfo::release_discovered_planet() {
  // @@protoc_insertion_point(field_release:OakSave.DiscoveredPlanetInfo.discovered_planet)
  return discovered_planet_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DiscoveredPlanetInfo::set_allocated_discovered_planet(std::string* discovered_planet) {
  if (discovered_planet != nullptr) {
    
  } else {
    
  }
  discovered_planet_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), discovered_planet,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.DiscoveredPlanetInfo.discovered_planet)
}
inline std::string* DiscoveredPlanetInfo::unsafe_arena_release_discovered_planet() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.DiscoveredPlanetInfo.discovered_planet)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return discovered_planet_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DiscoveredPlanetInfo::unsafe_arena_set_allocated_discovered_planet(
    std::string* discovered_planet) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (discovered_planet != nullptr) {
    
  } else {
    
  }
  discovered_planet_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      discovered_planet, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.DiscoveredPlanetInfo.discovered_planet)
}

// bool is_new_planet = 2;
inline void DiscoveredPlanetInfo::clear_is_new_planet() {
  is_new_planet_ = false;
}
inline bool DiscoveredPlanetInfo::_internal_is_new_planet() const {
  return is_new_planet_;
}
inline bool DiscoveredPlanetInfo::is_new_planet() const {
  // @@protoc_insertion_point(field_get:OakSave.DiscoveredPlanetInfo.is_new_planet)
  return _internal_is_new_planet();
}
inline void DiscoveredPlanetInfo::_internal_set_is_new_planet(bool value) {
  
  is_new_planet_ = value;
}
inline void DiscoveredPlanetInfo::set_is_new_planet(bool value) {
  _internal_set_is_new_planet(value);
  // @@protoc_insertion_point(field_set:OakSave.DiscoveredPlanetInfo.is_new_planet)
}

// -------------------------------------------------------------------

// DiscoverySaveData

// repeated .OakSave.DiscoveredLevelInfo discovered_level_info = 1;
inline int DiscoverySaveData::_internal_discovered_level_info_size() const {
  return discovered_level_info_.size();
}
inline int DiscoverySaveData::discovered_level_info_size() const {
  return _internal_discovered_level_info_size();
}
inline void DiscoverySaveData::clear_discovered_level_info() {
  discovered_level_info_.Clear();
}
inline ::OakSave::DiscoveredLevelInfo* DiscoverySaveData::mutable_discovered_level_info(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.DiscoverySaveData.discovered_level_info)
  return discovered_level_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::DiscoveredLevelInfo >*
DiscoverySaveData::mutable_discovered_level_info() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.DiscoverySaveData.discovered_level_info)
  return &discovered_level_info_;
}
inline const ::OakSave::DiscoveredLevelInfo& DiscoverySaveData::_internal_discovered_level_info(int index) const {
  return discovered_level_info_.Get(index);
}
inline const ::OakSave::DiscoveredLevelInfo& DiscoverySaveData::discovered_level_info(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.DiscoverySaveData.discovered_level_info)
  return _internal_discovered_level_info(index);
}
inline ::OakSave::DiscoveredLevelInfo* DiscoverySaveData::_internal_add_discovered_level_info() {
  return discovered_level_info_.Add();
}
inline ::OakSave::DiscoveredLevelInfo* DiscoverySaveData::add_discovered_level_info() {
  // @@protoc_insertion_point(field_add:OakSave.DiscoverySaveData.discovered_level_info)
  return _internal_add_discovered_level_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::DiscoveredLevelInfo >&
DiscoverySaveData::discovered_level_info() const {
  // @@protoc_insertion_point(field_list:OakSave.DiscoverySaveData.discovered_level_info)
  return discovered_level_info_;
}

// -------------------------------------------------------------------

// VehicleUnlockedSaveGameData

// string asset_path = 1;
inline void VehicleUnlockedSaveGameData::clear_asset_path() {
  asset_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& VehicleUnlockedSaveGameData::asset_path() const {
  // @@protoc_insertion_point(field_get:OakSave.VehicleUnlockedSaveGameData.asset_path)
  return _internal_asset_path();
}
inline void VehicleUnlockedSaveGameData::set_asset_path(const std::string& value) {
  _internal_set_asset_path(value);
  // @@protoc_insertion_point(field_set:OakSave.VehicleUnlockedSaveGameData.asset_path)
}
inline std::string* VehicleUnlockedSaveGameData::mutable_asset_path() {
  // @@protoc_insertion_point(field_mutable:OakSave.VehicleUnlockedSaveGameData.asset_path)
  return _internal_mutable_asset_path();
}
inline const std::string& VehicleUnlockedSaveGameData::_internal_asset_path() const {
  return asset_path_.Get();
}
inline void VehicleUnlockedSaveGameData::_internal_set_asset_path(const std::string& value) {
  
  asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VehicleUnlockedSaveGameData::set_asset_path(std::string&& value) {
  
  asset_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.VehicleUnlockedSaveGameData.asset_path)
}
inline void VehicleUnlockedSaveGameData::set_asset_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.VehicleUnlockedSaveGameData.asset_path)
}
inline void VehicleUnlockedSaveGameData::set_asset_path(const char* value,
    size_t size) {
  
  asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.VehicleUnlockedSaveGameData.asset_path)
}
inline std::string* VehicleUnlockedSaveGameData::_internal_mutable_asset_path() {
  
  return asset_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VehicleUnlockedSaveGameData::release_asset_path() {
  // @@protoc_insertion_point(field_release:OakSave.VehicleUnlockedSaveGameData.asset_path)
  return asset_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VehicleUnlockedSaveGameData::set_allocated_asset_path(std::string* asset_path) {
  if (asset_path != nullptr) {
    
  } else {
    
  }
  asset_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), asset_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.VehicleUnlockedSaveGameData.asset_path)
}
inline std::string* VehicleUnlockedSaveGameData::unsafe_arena_release_asset_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.VehicleUnlockedSaveGameData.asset_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return asset_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void VehicleUnlockedSaveGameData::unsafe_arena_set_allocated_asset_path(
    std::string* asset_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (asset_path != nullptr) {
    
  } else {
    
  }
  asset_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      asset_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.VehicleUnlockedSaveGameData.asset_path)
}

// bool just_unlocked = 2;
inline void VehicleUnlockedSaveGameData::clear_just_unlocked() {
  just_unlocked_ = false;
}
inline bool VehicleUnlockedSaveGameData::_internal_just_unlocked() const {
  return just_unlocked_;
}
inline bool VehicleUnlockedSaveGameData::just_unlocked() const {
  // @@protoc_insertion_point(field_get:OakSave.VehicleUnlockedSaveGameData.just_unlocked)
  return _internal_just_unlocked();
}
inline void VehicleUnlockedSaveGameData::_internal_set_just_unlocked(bool value) {
  
  just_unlocked_ = value;
}
inline void VehicleUnlockedSaveGameData::set_just_unlocked(bool value) {
  _internal_set_just_unlocked(value);
  // @@protoc_insertion_point(field_set:OakSave.VehicleUnlockedSaveGameData.just_unlocked)
}

// -------------------------------------------------------------------

// OakCARMenuVehicleConfigSaveData

// string loadout_save_name = 1;
inline void OakCARMenuVehicleConfigSaveData::clear_loadout_save_name() {
  loadout_save_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OakCARMenuVehicleConfigSaveData::loadout_save_name() const {
  // @@protoc_insertion_point(field_get:OakSave.OakCARMenuVehicleConfigSaveData.loadout_save_name)
  return _internal_loadout_save_name();
}
inline void OakCARMenuVehicleConfigSaveData::set_loadout_save_name(const std::string& value) {
  _internal_set_loadout_save_name(value);
  // @@protoc_insertion_point(field_set:OakSave.OakCARMenuVehicleConfigSaveData.loadout_save_name)
}
inline std::string* OakCARMenuVehicleConfigSaveData::mutable_loadout_save_name() {
  // @@protoc_insertion_point(field_mutable:OakSave.OakCARMenuVehicleConfigSaveData.loadout_save_name)
  return _internal_mutable_loadout_save_name();
}
inline const std::string& OakCARMenuVehicleConfigSaveData::_internal_loadout_save_name() const {
  return loadout_save_name_.Get();
}
inline void OakCARMenuVehicleConfigSaveData::_internal_set_loadout_save_name(const std::string& value) {
  
  loadout_save_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OakCARMenuVehicleConfigSaveData::set_loadout_save_name(std::string&& value) {
  
  loadout_save_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.OakCARMenuVehicleConfigSaveData.loadout_save_name)
}
inline void OakCARMenuVehicleConfigSaveData::set_loadout_save_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  loadout_save_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.OakCARMenuVehicleConfigSaveData.loadout_save_name)
}
inline void OakCARMenuVehicleConfigSaveData::set_loadout_save_name(const char* value,
    size_t size) {
  
  loadout_save_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.OakCARMenuVehicleConfigSaveData.loadout_save_name)
}
inline std::string* OakCARMenuVehicleConfigSaveData::_internal_mutable_loadout_save_name() {
  
  return loadout_save_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OakCARMenuVehicleConfigSaveData::release_loadout_save_name() {
  // @@protoc_insertion_point(field_release:OakSave.OakCARMenuVehicleConfigSaveData.loadout_save_name)
  return loadout_save_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OakCARMenuVehicleConfigSaveData::set_allocated_loadout_save_name(std::string* loadout_save_name) {
  if (loadout_save_name != nullptr) {
    
  } else {
    
  }
  loadout_save_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), loadout_save_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.OakCARMenuVehicleConfigSaveData.loadout_save_name)
}
inline std::string* OakCARMenuVehicleConfigSaveData::unsafe_arena_release_loadout_save_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.OakCARMenuVehicleConfigSaveData.loadout_save_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return loadout_save_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OakCARMenuVehicleConfigSaveData::unsafe_arena_set_allocated_loadout_save_name(
    std::string* loadout_save_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (loadout_save_name != nullptr) {
    
  } else {
    
  }
  loadout_save_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      loadout_save_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.OakCARMenuVehicleConfigSaveData.loadout_save_name)
}

// string body_asset_path = 2;
inline void OakCARMenuVehicleConfigSaveData::clear_body_asset_path() {
  body_asset_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OakCARMenuVehicleConfigSaveData::body_asset_path() const {
  // @@protoc_insertion_point(field_get:OakSave.OakCARMenuVehicleConfigSaveData.body_asset_path)
  return _internal_body_asset_path();
}
inline void OakCARMenuVehicleConfigSaveData::set_body_asset_path(const std::string& value) {
  _internal_set_body_asset_path(value);
  // @@protoc_insertion_point(field_set:OakSave.OakCARMenuVehicleConfigSaveData.body_asset_path)
}
inline std::string* OakCARMenuVehicleConfigSaveData::mutable_body_asset_path() {
  // @@protoc_insertion_point(field_mutable:OakSave.OakCARMenuVehicleConfigSaveData.body_asset_path)
  return _internal_mutable_body_asset_path();
}
inline const std::string& OakCARMenuVehicleConfigSaveData::_internal_body_asset_path() const {
  return body_asset_path_.Get();
}
inline void OakCARMenuVehicleConfigSaveData::_internal_set_body_asset_path(const std::string& value) {
  
  body_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OakCARMenuVehicleConfigSaveData::set_body_asset_path(std::string&& value) {
  
  body_asset_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.OakCARMenuVehicleConfigSaveData.body_asset_path)
}
inline void OakCARMenuVehicleConfigSaveData::set_body_asset_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  body_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.OakCARMenuVehicleConfigSaveData.body_asset_path)
}
inline void OakCARMenuVehicleConfigSaveData::set_body_asset_path(const char* value,
    size_t size) {
  
  body_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.OakCARMenuVehicleConfigSaveData.body_asset_path)
}
inline std::string* OakCARMenuVehicleConfigSaveData::_internal_mutable_body_asset_path() {
  
  return body_asset_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OakCARMenuVehicleConfigSaveData::release_body_asset_path() {
  // @@protoc_insertion_point(field_release:OakSave.OakCARMenuVehicleConfigSaveData.body_asset_path)
  return body_asset_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OakCARMenuVehicleConfigSaveData::set_allocated_body_asset_path(std::string* body_asset_path) {
  if (body_asset_path != nullptr) {
    
  } else {
    
  }
  body_asset_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), body_asset_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.OakCARMenuVehicleConfigSaveData.body_asset_path)
}
inline std::string* OakCARMenuVehicleConfigSaveData::unsafe_arena_release_body_asset_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.OakCARMenuVehicleConfigSaveData.body_asset_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return body_asset_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OakCARMenuVehicleConfigSaveData::unsafe_arena_set_allocated_body_asset_path(
    std::string* body_asset_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (body_asset_path != nullptr) {
    
  } else {
    
  }
  body_asset_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      body_asset_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.OakCARMenuVehicleConfigSaveData.body_asset_path)
}

// string wheel_asset_path = 3;
inline void OakCARMenuVehicleConfigSaveData::clear_wheel_asset_path() {
  wheel_asset_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OakCARMenuVehicleConfigSaveData::wheel_asset_path() const {
  // @@protoc_insertion_point(field_get:OakSave.OakCARMenuVehicleConfigSaveData.wheel_asset_path)
  return _internal_wheel_asset_path();
}
inline void OakCARMenuVehicleConfigSaveData::set_wheel_asset_path(const std::string& value) {
  _internal_set_wheel_asset_path(value);
  // @@protoc_insertion_point(field_set:OakSave.OakCARMenuVehicleConfigSaveData.wheel_asset_path)
}
inline std::string* OakCARMenuVehicleConfigSaveData::mutable_wheel_asset_path() {
  // @@protoc_insertion_point(field_mutable:OakSave.OakCARMenuVehicleConfigSaveData.wheel_asset_path)
  return _internal_mutable_wheel_asset_path();
}
inline const std::string& OakCARMenuVehicleConfigSaveData::_internal_wheel_asset_path() const {
  return wheel_asset_path_.Get();
}
inline void OakCARMenuVehicleConfigSaveData::_internal_set_wheel_asset_path(const std::string& value) {
  
  wheel_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OakCARMenuVehicleConfigSaveData::set_wheel_asset_path(std::string&& value) {
  
  wheel_asset_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.OakCARMenuVehicleConfigSaveData.wheel_asset_path)
}
inline void OakCARMenuVehicleConfigSaveData::set_wheel_asset_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  wheel_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.OakCARMenuVehicleConfigSaveData.wheel_asset_path)
}
inline void OakCARMenuVehicleConfigSaveData::set_wheel_asset_path(const char* value,
    size_t size) {
  
  wheel_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.OakCARMenuVehicleConfigSaveData.wheel_asset_path)
}
inline std::string* OakCARMenuVehicleConfigSaveData::_internal_mutable_wheel_asset_path() {
  
  return wheel_asset_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OakCARMenuVehicleConfigSaveData::release_wheel_asset_path() {
  // @@protoc_insertion_point(field_release:OakSave.OakCARMenuVehicleConfigSaveData.wheel_asset_path)
  return wheel_asset_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OakCARMenuVehicleConfigSaveData::set_allocated_wheel_asset_path(std::string* wheel_asset_path) {
  if (wheel_asset_path != nullptr) {
    
  } else {
    
  }
  wheel_asset_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), wheel_asset_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.OakCARMenuVehicleConfigSaveData.wheel_asset_path)
}
inline std::string* OakCARMenuVehicleConfigSaveData::unsafe_arena_release_wheel_asset_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.OakCARMenuVehicleConfigSaveData.wheel_asset_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return wheel_asset_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OakCARMenuVehicleConfigSaveData::unsafe_arena_set_allocated_wheel_asset_path(
    std::string* wheel_asset_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (wheel_asset_path != nullptr) {
    
  } else {
    
  }
  wheel_asset_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      wheel_asset_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.OakCARMenuVehicleConfigSaveData.wheel_asset_path)
}

// string armor_asset_path = 4;
inline void OakCARMenuVehicleConfigSaveData::clear_armor_asset_path() {
  armor_asset_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OakCARMenuVehicleConfigSaveData::armor_asset_path() const {
  // @@protoc_insertion_point(field_get:OakSave.OakCARMenuVehicleConfigSaveData.armor_asset_path)
  return _internal_armor_asset_path();
}
inline void OakCARMenuVehicleConfigSaveData::set_armor_asset_path(const std::string& value) {
  _internal_set_armor_asset_path(value);
  // @@protoc_insertion_point(field_set:OakSave.OakCARMenuVehicleConfigSaveData.armor_asset_path)
}
inline std::string* OakCARMenuVehicleConfigSaveData::mutable_armor_asset_path() {
  // @@protoc_insertion_point(field_mutable:OakSave.OakCARMenuVehicleConfigSaveData.armor_asset_path)
  return _internal_mutable_armor_asset_path();
}
inline const std::string& OakCARMenuVehicleConfigSaveData::_internal_armor_asset_path() const {
  return armor_asset_path_.Get();
}
inline void OakCARMenuVehicleConfigSaveData::_internal_set_armor_asset_path(const std::string& value) {
  
  armor_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OakCARMenuVehicleConfigSaveData::set_armor_asset_path(std::string&& value) {
  
  armor_asset_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.OakCARMenuVehicleConfigSaveData.armor_asset_path)
}
inline void OakCARMenuVehicleConfigSaveData::set_armor_asset_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  armor_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.OakCARMenuVehicleConfigSaveData.armor_asset_path)
}
inline void OakCARMenuVehicleConfigSaveData::set_armor_asset_path(const char* value,
    size_t size) {
  
  armor_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.OakCARMenuVehicleConfigSaveData.armor_asset_path)
}
inline std::string* OakCARMenuVehicleConfigSaveData::_internal_mutable_armor_asset_path() {
  
  return armor_asset_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OakCARMenuVehicleConfigSaveData::release_armor_asset_path() {
  // @@protoc_insertion_point(field_release:OakSave.OakCARMenuVehicleConfigSaveData.armor_asset_path)
  return armor_asset_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OakCARMenuVehicleConfigSaveData::set_allocated_armor_asset_path(std::string* armor_asset_path) {
  if (armor_asset_path != nullptr) {
    
  } else {
    
  }
  armor_asset_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), armor_asset_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.OakCARMenuVehicleConfigSaveData.armor_asset_path)
}
inline std::string* OakCARMenuVehicleConfigSaveData::unsafe_arena_release_armor_asset_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.OakCARMenuVehicleConfigSaveData.armor_asset_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return armor_asset_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OakCARMenuVehicleConfigSaveData::unsafe_arena_set_allocated_armor_asset_path(
    std::string* armor_asset_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (armor_asset_path != nullptr) {
    
  } else {
    
  }
  armor_asset_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      armor_asset_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.OakCARMenuVehicleConfigSaveData.armor_asset_path)
}

// string core_mod_asset_path = 5;
inline void OakCARMenuVehicleConfigSaveData::clear_core_mod_asset_path() {
  core_mod_asset_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OakCARMenuVehicleConfigSaveData::core_mod_asset_path() const {
  // @@protoc_insertion_point(field_get:OakSave.OakCARMenuVehicleConfigSaveData.core_mod_asset_path)
  return _internal_core_mod_asset_path();
}
inline void OakCARMenuVehicleConfigSaveData::set_core_mod_asset_path(const std::string& value) {
  _internal_set_core_mod_asset_path(value);
  // @@protoc_insertion_point(field_set:OakSave.OakCARMenuVehicleConfigSaveData.core_mod_asset_path)
}
inline std::string* OakCARMenuVehicleConfigSaveData::mutable_core_mod_asset_path() {
  // @@protoc_insertion_point(field_mutable:OakSave.OakCARMenuVehicleConfigSaveData.core_mod_asset_path)
  return _internal_mutable_core_mod_asset_path();
}
inline const std::string& OakCARMenuVehicleConfigSaveData::_internal_core_mod_asset_path() const {
  return core_mod_asset_path_.Get();
}
inline void OakCARMenuVehicleConfigSaveData::_internal_set_core_mod_asset_path(const std::string& value) {
  
  core_mod_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OakCARMenuVehicleConfigSaveData::set_core_mod_asset_path(std::string&& value) {
  
  core_mod_asset_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.OakCARMenuVehicleConfigSaveData.core_mod_asset_path)
}
inline void OakCARMenuVehicleConfigSaveData::set_core_mod_asset_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  core_mod_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.OakCARMenuVehicleConfigSaveData.core_mod_asset_path)
}
inline void OakCARMenuVehicleConfigSaveData::set_core_mod_asset_path(const char* value,
    size_t size) {
  
  core_mod_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.OakCARMenuVehicleConfigSaveData.core_mod_asset_path)
}
inline std::string* OakCARMenuVehicleConfigSaveData::_internal_mutable_core_mod_asset_path() {
  
  return core_mod_asset_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OakCARMenuVehicleConfigSaveData::release_core_mod_asset_path() {
  // @@protoc_insertion_point(field_release:OakSave.OakCARMenuVehicleConfigSaveData.core_mod_asset_path)
  return core_mod_asset_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OakCARMenuVehicleConfigSaveData::set_allocated_core_mod_asset_path(std::string* core_mod_asset_path) {
  if (core_mod_asset_path != nullptr) {
    
  } else {
    
  }
  core_mod_asset_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), core_mod_asset_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.OakCARMenuVehicleConfigSaveData.core_mod_asset_path)
}
inline std::string* OakCARMenuVehicleConfigSaveData::unsafe_arena_release_core_mod_asset_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.OakCARMenuVehicleConfigSaveData.core_mod_asset_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return core_mod_asset_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OakCARMenuVehicleConfigSaveData::unsafe_arena_set_allocated_core_mod_asset_path(
    std::string* core_mod_asset_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (core_mod_asset_path != nullptr) {
    
  } else {
    
  }
  core_mod_asset_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      core_mod_asset_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.OakCARMenuVehicleConfigSaveData.core_mod_asset_path)
}

// string gunner_weapon_asset_path = 6;
inline void OakCARMenuVehicleConfigSaveData::clear_gunner_weapon_asset_path() {
  gunner_weapon_asset_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OakCARMenuVehicleConfigSaveData::gunner_weapon_asset_path() const {
  // @@protoc_insertion_point(field_get:OakSave.OakCARMenuVehicleConfigSaveData.gunner_weapon_asset_path)
  return _internal_gunner_weapon_asset_path();
}
inline void OakCARMenuVehicleConfigSaveData::set_gunner_weapon_asset_path(const std::string& value) {
  _internal_set_gunner_weapon_asset_path(value);
  // @@protoc_insertion_point(field_set:OakSave.OakCARMenuVehicleConfigSaveData.gunner_weapon_asset_path)
}
inline std::string* OakCARMenuVehicleConfigSaveData::mutable_gunner_weapon_asset_path() {
  // @@protoc_insertion_point(field_mutable:OakSave.OakCARMenuVehicleConfigSaveData.gunner_weapon_asset_path)
  return _internal_mutable_gunner_weapon_asset_path();
}
inline const std::string& OakCARMenuVehicleConfigSaveData::_internal_gunner_weapon_asset_path() const {
  return gunner_weapon_asset_path_.Get();
}
inline void OakCARMenuVehicleConfigSaveData::_internal_set_gunner_weapon_asset_path(const std::string& value) {
  
  gunner_weapon_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OakCARMenuVehicleConfigSaveData::set_gunner_weapon_asset_path(std::string&& value) {
  
  gunner_weapon_asset_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.OakCARMenuVehicleConfigSaveData.gunner_weapon_asset_path)
}
inline void OakCARMenuVehicleConfigSaveData::set_gunner_weapon_asset_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gunner_weapon_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.OakCARMenuVehicleConfigSaveData.gunner_weapon_asset_path)
}
inline void OakCARMenuVehicleConfigSaveData::set_gunner_weapon_asset_path(const char* value,
    size_t size) {
  
  gunner_weapon_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.OakCARMenuVehicleConfigSaveData.gunner_weapon_asset_path)
}
inline std::string* OakCARMenuVehicleConfigSaveData::_internal_mutable_gunner_weapon_asset_path() {
  
  return gunner_weapon_asset_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OakCARMenuVehicleConfigSaveData::release_gunner_weapon_asset_path() {
  // @@protoc_insertion_point(field_release:OakSave.OakCARMenuVehicleConfigSaveData.gunner_weapon_asset_path)
  return gunner_weapon_asset_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OakCARMenuVehicleConfigSaveData::set_allocated_gunner_weapon_asset_path(std::string* gunner_weapon_asset_path) {
  if (gunner_weapon_asset_path != nullptr) {
    
  } else {
    
  }
  gunner_weapon_asset_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gunner_weapon_asset_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.OakCARMenuVehicleConfigSaveData.gunner_weapon_asset_path)
}
inline std::string* OakCARMenuVehicleConfigSaveData::unsafe_arena_release_gunner_weapon_asset_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.OakCARMenuVehicleConfigSaveData.gunner_weapon_asset_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return gunner_weapon_asset_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OakCARMenuVehicleConfigSaveData::unsafe_arena_set_allocated_gunner_weapon_asset_path(
    std::string* gunner_weapon_asset_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (gunner_weapon_asset_path != nullptr) {
    
  } else {
    
  }
  gunner_weapon_asset_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      gunner_weapon_asset_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.OakCARMenuVehicleConfigSaveData.gunner_weapon_asset_path)
}

// string driver_weapon_asset_path = 7;
inline void OakCARMenuVehicleConfigSaveData::clear_driver_weapon_asset_path() {
  driver_weapon_asset_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OakCARMenuVehicleConfigSaveData::driver_weapon_asset_path() const {
  // @@protoc_insertion_point(field_get:OakSave.OakCARMenuVehicleConfigSaveData.driver_weapon_asset_path)
  return _internal_driver_weapon_asset_path();
}
inline void OakCARMenuVehicleConfigSaveData::set_driver_weapon_asset_path(const std::string& value) {
  _internal_set_driver_weapon_asset_path(value);
  // @@protoc_insertion_point(field_set:OakSave.OakCARMenuVehicleConfigSaveData.driver_weapon_asset_path)
}
inline std::string* OakCARMenuVehicleConfigSaveData::mutable_driver_weapon_asset_path() {
  // @@protoc_insertion_point(field_mutable:OakSave.OakCARMenuVehicleConfigSaveData.driver_weapon_asset_path)
  return _internal_mutable_driver_weapon_asset_path();
}
inline const std::string& OakCARMenuVehicleConfigSaveData::_internal_driver_weapon_asset_path() const {
  return driver_weapon_asset_path_.Get();
}
inline void OakCARMenuVehicleConfigSaveData::_internal_set_driver_weapon_asset_path(const std::string& value) {
  
  driver_weapon_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OakCARMenuVehicleConfigSaveData::set_driver_weapon_asset_path(std::string&& value) {
  
  driver_weapon_asset_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.OakCARMenuVehicleConfigSaveData.driver_weapon_asset_path)
}
inline void OakCARMenuVehicleConfigSaveData::set_driver_weapon_asset_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  driver_weapon_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.OakCARMenuVehicleConfigSaveData.driver_weapon_asset_path)
}
inline void OakCARMenuVehicleConfigSaveData::set_driver_weapon_asset_path(const char* value,
    size_t size) {
  
  driver_weapon_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.OakCARMenuVehicleConfigSaveData.driver_weapon_asset_path)
}
inline std::string* OakCARMenuVehicleConfigSaveData::_internal_mutable_driver_weapon_asset_path() {
  
  return driver_weapon_asset_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OakCARMenuVehicleConfigSaveData::release_driver_weapon_asset_path() {
  // @@protoc_insertion_point(field_release:OakSave.OakCARMenuVehicleConfigSaveData.driver_weapon_asset_path)
  return driver_weapon_asset_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OakCARMenuVehicleConfigSaveData::set_allocated_driver_weapon_asset_path(std::string* driver_weapon_asset_path) {
  if (driver_weapon_asset_path != nullptr) {
    
  } else {
    
  }
  driver_weapon_asset_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), driver_weapon_asset_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.OakCARMenuVehicleConfigSaveData.driver_weapon_asset_path)
}
inline std::string* OakCARMenuVehicleConfigSaveData::unsafe_arena_release_driver_weapon_asset_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.OakCARMenuVehicleConfigSaveData.driver_weapon_asset_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return driver_weapon_asset_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OakCARMenuVehicleConfigSaveData::unsafe_arena_set_allocated_driver_weapon_asset_path(
    std::string* driver_weapon_asset_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (driver_weapon_asset_path != nullptr) {
    
  } else {
    
  }
  driver_weapon_asset_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      driver_weapon_asset_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.OakCARMenuVehicleConfigSaveData.driver_weapon_asset_path)
}

// string ornament_asset_path = 8;
inline void OakCARMenuVehicleConfigSaveData::clear_ornament_asset_path() {
  ornament_asset_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OakCARMenuVehicleConfigSaveData::ornament_asset_path() const {
  // @@protoc_insertion_point(field_get:OakSave.OakCARMenuVehicleConfigSaveData.ornament_asset_path)
  return _internal_ornament_asset_path();
}
inline void OakCARMenuVehicleConfigSaveData::set_ornament_asset_path(const std::string& value) {
  _internal_set_ornament_asset_path(value);
  // @@protoc_insertion_point(field_set:OakSave.OakCARMenuVehicleConfigSaveData.ornament_asset_path)
}
inline std::string* OakCARMenuVehicleConfigSaveData::mutable_ornament_asset_path() {
  // @@protoc_insertion_point(field_mutable:OakSave.OakCARMenuVehicleConfigSaveData.ornament_asset_path)
  return _internal_mutable_ornament_asset_path();
}
inline const std::string& OakCARMenuVehicleConfigSaveData::_internal_ornament_asset_path() const {
  return ornament_asset_path_.Get();
}
inline void OakCARMenuVehicleConfigSaveData::_internal_set_ornament_asset_path(const std::string& value) {
  
  ornament_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OakCARMenuVehicleConfigSaveData::set_ornament_asset_path(std::string&& value) {
  
  ornament_asset_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.OakCARMenuVehicleConfigSaveData.ornament_asset_path)
}
inline void OakCARMenuVehicleConfigSaveData::set_ornament_asset_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ornament_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.OakCARMenuVehicleConfigSaveData.ornament_asset_path)
}
inline void OakCARMenuVehicleConfigSaveData::set_ornament_asset_path(const char* value,
    size_t size) {
  
  ornament_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.OakCARMenuVehicleConfigSaveData.ornament_asset_path)
}
inline std::string* OakCARMenuVehicleConfigSaveData::_internal_mutable_ornament_asset_path() {
  
  return ornament_asset_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OakCARMenuVehicleConfigSaveData::release_ornament_asset_path() {
  // @@protoc_insertion_point(field_release:OakSave.OakCARMenuVehicleConfigSaveData.ornament_asset_path)
  return ornament_asset_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OakCARMenuVehicleConfigSaveData::set_allocated_ornament_asset_path(std::string* ornament_asset_path) {
  if (ornament_asset_path != nullptr) {
    
  } else {
    
  }
  ornament_asset_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ornament_asset_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.OakCARMenuVehicleConfigSaveData.ornament_asset_path)
}
inline std::string* OakCARMenuVehicleConfigSaveData::unsafe_arena_release_ornament_asset_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.OakCARMenuVehicleConfigSaveData.ornament_asset_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ornament_asset_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OakCARMenuVehicleConfigSaveData::unsafe_arena_set_allocated_ornament_asset_path(
    std::string* ornament_asset_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ornament_asset_path != nullptr) {
    
  } else {
    
  }
  ornament_asset_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ornament_asset_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.OakCARMenuVehicleConfigSaveData.ornament_asset_path)
}

// string material_decal_asset_path = 9;
inline void OakCARMenuVehicleConfigSaveData::clear_material_decal_asset_path() {
  material_decal_asset_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OakCARMenuVehicleConfigSaveData::material_decal_asset_path() const {
  // @@protoc_insertion_point(field_get:OakSave.OakCARMenuVehicleConfigSaveData.material_decal_asset_path)
  return _internal_material_decal_asset_path();
}
inline void OakCARMenuVehicleConfigSaveData::set_material_decal_asset_path(const std::string& value) {
  _internal_set_material_decal_asset_path(value);
  // @@protoc_insertion_point(field_set:OakSave.OakCARMenuVehicleConfigSaveData.material_decal_asset_path)
}
inline std::string* OakCARMenuVehicleConfigSaveData::mutable_material_decal_asset_path() {
  // @@protoc_insertion_point(field_mutable:OakSave.OakCARMenuVehicleConfigSaveData.material_decal_asset_path)
  return _internal_mutable_material_decal_asset_path();
}
inline const std::string& OakCARMenuVehicleConfigSaveData::_internal_material_decal_asset_path() const {
  return material_decal_asset_path_.Get();
}
inline void OakCARMenuVehicleConfigSaveData::_internal_set_material_decal_asset_path(const std::string& value) {
  
  material_decal_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OakCARMenuVehicleConfigSaveData::set_material_decal_asset_path(std::string&& value) {
  
  material_decal_asset_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.OakCARMenuVehicleConfigSaveData.material_decal_asset_path)
}
inline void OakCARMenuVehicleConfigSaveData::set_material_decal_asset_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  material_decal_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.OakCARMenuVehicleConfigSaveData.material_decal_asset_path)
}
inline void OakCARMenuVehicleConfigSaveData::set_material_decal_asset_path(const char* value,
    size_t size) {
  
  material_decal_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.OakCARMenuVehicleConfigSaveData.material_decal_asset_path)
}
inline std::string* OakCARMenuVehicleConfigSaveData::_internal_mutable_material_decal_asset_path() {
  
  return material_decal_asset_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OakCARMenuVehicleConfigSaveData::release_material_decal_asset_path() {
  // @@protoc_insertion_point(field_release:OakSave.OakCARMenuVehicleConfigSaveData.material_decal_asset_path)
  return material_decal_asset_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OakCARMenuVehicleConfigSaveData::set_allocated_material_decal_asset_path(std::string* material_decal_asset_path) {
  if (material_decal_asset_path != nullptr) {
    
  } else {
    
  }
  material_decal_asset_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), material_decal_asset_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.OakCARMenuVehicleConfigSaveData.material_decal_asset_path)
}
inline std::string* OakCARMenuVehicleConfigSaveData::unsafe_arena_release_material_decal_asset_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.OakCARMenuVehicleConfigSaveData.material_decal_asset_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return material_decal_asset_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OakCARMenuVehicleConfigSaveData::unsafe_arena_set_allocated_material_decal_asset_path(
    std::string* material_decal_asset_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (material_decal_asset_path != nullptr) {
    
  } else {
    
  }
  material_decal_asset_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      material_decal_asset_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.OakCARMenuVehicleConfigSaveData.material_decal_asset_path)
}

// string material_asset_path = 10;
inline void OakCARMenuVehicleConfigSaveData::clear_material_asset_path() {
  material_asset_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OakCARMenuVehicleConfigSaveData::material_asset_path() const {
  // @@protoc_insertion_point(field_get:OakSave.OakCARMenuVehicleConfigSaveData.material_asset_path)
  return _internal_material_asset_path();
}
inline void OakCARMenuVehicleConfigSaveData::set_material_asset_path(const std::string& value) {
  _internal_set_material_asset_path(value);
  // @@protoc_insertion_point(field_set:OakSave.OakCARMenuVehicleConfigSaveData.material_asset_path)
}
inline std::string* OakCARMenuVehicleConfigSaveData::mutable_material_asset_path() {
  // @@protoc_insertion_point(field_mutable:OakSave.OakCARMenuVehicleConfigSaveData.material_asset_path)
  return _internal_mutable_material_asset_path();
}
inline const std::string& OakCARMenuVehicleConfigSaveData::_internal_material_asset_path() const {
  return material_asset_path_.Get();
}
inline void OakCARMenuVehicleConfigSaveData::_internal_set_material_asset_path(const std::string& value) {
  
  material_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OakCARMenuVehicleConfigSaveData::set_material_asset_path(std::string&& value) {
  
  material_asset_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.OakCARMenuVehicleConfigSaveData.material_asset_path)
}
inline void OakCARMenuVehicleConfigSaveData::set_material_asset_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  material_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.OakCARMenuVehicleConfigSaveData.material_asset_path)
}
inline void OakCARMenuVehicleConfigSaveData::set_material_asset_path(const char* value,
    size_t size) {
  
  material_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.OakCARMenuVehicleConfigSaveData.material_asset_path)
}
inline std::string* OakCARMenuVehicleConfigSaveData::_internal_mutable_material_asset_path() {
  
  return material_asset_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OakCARMenuVehicleConfigSaveData::release_material_asset_path() {
  // @@protoc_insertion_point(field_release:OakSave.OakCARMenuVehicleConfigSaveData.material_asset_path)
  return material_asset_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OakCARMenuVehicleConfigSaveData::set_allocated_material_asset_path(std::string* material_asset_path) {
  if (material_asset_path != nullptr) {
    
  } else {
    
  }
  material_asset_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), material_asset_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.OakCARMenuVehicleConfigSaveData.material_asset_path)
}
inline std::string* OakCARMenuVehicleConfigSaveData::unsafe_arena_release_material_asset_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.OakCARMenuVehicleConfigSaveData.material_asset_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return material_asset_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OakCARMenuVehicleConfigSaveData::unsafe_arena_set_allocated_material_asset_path(
    std::string* material_asset_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (material_asset_path != nullptr) {
    
  } else {
    
  }
  material_asset_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      material_asset_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.OakCARMenuVehicleConfigSaveData.material_asset_path)
}

// int32 color_index_1 = 11;
inline void OakCARMenuVehicleConfigSaveData::clear_color_index_1() {
  color_index_1_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OakCARMenuVehicleConfigSaveData::_internal_color_index_1() const {
  return color_index_1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OakCARMenuVehicleConfigSaveData::color_index_1() const {
  // @@protoc_insertion_point(field_get:OakSave.OakCARMenuVehicleConfigSaveData.color_index_1)
  return _internal_color_index_1();
}
inline void OakCARMenuVehicleConfigSaveData::_internal_set_color_index_1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  color_index_1_ = value;
}
inline void OakCARMenuVehicleConfigSaveData::set_color_index_1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_color_index_1(value);
  // @@protoc_insertion_point(field_set:OakSave.OakCARMenuVehicleConfigSaveData.color_index_1)
}

// int32 color_index_2 = 12;
inline void OakCARMenuVehicleConfigSaveData::clear_color_index_2() {
  color_index_2_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OakCARMenuVehicleConfigSaveData::_internal_color_index_2() const {
  return color_index_2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OakCARMenuVehicleConfigSaveData::color_index_2() const {
  // @@protoc_insertion_point(field_get:OakSave.OakCARMenuVehicleConfigSaveData.color_index_2)
  return _internal_color_index_2();
}
inline void OakCARMenuVehicleConfigSaveData::_internal_set_color_index_2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  color_index_2_ = value;
}
inline void OakCARMenuVehicleConfigSaveData::set_color_index_2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_color_index_2(value);
  // @@protoc_insertion_point(field_set:OakSave.OakCARMenuVehicleConfigSaveData.color_index_2)
}

// int32 color_index_3 = 13;
inline void OakCARMenuVehicleConfigSaveData::clear_color_index_3() {
  color_index_3_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OakCARMenuVehicleConfigSaveData::_internal_color_index_3() const {
  return color_index_3_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OakCARMenuVehicleConfigSaveData::color_index_3() const {
  // @@protoc_insertion_point(field_get:OakSave.OakCARMenuVehicleConfigSaveData.color_index_3)
  return _internal_color_index_3();
}
inline void OakCARMenuVehicleConfigSaveData::_internal_set_color_index_3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  color_index_3_ = value;
}
inline void OakCARMenuVehicleConfigSaveData::set_color_index_3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_color_index_3(value);
  // @@protoc_insertion_point(field_set:OakSave.OakCARMenuVehicleConfigSaveData.color_index_3)
}

// -------------------------------------------------------------------

// CustomPlayerColorSaveGameData

// string color_parameter = 1;
inline void CustomPlayerColorSaveGameData::clear_color_parameter() {
  color_parameter_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CustomPlayerColorSaveGameData::color_parameter() const {
  // @@protoc_insertion_point(field_get:OakSave.CustomPlayerColorSaveGameData.color_parameter)
  return _internal_color_parameter();
}
inline void CustomPlayerColorSaveGameData::set_color_parameter(const std::string& value) {
  _internal_set_color_parameter(value);
  // @@protoc_insertion_point(field_set:OakSave.CustomPlayerColorSaveGameData.color_parameter)
}
inline std::string* CustomPlayerColorSaveGameData::mutable_color_parameter() {
  // @@protoc_insertion_point(field_mutable:OakSave.CustomPlayerColorSaveGameData.color_parameter)
  return _internal_mutable_color_parameter();
}
inline const std::string& CustomPlayerColorSaveGameData::_internal_color_parameter() const {
  return color_parameter_.Get();
}
inline void CustomPlayerColorSaveGameData::_internal_set_color_parameter(const std::string& value) {
  
  color_parameter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CustomPlayerColorSaveGameData::set_color_parameter(std::string&& value) {
  
  color_parameter_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.CustomPlayerColorSaveGameData.color_parameter)
}
inline void CustomPlayerColorSaveGameData::set_color_parameter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  color_parameter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.CustomPlayerColorSaveGameData.color_parameter)
}
inline void CustomPlayerColorSaveGameData::set_color_parameter(const char* value,
    size_t size) {
  
  color_parameter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.CustomPlayerColorSaveGameData.color_parameter)
}
inline std::string* CustomPlayerColorSaveGameData::_internal_mutable_color_parameter() {
  
  return color_parameter_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CustomPlayerColorSaveGameData::release_color_parameter() {
  // @@protoc_insertion_point(field_release:OakSave.CustomPlayerColorSaveGameData.color_parameter)
  return color_parameter_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CustomPlayerColorSaveGameData::set_allocated_color_parameter(std::string* color_parameter) {
  if (color_parameter != nullptr) {
    
  } else {
    
  }
  color_parameter_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), color_parameter,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.CustomPlayerColorSaveGameData.color_parameter)
}
inline std::string* CustomPlayerColorSaveGameData::unsafe_arena_release_color_parameter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.CustomPlayerColorSaveGameData.color_parameter)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return color_parameter_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CustomPlayerColorSaveGameData::unsafe_arena_set_allocated_color_parameter(
    std::string* color_parameter) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (color_parameter != nullptr) {
    
  } else {
    
  }
  color_parameter_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      color_parameter, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.CustomPlayerColorSaveGameData.color_parameter)
}

// .OakSave.Vec3 applied_color = 2;
inline bool CustomPlayerColorSaveGameData::_internal_has_applied_color() const {
  return this != internal_default_instance() && applied_color_ != nullptr;
}
inline bool CustomPlayerColorSaveGameData::has_applied_color() const {
  return _internal_has_applied_color();
}
inline const ::OakSave::Vec3& CustomPlayerColorSaveGameData::_internal_applied_color() const {
  const ::OakSave::Vec3* p = applied_color_;
  return p != nullptr ? *p : *reinterpret_cast<const ::OakSave::Vec3*>(
      &::OakSave::_Vec3_default_instance_);
}
inline const ::OakSave::Vec3& CustomPlayerColorSaveGameData::applied_color() const {
  // @@protoc_insertion_point(field_get:OakSave.CustomPlayerColorSaveGameData.applied_color)
  return _internal_applied_color();
}
inline void CustomPlayerColorSaveGameData::unsafe_arena_set_allocated_applied_color(
    ::OakSave::Vec3* applied_color) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(applied_color_);
  }
  applied_color_ = applied_color;
  if (applied_color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.CustomPlayerColorSaveGameData.applied_color)
}
inline ::OakSave::Vec3* CustomPlayerColorSaveGameData::release_applied_color() {
  auto temp = unsafe_arena_release_applied_color();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::OakSave::Vec3* CustomPlayerColorSaveGameData::unsafe_arena_release_applied_color() {
  // @@protoc_insertion_point(field_release:OakSave.CustomPlayerColorSaveGameData.applied_color)
  
  ::OakSave::Vec3* temp = applied_color_;
  applied_color_ = nullptr;
  return temp;
}
inline ::OakSave::Vec3* CustomPlayerColorSaveGameData::_internal_mutable_applied_color() {
  
  if (applied_color_ == nullptr) {
    auto* p = CreateMaybeMessage<::OakSave::Vec3>(GetArena());
    applied_color_ = p;
  }
  return applied_color_;
}
inline ::OakSave::Vec3* CustomPlayerColorSaveGameData::mutable_applied_color() {
  // @@protoc_insertion_point(field_mutable:OakSave.CustomPlayerColorSaveGameData.applied_color)
  return _internal_mutable_applied_color();
}
inline void CustomPlayerColorSaveGameData::set_allocated_applied_color(::OakSave::Vec3* applied_color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(applied_color_);
  }
  if (applied_color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(applied_color)->GetArena();
    if (message_arena != submessage_arena) {
      applied_color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, applied_color, submessage_arena);
    }
    
  } else {
    
  }
  applied_color_ = applied_color;
  // @@protoc_insertion_point(field_set_allocated:OakSave.CustomPlayerColorSaveGameData.applied_color)
}

// .OakSave.Vec3 split_color = 3;
inline bool CustomPlayerColorSaveGameData::_internal_has_split_color() const {
  return this != internal_default_instance() && split_color_ != nullptr;
}
inline bool CustomPlayerColorSaveGameData::has_split_color() const {
  return _internal_has_split_color();
}
inline const ::OakSave::Vec3& CustomPlayerColorSaveGameData::_internal_split_color() const {
  const ::OakSave::Vec3* p = split_color_;
  return p != nullptr ? *p : *reinterpret_cast<const ::OakSave::Vec3*>(
      &::OakSave::_Vec3_default_instance_);
}
inline const ::OakSave::Vec3& CustomPlayerColorSaveGameData::split_color() const {
  // @@protoc_insertion_point(field_get:OakSave.CustomPlayerColorSaveGameData.split_color)
  return _internal_split_color();
}
inline void CustomPlayerColorSaveGameData::unsafe_arena_set_allocated_split_color(
    ::OakSave::Vec3* split_color) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(split_color_);
  }
  split_color_ = split_color;
  if (split_color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.CustomPlayerColorSaveGameData.split_color)
}
inline ::OakSave::Vec3* CustomPlayerColorSaveGameData::release_split_color() {
  auto temp = unsafe_arena_release_split_color();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::OakSave::Vec3* CustomPlayerColorSaveGameData::unsafe_arena_release_split_color() {
  // @@protoc_insertion_point(field_release:OakSave.CustomPlayerColorSaveGameData.split_color)
  
  ::OakSave::Vec3* temp = split_color_;
  split_color_ = nullptr;
  return temp;
}
inline ::OakSave::Vec3* CustomPlayerColorSaveGameData::_internal_mutable_split_color() {
  
  if (split_color_ == nullptr) {
    auto* p = CreateMaybeMessage<::OakSave::Vec3>(GetArena());
    split_color_ = p;
  }
  return split_color_;
}
inline ::OakSave::Vec3* CustomPlayerColorSaveGameData::mutable_split_color() {
  // @@protoc_insertion_point(field_mutable:OakSave.CustomPlayerColorSaveGameData.split_color)
  return _internal_mutable_split_color();
}
inline void CustomPlayerColorSaveGameData::set_allocated_split_color(::OakSave::Vec3* split_color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(split_color_);
  }
  if (split_color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(split_color)->GetArena();
    if (message_arena != submessage_arena) {
      split_color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, split_color, submessage_arena);
    }
    
  } else {
    
  }
  split_color_ = split_color;
  // @@protoc_insertion_point(field_set_allocated:OakSave.CustomPlayerColorSaveGameData.split_color)
}

// bool use_default_color = 4;
inline void CustomPlayerColorSaveGameData::clear_use_default_color() {
  use_default_color_ = false;
}
inline bool CustomPlayerColorSaveGameData::_internal_use_default_color() const {
  return use_default_color_;
}
inline bool CustomPlayerColorSaveGameData::use_default_color() const {
  // @@protoc_insertion_point(field_get:OakSave.CustomPlayerColorSaveGameData.use_default_color)
  return _internal_use_default_color();
}
inline void CustomPlayerColorSaveGameData::_internal_set_use_default_color(bool value) {
  
  use_default_color_ = value;
}
inline void CustomPlayerColorSaveGameData::set_use_default_color(bool value) {
  _internal_set_use_default_color(value);
  // @@protoc_insertion_point(field_set:OakSave.CustomPlayerColorSaveGameData.use_default_color)
}

// bool use_default_split_color = 5;
inline void CustomPlayerColorSaveGameData::clear_use_default_split_color() {
  use_default_split_color_ = false;
}
inline bool CustomPlayerColorSaveGameData::_internal_use_default_split_color() const {
  return use_default_split_color_;
}
inline bool CustomPlayerColorSaveGameData::use_default_split_color() const {
  // @@protoc_insertion_point(field_get:OakSave.CustomPlayerColorSaveGameData.use_default_split_color)
  return _internal_use_default_split_color();
}
inline void CustomPlayerColorSaveGameData::_internal_set_use_default_split_color(bool value) {
  
  use_default_split_color_ = value;
}
inline void CustomPlayerColorSaveGameData::set_use_default_split_color(bool value) {
  _internal_set_use_default_split_color(value);
  // @@protoc_insertion_point(field_set:OakSave.CustomPlayerColorSaveGameData.use_default_split_color)
}

// -------------------------------------------------------------------

// GuardianRankSaveGameData

// int32 guardian_rank = 1;
inline void GuardianRankSaveGameData::clear_guardian_rank() {
  guardian_rank_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GuardianRankSaveGameData::_internal_guardian_rank() const {
  return guardian_rank_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GuardianRankSaveGameData::guardian_rank() const {
  // @@protoc_insertion_point(field_get:OakSave.GuardianRankSaveGameData.guardian_rank)
  return _internal_guardian_rank();
}
inline void GuardianRankSaveGameData::_internal_set_guardian_rank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  guardian_rank_ = value;
}
inline void GuardianRankSaveGameData::set_guardian_rank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_guardian_rank(value);
  // @@protoc_insertion_point(field_set:OakSave.GuardianRankSaveGameData.guardian_rank)
}

// int32 guardian_experience = 2;
inline void GuardianRankSaveGameData::clear_guardian_experience() {
  guardian_experience_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GuardianRankSaveGameData::_internal_guardian_experience() const {
  return guardian_experience_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GuardianRankSaveGameData::guardian_experience() const {
  // @@protoc_insertion_point(field_get:OakSave.GuardianRankSaveGameData.guardian_experience)
  return _internal_guardian_experience();
}
inline void GuardianRankSaveGameData::_internal_set_guardian_experience(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  guardian_experience_ = value;
}
inline void GuardianRankSaveGameData::set_guardian_experience(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_guardian_experience(value);
  // @@protoc_insertion_point(field_set:OakSave.GuardianRankSaveGameData.guardian_experience)
}

// -------------------------------------------------------------------

// GuardianRankRewardCharacterSaveGameData

// int32 num_tokens = 1;
inline void GuardianRankRewardCharacterSaveGameData::clear_num_tokens() {
  num_tokens_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GuardianRankRewardCharacterSaveGameData::_internal_num_tokens() const {
  return num_tokens_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GuardianRankRewardCharacterSaveGameData::num_tokens() const {
  // @@protoc_insertion_point(field_get:OakSave.GuardianRankRewardCharacterSaveGameData.num_tokens)
  return _internal_num_tokens();
}
inline void GuardianRankRewardCharacterSaveGameData::_internal_set_num_tokens(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_tokens_ = value;
}
inline void GuardianRankRewardCharacterSaveGameData::set_num_tokens(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_tokens(value);
  // @@protoc_insertion_point(field_set:OakSave.GuardianRankRewardCharacterSaveGameData.num_tokens)
}

// bool is_enabled = 2;
inline void GuardianRankRewardCharacterSaveGameData::clear_is_enabled() {
  is_enabled_ = false;
}
inline bool GuardianRankRewardCharacterSaveGameData::_internal_is_enabled() const {
  return is_enabled_;
}
inline bool GuardianRankRewardCharacterSaveGameData::is_enabled() const {
  // @@protoc_insertion_point(field_get:OakSave.GuardianRankRewardCharacterSaveGameData.is_enabled)
  return _internal_is_enabled();
}
inline void GuardianRankRewardCharacterSaveGameData::_internal_set_is_enabled(bool value) {
  
  is_enabled_ = value;
}
inline void GuardianRankRewardCharacterSaveGameData::set_is_enabled(bool value) {
  _internal_set_is_enabled(value);
  // @@protoc_insertion_point(field_set:OakSave.GuardianRankRewardCharacterSaveGameData.is_enabled)
}

// string reward_data_path = 3;
inline void GuardianRankRewardCharacterSaveGameData::clear_reward_data_path() {
  reward_data_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GuardianRankRewardCharacterSaveGameData::reward_data_path() const {
  // @@protoc_insertion_point(field_get:OakSave.GuardianRankRewardCharacterSaveGameData.reward_data_path)
  return _internal_reward_data_path();
}
inline void GuardianRankRewardCharacterSaveGameData::set_reward_data_path(const std::string& value) {
  _internal_set_reward_data_path(value);
  // @@protoc_insertion_point(field_set:OakSave.GuardianRankRewardCharacterSaveGameData.reward_data_path)
}
inline std::string* GuardianRankRewardCharacterSaveGameData::mutable_reward_data_path() {
  // @@protoc_insertion_point(field_mutable:OakSave.GuardianRankRewardCharacterSaveGameData.reward_data_path)
  return _internal_mutable_reward_data_path();
}
inline const std::string& GuardianRankRewardCharacterSaveGameData::_internal_reward_data_path() const {
  return reward_data_path_.Get();
}
inline void GuardianRankRewardCharacterSaveGameData::_internal_set_reward_data_path(const std::string& value) {
  
  reward_data_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GuardianRankRewardCharacterSaveGameData::set_reward_data_path(std::string&& value) {
  
  reward_data_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.GuardianRankRewardCharacterSaveGameData.reward_data_path)
}
inline void GuardianRankRewardCharacterSaveGameData::set_reward_data_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reward_data_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.GuardianRankRewardCharacterSaveGameData.reward_data_path)
}
inline void GuardianRankRewardCharacterSaveGameData::set_reward_data_path(const char* value,
    size_t size) {
  
  reward_data_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.GuardianRankRewardCharacterSaveGameData.reward_data_path)
}
inline std::string* GuardianRankRewardCharacterSaveGameData::_internal_mutable_reward_data_path() {
  
  return reward_data_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GuardianRankRewardCharacterSaveGameData::release_reward_data_path() {
  // @@protoc_insertion_point(field_release:OakSave.GuardianRankRewardCharacterSaveGameData.reward_data_path)
  return reward_data_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GuardianRankRewardCharacterSaveGameData::set_allocated_reward_data_path(std::string* reward_data_path) {
  if (reward_data_path != nullptr) {
    
  } else {
    
  }
  reward_data_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reward_data_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.GuardianRankRewardCharacterSaveGameData.reward_data_path)
}
inline std::string* GuardianRankRewardCharacterSaveGameData::unsafe_arena_release_reward_data_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.GuardianRankRewardCharacterSaveGameData.reward_data_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return reward_data_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GuardianRankRewardCharacterSaveGameData::unsafe_arena_set_allocated_reward_data_path(
    std::string* reward_data_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (reward_data_path != nullptr) {
    
  } else {
    
  }
  reward_data_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      reward_data_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.GuardianRankRewardCharacterSaveGameData.reward_data_path)
}

// -------------------------------------------------------------------

// GuardianRankPerkCharacterSaveGameData

// bool is_enabled = 1;
inline void GuardianRankPerkCharacterSaveGameData::clear_is_enabled() {
  is_enabled_ = false;
}
inline bool GuardianRankPerkCharacterSaveGameData::_internal_is_enabled() const {
  return is_enabled_;
}
inline bool GuardianRankPerkCharacterSaveGameData::is_enabled() const {
  // @@protoc_insertion_point(field_get:OakSave.GuardianRankPerkCharacterSaveGameData.is_enabled)
  return _internal_is_enabled();
}
inline void GuardianRankPerkCharacterSaveGameData::_internal_set_is_enabled(bool value) {
  
  is_enabled_ = value;
}
inline void GuardianRankPerkCharacterSaveGameData::set_is_enabled(bool value) {
  _internal_set_is_enabled(value);
  // @@protoc_insertion_point(field_set:OakSave.GuardianRankPerkCharacterSaveGameData.is_enabled)
}

// string perk_data_path = 2;
inline void GuardianRankPerkCharacterSaveGameData::clear_perk_data_path() {
  perk_data_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GuardianRankPerkCharacterSaveGameData::perk_data_path() const {
  // @@protoc_insertion_point(field_get:OakSave.GuardianRankPerkCharacterSaveGameData.perk_data_path)
  return _internal_perk_data_path();
}
inline void GuardianRankPerkCharacterSaveGameData::set_perk_data_path(const std::string& value) {
  _internal_set_perk_data_path(value);
  // @@protoc_insertion_point(field_set:OakSave.GuardianRankPerkCharacterSaveGameData.perk_data_path)
}
inline std::string* GuardianRankPerkCharacterSaveGameData::mutable_perk_data_path() {
  // @@protoc_insertion_point(field_mutable:OakSave.GuardianRankPerkCharacterSaveGameData.perk_data_path)
  return _internal_mutable_perk_data_path();
}
inline const std::string& GuardianRankPerkCharacterSaveGameData::_internal_perk_data_path() const {
  return perk_data_path_.Get();
}
inline void GuardianRankPerkCharacterSaveGameData::_internal_set_perk_data_path(const std::string& value) {
  
  perk_data_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GuardianRankPerkCharacterSaveGameData::set_perk_data_path(std::string&& value) {
  
  perk_data_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.GuardianRankPerkCharacterSaveGameData.perk_data_path)
}
inline void GuardianRankPerkCharacterSaveGameData::set_perk_data_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  perk_data_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.GuardianRankPerkCharacterSaveGameData.perk_data_path)
}
inline void GuardianRankPerkCharacterSaveGameData::set_perk_data_path(const char* value,
    size_t size) {
  
  perk_data_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.GuardianRankPerkCharacterSaveGameData.perk_data_path)
}
inline std::string* GuardianRankPerkCharacterSaveGameData::_internal_mutable_perk_data_path() {
  
  return perk_data_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GuardianRankPerkCharacterSaveGameData::release_perk_data_path() {
  // @@protoc_insertion_point(field_release:OakSave.GuardianRankPerkCharacterSaveGameData.perk_data_path)
  return perk_data_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GuardianRankPerkCharacterSaveGameData::set_allocated_perk_data_path(std::string* perk_data_path) {
  if (perk_data_path != nullptr) {
    
  } else {
    
  }
  perk_data_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), perk_data_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.GuardianRankPerkCharacterSaveGameData.perk_data_path)
}
inline std::string* GuardianRankPerkCharacterSaveGameData::unsafe_arena_release_perk_data_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.GuardianRankPerkCharacterSaveGameData.perk_data_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return perk_data_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GuardianRankPerkCharacterSaveGameData::unsafe_arena_set_allocated_perk_data_path(
    std::string* perk_data_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (perk_data_path != nullptr) {
    
  } else {
    
  }
  perk_data_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      perk_data_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.GuardianRankPerkCharacterSaveGameData.perk_data_path)
}

// -------------------------------------------------------------------

// GuardianRankCharacterSaveGameData

// int32 guardian_available_tokens = 1;
inline void GuardianRankCharacterSaveGameData::clear_guardian_available_tokens() {
  guardian_available_tokens_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GuardianRankCharacterSaveGameData::_internal_guardian_available_tokens() const {
  return guardian_available_tokens_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GuardianRankCharacterSaveGameData::guardian_available_tokens() const {
  // @@protoc_insertion_point(field_get:OakSave.GuardianRankCharacterSaveGameData.guardian_available_tokens)
  return _internal_guardian_available_tokens();
}
inline void GuardianRankCharacterSaveGameData::_internal_set_guardian_available_tokens(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  guardian_available_tokens_ = value;
}
inline void GuardianRankCharacterSaveGameData::set_guardian_available_tokens(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_guardian_available_tokens(value);
  // @@protoc_insertion_point(field_set:OakSave.GuardianRankCharacterSaveGameData.guardian_available_tokens)
}

// int32 guardian_rank = 2;
inline void GuardianRankCharacterSaveGameData::clear_guardian_rank() {
  guardian_rank_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GuardianRankCharacterSaveGameData::_internal_guardian_rank() const {
  return guardian_rank_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GuardianRankCharacterSaveGameData::guardian_rank() const {
  // @@protoc_insertion_point(field_get:OakSave.GuardianRankCharacterSaveGameData.guardian_rank)
  return _internal_guardian_rank();
}
inline void GuardianRankCharacterSaveGameData::_internal_set_guardian_rank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  guardian_rank_ = value;
}
inline void GuardianRankCharacterSaveGameData::set_guardian_rank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_guardian_rank(value);
  // @@protoc_insertion_point(field_set:OakSave.GuardianRankCharacterSaveGameData.guardian_rank)
}

// int32 guardian_experience = 3;
inline void GuardianRankCharacterSaveGameData::clear_guardian_experience() {
  guardian_experience_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GuardianRankCharacterSaveGameData::_internal_guardian_experience() const {
  return guardian_experience_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GuardianRankCharacterSaveGameData::guardian_experience() const {
  // @@protoc_insertion_point(field_get:OakSave.GuardianRankCharacterSaveGameData.guardian_experience)
  return _internal_guardian_experience();
}
inline void GuardianRankCharacterSaveGameData::_internal_set_guardian_experience(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  guardian_experience_ = value;
}
inline void GuardianRankCharacterSaveGameData::set_guardian_experience(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_guardian_experience(value);
  // @@protoc_insertion_point(field_set:OakSave.GuardianRankCharacterSaveGameData.guardian_experience)
}

// repeated .OakSave.GuardianRankRewardCharacterSaveGameData rank_rewards = 4;
inline int GuardianRankCharacterSaveGameData::_internal_rank_rewards_size() const {
  return rank_rewards_.size();
}
inline int GuardianRankCharacterSaveGameData::rank_rewards_size() const {
  return _internal_rank_rewards_size();
}
inline void GuardianRankCharacterSaveGameData::clear_rank_rewards() {
  rank_rewards_.Clear();
}
inline ::OakSave::GuardianRankRewardCharacterSaveGameData* GuardianRankCharacterSaveGameData::mutable_rank_rewards(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.GuardianRankCharacterSaveGameData.rank_rewards)
  return rank_rewards_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::GuardianRankRewardCharacterSaveGameData >*
GuardianRankCharacterSaveGameData::mutable_rank_rewards() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.GuardianRankCharacterSaveGameData.rank_rewards)
  return &rank_rewards_;
}
inline const ::OakSave::GuardianRankRewardCharacterSaveGameData& GuardianRankCharacterSaveGameData::_internal_rank_rewards(int index) const {
  return rank_rewards_.Get(index);
}
inline const ::OakSave::GuardianRankRewardCharacterSaveGameData& GuardianRankCharacterSaveGameData::rank_rewards(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.GuardianRankCharacterSaveGameData.rank_rewards)
  return _internal_rank_rewards(index);
}
inline ::OakSave::GuardianRankRewardCharacterSaveGameData* GuardianRankCharacterSaveGameData::_internal_add_rank_rewards() {
  return rank_rewards_.Add();
}
inline ::OakSave::GuardianRankRewardCharacterSaveGameData* GuardianRankCharacterSaveGameData::add_rank_rewards() {
  // @@protoc_insertion_point(field_add:OakSave.GuardianRankCharacterSaveGameData.rank_rewards)
  return _internal_add_rank_rewards();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::GuardianRankRewardCharacterSaveGameData >&
GuardianRankCharacterSaveGameData::rank_rewards() const {
  // @@protoc_insertion_point(field_list:OakSave.GuardianRankCharacterSaveGameData.rank_rewards)
  return rank_rewards_;
}

// repeated .OakSave.GuardianRankPerkCharacterSaveGameData rank_perks = 5;
inline int GuardianRankCharacterSaveGameData::_internal_rank_perks_size() const {
  return rank_perks_.size();
}
inline int GuardianRankCharacterSaveGameData::rank_perks_size() const {
  return _internal_rank_perks_size();
}
inline void GuardianRankCharacterSaveGameData::clear_rank_perks() {
  rank_perks_.Clear();
}
inline ::OakSave::GuardianRankPerkCharacterSaveGameData* GuardianRankCharacterSaveGameData::mutable_rank_perks(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.GuardianRankCharacterSaveGameData.rank_perks)
  return rank_perks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::GuardianRankPerkCharacterSaveGameData >*
GuardianRankCharacterSaveGameData::mutable_rank_perks() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.GuardianRankCharacterSaveGameData.rank_perks)
  return &rank_perks_;
}
inline const ::OakSave::GuardianRankPerkCharacterSaveGameData& GuardianRankCharacterSaveGameData::_internal_rank_perks(int index) const {
  return rank_perks_.Get(index);
}
inline const ::OakSave::GuardianRankPerkCharacterSaveGameData& GuardianRankCharacterSaveGameData::rank_perks(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.GuardianRankCharacterSaveGameData.rank_perks)
  return _internal_rank_perks(index);
}
inline ::OakSave::GuardianRankPerkCharacterSaveGameData* GuardianRankCharacterSaveGameData::_internal_add_rank_perks() {
  return rank_perks_.Add();
}
inline ::OakSave::GuardianRankPerkCharacterSaveGameData* GuardianRankCharacterSaveGameData::add_rank_perks() {
  // @@protoc_insertion_point(field_add:OakSave.GuardianRankCharacterSaveGameData.rank_perks)
  return _internal_add_rank_perks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::GuardianRankPerkCharacterSaveGameData >&
GuardianRankCharacterSaveGameData::rank_perks() const {
  // @@protoc_insertion_point(field_list:OakSave.GuardianRankCharacterSaveGameData.rank_perks)
  return rank_perks_;
}

// int32 guardian_reward_random_seed = 6;
inline void GuardianRankCharacterSaveGameData::clear_guardian_reward_random_seed() {
  guardian_reward_random_seed_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GuardianRankCharacterSaveGameData::_internal_guardian_reward_random_seed() const {
  return guardian_reward_random_seed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GuardianRankCharacterSaveGameData::guardian_reward_random_seed() const {
  // @@protoc_insertion_point(field_get:OakSave.GuardianRankCharacterSaveGameData.guardian_reward_random_seed)
  return _internal_guardian_reward_random_seed();
}
inline void GuardianRankCharacterSaveGameData::_internal_set_guardian_reward_random_seed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  guardian_reward_random_seed_ = value;
}
inline void GuardianRankCharacterSaveGameData::set_guardian_reward_random_seed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_guardian_reward_random_seed(value);
  // @@protoc_insertion_point(field_set:OakSave.GuardianRankCharacterSaveGameData.guardian_reward_random_seed)
}

// int64 new_guardian_experience = 7;
inline void GuardianRankCharacterSaveGameData::clear_new_guardian_experience() {
  new_guardian_experience_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GuardianRankCharacterSaveGameData::_internal_new_guardian_experience() const {
  return new_guardian_experience_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GuardianRankCharacterSaveGameData::new_guardian_experience() const {
  // @@protoc_insertion_point(field_get:OakSave.GuardianRankCharacterSaveGameData.new_guardian_experience)
  return _internal_new_guardian_experience();
}
inline void GuardianRankCharacterSaveGameData::_internal_set_new_guardian_experience(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  new_guardian_experience_ = value;
}
inline void GuardianRankCharacterSaveGameData::set_new_guardian_experience(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_new_guardian_experience(value);
  // @@protoc_insertion_point(field_set:OakSave.GuardianRankCharacterSaveGameData.new_guardian_experience)
}

// bool is_rank_system_enabled = 8;
inline void GuardianRankCharacterSaveGameData::clear_is_rank_system_enabled() {
  is_rank_system_enabled_ = false;
}
inline bool GuardianRankCharacterSaveGameData::_internal_is_rank_system_enabled() const {
  return is_rank_system_enabled_;
}
inline bool GuardianRankCharacterSaveGameData::is_rank_system_enabled() const {
  // @@protoc_insertion_point(field_get:OakSave.GuardianRankCharacterSaveGameData.is_rank_system_enabled)
  return _internal_is_rank_system_enabled();
}
inline void GuardianRankCharacterSaveGameData::_internal_set_is_rank_system_enabled(bool value) {
  
  is_rank_system_enabled_ = value;
}
inline void GuardianRankCharacterSaveGameData::set_is_rank_system_enabled(bool value) {
  _internal_set_is_rank_system_enabled(value);
  // @@protoc_insertion_point(field_set:OakSave.GuardianRankCharacterSaveGameData.is_rank_system_enabled)
}

// -------------------------------------------------------------------

// CrewQuartersDecorationSaveData

// int32 decoration_index = 1;
inline void CrewQuartersDecorationSaveData::clear_decoration_index() {
  decoration_index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CrewQuartersDecorationSaveData::_internal_decoration_index() const {
  return decoration_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CrewQuartersDecorationSaveData::decoration_index() const {
  // @@protoc_insertion_point(field_get:OakSave.CrewQuartersDecorationSaveData.decoration_index)
  return _internal_decoration_index();
}
inline void CrewQuartersDecorationSaveData::_internal_set_decoration_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  decoration_index_ = value;
}
inline void CrewQuartersDecorationSaveData::set_decoration_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_decoration_index(value);
  // @@protoc_insertion_point(field_set:OakSave.CrewQuartersDecorationSaveData.decoration_index)
}

// string decoration_data_path = 2;
inline void CrewQuartersDecorationSaveData::clear_decoration_data_path() {
  decoration_data_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CrewQuartersDecorationSaveData::decoration_data_path() const {
  // @@protoc_insertion_point(field_get:OakSave.CrewQuartersDecorationSaveData.decoration_data_path)
  return _internal_decoration_data_path();
}
inline void CrewQuartersDecorationSaveData::set_decoration_data_path(const std::string& value) {
  _internal_set_decoration_data_path(value);
  // @@protoc_insertion_point(field_set:OakSave.CrewQuartersDecorationSaveData.decoration_data_path)
}
inline std::string* CrewQuartersDecorationSaveData::mutable_decoration_data_path() {
  // @@protoc_insertion_point(field_mutable:OakSave.CrewQuartersDecorationSaveData.decoration_data_path)
  return _internal_mutable_decoration_data_path();
}
inline const std::string& CrewQuartersDecorationSaveData::_internal_decoration_data_path() const {
  return decoration_data_path_.Get();
}
inline void CrewQuartersDecorationSaveData::_internal_set_decoration_data_path(const std::string& value) {
  
  decoration_data_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CrewQuartersDecorationSaveData::set_decoration_data_path(std::string&& value) {
  
  decoration_data_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.CrewQuartersDecorationSaveData.decoration_data_path)
}
inline void CrewQuartersDecorationSaveData::set_decoration_data_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  decoration_data_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.CrewQuartersDecorationSaveData.decoration_data_path)
}
inline void CrewQuartersDecorationSaveData::set_decoration_data_path(const char* value,
    size_t size) {
  
  decoration_data_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.CrewQuartersDecorationSaveData.decoration_data_path)
}
inline std::string* CrewQuartersDecorationSaveData::_internal_mutable_decoration_data_path() {
  
  return decoration_data_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CrewQuartersDecorationSaveData::release_decoration_data_path() {
  // @@protoc_insertion_point(field_release:OakSave.CrewQuartersDecorationSaveData.decoration_data_path)
  return decoration_data_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CrewQuartersDecorationSaveData::set_allocated_decoration_data_path(std::string* decoration_data_path) {
  if (decoration_data_path != nullptr) {
    
  } else {
    
  }
  decoration_data_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), decoration_data_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.CrewQuartersDecorationSaveData.decoration_data_path)
}
inline std::string* CrewQuartersDecorationSaveData::unsafe_arena_release_decoration_data_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.CrewQuartersDecorationSaveData.decoration_data_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return decoration_data_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CrewQuartersDecorationSaveData::unsafe_arena_set_allocated_decoration_data_path(
    std::string* decoration_data_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (decoration_data_path != nullptr) {
    
  } else {
    
  }
  decoration_data_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      decoration_data_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.CrewQuartersDecorationSaveData.decoration_data_path)
}

// -------------------------------------------------------------------

// CrewQuartersSaveData

// int32 preferred_room_assignment = 1;
inline void CrewQuartersSaveData::clear_preferred_room_assignment() {
  preferred_room_assignment_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CrewQuartersSaveData::_internal_preferred_room_assignment() const {
  return preferred_room_assignment_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CrewQuartersSaveData::preferred_room_assignment() const {
  // @@protoc_insertion_point(field_get:OakSave.CrewQuartersSaveData.preferred_room_assignment)
  return _internal_preferred_room_assignment();
}
inline void CrewQuartersSaveData::_internal_set_preferred_room_assignment(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  preferred_room_assignment_ = value;
}
inline void CrewQuartersSaveData::set_preferred_room_assignment(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_preferred_room_assignment(value);
  // @@protoc_insertion_point(field_set:OakSave.CrewQuartersSaveData.preferred_room_assignment)
}

// repeated .OakSave.CrewQuartersDecorationSaveData decorations = 2;
inline int CrewQuartersSaveData::_internal_decorations_size() const {
  return decorations_.size();
}
inline int CrewQuartersSaveData::decorations_size() const {
  return _internal_decorations_size();
}
inline void CrewQuartersSaveData::clear_decorations() {
  decorations_.Clear();
}
inline ::OakSave::CrewQuartersDecorationSaveData* CrewQuartersSaveData::mutable_decorations(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.CrewQuartersSaveData.decorations)
  return decorations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::CrewQuartersDecorationSaveData >*
CrewQuartersSaveData::mutable_decorations() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.CrewQuartersSaveData.decorations)
  return &decorations_;
}
inline const ::OakSave::CrewQuartersDecorationSaveData& CrewQuartersSaveData::_internal_decorations(int index) const {
  return decorations_.Get(index);
}
inline const ::OakSave::CrewQuartersDecorationSaveData& CrewQuartersSaveData::decorations(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.CrewQuartersSaveData.decorations)
  return _internal_decorations(index);
}
inline ::OakSave::CrewQuartersDecorationSaveData* CrewQuartersSaveData::_internal_add_decorations() {
  return decorations_.Add();
}
inline ::OakSave::CrewQuartersDecorationSaveData* CrewQuartersSaveData::add_decorations() {
  // @@protoc_insertion_point(field_add:OakSave.CrewQuartersSaveData.decorations)
  return _internal_add_decorations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::CrewQuartersDecorationSaveData >&
CrewQuartersSaveData::decorations() const {
  // @@protoc_insertion_point(field_list:OakSave.CrewQuartersSaveData.decorations)
  return decorations_;
}

// string room_data_path = 3;
inline void CrewQuartersSaveData::clear_room_data_path() {
  room_data_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CrewQuartersSaveData::room_data_path() const {
  // @@protoc_insertion_point(field_get:OakSave.CrewQuartersSaveData.room_data_path)
  return _internal_room_data_path();
}
inline void CrewQuartersSaveData::set_room_data_path(const std::string& value) {
  _internal_set_room_data_path(value);
  // @@protoc_insertion_point(field_set:OakSave.CrewQuartersSaveData.room_data_path)
}
inline std::string* CrewQuartersSaveData::mutable_room_data_path() {
  // @@protoc_insertion_point(field_mutable:OakSave.CrewQuartersSaveData.room_data_path)
  return _internal_mutable_room_data_path();
}
inline const std::string& CrewQuartersSaveData::_internal_room_data_path() const {
  return room_data_path_.Get();
}
inline void CrewQuartersSaveData::_internal_set_room_data_path(const std::string& value) {
  
  room_data_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CrewQuartersSaveData::set_room_data_path(std::string&& value) {
  
  room_data_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.CrewQuartersSaveData.room_data_path)
}
inline void CrewQuartersSaveData::set_room_data_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  room_data_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.CrewQuartersSaveData.room_data_path)
}
inline void CrewQuartersSaveData::set_room_data_path(const char* value,
    size_t size) {
  
  room_data_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.CrewQuartersSaveData.room_data_path)
}
inline std::string* CrewQuartersSaveData::_internal_mutable_room_data_path() {
  
  return room_data_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CrewQuartersSaveData::release_room_data_path() {
  // @@protoc_insertion_point(field_release:OakSave.CrewQuartersSaveData.room_data_path)
  return room_data_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CrewQuartersSaveData::set_allocated_room_data_path(std::string* room_data_path) {
  if (room_data_path != nullptr) {
    
  } else {
    
  }
  room_data_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), room_data_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.CrewQuartersSaveData.room_data_path)
}
inline std::string* CrewQuartersSaveData::unsafe_arena_release_room_data_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.CrewQuartersSaveData.room_data_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return room_data_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CrewQuartersSaveData::unsafe_arena_set_allocated_room_data_path(
    std::string* room_data_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (room_data_path != nullptr) {
    
  } else {
    
  }
  room_data_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      room_data_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.CrewQuartersSaveData.room_data_path)
}

// -------------------------------------------------------------------

// CrewQuartersGunRackItemSaveData

// bytes encrypted_serial_number = 1;
inline void CrewQuartersGunRackItemSaveData::clear_encrypted_serial_number() {
  encrypted_serial_number_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CrewQuartersGunRackItemSaveData::encrypted_serial_number() const {
  // @@protoc_insertion_point(field_get:OakSave.CrewQuartersGunRackItemSaveData.encrypted_serial_number)
  return _internal_encrypted_serial_number();
}
inline void CrewQuartersGunRackItemSaveData::set_encrypted_serial_number(const std::string& value) {
  _internal_set_encrypted_serial_number(value);
  // @@protoc_insertion_point(field_set:OakSave.CrewQuartersGunRackItemSaveData.encrypted_serial_number)
}
inline std::string* CrewQuartersGunRackItemSaveData::mutable_encrypted_serial_number() {
  // @@protoc_insertion_point(field_mutable:OakSave.CrewQuartersGunRackItemSaveData.encrypted_serial_number)
  return _internal_mutable_encrypted_serial_number();
}
inline const std::string& CrewQuartersGunRackItemSaveData::_internal_encrypted_serial_number() const {
  return encrypted_serial_number_.Get();
}
inline void CrewQuartersGunRackItemSaveData::_internal_set_encrypted_serial_number(const std::string& value) {
  
  encrypted_serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CrewQuartersGunRackItemSaveData::set_encrypted_serial_number(std::string&& value) {
  
  encrypted_serial_number_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.CrewQuartersGunRackItemSaveData.encrypted_serial_number)
}
inline void CrewQuartersGunRackItemSaveData::set_encrypted_serial_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  encrypted_serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.CrewQuartersGunRackItemSaveData.encrypted_serial_number)
}
inline void CrewQuartersGunRackItemSaveData::set_encrypted_serial_number(const void* value,
    size_t size) {
  
  encrypted_serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.CrewQuartersGunRackItemSaveData.encrypted_serial_number)
}
inline std::string* CrewQuartersGunRackItemSaveData::_internal_mutable_encrypted_serial_number() {
  
  return encrypted_serial_number_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CrewQuartersGunRackItemSaveData::release_encrypted_serial_number() {
  // @@protoc_insertion_point(field_release:OakSave.CrewQuartersGunRackItemSaveData.encrypted_serial_number)
  return encrypted_serial_number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CrewQuartersGunRackItemSaveData::set_allocated_encrypted_serial_number(std::string* encrypted_serial_number) {
  if (encrypted_serial_number != nullptr) {
    
  } else {
    
  }
  encrypted_serial_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encrypted_serial_number,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.CrewQuartersGunRackItemSaveData.encrypted_serial_number)
}
inline std::string* CrewQuartersGunRackItemSaveData::unsafe_arena_release_encrypted_serial_number() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.CrewQuartersGunRackItemSaveData.encrypted_serial_number)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return encrypted_serial_number_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CrewQuartersGunRackItemSaveData::unsafe_arena_set_allocated_encrypted_serial_number(
    std::string* encrypted_serial_number) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (encrypted_serial_number != nullptr) {
    
  } else {
    
  }
  encrypted_serial_number_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      encrypted_serial_number, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.CrewQuartersGunRackItemSaveData.encrypted_serial_number)
}

// string slot_asset_path = 2;
inline void CrewQuartersGunRackItemSaveData::clear_slot_asset_path() {
  slot_asset_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CrewQuartersGunRackItemSaveData::slot_asset_path() const {
  // @@protoc_insertion_point(field_get:OakSave.CrewQuartersGunRackItemSaveData.slot_asset_path)
  return _internal_slot_asset_path();
}
inline void CrewQuartersGunRackItemSaveData::set_slot_asset_path(const std::string& value) {
  _internal_set_slot_asset_path(value);
  // @@protoc_insertion_point(field_set:OakSave.CrewQuartersGunRackItemSaveData.slot_asset_path)
}
inline std::string* CrewQuartersGunRackItemSaveData::mutable_slot_asset_path() {
  // @@protoc_insertion_point(field_mutable:OakSave.CrewQuartersGunRackItemSaveData.slot_asset_path)
  return _internal_mutable_slot_asset_path();
}
inline const std::string& CrewQuartersGunRackItemSaveData::_internal_slot_asset_path() const {
  return slot_asset_path_.Get();
}
inline void CrewQuartersGunRackItemSaveData::_internal_set_slot_asset_path(const std::string& value) {
  
  slot_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CrewQuartersGunRackItemSaveData::set_slot_asset_path(std::string&& value) {
  
  slot_asset_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.CrewQuartersGunRackItemSaveData.slot_asset_path)
}
inline void CrewQuartersGunRackItemSaveData::set_slot_asset_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  slot_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.CrewQuartersGunRackItemSaveData.slot_asset_path)
}
inline void CrewQuartersGunRackItemSaveData::set_slot_asset_path(const char* value,
    size_t size) {
  
  slot_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.CrewQuartersGunRackItemSaveData.slot_asset_path)
}
inline std::string* CrewQuartersGunRackItemSaveData::_internal_mutable_slot_asset_path() {
  
  return slot_asset_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CrewQuartersGunRackItemSaveData::release_slot_asset_path() {
  // @@protoc_insertion_point(field_release:OakSave.CrewQuartersGunRackItemSaveData.slot_asset_path)
  return slot_asset_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CrewQuartersGunRackItemSaveData::set_allocated_slot_asset_path(std::string* slot_asset_path) {
  if (slot_asset_path != nullptr) {
    
  } else {
    
  }
  slot_asset_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), slot_asset_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.CrewQuartersGunRackItemSaveData.slot_asset_path)
}
inline std::string* CrewQuartersGunRackItemSaveData::unsafe_arena_release_slot_asset_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.CrewQuartersGunRackItemSaveData.slot_asset_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return slot_asset_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CrewQuartersGunRackItemSaveData::unsafe_arena_set_allocated_slot_asset_path(
    std::string* slot_asset_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (slot_asset_path != nullptr) {
    
  } else {
    
  }
  slot_asset_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      slot_asset_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.CrewQuartersGunRackItemSaveData.slot_asset_path)
}

// .OakSave.InventoryBalanceStateInitializationData development_save_data = 3;
inline bool CrewQuartersGunRackItemSaveData::_internal_has_development_save_data() const {
  return this != internal_default_instance() && development_save_data_ != nullptr;
}
inline bool CrewQuartersGunRackItemSaveData::has_development_save_data() const {
  return _internal_has_development_save_data();
}
inline void CrewQuartersGunRackItemSaveData::clear_development_save_data() {
  if (GetArena() == nullptr && development_save_data_ != nullptr) {
    delete development_save_data_;
  }
  development_save_data_ = nullptr;
}
inline const ::OakSave::InventoryBalanceStateInitializationData& CrewQuartersGunRackItemSaveData::_internal_development_save_data() const {
  const ::OakSave::InventoryBalanceStateInitializationData* p = development_save_data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::OakSave::InventoryBalanceStateInitializationData*>(
      &::OakSave::_InventoryBalanceStateInitializationData_default_instance_);
}
inline const ::OakSave::InventoryBalanceStateInitializationData& CrewQuartersGunRackItemSaveData::development_save_data() const {
  // @@protoc_insertion_point(field_get:OakSave.CrewQuartersGunRackItemSaveData.development_save_data)
  return _internal_development_save_data();
}
inline void CrewQuartersGunRackItemSaveData::unsafe_arena_set_allocated_development_save_data(
    ::OakSave::InventoryBalanceStateInitializationData* development_save_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(development_save_data_);
  }
  development_save_data_ = development_save_data;
  if (development_save_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.CrewQuartersGunRackItemSaveData.development_save_data)
}
inline ::OakSave::InventoryBalanceStateInitializationData* CrewQuartersGunRackItemSaveData::release_development_save_data() {
  auto temp = unsafe_arena_release_development_save_data();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::OakSave::InventoryBalanceStateInitializationData* CrewQuartersGunRackItemSaveData::unsafe_arena_release_development_save_data() {
  // @@protoc_insertion_point(field_release:OakSave.CrewQuartersGunRackItemSaveData.development_save_data)
  
  ::OakSave::InventoryBalanceStateInitializationData* temp = development_save_data_;
  development_save_data_ = nullptr;
  return temp;
}
inline ::OakSave::InventoryBalanceStateInitializationData* CrewQuartersGunRackItemSaveData::_internal_mutable_development_save_data() {
  
  if (development_save_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::OakSave::InventoryBalanceStateInitializationData>(GetArena());
    development_save_data_ = p;
  }
  return development_save_data_;
}
inline ::OakSave::InventoryBalanceStateInitializationData* CrewQuartersGunRackItemSaveData::mutable_development_save_data() {
  // @@protoc_insertion_point(field_mutable:OakSave.CrewQuartersGunRackItemSaveData.development_save_data)
  return _internal_mutable_development_save_data();
}
inline void CrewQuartersGunRackItemSaveData::set_allocated_development_save_data(::OakSave::InventoryBalanceStateInitializationData* development_save_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete development_save_data_;
  }
  if (development_save_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(development_save_data);
    if (message_arena != submessage_arena) {
      development_save_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, development_save_data, submessage_arena);
    }
    
  } else {
    
  }
  development_save_data_ = development_save_data;
  // @@protoc_insertion_point(field_set_allocated:OakSave.CrewQuartersGunRackItemSaveData.development_save_data)
}

// -------------------------------------------------------------------

// CrewQuartersGunRackSaveData

// repeated .OakSave.CrewQuartersGunRackItemSaveData rack_save_data = 1;
inline int CrewQuartersGunRackSaveData::_internal_rack_save_data_size() const {
  return rack_save_data_.size();
}
inline int CrewQuartersGunRackSaveData::rack_save_data_size() const {
  return _internal_rack_save_data_size();
}
inline void CrewQuartersGunRackSaveData::clear_rack_save_data() {
  rack_save_data_.Clear();
}
inline ::OakSave::CrewQuartersGunRackItemSaveData* CrewQuartersGunRackSaveData::mutable_rack_save_data(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.CrewQuartersGunRackSaveData.rack_save_data)
  return rack_save_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::CrewQuartersGunRackItemSaveData >*
CrewQuartersGunRackSaveData::mutable_rack_save_data() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.CrewQuartersGunRackSaveData.rack_save_data)
  return &rack_save_data_;
}
inline const ::OakSave::CrewQuartersGunRackItemSaveData& CrewQuartersGunRackSaveData::_internal_rack_save_data(int index) const {
  return rack_save_data_.Get(index);
}
inline const ::OakSave::CrewQuartersGunRackItemSaveData& CrewQuartersGunRackSaveData::rack_save_data(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.CrewQuartersGunRackSaveData.rack_save_data)
  return _internal_rack_save_data(index);
}
inline ::OakSave::CrewQuartersGunRackItemSaveData* CrewQuartersGunRackSaveData::_internal_add_rack_save_data() {
  return rack_save_data_.Add();
}
inline ::OakSave::CrewQuartersGunRackItemSaveData* CrewQuartersGunRackSaveData::add_rack_save_data() {
  // @@protoc_insertion_point(field_add:OakSave.CrewQuartersGunRackSaveData.rack_save_data)
  return _internal_add_rack_save_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::CrewQuartersGunRackItemSaveData >&
CrewQuartersGunRackSaveData::rack_save_data() const {
  // @@protoc_insertion_point(field_list:OakSave.CrewQuartersGunRackSaveData.rack_save_data)
  return rack_save_data_;
}

// -------------------------------------------------------------------

// EchoLogSaveGameData

// bool has_been_seen_in_log = 1;
inline void EchoLogSaveGameData::clear_has_been_seen_in_log() {
  has_been_seen_in_log_ = false;
}
inline bool EchoLogSaveGameData::_internal_has_been_seen_in_log() const {
  return has_been_seen_in_log_;
}
inline bool EchoLogSaveGameData::has_been_seen_in_log() const {
  // @@protoc_insertion_point(field_get:OakSave.EchoLogSaveGameData.has_been_seen_in_log)
  return _internal_has_been_seen_in_log();
}
inline void EchoLogSaveGameData::_internal_set_has_been_seen_in_log(bool value) {
  
  has_been_seen_in_log_ = value;
}
inline void EchoLogSaveGameData::set_has_been_seen_in_log(bool value) {
  _internal_set_has_been_seen_in_log(value);
  // @@protoc_insertion_point(field_set:OakSave.EchoLogSaveGameData.has_been_seen_in_log)
}

// string echo_log_path = 2;
inline void EchoLogSaveGameData::clear_echo_log_path() {
  echo_log_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EchoLogSaveGameData::echo_log_path() const {
  // @@protoc_insertion_point(field_get:OakSave.EchoLogSaveGameData.echo_log_path)
  return _internal_echo_log_path();
}
inline void EchoLogSaveGameData::set_echo_log_path(const std::string& value) {
  _internal_set_echo_log_path(value);
  // @@protoc_insertion_point(field_set:OakSave.EchoLogSaveGameData.echo_log_path)
}
inline std::string* EchoLogSaveGameData::mutable_echo_log_path() {
  // @@protoc_insertion_point(field_mutable:OakSave.EchoLogSaveGameData.echo_log_path)
  return _internal_mutable_echo_log_path();
}
inline const std::string& EchoLogSaveGameData::_internal_echo_log_path() const {
  return echo_log_path_.Get();
}
inline void EchoLogSaveGameData::_internal_set_echo_log_path(const std::string& value) {
  
  echo_log_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EchoLogSaveGameData::set_echo_log_path(std::string&& value) {
  
  echo_log_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.EchoLogSaveGameData.echo_log_path)
}
inline void EchoLogSaveGameData::set_echo_log_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  echo_log_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.EchoLogSaveGameData.echo_log_path)
}
inline void EchoLogSaveGameData::set_echo_log_path(const char* value,
    size_t size) {
  
  echo_log_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.EchoLogSaveGameData.echo_log_path)
}
inline std::string* EchoLogSaveGameData::_internal_mutable_echo_log_path() {
  
  return echo_log_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EchoLogSaveGameData::release_echo_log_path() {
  // @@protoc_insertion_point(field_release:OakSave.EchoLogSaveGameData.echo_log_path)
  return echo_log_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EchoLogSaveGameData::set_allocated_echo_log_path(std::string* echo_log_path) {
  if (echo_log_path != nullptr) {
    
  } else {
    
  }
  echo_log_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), echo_log_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.EchoLogSaveGameData.echo_log_path)
}
inline std::string* EchoLogSaveGameData::unsafe_arena_release_echo_log_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.EchoLogSaveGameData.echo_log_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return echo_log_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EchoLogSaveGameData::unsafe_arena_set_allocated_echo_log_path(
    std::string* echo_log_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (echo_log_path != nullptr) {
    
  } else {
    
  }
  echo_log_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      echo_log_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.EchoLogSaveGameData.echo_log_path)
}

// -------------------------------------------------------------------

// MapIDData

// uint32 zone_name_id = 1;
inline void MapIDData::clear_zone_name_id() {
  zone_name_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MapIDData::_internal_zone_name_id() const {
  return zone_name_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MapIDData::zone_name_id() const {
  // @@protoc_insertion_point(field_get:OakSave.MapIDData.zone_name_id)
  return _internal_zone_name_id();
}
inline void MapIDData::_internal_set_zone_name_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  zone_name_id_ = value;
}
inline void MapIDData::set_zone_name_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_zone_name_id(value);
  // @@protoc_insertion_point(field_set:OakSave.MapIDData.zone_name_id)
}

// uint32 map_name_id = 2;
inline void MapIDData::clear_map_name_id() {
  map_name_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MapIDData::_internal_map_name_id() const {
  return map_name_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MapIDData::map_name_id() const {
  // @@protoc_insertion_point(field_get:OakSave.MapIDData.map_name_id)
  return _internal_map_name_id();
}
inline void MapIDData::_internal_set_map_name_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  map_name_id_ = value;
}
inline void MapIDData::set_map_name_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_map_name_id(value);
  // @@protoc_insertion_point(field_set:OakSave.MapIDData.map_name_id)
}

// -------------------------------------------------------------------

// GameStateSaveData

// .OakSave.MapIDData last_traveled_map_id = 1;
inline bool GameStateSaveData::_internal_has_last_traveled_map_id() const {
  return this != internal_default_instance() && last_traveled_map_id_ != nullptr;
}
inline bool GameStateSaveData::has_last_traveled_map_id() const {
  return _internal_has_last_traveled_map_id();
}
inline void GameStateSaveData::clear_last_traveled_map_id() {
  if (GetArena() == nullptr && last_traveled_map_id_ != nullptr) {
    delete last_traveled_map_id_;
  }
  last_traveled_map_id_ = nullptr;
}
inline const ::OakSave::MapIDData& GameStateSaveData::_internal_last_traveled_map_id() const {
  const ::OakSave::MapIDData* p = last_traveled_map_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::OakSave::MapIDData*>(
      &::OakSave::_MapIDData_default_instance_);
}
inline const ::OakSave::MapIDData& GameStateSaveData::last_traveled_map_id() const {
  // @@protoc_insertion_point(field_get:OakSave.GameStateSaveData.last_traveled_map_id)
  return _internal_last_traveled_map_id();
}
inline void GameStateSaveData::unsafe_arena_set_allocated_last_traveled_map_id(
    ::OakSave::MapIDData* last_traveled_map_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_traveled_map_id_);
  }
  last_traveled_map_id_ = last_traveled_map_id;
  if (last_traveled_map_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.GameStateSaveData.last_traveled_map_id)
}
inline ::OakSave::MapIDData* GameStateSaveData::release_last_traveled_map_id() {
  auto temp = unsafe_arena_release_last_traveled_map_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::OakSave::MapIDData* GameStateSaveData::unsafe_arena_release_last_traveled_map_id() {
  // @@protoc_insertion_point(field_release:OakSave.GameStateSaveData.last_traveled_map_id)
  
  ::OakSave::MapIDData* temp = last_traveled_map_id_;
  last_traveled_map_id_ = nullptr;
  return temp;
}
inline ::OakSave::MapIDData* GameStateSaveData::_internal_mutable_last_traveled_map_id() {
  
  if (last_traveled_map_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::OakSave::MapIDData>(GetArena());
    last_traveled_map_id_ = p;
  }
  return last_traveled_map_id_;
}
inline ::OakSave::MapIDData* GameStateSaveData::mutable_last_traveled_map_id() {
  // @@protoc_insertion_point(field_mutable:OakSave.GameStateSaveData.last_traveled_map_id)
  return _internal_mutable_last_traveled_map_id();
}
inline void GameStateSaveData::set_allocated_last_traveled_map_id(::OakSave::MapIDData* last_traveled_map_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete last_traveled_map_id_;
  }
  if (last_traveled_map_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(last_traveled_map_id);
    if (message_arena != submessage_arena) {
      last_traveled_map_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_traveled_map_id, submessage_arena);
    }
    
  } else {
    
  }
  last_traveled_map_id_ = last_traveled_map_id;
  // @@protoc_insertion_point(field_set_allocated:OakSave.GameStateSaveData.last_traveled_map_id)
}

// int32 mayhem_level = 2;
inline void GameStateSaveData::clear_mayhem_level() {
  mayhem_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameStateSaveData::_internal_mayhem_level() const {
  return mayhem_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameStateSaveData::mayhem_level() const {
  // @@protoc_insertion_point(field_get:OakSave.GameStateSaveData.mayhem_level)
  return _internal_mayhem_level();
}
inline void GameStateSaveData::_internal_set_mayhem_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mayhem_level_ = value;
}
inline void GameStateSaveData::set_mayhem_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mayhem_level(value);
  // @@protoc_insertion_point(field_set:OakSave.GameStateSaveData.mayhem_level)
}

// int32 mayhem_random_seed = 3;
inline void GameStateSaveData::clear_mayhem_random_seed() {
  mayhem_random_seed_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameStateSaveData::_internal_mayhem_random_seed() const {
  return mayhem_random_seed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameStateSaveData::mayhem_random_seed() const {
  // @@protoc_insertion_point(field_get:OakSave.GameStateSaveData.mayhem_random_seed)
  return _internal_mayhem_random_seed();
}
inline void GameStateSaveData::_internal_set_mayhem_random_seed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mayhem_random_seed_ = value;
}
inline void GameStateSaveData::set_mayhem_random_seed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mayhem_random_seed(value);
  // @@protoc_insertion_point(field_set:OakSave.GameStateSaveData.mayhem_random_seed)
}

// -------------------------------------------------------------------

// ChallengeCategoryProgressSaveData

// bytes category_progress = 1;
inline void ChallengeCategoryProgressSaveData::clear_category_progress() {
  category_progress_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ChallengeCategoryProgressSaveData::category_progress() const {
  // @@protoc_insertion_point(field_get:OakSave.ChallengeCategoryProgressSaveData.category_progress)
  return _internal_category_progress();
}
inline void ChallengeCategoryProgressSaveData::set_category_progress(const std::string& value) {
  _internal_set_category_progress(value);
  // @@protoc_insertion_point(field_set:OakSave.ChallengeCategoryProgressSaveData.category_progress)
}
inline std::string* ChallengeCategoryProgressSaveData::mutable_category_progress() {
  // @@protoc_insertion_point(field_mutable:OakSave.ChallengeCategoryProgressSaveData.category_progress)
  return _internal_mutable_category_progress();
}
inline const std::string& ChallengeCategoryProgressSaveData::_internal_category_progress() const {
  return category_progress_.Get();
}
inline void ChallengeCategoryProgressSaveData::_internal_set_category_progress(const std::string& value) {
  
  category_progress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ChallengeCategoryProgressSaveData::set_category_progress(std::string&& value) {
  
  category_progress_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.ChallengeCategoryProgressSaveData.category_progress)
}
inline void ChallengeCategoryProgressSaveData::set_category_progress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  category_progress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.ChallengeCategoryProgressSaveData.category_progress)
}
inline void ChallengeCategoryProgressSaveData::set_category_progress(const void* value,
    size_t size) {
  
  category_progress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.ChallengeCategoryProgressSaveData.category_progress)
}
inline std::string* ChallengeCategoryProgressSaveData::_internal_mutable_category_progress() {
  
  return category_progress_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ChallengeCategoryProgressSaveData::release_category_progress() {
  // @@protoc_insertion_point(field_release:OakSave.ChallengeCategoryProgressSaveData.category_progress)
  return category_progress_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChallengeCategoryProgressSaveData::set_allocated_category_progress(std::string* category_progress) {
  if (category_progress != nullptr) {
    
  } else {
    
  }
  category_progress_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), category_progress,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.ChallengeCategoryProgressSaveData.category_progress)
}
inline std::string* ChallengeCategoryProgressSaveData::unsafe_arena_release_category_progress() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.ChallengeCategoryProgressSaveData.category_progress)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return category_progress_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ChallengeCategoryProgressSaveData::unsafe_arena_set_allocated_category_progress(
    std::string* category_progress) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (category_progress != nullptr) {
    
  } else {
    
  }
  category_progress_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      category_progress, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.ChallengeCategoryProgressSaveData.category_progress)
}

// -------------------------------------------------------------------

// OakPlayerCharacterAugmentSaveGameData

// string slot_asset_path = 1;
inline void OakPlayerCharacterAugmentSaveGameData::clear_slot_asset_path() {
  slot_asset_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OakPlayerCharacterAugmentSaveGameData::slot_asset_path() const {
  // @@protoc_insertion_point(field_get:OakSave.OakPlayerCharacterAugmentSaveGameData.slot_asset_path)
  return _internal_slot_asset_path();
}
inline void OakPlayerCharacterAugmentSaveGameData::set_slot_asset_path(const std::string& value) {
  _internal_set_slot_asset_path(value);
  // @@protoc_insertion_point(field_set:OakSave.OakPlayerCharacterAugmentSaveGameData.slot_asset_path)
}
inline std::string* OakPlayerCharacterAugmentSaveGameData::mutable_slot_asset_path() {
  // @@protoc_insertion_point(field_mutable:OakSave.OakPlayerCharacterAugmentSaveGameData.slot_asset_path)
  return _internal_mutable_slot_asset_path();
}
inline const std::string& OakPlayerCharacterAugmentSaveGameData::_internal_slot_asset_path() const {
  return slot_asset_path_.Get();
}
inline void OakPlayerCharacterAugmentSaveGameData::_internal_set_slot_asset_path(const std::string& value) {
  
  slot_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OakPlayerCharacterAugmentSaveGameData::set_slot_asset_path(std::string&& value) {
  
  slot_asset_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.OakPlayerCharacterAugmentSaveGameData.slot_asset_path)
}
inline void OakPlayerCharacterAugmentSaveGameData::set_slot_asset_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  slot_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.OakPlayerCharacterAugmentSaveGameData.slot_asset_path)
}
inline void OakPlayerCharacterAugmentSaveGameData::set_slot_asset_path(const char* value,
    size_t size) {
  
  slot_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.OakPlayerCharacterAugmentSaveGameData.slot_asset_path)
}
inline std::string* OakPlayerCharacterAugmentSaveGameData::_internal_mutable_slot_asset_path() {
  
  return slot_asset_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OakPlayerCharacterAugmentSaveGameData::release_slot_asset_path() {
  // @@protoc_insertion_point(field_release:OakSave.OakPlayerCharacterAugmentSaveGameData.slot_asset_path)
  return slot_asset_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OakPlayerCharacterAugmentSaveGameData::set_allocated_slot_asset_path(std::string* slot_asset_path) {
  if (slot_asset_path != nullptr) {
    
  } else {
    
  }
  slot_asset_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), slot_asset_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.OakPlayerCharacterAugmentSaveGameData.slot_asset_path)
}
inline std::string* OakPlayerCharacterAugmentSaveGameData::unsafe_arena_release_slot_asset_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.OakPlayerCharacterAugmentSaveGameData.slot_asset_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return slot_asset_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OakPlayerCharacterAugmentSaveGameData::unsafe_arena_set_allocated_slot_asset_path(
    std::string* slot_asset_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (slot_asset_path != nullptr) {
    
  } else {
    
  }
  slot_asset_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      slot_asset_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.OakPlayerCharacterAugmentSaveGameData.slot_asset_path)
}

// string augment_asset_path = 2;
inline void OakPlayerCharacterAugmentSaveGameData::clear_augment_asset_path() {
  augment_asset_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OakPlayerCharacterAugmentSaveGameData::augment_asset_path() const {
  // @@protoc_insertion_point(field_get:OakSave.OakPlayerCharacterAugmentSaveGameData.augment_asset_path)
  return _internal_augment_asset_path();
}
inline void OakPlayerCharacterAugmentSaveGameData::set_augment_asset_path(const std::string& value) {
  _internal_set_augment_asset_path(value);
  // @@protoc_insertion_point(field_set:OakSave.OakPlayerCharacterAugmentSaveGameData.augment_asset_path)
}
inline std::string* OakPlayerCharacterAugmentSaveGameData::mutable_augment_asset_path() {
  // @@protoc_insertion_point(field_mutable:OakSave.OakPlayerCharacterAugmentSaveGameData.augment_asset_path)
  return _internal_mutable_augment_asset_path();
}
inline const std::string& OakPlayerCharacterAugmentSaveGameData::_internal_augment_asset_path() const {
  return augment_asset_path_.Get();
}
inline void OakPlayerCharacterAugmentSaveGameData::_internal_set_augment_asset_path(const std::string& value) {
  
  augment_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OakPlayerCharacterAugmentSaveGameData::set_augment_asset_path(std::string&& value) {
  
  augment_asset_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.OakPlayerCharacterAugmentSaveGameData.augment_asset_path)
}
inline void OakPlayerCharacterAugmentSaveGameData::set_augment_asset_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  augment_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.OakPlayerCharacterAugmentSaveGameData.augment_asset_path)
}
inline void OakPlayerCharacterAugmentSaveGameData::set_augment_asset_path(const char* value,
    size_t size) {
  
  augment_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.OakPlayerCharacterAugmentSaveGameData.augment_asset_path)
}
inline std::string* OakPlayerCharacterAugmentSaveGameData::_internal_mutable_augment_asset_path() {
  
  return augment_asset_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OakPlayerCharacterAugmentSaveGameData::release_augment_asset_path() {
  // @@protoc_insertion_point(field_release:OakSave.OakPlayerCharacterAugmentSaveGameData.augment_asset_path)
  return augment_asset_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OakPlayerCharacterAugmentSaveGameData::set_allocated_augment_asset_path(std::string* augment_asset_path) {
  if (augment_asset_path != nullptr) {
    
  } else {
    
  }
  augment_asset_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), augment_asset_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.OakPlayerCharacterAugmentSaveGameData.augment_asset_path)
}
inline std::string* OakPlayerCharacterAugmentSaveGameData::unsafe_arena_release_augment_asset_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.OakPlayerCharacterAugmentSaveGameData.augment_asset_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return augment_asset_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OakPlayerCharacterAugmentSaveGameData::unsafe_arena_set_allocated_augment_asset_path(
    std::string* augment_asset_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (augment_asset_path != nullptr) {
    
  } else {
    
  }
  augment_asset_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      augment_asset_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.OakPlayerCharacterAugmentSaveGameData.augment_asset_path)
}

// -------------------------------------------------------------------

// OakPlayerCharacterSlotSaveGameData

// repeated .OakSave.OakPlayerCharacterAugmentSaveGameData augment_slot_list = 1;
inline int OakPlayerCharacterSlotSaveGameData::_internal_augment_slot_list_size() const {
  return augment_slot_list_.size();
}
inline int OakPlayerCharacterSlotSaveGameData::augment_slot_list_size() const {
  return _internal_augment_slot_list_size();
}
inline void OakPlayerCharacterSlotSaveGameData::clear_augment_slot_list() {
  augment_slot_list_.Clear();
}
inline ::OakSave::OakPlayerCharacterAugmentSaveGameData* OakPlayerCharacterSlotSaveGameData::mutable_augment_slot_list(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.OakPlayerCharacterSlotSaveGameData.augment_slot_list)
  return augment_slot_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::OakPlayerCharacterAugmentSaveGameData >*
OakPlayerCharacterSlotSaveGameData::mutable_augment_slot_list() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.OakPlayerCharacterSlotSaveGameData.augment_slot_list)
  return &augment_slot_list_;
}
inline const ::OakSave::OakPlayerCharacterAugmentSaveGameData& OakPlayerCharacterSlotSaveGameData::_internal_augment_slot_list(int index) const {
  return augment_slot_list_.Get(index);
}
inline const ::OakSave::OakPlayerCharacterAugmentSaveGameData& OakPlayerCharacterSlotSaveGameData::augment_slot_list(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.OakPlayerCharacterSlotSaveGameData.augment_slot_list)
  return _internal_augment_slot_list(index);
}
inline ::OakSave::OakPlayerCharacterAugmentSaveGameData* OakPlayerCharacterSlotSaveGameData::_internal_add_augment_slot_list() {
  return augment_slot_list_.Add();
}
inline ::OakSave::OakPlayerCharacterAugmentSaveGameData* OakPlayerCharacterSlotSaveGameData::add_augment_slot_list() {
  // @@protoc_insertion_point(field_add:OakSave.OakPlayerCharacterSlotSaveGameData.augment_slot_list)
  return _internal_add_augment_slot_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::OakPlayerCharacterAugmentSaveGameData >&
OakPlayerCharacterSlotSaveGameData::augment_slot_list() const {
  // @@protoc_insertion_point(field_list:OakSave.OakPlayerCharacterSlotSaveGameData.augment_slot_list)
  return augment_slot_list_;
}

// -------------------------------------------------------------------

// UITrackingSaveGameData

// bool has_seen_skill_menu_unlock = 1;
inline void UITrackingSaveGameData::clear_has_seen_skill_menu_unlock() {
  has_seen_skill_menu_unlock_ = false;
}
inline bool UITrackingSaveGameData::_internal_has_seen_skill_menu_unlock() const {
  return has_seen_skill_menu_unlock_;
}
inline bool UITrackingSaveGameData::has_seen_skill_menu_unlock() const {
  // @@protoc_insertion_point(field_get:OakSave.UITrackingSaveGameData.has_seen_skill_menu_unlock)
  return _internal_has_seen_skill_menu_unlock();
}
inline void UITrackingSaveGameData::_internal_set_has_seen_skill_menu_unlock(bool value) {
  
  has_seen_skill_menu_unlock_ = value;
}
inline void UITrackingSaveGameData::set_has_seen_skill_menu_unlock(bool value) {
  _internal_set_has_seen_skill_menu_unlock(value);
  // @@protoc_insertion_point(field_set:OakSave.UITrackingSaveGameData.has_seen_skill_menu_unlock)
}

// bool has_seen_guardian_rank_menu_unlock = 2;
inline void UITrackingSaveGameData::clear_has_seen_guardian_rank_menu_unlock() {
  has_seen_guardian_rank_menu_unlock_ = false;
}
inline bool UITrackingSaveGameData::_internal_has_seen_guardian_rank_menu_unlock() const {
  return has_seen_guardian_rank_menu_unlock_;
}
inline bool UITrackingSaveGameData::has_seen_guardian_rank_menu_unlock() const {
  // @@protoc_insertion_point(field_get:OakSave.UITrackingSaveGameData.has_seen_guardian_rank_menu_unlock)
  return _internal_has_seen_guardian_rank_menu_unlock();
}
inline void UITrackingSaveGameData::_internal_set_has_seen_guardian_rank_menu_unlock(bool value) {
  
  has_seen_guardian_rank_menu_unlock_ = value;
}
inline void UITrackingSaveGameData::set_has_seen_guardian_rank_menu_unlock(bool value) {
  _internal_set_has_seen_guardian_rank_menu_unlock(value);
  // @@protoc_insertion_point(field_set:OakSave.UITrackingSaveGameData.has_seen_guardian_rank_menu_unlock)
}

// bool has_seen_echo_boot_ammo_bar = 3;
inline void UITrackingSaveGameData::clear_has_seen_echo_boot_ammo_bar() {
  has_seen_echo_boot_ammo_bar_ = false;
}
inline bool UITrackingSaveGameData::_internal_has_seen_echo_boot_ammo_bar() const {
  return has_seen_echo_boot_ammo_bar_;
}
inline bool UITrackingSaveGameData::has_seen_echo_boot_ammo_bar() const {
  // @@protoc_insertion_point(field_get:OakSave.UITrackingSaveGameData.has_seen_echo_boot_ammo_bar)
  return _internal_has_seen_echo_boot_ammo_bar();
}
inline void UITrackingSaveGameData::_internal_set_has_seen_echo_boot_ammo_bar(bool value) {
  
  has_seen_echo_boot_ammo_bar_ = value;
}
inline void UITrackingSaveGameData::set_has_seen_echo_boot_ammo_bar(bool value) {
  _internal_set_has_seen_echo_boot_ammo_bar(value);
  // @@protoc_insertion_point(field_set:OakSave.UITrackingSaveGameData.has_seen_echo_boot_ammo_bar)
}

// bool has_seen_echo_boot_shield_bar = 4;
inline void UITrackingSaveGameData::clear_has_seen_echo_boot_shield_bar() {
  has_seen_echo_boot_shield_bar_ = false;
}
inline bool UITrackingSaveGameData::_internal_has_seen_echo_boot_shield_bar() const {
  return has_seen_echo_boot_shield_bar_;
}
inline bool UITrackingSaveGameData::has_seen_echo_boot_shield_bar() const {
  // @@protoc_insertion_point(field_get:OakSave.UITrackingSaveGameData.has_seen_echo_boot_shield_bar)
  return _internal_has_seen_echo_boot_shield_bar();
}
inline void UITrackingSaveGameData::_internal_set_has_seen_echo_boot_shield_bar(bool value) {
  
  has_seen_echo_boot_shield_bar_ = value;
}
inline void UITrackingSaveGameData::set_has_seen_echo_boot_shield_bar(bool value) {
  _internal_set_has_seen_echo_boot_shield_bar(value);
  // @@protoc_insertion_point(field_set:OakSave.UITrackingSaveGameData.has_seen_echo_boot_shield_bar)
}

// bool has_seen_echo_boot_grenades = 5;
inline void UITrackingSaveGameData::clear_has_seen_echo_boot_grenades() {
  has_seen_echo_boot_grenades_ = false;
}
inline bool UITrackingSaveGameData::_internal_has_seen_echo_boot_grenades() const {
  return has_seen_echo_boot_grenades_;
}
inline bool UITrackingSaveGameData::has_seen_echo_boot_grenades() const {
  // @@protoc_insertion_point(field_get:OakSave.UITrackingSaveGameData.has_seen_echo_boot_grenades)
  return _internal_has_seen_echo_boot_grenades();
}
inline void UITrackingSaveGameData::_internal_set_has_seen_echo_boot_grenades(bool value) {
  
  has_seen_echo_boot_grenades_ = value;
}
inline void UITrackingSaveGameData::set_has_seen_echo_boot_grenades(bool value) {
  _internal_set_has_seen_echo_boot_grenades(value);
  // @@protoc_insertion_point(field_set:OakSave.UITrackingSaveGameData.has_seen_echo_boot_grenades)
}

// int32 highest_thvm_breadcrumb_seen = 6;
inline void UITrackingSaveGameData::clear_highest_thvm_breadcrumb_seen() {
  highest_thvm_breadcrumb_seen_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UITrackingSaveGameData::_internal_highest_thvm_breadcrumb_seen() const {
  return highest_thvm_breadcrumb_seen_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UITrackingSaveGameData::highest_thvm_breadcrumb_seen() const {
  // @@protoc_insertion_point(field_get:OakSave.UITrackingSaveGameData.highest_thvm_breadcrumb_seen)
  return _internal_highest_thvm_breadcrumb_seen();
}
inline void UITrackingSaveGameData::_internal_set_highest_thvm_breadcrumb_seen(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  highest_thvm_breadcrumb_seen_ = value;
}
inline void UITrackingSaveGameData::set_highest_thvm_breadcrumb_seen(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_highest_thvm_breadcrumb_seen(value);
  // @@protoc_insertion_point(field_set:OakSave.UITrackingSaveGameData.highest_thvm_breadcrumb_seen)
}

// repeated string inventory_slot_unlocks_seen = 7;
inline int UITrackingSaveGameData::_internal_inventory_slot_unlocks_seen_size() const {
  return inventory_slot_unlocks_seen_.size();
}
inline int UITrackingSaveGameData::inventory_slot_unlocks_seen_size() const {
  return _internal_inventory_slot_unlocks_seen_size();
}
inline void UITrackingSaveGameData::clear_inventory_slot_unlocks_seen() {
  inventory_slot_unlocks_seen_.Clear();
}
inline std::string* UITrackingSaveGameData::add_inventory_slot_unlocks_seen() {
  // @@protoc_insertion_point(field_add_mutable:OakSave.UITrackingSaveGameData.inventory_slot_unlocks_seen)
  return _internal_add_inventory_slot_unlocks_seen();
}
inline const std::string& UITrackingSaveGameData::_internal_inventory_slot_unlocks_seen(int index) const {
  return inventory_slot_unlocks_seen_.Get(index);
}
inline const std::string& UITrackingSaveGameData::inventory_slot_unlocks_seen(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.UITrackingSaveGameData.inventory_slot_unlocks_seen)
  return _internal_inventory_slot_unlocks_seen(index);
}
inline std::string* UITrackingSaveGameData::mutable_inventory_slot_unlocks_seen(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.UITrackingSaveGameData.inventory_slot_unlocks_seen)
  return inventory_slot_unlocks_seen_.Mutable(index);
}
inline void UITrackingSaveGameData::set_inventory_slot_unlocks_seen(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:OakSave.UITrackingSaveGameData.inventory_slot_unlocks_seen)
  inventory_slot_unlocks_seen_.Mutable(index)->assign(value);
}
inline void UITrackingSaveGameData::set_inventory_slot_unlocks_seen(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:OakSave.UITrackingSaveGameData.inventory_slot_unlocks_seen)
  inventory_slot_unlocks_seen_.Mutable(index)->assign(std::move(value));
}
inline void UITrackingSaveGameData::set_inventory_slot_unlocks_seen(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  inventory_slot_unlocks_seen_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:OakSave.UITrackingSaveGameData.inventory_slot_unlocks_seen)
}
inline void UITrackingSaveGameData::set_inventory_slot_unlocks_seen(int index, const char* value, size_t size) {
  inventory_slot_unlocks_seen_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:OakSave.UITrackingSaveGameData.inventory_slot_unlocks_seen)
}
inline std::string* UITrackingSaveGameData::_internal_add_inventory_slot_unlocks_seen() {
  return inventory_slot_unlocks_seen_.Add();
}
inline void UITrackingSaveGameData::add_inventory_slot_unlocks_seen(const std::string& value) {
  inventory_slot_unlocks_seen_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:OakSave.UITrackingSaveGameData.inventory_slot_unlocks_seen)
}
inline void UITrackingSaveGameData::add_inventory_slot_unlocks_seen(std::string&& value) {
  inventory_slot_unlocks_seen_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:OakSave.UITrackingSaveGameData.inventory_slot_unlocks_seen)
}
inline void UITrackingSaveGameData::add_inventory_slot_unlocks_seen(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  inventory_slot_unlocks_seen_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:OakSave.UITrackingSaveGameData.inventory_slot_unlocks_seen)
}
inline void UITrackingSaveGameData::add_inventory_slot_unlocks_seen(const char* value, size_t size) {
  inventory_slot_unlocks_seen_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:OakSave.UITrackingSaveGameData.inventory_slot_unlocks_seen)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
UITrackingSaveGameData::inventory_slot_unlocks_seen() const {
  // @@protoc_insertion_point(field_list:OakSave.UITrackingSaveGameData.inventory_slot_unlocks_seen)
  return inventory_slot_unlocks_seen_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
UITrackingSaveGameData::mutable_inventory_slot_unlocks_seen() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.UITrackingSaveGameData.inventory_slot_unlocks_seen)
  return &inventory_slot_unlocks_seen_;
}

// int32 saved_spin_offset = 8;
inline void UITrackingSaveGameData::clear_saved_spin_offset() {
  saved_spin_offset_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UITrackingSaveGameData::_internal_saved_spin_offset() const {
  return saved_spin_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UITrackingSaveGameData::saved_spin_offset() const {
  // @@protoc_insertion_point(field_get:OakSave.UITrackingSaveGameData.saved_spin_offset)
  return _internal_saved_spin_offset();
}
inline void UITrackingSaveGameData::_internal_set_saved_spin_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  saved_spin_offset_ = value;
}
inline void UITrackingSaveGameData::set_saved_spin_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_saved_spin_offset(value);
  // @@protoc_insertion_point(field_set:OakSave.UITrackingSaveGameData.saved_spin_offset)
}

// -------------------------------------------------------------------

// PlanetCycleInfo

// string planet_name = 1;
inline void PlanetCycleInfo::clear_planet_name() {
  planet_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PlanetCycleInfo::planet_name() const {
  // @@protoc_insertion_point(field_get:OakSave.PlanetCycleInfo.planet_name)
  return _internal_planet_name();
}
inline void PlanetCycleInfo::set_planet_name(const std::string& value) {
  _internal_set_planet_name(value);
  // @@protoc_insertion_point(field_set:OakSave.PlanetCycleInfo.planet_name)
}
inline std::string* PlanetCycleInfo::mutable_planet_name() {
  // @@protoc_insertion_point(field_mutable:OakSave.PlanetCycleInfo.planet_name)
  return _internal_mutable_planet_name();
}
inline const std::string& PlanetCycleInfo::_internal_planet_name() const {
  return planet_name_.Get();
}
inline void PlanetCycleInfo::_internal_set_planet_name(const std::string& value) {
  
  planet_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PlanetCycleInfo::set_planet_name(std::string&& value) {
  
  planet_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.PlanetCycleInfo.planet_name)
}
inline void PlanetCycleInfo::set_planet_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  planet_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.PlanetCycleInfo.planet_name)
}
inline void PlanetCycleInfo::set_planet_name(const char* value,
    size_t size) {
  
  planet_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.PlanetCycleInfo.planet_name)
}
inline std::string* PlanetCycleInfo::_internal_mutable_planet_name() {
  
  return planet_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PlanetCycleInfo::release_planet_name() {
  // @@protoc_insertion_point(field_release:OakSave.PlanetCycleInfo.planet_name)
  return planet_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlanetCycleInfo::set_allocated_planet_name(std::string* planet_name) {
  if (planet_name != nullptr) {
    
  } else {
    
  }
  planet_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), planet_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.PlanetCycleInfo.planet_name)
}
inline std::string* PlanetCycleInfo::unsafe_arena_release_planet_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.PlanetCycleInfo.planet_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return planet_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PlanetCycleInfo::unsafe_arena_set_allocated_planet_name(
    std::string* planet_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (planet_name != nullptr) {
    
  } else {
    
  }
  planet_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      planet_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.PlanetCycleInfo.planet_name)
}

// float cycle_length = 2;
inline void PlanetCycleInfo::clear_cycle_length() {
  cycle_length_ = 0;
}
inline float PlanetCycleInfo::_internal_cycle_length() const {
  return cycle_length_;
}
inline float PlanetCycleInfo::cycle_length() const {
  // @@protoc_insertion_point(field_get:OakSave.PlanetCycleInfo.cycle_length)
  return _internal_cycle_length();
}
inline void PlanetCycleInfo::_internal_set_cycle_length(float value) {
  
  cycle_length_ = value;
}
inline void PlanetCycleInfo::set_cycle_length(float value) {
  _internal_set_cycle_length(value);
  // @@protoc_insertion_point(field_set:OakSave.PlanetCycleInfo.cycle_length)
}

// float last_cached_time = 3;
inline void PlanetCycleInfo::clear_last_cached_time() {
  last_cached_time_ = 0;
}
inline float PlanetCycleInfo::_internal_last_cached_time() const {
  return last_cached_time_;
}
inline float PlanetCycleInfo::last_cached_time() const {
  // @@protoc_insertion_point(field_get:OakSave.PlanetCycleInfo.last_cached_time)
  return _internal_last_cached_time();
}
inline void PlanetCycleInfo::_internal_set_last_cached_time(float value) {
  
  last_cached_time_ = value;
}
inline void PlanetCycleInfo::set_last_cached_time(float value) {
  _internal_set_last_cached_time(value);
  // @@protoc_insertion_point(field_set:OakSave.PlanetCycleInfo.last_cached_time)
}

// -------------------------------------------------------------------

// TimeOfDaySaveGameData

// repeated .OakSave.PlanetCycleInfo planet_cycle_info = 1;
inline int TimeOfDaySaveGameData::_internal_planet_cycle_info_size() const {
  return planet_cycle_info_.size();
}
inline int TimeOfDaySaveGameData::planet_cycle_info_size() const {
  return _internal_planet_cycle_info_size();
}
inline void TimeOfDaySaveGameData::clear_planet_cycle_info() {
  planet_cycle_info_.Clear();
}
inline ::OakSave::PlanetCycleInfo* TimeOfDaySaveGameData::mutable_planet_cycle_info(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.TimeOfDaySaveGameData.planet_cycle_info)
  return planet_cycle_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::PlanetCycleInfo >*
TimeOfDaySaveGameData::mutable_planet_cycle_info() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.TimeOfDaySaveGameData.planet_cycle_info)
  return &planet_cycle_info_;
}
inline const ::OakSave::PlanetCycleInfo& TimeOfDaySaveGameData::_internal_planet_cycle_info(int index) const {
  return planet_cycle_info_.Get(index);
}
inline const ::OakSave::PlanetCycleInfo& TimeOfDaySaveGameData::planet_cycle_info(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.TimeOfDaySaveGameData.planet_cycle_info)
  return _internal_planet_cycle_info(index);
}
inline ::OakSave::PlanetCycleInfo* TimeOfDaySaveGameData::_internal_add_planet_cycle_info() {
  return planet_cycle_info_.Add();
}
inline ::OakSave::PlanetCycleInfo* TimeOfDaySaveGameData::add_planet_cycle_info() {
  // @@protoc_insertion_point(field_add:OakSave.TimeOfDaySaveGameData.planet_cycle_info)
  return _internal_add_planet_cycle_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::PlanetCycleInfo >&
TimeOfDaySaveGameData::planet_cycle_info() const {
  // @@protoc_insertion_point(field_list:OakSave.TimeOfDaySaveGameData.planet_cycle_info)
  return planet_cycle_info_;
}

// string planet_cycle = 2;
inline void TimeOfDaySaveGameData::clear_planet_cycle() {
  planet_cycle_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TimeOfDaySaveGameData::planet_cycle() const {
  // @@protoc_insertion_point(field_get:OakSave.TimeOfDaySaveGameData.planet_cycle)
  return _internal_planet_cycle();
}
inline void TimeOfDaySaveGameData::set_planet_cycle(const std::string& value) {
  _internal_set_planet_cycle(value);
  // @@protoc_insertion_point(field_set:OakSave.TimeOfDaySaveGameData.planet_cycle)
}
inline std::string* TimeOfDaySaveGameData::mutable_planet_cycle() {
  // @@protoc_insertion_point(field_mutable:OakSave.TimeOfDaySaveGameData.planet_cycle)
  return _internal_mutable_planet_cycle();
}
inline const std::string& TimeOfDaySaveGameData::_internal_planet_cycle() const {
  return planet_cycle_.Get();
}
inline void TimeOfDaySaveGameData::_internal_set_planet_cycle(const std::string& value) {
  
  planet_cycle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TimeOfDaySaveGameData::set_planet_cycle(std::string&& value) {
  
  planet_cycle_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.TimeOfDaySaveGameData.planet_cycle)
}
inline void TimeOfDaySaveGameData::set_planet_cycle(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  planet_cycle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.TimeOfDaySaveGameData.planet_cycle)
}
inline void TimeOfDaySaveGameData::set_planet_cycle(const char* value,
    size_t size) {
  
  planet_cycle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.TimeOfDaySaveGameData.planet_cycle)
}
inline std::string* TimeOfDaySaveGameData::_internal_mutable_planet_cycle() {
  
  return planet_cycle_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TimeOfDaySaveGameData::release_planet_cycle() {
  // @@protoc_insertion_point(field_release:OakSave.TimeOfDaySaveGameData.planet_cycle)
  return planet_cycle_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TimeOfDaySaveGameData::set_allocated_planet_cycle(std::string* planet_cycle) {
  if (planet_cycle != nullptr) {
    
  } else {
    
  }
  planet_cycle_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), planet_cycle,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.TimeOfDaySaveGameData.planet_cycle)
}
inline std::string* TimeOfDaySaveGameData::unsafe_arena_release_planet_cycle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.TimeOfDaySaveGameData.planet_cycle)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return planet_cycle_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TimeOfDaySaveGameData::unsafe_arena_set_allocated_planet_cycle(
    std::string* planet_cycle) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (planet_cycle != nullptr) {
    
  } else {
    
  }
  planet_cycle_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      planet_cycle, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.TimeOfDaySaveGameData.planet_cycle)
}

// -------------------------------------------------------------------

// LevelPersistence_Actor_SaveGameData

// string actor_name = 1;
inline void LevelPersistence_Actor_SaveGameData::clear_actor_name() {
  actor_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LevelPersistence_Actor_SaveGameData::actor_name() const {
  // @@protoc_insertion_point(field_get:OakSave.LevelPersistence_Actor_SaveGameData.actor_name)
  return _internal_actor_name();
}
inline void LevelPersistence_Actor_SaveGameData::set_actor_name(const std::string& value) {
  _internal_set_actor_name(value);
  // @@protoc_insertion_point(field_set:OakSave.LevelPersistence_Actor_SaveGameData.actor_name)
}
inline std::string* LevelPersistence_Actor_SaveGameData::mutable_actor_name() {
  // @@protoc_insertion_point(field_mutable:OakSave.LevelPersistence_Actor_SaveGameData.actor_name)
  return _internal_mutable_actor_name();
}
inline const std::string& LevelPersistence_Actor_SaveGameData::_internal_actor_name() const {
  return actor_name_.Get();
}
inline void LevelPersistence_Actor_SaveGameData::_internal_set_actor_name(const std::string& value) {
  
  actor_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LevelPersistence_Actor_SaveGameData::set_actor_name(std::string&& value) {
  
  actor_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.LevelPersistence_Actor_SaveGameData.actor_name)
}
inline void LevelPersistence_Actor_SaveGameData::set_actor_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  actor_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.LevelPersistence_Actor_SaveGameData.actor_name)
}
inline void LevelPersistence_Actor_SaveGameData::set_actor_name(const char* value,
    size_t size) {
  
  actor_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.LevelPersistence_Actor_SaveGameData.actor_name)
}
inline std::string* LevelPersistence_Actor_SaveGameData::_internal_mutable_actor_name() {
  
  return actor_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LevelPersistence_Actor_SaveGameData::release_actor_name() {
  // @@protoc_insertion_point(field_release:OakSave.LevelPersistence_Actor_SaveGameData.actor_name)
  return actor_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LevelPersistence_Actor_SaveGameData::set_allocated_actor_name(std::string* actor_name) {
  if (actor_name != nullptr) {
    
  } else {
    
  }
  actor_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), actor_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.LevelPersistence_Actor_SaveGameData.actor_name)
}
inline std::string* LevelPersistence_Actor_SaveGameData::unsafe_arena_release_actor_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.LevelPersistence_Actor_SaveGameData.actor_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return actor_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LevelPersistence_Actor_SaveGameData::unsafe_arena_set_allocated_actor_name(
    std::string* actor_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (actor_name != nullptr) {
    
  } else {
    
  }
  actor_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      actor_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.LevelPersistence_Actor_SaveGameData.actor_name)
}

// int32 timer_remaining = 2;
inline void LevelPersistence_Actor_SaveGameData::clear_timer_remaining() {
  timer_remaining_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LevelPersistence_Actor_SaveGameData::_internal_timer_remaining() const {
  return timer_remaining_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LevelPersistence_Actor_SaveGameData::timer_remaining() const {
  // @@protoc_insertion_point(field_get:OakSave.LevelPersistence_Actor_SaveGameData.timer_remaining)
  return _internal_timer_remaining();
}
inline void LevelPersistence_Actor_SaveGameData::_internal_set_timer_remaining(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  timer_remaining_ = value;
}
inline void LevelPersistence_Actor_SaveGameData::set_timer_remaining(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_timer_remaining(value);
  // @@protoc_insertion_point(field_set:OakSave.LevelPersistence_Actor_SaveGameData.timer_remaining)
}

// -------------------------------------------------------------------

// LevelPersistence_Level_SaveGameData

// string level_name = 1;
inline void LevelPersistence_Level_SaveGameData::clear_level_name() {
  level_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LevelPersistence_Level_SaveGameData::level_name() const {
  // @@protoc_insertion_point(field_get:OakSave.LevelPersistence_Level_SaveGameData.level_name)
  return _internal_level_name();
}
inline void LevelPersistence_Level_SaveGameData::set_level_name(const std::string& value) {
  _internal_set_level_name(value);
  // @@protoc_insertion_point(field_set:OakSave.LevelPersistence_Level_SaveGameData.level_name)
}
inline std::string* LevelPersistence_Level_SaveGameData::mutable_level_name() {
  // @@protoc_insertion_point(field_mutable:OakSave.LevelPersistence_Level_SaveGameData.level_name)
  return _internal_mutable_level_name();
}
inline const std::string& LevelPersistence_Level_SaveGameData::_internal_level_name() const {
  return level_name_.Get();
}
inline void LevelPersistence_Level_SaveGameData::_internal_set_level_name(const std::string& value) {
  
  level_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LevelPersistence_Level_SaveGameData::set_level_name(std::string&& value) {
  
  level_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.LevelPersistence_Level_SaveGameData.level_name)
}
inline void LevelPersistence_Level_SaveGameData::set_level_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  level_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.LevelPersistence_Level_SaveGameData.level_name)
}
inline void LevelPersistence_Level_SaveGameData::set_level_name(const char* value,
    size_t size) {
  
  level_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.LevelPersistence_Level_SaveGameData.level_name)
}
inline std::string* LevelPersistence_Level_SaveGameData::_internal_mutable_level_name() {
  
  return level_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LevelPersistence_Level_SaveGameData::release_level_name() {
  // @@protoc_insertion_point(field_release:OakSave.LevelPersistence_Level_SaveGameData.level_name)
  return level_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LevelPersistence_Level_SaveGameData::set_allocated_level_name(std::string* level_name) {
  if (level_name != nullptr) {
    
  } else {
    
  }
  level_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), level_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.LevelPersistence_Level_SaveGameData.level_name)
}
inline std::string* LevelPersistence_Level_SaveGameData::unsafe_arena_release_level_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.LevelPersistence_Level_SaveGameData.level_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return level_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LevelPersistence_Level_SaveGameData::unsafe_arena_set_allocated_level_name(
    std::string* level_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (level_name != nullptr) {
    
  } else {
    
  }
  level_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      level_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.LevelPersistence_Level_SaveGameData.level_name)
}

// repeated .OakSave.LevelPersistence_Actor_SaveGameData saved_actors = 2;
inline int LevelPersistence_Level_SaveGameData::_internal_saved_actors_size() const {
  return saved_actors_.size();
}
inline int LevelPersistence_Level_SaveGameData::saved_actors_size() const {
  return _internal_saved_actors_size();
}
inline void LevelPersistence_Level_SaveGameData::clear_saved_actors() {
  saved_actors_.Clear();
}
inline ::OakSave::LevelPersistence_Actor_SaveGameData* LevelPersistence_Level_SaveGameData::mutable_saved_actors(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.LevelPersistence_Level_SaveGameData.saved_actors)
  return saved_actors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::LevelPersistence_Actor_SaveGameData >*
LevelPersistence_Level_SaveGameData::mutable_saved_actors() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.LevelPersistence_Level_SaveGameData.saved_actors)
  return &saved_actors_;
}
inline const ::OakSave::LevelPersistence_Actor_SaveGameData& LevelPersistence_Level_SaveGameData::_internal_saved_actors(int index) const {
  return saved_actors_.Get(index);
}
inline const ::OakSave::LevelPersistence_Actor_SaveGameData& LevelPersistence_Level_SaveGameData::saved_actors(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.LevelPersistence_Level_SaveGameData.saved_actors)
  return _internal_saved_actors(index);
}
inline ::OakSave::LevelPersistence_Actor_SaveGameData* LevelPersistence_Level_SaveGameData::_internal_add_saved_actors() {
  return saved_actors_.Add();
}
inline ::OakSave::LevelPersistence_Actor_SaveGameData* LevelPersistence_Level_SaveGameData::add_saved_actors() {
  // @@protoc_insertion_point(field_add:OakSave.LevelPersistence_Level_SaveGameData.saved_actors)
  return _internal_add_saved_actors();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::LevelPersistence_Actor_SaveGameData >&
LevelPersistence_Level_SaveGameData::saved_actors() const {
  // @@protoc_insertion_point(field_list:OakSave.LevelPersistence_Level_SaveGameData.saved_actors)
  return saved_actors_;
}

// -------------------------------------------------------------------

// GbxZoneMapFODSavedLevelData

// string level_name = 1;
inline void GbxZoneMapFODSavedLevelData::clear_level_name() {
  level_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GbxZoneMapFODSavedLevelData::level_name() const {
  // @@protoc_insertion_point(field_get:OakSave.GbxZoneMapFODSavedLevelData.level_name)
  return _internal_level_name();
}
inline void GbxZoneMapFODSavedLevelData::set_level_name(const std::string& value) {
  _internal_set_level_name(value);
  // @@protoc_insertion_point(field_set:OakSave.GbxZoneMapFODSavedLevelData.level_name)
}
inline std::string* GbxZoneMapFODSavedLevelData::mutable_level_name() {
  // @@protoc_insertion_point(field_mutable:OakSave.GbxZoneMapFODSavedLevelData.level_name)
  return _internal_mutable_level_name();
}
inline const std::string& GbxZoneMapFODSavedLevelData::_internal_level_name() const {
  return level_name_.Get();
}
inline void GbxZoneMapFODSavedLevelData::_internal_set_level_name(const std::string& value) {
  
  level_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GbxZoneMapFODSavedLevelData::set_level_name(std::string&& value) {
  
  level_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.GbxZoneMapFODSavedLevelData.level_name)
}
inline void GbxZoneMapFODSavedLevelData::set_level_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  level_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.GbxZoneMapFODSavedLevelData.level_name)
}
inline void GbxZoneMapFODSavedLevelData::set_level_name(const char* value,
    size_t size) {
  
  level_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.GbxZoneMapFODSavedLevelData.level_name)
}
inline std::string* GbxZoneMapFODSavedLevelData::_internal_mutable_level_name() {
  
  return level_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GbxZoneMapFODSavedLevelData::release_level_name() {
  // @@protoc_insertion_point(field_release:OakSave.GbxZoneMapFODSavedLevelData.level_name)
  return level_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GbxZoneMapFODSavedLevelData::set_allocated_level_name(std::string* level_name) {
  if (level_name != nullptr) {
    
  } else {
    
  }
  level_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), level_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.GbxZoneMapFODSavedLevelData.level_name)
}
inline std::string* GbxZoneMapFODSavedLevelData::unsafe_arena_release_level_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.GbxZoneMapFODSavedLevelData.level_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return level_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GbxZoneMapFODSavedLevelData::unsafe_arena_set_allocated_level_name(
    std::string* level_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (level_name != nullptr) {
    
  } else {
    
  }
  level_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      level_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.GbxZoneMapFODSavedLevelData.level_name)
}

// uint32 fod_texture_size = 2;
inline void GbxZoneMapFODSavedLevelData::clear_fod_texture_size() {
  fod_texture_size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GbxZoneMapFODSavedLevelData::_internal_fod_texture_size() const {
  return fod_texture_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GbxZoneMapFODSavedLevelData::fod_texture_size() const {
  // @@protoc_insertion_point(field_get:OakSave.GbxZoneMapFODSavedLevelData.fod_texture_size)
  return _internal_fod_texture_size();
}
inline void GbxZoneMapFODSavedLevelData::_internal_set_fod_texture_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  fod_texture_size_ = value;
}
inline void GbxZoneMapFODSavedLevelData::set_fod_texture_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fod_texture_size(value);
  // @@protoc_insertion_point(field_set:OakSave.GbxZoneMapFODSavedLevelData.fod_texture_size)
}

// uint32 num_chunks = 3;
inline void GbxZoneMapFODSavedLevelData::clear_num_chunks() {
  num_chunks_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GbxZoneMapFODSavedLevelData::_internal_num_chunks() const {
  return num_chunks_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GbxZoneMapFODSavedLevelData::num_chunks() const {
  // @@protoc_insertion_point(field_get:OakSave.GbxZoneMapFODSavedLevelData.num_chunks)
  return _internal_num_chunks();
}
inline void GbxZoneMapFODSavedLevelData::_internal_set_num_chunks(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_chunks_ = value;
}
inline void GbxZoneMapFODSavedLevelData::set_num_chunks(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_chunks(value);
  // @@protoc_insertion_point(field_set:OakSave.GbxZoneMapFODSavedLevelData.num_chunks)
}

// float discovery_percentage = 4;
inline void GbxZoneMapFODSavedLevelData::clear_discovery_percentage() {
  discovery_percentage_ = 0;
}
inline float GbxZoneMapFODSavedLevelData::_internal_discovery_percentage() const {
  return discovery_percentage_;
}
inline float GbxZoneMapFODSavedLevelData::discovery_percentage() const {
  // @@protoc_insertion_point(field_get:OakSave.GbxZoneMapFODSavedLevelData.discovery_percentage)
  return _internal_discovery_percentage();
}
inline void GbxZoneMapFODSavedLevelData::_internal_set_discovery_percentage(float value) {
  
  discovery_percentage_ = value;
}
inline void GbxZoneMapFODSavedLevelData::set_discovery_percentage(float value) {
  _internal_set_discovery_percentage(value);
  // @@protoc_insertion_point(field_set:OakSave.GbxZoneMapFODSavedLevelData.discovery_percentage)
}

// uint32 data_state = 5;
inline void GbxZoneMapFODSavedLevelData::clear_data_state() {
  data_state_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GbxZoneMapFODSavedLevelData::_internal_data_state() const {
  return data_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GbxZoneMapFODSavedLevelData::data_state() const {
  // @@protoc_insertion_point(field_get:OakSave.GbxZoneMapFODSavedLevelData.data_state)
  return _internal_data_state();
}
inline void GbxZoneMapFODSavedLevelData::_internal_set_data_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  data_state_ = value;
}
inline void GbxZoneMapFODSavedLevelData::set_data_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_data_state(value);
  // @@protoc_insertion_point(field_set:OakSave.GbxZoneMapFODSavedLevelData.data_state)
}

// uint32 data_revision = 6;
inline void GbxZoneMapFODSavedLevelData::clear_data_revision() {
  data_revision_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GbxZoneMapFODSavedLevelData::_internal_data_revision() const {
  return data_revision_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GbxZoneMapFODSavedLevelData::data_revision() const {
  // @@protoc_insertion_point(field_get:OakSave.GbxZoneMapFODSavedLevelData.data_revision)
  return _internal_data_revision();
}
inline void GbxZoneMapFODSavedLevelData::_internal_set_data_revision(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  data_revision_ = value;
}
inline void GbxZoneMapFODSavedLevelData::set_data_revision(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_data_revision(value);
  // @@protoc_insertion_point(field_set:OakSave.GbxZoneMapFODSavedLevelData.data_revision)
}

// bytes fod_data = 7;
inline void GbxZoneMapFODSavedLevelData::clear_fod_data() {
  fod_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GbxZoneMapFODSavedLevelData::fod_data() const {
  // @@protoc_insertion_point(field_get:OakSave.GbxZoneMapFODSavedLevelData.fod_data)
  return _internal_fod_data();
}
inline void GbxZoneMapFODSavedLevelData::set_fod_data(const std::string& value) {
  _internal_set_fod_data(value);
  // @@protoc_insertion_point(field_set:OakSave.GbxZoneMapFODSavedLevelData.fod_data)
}
inline std::string* GbxZoneMapFODSavedLevelData::mutable_fod_data() {
  // @@protoc_insertion_point(field_mutable:OakSave.GbxZoneMapFODSavedLevelData.fod_data)
  return _internal_mutable_fod_data();
}
inline const std::string& GbxZoneMapFODSavedLevelData::_internal_fod_data() const {
  return fod_data_.Get();
}
inline void GbxZoneMapFODSavedLevelData::_internal_set_fod_data(const std::string& value) {
  
  fod_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GbxZoneMapFODSavedLevelData::set_fod_data(std::string&& value) {
  
  fod_data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.GbxZoneMapFODSavedLevelData.fod_data)
}
inline void GbxZoneMapFODSavedLevelData::set_fod_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fod_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.GbxZoneMapFODSavedLevelData.fod_data)
}
inline void GbxZoneMapFODSavedLevelData::set_fod_data(const void* value,
    size_t size) {
  
  fod_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.GbxZoneMapFODSavedLevelData.fod_data)
}
inline std::string* GbxZoneMapFODSavedLevelData::_internal_mutable_fod_data() {
  
  return fod_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GbxZoneMapFODSavedLevelData::release_fod_data() {
  // @@protoc_insertion_point(field_release:OakSave.GbxZoneMapFODSavedLevelData.fod_data)
  return fod_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GbxZoneMapFODSavedLevelData::set_allocated_fod_data(std::string* fod_data) {
  if (fod_data != nullptr) {
    
  } else {
    
  }
  fod_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fod_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.GbxZoneMapFODSavedLevelData.fod_data)
}
inline std::string* GbxZoneMapFODSavedLevelData::unsafe_arena_release_fod_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.GbxZoneMapFODSavedLevelData.fod_data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return fod_data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GbxZoneMapFODSavedLevelData::unsafe_arena_set_allocated_fod_data(
    std::string* fod_data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (fod_data != nullptr) {
    
  } else {
    
  }
  fod_data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      fod_data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.GbxZoneMapFODSavedLevelData.fod_data)
}

// -------------------------------------------------------------------

// GbxZoneMapFODSaveGameData

// repeated .OakSave.GbxZoneMapFODSavedLevelData level_data = 1;
inline int GbxZoneMapFODSaveGameData::_internal_level_data_size() const {
  return level_data_.size();
}
inline int GbxZoneMapFODSaveGameData::level_data_size() const {
  return _internal_level_data_size();
}
inline void GbxZoneMapFODSaveGameData::clear_level_data() {
  level_data_.Clear();
}
inline ::OakSave::GbxZoneMapFODSavedLevelData* GbxZoneMapFODSaveGameData::mutable_level_data(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.GbxZoneMapFODSaveGameData.level_data)
  return level_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::GbxZoneMapFODSavedLevelData >*
GbxZoneMapFODSaveGameData::mutable_level_data() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.GbxZoneMapFODSaveGameData.level_data)
  return &level_data_;
}
inline const ::OakSave::GbxZoneMapFODSavedLevelData& GbxZoneMapFODSaveGameData::_internal_level_data(int index) const {
  return level_data_.Get(index);
}
inline const ::OakSave::GbxZoneMapFODSavedLevelData& GbxZoneMapFODSaveGameData::level_data(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.GbxZoneMapFODSaveGameData.level_data)
  return _internal_level_data(index);
}
inline ::OakSave::GbxZoneMapFODSavedLevelData* GbxZoneMapFODSaveGameData::_internal_add_level_data() {
  return level_data_.Add();
}
inline ::OakSave::GbxZoneMapFODSavedLevelData* GbxZoneMapFODSaveGameData::add_level_data() {
  // @@protoc_insertion_point(field_add:OakSave.GbxZoneMapFODSaveGameData.level_data)
  return _internal_add_level_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::GbxZoneMapFODSavedLevelData >&
GbxZoneMapFODSaveGameData::level_data() const {
  // @@protoc_insertion_point(field_list:OakSave.GbxZoneMapFODSaveGameData.level_data)
  return level_data_;
}

// -------------------------------------------------------------------

// Character_NicknameMappingsEntry

// string key = 1;
inline void Character_NicknameMappingsEntry::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Character_NicknameMappingsEntry::key() const {
  // @@protoc_insertion_point(field_get:OakSave.Character.NicknameMappingsEntry.key)
  return _internal_key();
}
inline void Character_NicknameMappingsEntry::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:OakSave.Character.NicknameMappingsEntry.key)
}
inline std::string* Character_NicknameMappingsEntry::mutable_key() {
  // @@protoc_insertion_point(field_mutable:OakSave.Character.NicknameMappingsEntry.key)
  return _internal_mutable_key();
}
inline const std::string& Character_NicknameMappingsEntry::_internal_key() const {
  return key_.Get();
}
inline void Character_NicknameMappingsEntry::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Character_NicknameMappingsEntry::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.Character.NicknameMappingsEntry.key)
}
inline void Character_NicknameMappingsEntry::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.Character.NicknameMappingsEntry.key)
}
inline void Character_NicknameMappingsEntry::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.Character.NicknameMappingsEntry.key)
}
inline std::string* Character_NicknameMappingsEntry::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Character_NicknameMappingsEntry::release_key() {
  // @@protoc_insertion_point(field_release:OakSave.Character.NicknameMappingsEntry.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Character_NicknameMappingsEntry::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.Character.NicknameMappingsEntry.key)
}
inline std::string* Character_NicknameMappingsEntry::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.Character.NicknameMappingsEntry.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Character_NicknameMappingsEntry::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.Character.NicknameMappingsEntry.key)
}

// string value = 2;
inline void Character_NicknameMappingsEntry::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Character_NicknameMappingsEntry::value() const {
  // @@protoc_insertion_point(field_get:OakSave.Character.NicknameMappingsEntry.value)
  return _internal_value();
}
inline void Character_NicknameMappingsEntry::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:OakSave.Character.NicknameMappingsEntry.value)
}
inline std::string* Character_NicknameMappingsEntry::mutable_value() {
  // @@protoc_insertion_point(field_mutable:OakSave.Character.NicknameMappingsEntry.value)
  return _internal_mutable_value();
}
inline const std::string& Character_NicknameMappingsEntry::_internal_value() const {
  return value_.Get();
}
inline void Character_NicknameMappingsEntry::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Character_NicknameMappingsEntry::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.Character.NicknameMappingsEntry.value)
}
inline void Character_NicknameMappingsEntry::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.Character.NicknameMappingsEntry.value)
}
inline void Character_NicknameMappingsEntry::set_value(const char* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.Character.NicknameMappingsEntry.value)
}
inline std::string* Character_NicknameMappingsEntry::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Character_NicknameMappingsEntry::release_value() {
  // @@protoc_insertion_point(field_release:OakSave.Character.NicknameMappingsEntry.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Character_NicknameMappingsEntry::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.Character.NicknameMappingsEntry.value)
}
inline std::string* Character_NicknameMappingsEntry::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.Character.NicknameMappingsEntry.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Character_NicknameMappingsEntry::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.Character.NicknameMappingsEntry.value)
}

// -------------------------------------------------------------------

// Character_ActiveLeagueInstanceForEventEntry

// uint32 key = 1;
inline void Character_ActiveLeagueInstanceForEventEntry::clear_key() {
  key_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Character_ActiveLeagueInstanceForEventEntry::_internal_key() const {
  return key_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Character_ActiveLeagueInstanceForEventEntry::key() const {
  // @@protoc_insertion_point(field_get:OakSave.Character.ActiveLeagueInstanceForEventEntry.key)
  return _internal_key();
}
inline void Character_ActiveLeagueInstanceForEventEntry::_internal_set_key(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  key_ = value;
}
inline void Character_ActiveLeagueInstanceForEventEntry::set_key(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:OakSave.Character.ActiveLeagueInstanceForEventEntry.key)
}

// uint32 value = 2;
inline void Character_ActiveLeagueInstanceForEventEntry::clear_value() {
  value_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Character_ActiveLeagueInstanceForEventEntry::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Character_ActiveLeagueInstanceForEventEntry::value() const {
  // @@protoc_insertion_point(field_get:OakSave.Character.ActiveLeagueInstanceForEventEntry.value)
  return _internal_value();
}
inline void Character_ActiveLeagueInstanceForEventEntry::_internal_set_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  value_ = value;
}
inline void Character_ActiveLeagueInstanceForEventEntry::set_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:OakSave.Character.ActiveLeagueInstanceForEventEntry.value)
}

// -------------------------------------------------------------------

// Character

// uint32 save_game_id = 1;
inline void Character::clear_save_game_id() {
  save_game_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Character::_internal_save_game_id() const {
  return save_game_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Character::save_game_id() const {
  // @@protoc_insertion_point(field_get:OakSave.Character.save_game_id)
  return _internal_save_game_id();
}
inline void Character::_internal_set_save_game_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  save_game_id_ = value;
}
inline void Character::set_save_game_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_save_game_id(value);
  // @@protoc_insertion_point(field_set:OakSave.Character.save_game_id)
}

// int64 last_save_timestamp = 2;
inline void Character::clear_last_save_timestamp() {
  last_save_timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Character::_internal_last_save_timestamp() const {
  return last_save_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Character::last_save_timestamp() const {
  // @@protoc_insertion_point(field_get:OakSave.Character.last_save_timestamp)
  return _internal_last_save_timestamp();
}
inline void Character::_internal_set_last_save_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  last_save_timestamp_ = value;
}
inline void Character::set_last_save_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_last_save_timestamp(value);
  // @@protoc_insertion_point(field_set:OakSave.Character.last_save_timestamp)
}

// uint32 time_played_seconds = 3;
inline void Character::clear_time_played_seconds() {
  time_played_seconds_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Character::_internal_time_played_seconds() const {
  return time_played_seconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Character::time_played_seconds() const {
  // @@protoc_insertion_point(field_get:OakSave.Character.time_played_seconds)
  return _internal_time_played_seconds();
}
inline void Character::_internal_set_time_played_seconds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  time_played_seconds_ = value;
}
inline void Character::set_time_played_seconds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_time_played_seconds(value);
  // @@protoc_insertion_point(field_set:OakSave.Character.time_played_seconds)
}

// .OakSave.PlayerClassSaveGameData player_class_data = 4;
inline bool Character::_internal_has_player_class_data() const {
  return this != internal_default_instance() && player_class_data_ != nullptr;
}
inline bool Character::has_player_class_data() const {
  return _internal_has_player_class_data();
}
inline void Character::clear_player_class_data() {
  if (GetArena() == nullptr && player_class_data_ != nullptr) {
    delete player_class_data_;
  }
  player_class_data_ = nullptr;
}
inline const ::OakSave::PlayerClassSaveGameData& Character::_internal_player_class_data() const {
  const ::OakSave::PlayerClassSaveGameData* p = player_class_data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::OakSave::PlayerClassSaveGameData*>(
      &::OakSave::_PlayerClassSaveGameData_default_instance_);
}
inline const ::OakSave::PlayerClassSaveGameData& Character::player_class_data() const {
  // @@protoc_insertion_point(field_get:OakSave.Character.player_class_data)
  return _internal_player_class_data();
}
inline void Character::unsafe_arena_set_allocated_player_class_data(
    ::OakSave::PlayerClassSaveGameData* player_class_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_class_data_);
  }
  player_class_data_ = player_class_data;
  if (player_class_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.Character.player_class_data)
}
inline ::OakSave::PlayerClassSaveGameData* Character::release_player_class_data() {
  auto temp = unsafe_arena_release_player_class_data();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::OakSave::PlayerClassSaveGameData* Character::unsafe_arena_release_player_class_data() {
  // @@protoc_insertion_point(field_release:OakSave.Character.player_class_data)
  
  ::OakSave::PlayerClassSaveGameData* temp = player_class_data_;
  player_class_data_ = nullptr;
  return temp;
}
inline ::OakSave::PlayerClassSaveGameData* Character::_internal_mutable_player_class_data() {
  
  if (player_class_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::OakSave::PlayerClassSaveGameData>(GetArena());
    player_class_data_ = p;
  }
  return player_class_data_;
}
inline ::OakSave::PlayerClassSaveGameData* Character::mutable_player_class_data() {
  // @@protoc_insertion_point(field_mutable:OakSave.Character.player_class_data)
  return _internal_mutable_player_class_data();
}
inline void Character::set_allocated_player_class_data(::OakSave::PlayerClassSaveGameData* player_class_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete player_class_data_;
  }
  if (player_class_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(player_class_data);
    if (message_arena != submessage_arena) {
      player_class_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_class_data, submessage_arena);
    }
    
  } else {
    
  }
  player_class_data_ = player_class_data;
  // @@protoc_insertion_point(field_set_allocated:OakSave.Character.player_class_data)
}

// repeated .OakSave.ResourcePoolSavegameData resource_pools = 5;
inline int Character::_internal_resource_pools_size() const {
  return resource_pools_.size();
}
inline int Character::resource_pools_size() const {
  return _internal_resource_pools_size();
}
inline void Character::clear_resource_pools() {
  resource_pools_.Clear();
}
inline ::OakSave::ResourcePoolSavegameData* Character::mutable_resource_pools(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.Character.resource_pools)
  return resource_pools_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::ResourcePoolSavegameData >*
Character::mutable_resource_pools() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.Character.resource_pools)
  return &resource_pools_;
}
inline const ::OakSave::ResourcePoolSavegameData& Character::_internal_resource_pools(int index) const {
  return resource_pools_.Get(index);
}
inline const ::OakSave::ResourcePoolSavegameData& Character::resource_pools(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.Character.resource_pools)
  return _internal_resource_pools(index);
}
inline ::OakSave::ResourcePoolSavegameData* Character::_internal_add_resource_pools() {
  return resource_pools_.Add();
}
inline ::OakSave::ResourcePoolSavegameData* Character::add_resource_pools() {
  // @@protoc_insertion_point(field_add:OakSave.Character.resource_pools)
  return _internal_add_resource_pools();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::ResourcePoolSavegameData >&
Character::resource_pools() const {
  // @@protoc_insertion_point(field_list:OakSave.Character.resource_pools)
  return resource_pools_;
}

// repeated .OakSave.RegionSaveGameData saved_regions = 6;
inline int Character::_internal_saved_regions_size() const {
  return saved_regions_.size();
}
inline int Character::saved_regions_size() const {
  return _internal_saved_regions_size();
}
inline void Character::clear_saved_regions() {
  saved_regions_.Clear();
}
inline ::OakSave::RegionSaveGameData* Character::mutable_saved_regions(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.Character.saved_regions)
  return saved_regions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::RegionSaveGameData >*
Character::mutable_saved_regions() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.Character.saved_regions)
  return &saved_regions_;
}
inline const ::OakSave::RegionSaveGameData& Character::_internal_saved_regions(int index) const {
  return saved_regions_.Get(index);
}
inline const ::OakSave::RegionSaveGameData& Character::saved_regions(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.Character.saved_regions)
  return _internal_saved_regions(index);
}
inline ::OakSave::RegionSaveGameData* Character::_internal_add_saved_regions() {
  return saved_regions_.Add();
}
inline ::OakSave::RegionSaveGameData* Character::add_saved_regions() {
  // @@protoc_insertion_point(field_add:OakSave.Character.saved_regions)
  return _internal_add_saved_regions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::RegionSaveGameData >&
Character::saved_regions() const {
  // @@protoc_insertion_point(field_list:OakSave.Character.saved_regions)
  return saved_regions_;
}

// int32 experience_points = 7;
inline void Character::clear_experience_points() {
  experience_points_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Character::_internal_experience_points() const {
  return experience_points_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Character::experience_points() const {
  // @@protoc_insertion_point(field_get:OakSave.Character.experience_points)
  return _internal_experience_points();
}
inline void Character::_internal_set_experience_points(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  experience_points_ = value;
}
inline void Character::set_experience_points(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_experience_points(value);
  // @@protoc_insertion_point(field_set:OakSave.Character.experience_points)
}

// repeated .OakSave.GameStatSaveGameData game_stats_data = 8;
inline int Character::_internal_game_stats_data_size() const {
  return game_stats_data_.size();
}
inline int Character::game_stats_data_size() const {
  return _internal_game_stats_data_size();
}
inline ::OakSave::GameStatSaveGameData* Character::mutable_game_stats_data(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.Character.game_stats_data)
  return game_stats_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::GameStatSaveGameData >*
Character::mutable_game_stats_data() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.Character.game_stats_data)
  return &game_stats_data_;
}
inline const ::OakSave::GameStatSaveGameData& Character::_internal_game_stats_data(int index) const {
  return game_stats_data_.Get(index);
}
inline const ::OakSave::GameStatSaveGameData& Character::game_stats_data(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.Character.game_stats_data)
  return _internal_game_stats_data(index);
}
inline ::OakSave::GameStatSaveGameData* Character::_internal_add_game_stats_data() {
  return game_stats_data_.Add();
}
inline ::OakSave::GameStatSaveGameData* Character::add_game_stats_data() {
  // @@protoc_insertion_point(field_add:OakSave.Character.game_stats_data)
  return _internal_add_game_stats_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::GameStatSaveGameData >&
Character::game_stats_data() const {
  // @@protoc_insertion_point(field_list:OakSave.Character.game_stats_data)
  return game_stats_data_;
}

// repeated .OakSave.InventoryCategorySaveData inventory_category_list = 9;
inline int Character::_internal_inventory_category_list_size() const {
  return inventory_category_list_.size();
}
inline int Character::inventory_category_list_size() const {
  return _internal_inventory_category_list_size();
}
inline ::OakSave::InventoryCategorySaveData* Character::mutable_inventory_category_list(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.Character.inventory_category_list)
  return inventory_category_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::InventoryCategorySaveData >*
Character::mutable_inventory_category_list() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.Character.inventory_category_list)
  return &inventory_category_list_;
}
inline const ::OakSave::InventoryCategorySaveData& Character::_internal_inventory_category_list(int index) const {
  return inventory_category_list_.Get(index);
}
inline const ::OakSave::InventoryCategorySaveData& Character::inventory_category_list(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.Character.inventory_category_list)
  return _internal_inventory_category_list(index);
}
inline ::OakSave::InventoryCategorySaveData* Character::_internal_add_inventory_category_list() {
  return inventory_category_list_.Add();
}
inline ::OakSave::InventoryCategorySaveData* Character::add_inventory_category_list() {
  // @@protoc_insertion_point(field_add:OakSave.Character.inventory_category_list)
  return _internal_add_inventory_category_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::InventoryCategorySaveData >&
Character::inventory_category_list() const {
  // @@protoc_insertion_point(field_list:OakSave.Character.inventory_category_list)
  return inventory_category_list_;
}

// repeated .OakSave.OakInventoryItemSaveGameData inventory_items = 10;
inline int Character::_internal_inventory_items_size() const {
  return inventory_items_.size();
}
inline int Character::inventory_items_size() const {
  return _internal_inventory_items_size();
}
inline void Character::clear_inventory_items() {
  inventory_items_.Clear();
}
inline ::OakSave::OakInventoryItemSaveGameData* Character::mutable_inventory_items(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.Character.inventory_items)
  return inventory_items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::OakInventoryItemSaveGameData >*
Character::mutable_inventory_items() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.Character.inventory_items)
  return &inventory_items_;
}
inline const ::OakSave::OakInventoryItemSaveGameData& Character::_internal_inventory_items(int index) const {
  return inventory_items_.Get(index);
}
inline const ::OakSave::OakInventoryItemSaveGameData& Character::inventory_items(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.Character.inventory_items)
  return _internal_inventory_items(index);
}
inline ::OakSave::OakInventoryItemSaveGameData* Character::_internal_add_inventory_items() {
  return inventory_items_.Add();
}
inline ::OakSave::OakInventoryItemSaveGameData* Character::add_inventory_items() {
  // @@protoc_insertion_point(field_add:OakSave.Character.inventory_items)
  return _internal_add_inventory_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::OakInventoryItemSaveGameData >&
Character::inventory_items() const {
  // @@protoc_insertion_point(field_list:OakSave.Character.inventory_items)
  return inventory_items_;
}

// repeated .OakSave.EquippedInventorySaveGameData equipped_inventory_list = 11;
inline int Character::_internal_equipped_inventory_list_size() const {
  return equipped_inventory_list_.size();
}
inline int Character::equipped_inventory_list_size() const {
  return _internal_equipped_inventory_list_size();
}
inline void Character::clear_equipped_inventory_list() {
  equipped_inventory_list_.Clear();
}
inline ::OakSave::EquippedInventorySaveGameData* Character::mutable_equipped_inventory_list(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.Character.equipped_inventory_list)
  return equipped_inventory_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::EquippedInventorySaveGameData >*
Character::mutable_equipped_inventory_list() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.Character.equipped_inventory_list)
  return &equipped_inventory_list_;
}
inline const ::OakSave::EquippedInventorySaveGameData& Character::_internal_equipped_inventory_list(int index) const {
  return equipped_inventory_list_.Get(index);
}
inline const ::OakSave::EquippedInventorySaveGameData& Character::equipped_inventory_list(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.Character.equipped_inventory_list)
  return _internal_equipped_inventory_list(index);
}
inline ::OakSave::EquippedInventorySaveGameData* Character::_internal_add_equipped_inventory_list() {
  return equipped_inventory_list_.Add();
}
inline ::OakSave::EquippedInventorySaveGameData* Character::add_equipped_inventory_list() {
  // @@protoc_insertion_point(field_add:OakSave.Character.equipped_inventory_list)
  return _internal_add_equipped_inventory_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::EquippedInventorySaveGameData >&
Character::equipped_inventory_list() const {
  // @@protoc_insertion_point(field_list:OakSave.Character.equipped_inventory_list)
  return equipped_inventory_list_;
}

// repeated int32 active_weapon_list = 12;
inline int Character::_internal_active_weapon_list_size() const {
  return active_weapon_list_.size();
}
inline int Character::active_weapon_list_size() const {
  return _internal_active_weapon_list_size();
}
inline void Character::clear_active_weapon_list() {
  active_weapon_list_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Character::_internal_active_weapon_list(int index) const {
  return active_weapon_list_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Character::active_weapon_list(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.Character.active_weapon_list)
  return _internal_active_weapon_list(index);
}
inline void Character::set_active_weapon_list(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  active_weapon_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:OakSave.Character.active_weapon_list)
}
inline void Character::_internal_add_active_weapon_list(::PROTOBUF_NAMESPACE_ID::int32 value) {
  active_weapon_list_.Add(value);
}
inline void Character::add_active_weapon_list(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_active_weapon_list(value);
  // @@protoc_insertion_point(field_add:OakSave.Character.active_weapon_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Character::_internal_active_weapon_list() const {
  return active_weapon_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Character::active_weapon_list() const {
  // @@protoc_insertion_point(field_list:OakSave.Character.active_weapon_list)
  return _internal_active_weapon_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Character::_internal_mutable_active_weapon_list() {
  return &active_weapon_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Character::mutable_active_weapon_list() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.Character.active_weapon_list)
  return _internal_mutable_active_weapon_list();
}

// .OakSave.OakPlayerAbilitySaveGameData ability_data = 13;
inline bool Character::_internal_has_ability_data() const {
  return this != internal_default_instance() && ability_data_ != nullptr;
}
inline bool Character::has_ability_data() const {
  return _internal_has_ability_data();
}
inline void Character::clear_ability_data() {
  if (GetArena() == nullptr && ability_data_ != nullptr) {
    delete ability_data_;
  }
  ability_data_ = nullptr;
}
inline const ::OakSave::OakPlayerAbilitySaveGameData& Character::_internal_ability_data() const {
  const ::OakSave::OakPlayerAbilitySaveGameData* p = ability_data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::OakSave::OakPlayerAbilitySaveGameData*>(
      &::OakSave::_OakPlayerAbilitySaveGameData_default_instance_);
}
inline const ::OakSave::OakPlayerAbilitySaveGameData& Character::ability_data() const {
  // @@protoc_insertion_point(field_get:OakSave.Character.ability_data)
  return _internal_ability_data();
}
inline void Character::unsafe_arena_set_allocated_ability_data(
    ::OakSave::OakPlayerAbilitySaveGameData* ability_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ability_data_);
  }
  ability_data_ = ability_data;
  if (ability_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.Character.ability_data)
}
inline ::OakSave::OakPlayerAbilitySaveGameData* Character::release_ability_data() {
  auto temp = unsafe_arena_release_ability_data();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::OakSave::OakPlayerAbilitySaveGameData* Character::unsafe_arena_release_ability_data() {
  // @@protoc_insertion_point(field_release:OakSave.Character.ability_data)
  
  ::OakSave::OakPlayerAbilitySaveGameData* temp = ability_data_;
  ability_data_ = nullptr;
  return temp;
}
inline ::OakSave::OakPlayerAbilitySaveGameData* Character::_internal_mutable_ability_data() {
  
  if (ability_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::OakSave::OakPlayerAbilitySaveGameData>(GetArena());
    ability_data_ = p;
  }
  return ability_data_;
}
inline ::OakSave::OakPlayerAbilitySaveGameData* Character::mutable_ability_data() {
  // @@protoc_insertion_point(field_mutable:OakSave.Character.ability_data)
  return _internal_mutable_ability_data();
}
inline void Character::set_allocated_ability_data(::OakSave::OakPlayerAbilitySaveGameData* ability_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ability_data_;
  }
  if (ability_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ability_data);
    if (message_arena != submessage_arena) {
      ability_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ability_data, submessage_arena);
    }
    
  } else {
    
  }
  ability_data_ = ability_data;
  // @@protoc_insertion_point(field_set_allocated:OakSave.Character.ability_data)
}

// int32 last_play_through_index = 14;
inline void Character::clear_last_play_through_index() {
  last_play_through_index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Character::_internal_last_play_through_index() const {
  return last_play_through_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Character::last_play_through_index() const {
  // @@protoc_insertion_point(field_get:OakSave.Character.last_play_through_index)
  return _internal_last_play_through_index();
}
inline void Character::_internal_set_last_play_through_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  last_play_through_index_ = value;
}
inline void Character::set_last_play_through_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_last_play_through_index(value);
  // @@protoc_insertion_point(field_set:OakSave.Character.last_play_through_index)
}

// int32 playthroughs_completed = 15;
inline void Character::clear_playthroughs_completed() {
  playthroughs_completed_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Character::_internal_playthroughs_completed() const {
  return playthroughs_completed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Character::playthroughs_completed() const {
  // @@protoc_insertion_point(field_get:OakSave.Character.playthroughs_completed)
  return _internal_playthroughs_completed();
}
inline void Character::_internal_set_playthroughs_completed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  playthroughs_completed_ = value;
}
inline void Character::set_playthroughs_completed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_playthroughs_completed(value);
  // @@protoc_insertion_point(field_set:OakSave.Character.playthroughs_completed)
}

// bool show_new_playthrough_notification = 16;
inline void Character::clear_show_new_playthrough_notification() {
  show_new_playthrough_notification_ = false;
}
inline bool Character::_internal_show_new_playthrough_notification() const {
  return show_new_playthrough_notification_;
}
inline bool Character::show_new_playthrough_notification() const {
  // @@protoc_insertion_point(field_get:OakSave.Character.show_new_playthrough_notification)
  return _internal_show_new_playthrough_notification();
}
inline void Character::_internal_set_show_new_playthrough_notification(bool value) {
  
  show_new_playthrough_notification_ = value;
}
inline void Character::set_show_new_playthrough_notification(bool value) {
  _internal_set_show_new_playthrough_notification(value);
  // @@protoc_insertion_point(field_set:OakSave.Character.show_new_playthrough_notification)
}

// repeated .OakSave.MissionPlaythroughSaveGameData mission_playthroughs_data = 17;
inline int Character::_internal_mission_playthroughs_data_size() const {
  return mission_playthroughs_data_.size();
}
inline int Character::mission_playthroughs_data_size() const {
  return _internal_mission_playthroughs_data_size();
}
inline void Character::clear_mission_playthroughs_data() {
  mission_playthroughs_data_.Clear();
}
inline ::OakSave::MissionPlaythroughSaveGameData* Character::mutable_mission_playthroughs_data(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.Character.mission_playthroughs_data)
  return mission_playthroughs_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::MissionPlaythroughSaveGameData >*
Character::mutable_mission_playthroughs_data() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.Character.mission_playthroughs_data)
  return &mission_playthroughs_data_;
}
inline const ::OakSave::MissionPlaythroughSaveGameData& Character::_internal_mission_playthroughs_data(int index) const {
  return mission_playthroughs_data_.Get(index);
}
inline const ::OakSave::MissionPlaythroughSaveGameData& Character::mission_playthroughs_data(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.Character.mission_playthroughs_data)
  return _internal_mission_playthroughs_data(index);
}
inline ::OakSave::MissionPlaythroughSaveGameData* Character::_internal_add_mission_playthroughs_data() {
  return mission_playthroughs_data_.Add();
}
inline ::OakSave::MissionPlaythroughSaveGameData* Character::add_mission_playthroughs_data() {
  // @@protoc_insertion_point(field_add:OakSave.Character.mission_playthroughs_data)
  return _internal_add_mission_playthroughs_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::MissionPlaythroughSaveGameData >&
Character::mission_playthroughs_data() const {
  // @@protoc_insertion_point(field_list:OakSave.Character.mission_playthroughs_data)
  return mission_playthroughs_data_;
}

// repeated string active_travel_stations = 21;
inline int Character::_internal_active_travel_stations_size() const {
  return active_travel_stations_.size();
}
inline int Character::active_travel_stations_size() const {
  return _internal_active_travel_stations_size();
}
inline void Character::clear_active_travel_stations() {
  active_travel_stations_.Clear();
}
inline std::string* Character::add_active_travel_stations() {
  // @@protoc_insertion_point(field_add_mutable:OakSave.Character.active_travel_stations)
  return _internal_add_active_travel_stations();
}
inline const std::string& Character::_internal_active_travel_stations(int index) const {
  return active_travel_stations_.Get(index);
}
inline const std::string& Character::active_travel_stations(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.Character.active_travel_stations)
  return _internal_active_travel_stations(index);
}
inline std::string* Character::mutable_active_travel_stations(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.Character.active_travel_stations)
  return active_travel_stations_.Mutable(index);
}
inline void Character::set_active_travel_stations(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:OakSave.Character.active_travel_stations)
  active_travel_stations_.Mutable(index)->assign(value);
}
inline void Character::set_active_travel_stations(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:OakSave.Character.active_travel_stations)
  active_travel_stations_.Mutable(index)->assign(std::move(value));
}
inline void Character::set_active_travel_stations(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  active_travel_stations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:OakSave.Character.active_travel_stations)
}
inline void Character::set_active_travel_stations(int index, const char* value, size_t size) {
  active_travel_stations_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:OakSave.Character.active_travel_stations)
}
inline std::string* Character::_internal_add_active_travel_stations() {
  return active_travel_stations_.Add();
}
inline void Character::add_active_travel_stations(const std::string& value) {
  active_travel_stations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:OakSave.Character.active_travel_stations)
}
inline void Character::add_active_travel_stations(std::string&& value) {
  active_travel_stations_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:OakSave.Character.active_travel_stations)
}
inline void Character::add_active_travel_stations(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  active_travel_stations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:OakSave.Character.active_travel_stations)
}
inline void Character::add_active_travel_stations(const char* value, size_t size) {
  active_travel_stations_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:OakSave.Character.active_travel_stations)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Character::active_travel_stations() const {
  // @@protoc_insertion_point(field_list:OakSave.Character.active_travel_stations)
  return active_travel_stations_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Character::mutable_active_travel_stations() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.Character.active_travel_stations)
  return &active_travel_stations_;
}

// .OakSave.DiscoverySaveData discovery_data = 22;
inline bool Character::_internal_has_discovery_data() const {
  return this != internal_default_instance() && discovery_data_ != nullptr;
}
inline bool Character::has_discovery_data() const {
  return _internal_has_discovery_data();
}
inline void Character::clear_discovery_data() {
  if (GetArena() == nullptr && discovery_data_ != nullptr) {
    delete discovery_data_;
  }
  discovery_data_ = nullptr;
}
inline const ::OakSave::DiscoverySaveData& Character::_internal_discovery_data() const {
  const ::OakSave::DiscoverySaveData* p = discovery_data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::OakSave::DiscoverySaveData*>(
      &::OakSave::_DiscoverySaveData_default_instance_);
}
inline const ::OakSave::DiscoverySaveData& Character::discovery_data() const {
  // @@protoc_insertion_point(field_get:OakSave.Character.discovery_data)
  return _internal_discovery_data();
}
inline void Character::unsafe_arena_set_allocated_discovery_data(
    ::OakSave::DiscoverySaveData* discovery_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(discovery_data_);
  }
  discovery_data_ = discovery_data;
  if (discovery_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.Character.discovery_data)
}
inline ::OakSave::DiscoverySaveData* Character::release_discovery_data() {
  auto temp = unsafe_arena_release_discovery_data();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::OakSave::DiscoverySaveData* Character::unsafe_arena_release_discovery_data() {
  // @@protoc_insertion_point(field_release:OakSave.Character.discovery_data)
  
  ::OakSave::DiscoverySaveData* temp = discovery_data_;
  discovery_data_ = nullptr;
  return temp;
}
inline ::OakSave::DiscoverySaveData* Character::_internal_mutable_discovery_data() {
  
  if (discovery_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::OakSave::DiscoverySaveData>(GetArena());
    discovery_data_ = p;
  }
  return discovery_data_;
}
inline ::OakSave::DiscoverySaveData* Character::mutable_discovery_data() {
  // @@protoc_insertion_point(field_mutable:OakSave.Character.discovery_data)
  return _internal_mutable_discovery_data();
}
inline void Character::set_allocated_discovery_data(::OakSave::DiscoverySaveData* discovery_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete discovery_data_;
  }
  if (discovery_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(discovery_data);
    if (message_arena != submessage_arena) {
      discovery_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, discovery_data, submessage_arena);
    }
    
  } else {
    
  }
  discovery_data_ = discovery_data;
  // @@protoc_insertion_point(field_set_allocated:OakSave.Character.discovery_data)
}

// string last_active_travel_station = 23;
inline void Character::clear_last_active_travel_station() {
  last_active_travel_station_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Character::last_active_travel_station() const {
  // @@protoc_insertion_point(field_get:OakSave.Character.last_active_travel_station)
  return _internal_last_active_travel_station();
}
inline void Character::set_last_active_travel_station(const std::string& value) {
  _internal_set_last_active_travel_station(value);
  // @@protoc_insertion_point(field_set:OakSave.Character.last_active_travel_station)
}
inline std::string* Character::mutable_last_active_travel_station() {
  // @@protoc_insertion_point(field_mutable:OakSave.Character.last_active_travel_station)
  return _internal_mutable_last_active_travel_station();
}
inline const std::string& Character::_internal_last_active_travel_station() const {
  return last_active_travel_station_.Get();
}
inline void Character::_internal_set_last_active_travel_station(const std::string& value) {
  
  last_active_travel_station_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Character::set_last_active_travel_station(std::string&& value) {
  
  last_active_travel_station_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.Character.last_active_travel_station)
}
inline void Character::set_last_active_travel_station(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  last_active_travel_station_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.Character.last_active_travel_station)
}
inline void Character::set_last_active_travel_station(const char* value,
    size_t size) {
  
  last_active_travel_station_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.Character.last_active_travel_station)
}
inline std::string* Character::_internal_mutable_last_active_travel_station() {
  
  return last_active_travel_station_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Character::release_last_active_travel_station() {
  // @@protoc_insertion_point(field_release:OakSave.Character.last_active_travel_station)
  return last_active_travel_station_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Character::set_allocated_last_active_travel_station(std::string* last_active_travel_station) {
  if (last_active_travel_station != nullptr) {
    
  } else {
    
  }
  last_active_travel_station_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_active_travel_station,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.Character.last_active_travel_station)
}
inline std::string* Character::unsafe_arena_release_last_active_travel_station() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.Character.last_active_travel_station)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return last_active_travel_station_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Character::unsafe_arena_set_allocated_last_active_travel_station(
    std::string* last_active_travel_station) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (last_active_travel_station != nullptr) {
    
  } else {
    
  }
  last_active_travel_station_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      last_active_travel_station, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.Character.last_active_travel_station)
}

// repeated .OakSave.VehicleUnlockedSaveGameData vehicles_unlocked_data = 24;
inline int Character::_internal_vehicles_unlocked_data_size() const {
  return vehicles_unlocked_data_.size();
}
inline int Character::vehicles_unlocked_data_size() const {
  return _internal_vehicles_unlocked_data_size();
}
inline void Character::clear_vehicles_unlocked_data() {
  vehicles_unlocked_data_.Clear();
}
inline ::OakSave::VehicleUnlockedSaveGameData* Character::mutable_vehicles_unlocked_data(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.Character.vehicles_unlocked_data)
  return vehicles_unlocked_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::VehicleUnlockedSaveGameData >*
Character::mutable_vehicles_unlocked_data() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.Character.vehicles_unlocked_data)
  return &vehicles_unlocked_data_;
}
inline const ::OakSave::VehicleUnlockedSaveGameData& Character::_internal_vehicles_unlocked_data(int index) const {
  return vehicles_unlocked_data_.Get(index);
}
inline const ::OakSave::VehicleUnlockedSaveGameData& Character::vehicles_unlocked_data(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.Character.vehicles_unlocked_data)
  return _internal_vehicles_unlocked_data(index);
}
inline ::OakSave::VehicleUnlockedSaveGameData* Character::_internal_add_vehicles_unlocked_data() {
  return vehicles_unlocked_data_.Add();
}
inline ::OakSave::VehicleUnlockedSaveGameData* Character::add_vehicles_unlocked_data() {
  // @@protoc_insertion_point(field_add:OakSave.Character.vehicles_unlocked_data)
  return _internal_add_vehicles_unlocked_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::VehicleUnlockedSaveGameData >&
Character::vehicles_unlocked_data() const {
  // @@protoc_insertion_point(field_list:OakSave.Character.vehicles_unlocked_data)
  return vehicles_unlocked_data_;
}

// repeated string vehicle_parts_unlocked = 25;
inline int Character::_internal_vehicle_parts_unlocked_size() const {
  return vehicle_parts_unlocked_.size();
}
inline int Character::vehicle_parts_unlocked_size() const {
  return _internal_vehicle_parts_unlocked_size();
}
inline void Character::clear_vehicle_parts_unlocked() {
  vehicle_parts_unlocked_.Clear();
}
inline std::string* Character::add_vehicle_parts_unlocked() {
  // @@protoc_insertion_point(field_add_mutable:OakSave.Character.vehicle_parts_unlocked)
  return _internal_add_vehicle_parts_unlocked();
}
inline const std::string& Character::_internal_vehicle_parts_unlocked(int index) const {
  return vehicle_parts_unlocked_.Get(index);
}
inline const std::string& Character::vehicle_parts_unlocked(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.Character.vehicle_parts_unlocked)
  return _internal_vehicle_parts_unlocked(index);
}
inline std::string* Character::mutable_vehicle_parts_unlocked(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.Character.vehicle_parts_unlocked)
  return vehicle_parts_unlocked_.Mutable(index);
}
inline void Character::set_vehicle_parts_unlocked(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:OakSave.Character.vehicle_parts_unlocked)
  vehicle_parts_unlocked_.Mutable(index)->assign(value);
}
inline void Character::set_vehicle_parts_unlocked(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:OakSave.Character.vehicle_parts_unlocked)
  vehicle_parts_unlocked_.Mutable(index)->assign(std::move(value));
}
inline void Character::set_vehicle_parts_unlocked(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  vehicle_parts_unlocked_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:OakSave.Character.vehicle_parts_unlocked)
}
inline void Character::set_vehicle_parts_unlocked(int index, const char* value, size_t size) {
  vehicle_parts_unlocked_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:OakSave.Character.vehicle_parts_unlocked)
}
inline std::string* Character::_internal_add_vehicle_parts_unlocked() {
  return vehicle_parts_unlocked_.Add();
}
inline void Character::add_vehicle_parts_unlocked(const std::string& value) {
  vehicle_parts_unlocked_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:OakSave.Character.vehicle_parts_unlocked)
}
inline void Character::add_vehicle_parts_unlocked(std::string&& value) {
  vehicle_parts_unlocked_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:OakSave.Character.vehicle_parts_unlocked)
}
inline void Character::add_vehicle_parts_unlocked(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  vehicle_parts_unlocked_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:OakSave.Character.vehicle_parts_unlocked)
}
inline void Character::add_vehicle_parts_unlocked(const char* value, size_t size) {
  vehicle_parts_unlocked_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:OakSave.Character.vehicle_parts_unlocked)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Character::vehicle_parts_unlocked() const {
  // @@protoc_insertion_point(field_list:OakSave.Character.vehicle_parts_unlocked)
  return vehicle_parts_unlocked_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Character::mutable_vehicle_parts_unlocked() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.Character.vehicle_parts_unlocked)
  return &vehicle_parts_unlocked_;
}

// repeated .OakSave.OakCARMenuVehicleConfigSaveData vehicle_loadouts = 26;
inline int Character::_internal_vehicle_loadouts_size() const {
  return vehicle_loadouts_.size();
}
inline int Character::vehicle_loadouts_size() const {
  return _internal_vehicle_loadouts_size();
}
inline void Character::clear_vehicle_loadouts() {
  vehicle_loadouts_.Clear();
}
inline ::OakSave::OakCARMenuVehicleConfigSaveData* Character::mutable_vehicle_loadouts(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.Character.vehicle_loadouts)
  return vehicle_loadouts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::OakCARMenuVehicleConfigSaveData >*
Character::mutable_vehicle_loadouts() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.Character.vehicle_loadouts)
  return &vehicle_loadouts_;
}
inline const ::OakSave::OakCARMenuVehicleConfigSaveData& Character::_internal_vehicle_loadouts(int index) const {
  return vehicle_loadouts_.Get(index);
}
inline const ::OakSave::OakCARMenuVehicleConfigSaveData& Character::vehicle_loadouts(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.Character.vehicle_loadouts)
  return _internal_vehicle_loadouts(index);
}
inline ::OakSave::OakCARMenuVehicleConfigSaveData* Character::_internal_add_vehicle_loadouts() {
  return vehicle_loadouts_.Add();
}
inline ::OakSave::OakCARMenuVehicleConfigSaveData* Character::add_vehicle_loadouts() {
  // @@protoc_insertion_point(field_add:OakSave.Character.vehicle_loadouts)
  return _internal_add_vehicle_loadouts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::OakCARMenuVehicleConfigSaveData >&
Character::vehicle_loadouts() const {
  // @@protoc_insertion_point(field_list:OakSave.Character.vehicle_loadouts)
  return vehicle_loadouts_;
}

// int32 vehicle_last_loadout_index = 27;
inline void Character::clear_vehicle_last_loadout_index() {
  vehicle_last_loadout_index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Character::_internal_vehicle_last_loadout_index() const {
  return vehicle_last_loadout_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Character::vehicle_last_loadout_index() const {
  // @@protoc_insertion_point(field_get:OakSave.Character.vehicle_last_loadout_index)
  return _internal_vehicle_last_loadout_index();
}
inline void Character::_internal_set_vehicle_last_loadout_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vehicle_last_loadout_index_ = value;
}
inline void Character::set_vehicle_last_loadout_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vehicle_last_loadout_index(value);
  // @@protoc_insertion_point(field_set:OakSave.Character.vehicle_last_loadout_index)
}

// repeated .OakSave.ChallengeSaveGameData challenge_data = 28;
inline int Character::_internal_challenge_data_size() const {
  return challenge_data_.size();
}
inline int Character::challenge_data_size() const {
  return _internal_challenge_data_size();
}
inline ::OakSave::ChallengeSaveGameData* Character::mutable_challenge_data(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.Character.challenge_data)
  return challenge_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::ChallengeSaveGameData >*
Character::mutable_challenge_data() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.Character.challenge_data)
  return &challenge_data_;
}
inline const ::OakSave::ChallengeSaveGameData& Character::_internal_challenge_data(int index) const {
  return challenge_data_.Get(index);
}
inline const ::OakSave::ChallengeSaveGameData& Character::challenge_data(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.Character.challenge_data)
  return _internal_challenge_data(index);
}
inline ::OakSave::ChallengeSaveGameData* Character::_internal_add_challenge_data() {
  return challenge_data_.Add();
}
inline ::OakSave::ChallengeSaveGameData* Character::add_challenge_data() {
  // @@protoc_insertion_point(field_add:OakSave.Character.challenge_data)
  return _internal_add_challenge_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::ChallengeSaveGameData >&
Character::challenge_data() const {
  // @@protoc_insertion_point(field_list:OakSave.Character.challenge_data)
  return challenge_data_;
}

// repeated .OakSave.OakSDUSaveGameData sdu_list = 29;
inline int Character::_internal_sdu_list_size() const {
  return sdu_list_.size();
}
inline int Character::sdu_list_size() const {
  return _internal_sdu_list_size();
}
inline ::OakSave::OakSDUSaveGameData* Character::mutable_sdu_list(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.Character.sdu_list)
  return sdu_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::OakSDUSaveGameData >*
Character::mutable_sdu_list() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.Character.sdu_list)
  return &sdu_list_;
}
inline const ::OakSave::OakSDUSaveGameData& Character::_internal_sdu_list(int index) const {
  return sdu_list_.Get(index);
}
inline const ::OakSave::OakSDUSaveGameData& Character::sdu_list(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.Character.sdu_list)
  return _internal_sdu_list(index);
}
inline ::OakSave::OakSDUSaveGameData* Character::_internal_add_sdu_list() {
  return sdu_list_.Add();
}
inline ::OakSave::OakSDUSaveGameData* Character::add_sdu_list() {
  // @@protoc_insertion_point(field_add:OakSave.Character.sdu_list)
  return _internal_add_sdu_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::OakSDUSaveGameData >&
Character::sdu_list() const {
  // @@protoc_insertion_point(field_list:OakSave.Character.sdu_list)
  return sdu_list_;
}

// repeated string selected_customizations = 30;
inline int Character::_internal_selected_customizations_size() const {
  return selected_customizations_.size();
}
inline int Character::selected_customizations_size() const {
  return _internal_selected_customizations_size();
}
inline void Character::clear_selected_customizations() {
  selected_customizations_.Clear();
}
inline std::string* Character::add_selected_customizations() {
  // @@protoc_insertion_point(field_add_mutable:OakSave.Character.selected_customizations)
  return _internal_add_selected_customizations();
}
inline const std::string& Character::_internal_selected_customizations(int index) const {
  return selected_customizations_.Get(index);
}
inline const std::string& Character::selected_customizations(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.Character.selected_customizations)
  return _internal_selected_customizations(index);
}
inline std::string* Character::mutable_selected_customizations(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.Character.selected_customizations)
  return selected_customizations_.Mutable(index);
}
inline void Character::set_selected_customizations(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:OakSave.Character.selected_customizations)
  selected_customizations_.Mutable(index)->assign(value);
}
inline void Character::set_selected_customizations(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:OakSave.Character.selected_customizations)
  selected_customizations_.Mutable(index)->assign(std::move(value));
}
inline void Character::set_selected_customizations(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  selected_customizations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:OakSave.Character.selected_customizations)
}
inline void Character::set_selected_customizations(int index, const char* value, size_t size) {
  selected_customizations_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:OakSave.Character.selected_customizations)
}
inline std::string* Character::_internal_add_selected_customizations() {
  return selected_customizations_.Add();
}
inline void Character::add_selected_customizations(const std::string& value) {
  selected_customizations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:OakSave.Character.selected_customizations)
}
inline void Character::add_selected_customizations(std::string&& value) {
  selected_customizations_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:OakSave.Character.selected_customizations)
}
inline void Character::add_selected_customizations(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  selected_customizations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:OakSave.Character.selected_customizations)
}
inline void Character::add_selected_customizations(const char* value, size_t size) {
  selected_customizations_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:OakSave.Character.selected_customizations)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Character::selected_customizations() const {
  // @@protoc_insertion_point(field_list:OakSave.Character.selected_customizations)
  return selected_customizations_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Character::mutable_selected_customizations() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.Character.selected_customizations)
  return &selected_customizations_;
}

// repeated int32 equipped_emote_customizations = 31;
inline int Character::_internal_equipped_emote_customizations_size() const {
  return equipped_emote_customizations_.size();
}
inline int Character::equipped_emote_customizations_size() const {
  return _internal_equipped_emote_customizations_size();
}
inline void Character::clear_equipped_emote_customizations() {
  equipped_emote_customizations_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Character::_internal_equipped_emote_customizations(int index) const {
  return equipped_emote_customizations_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Character::equipped_emote_customizations(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.Character.equipped_emote_customizations)
  return _internal_equipped_emote_customizations(index);
}
inline void Character::set_equipped_emote_customizations(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  equipped_emote_customizations_.Set(index, value);
  // @@protoc_insertion_point(field_set:OakSave.Character.equipped_emote_customizations)
}
inline void Character::_internal_add_equipped_emote_customizations(::PROTOBUF_NAMESPACE_ID::int32 value) {
  equipped_emote_customizations_.Add(value);
}
inline void Character::add_equipped_emote_customizations(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_equipped_emote_customizations(value);
  // @@protoc_insertion_point(field_add:OakSave.Character.equipped_emote_customizations)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Character::_internal_equipped_emote_customizations() const {
  return equipped_emote_customizations_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Character::equipped_emote_customizations() const {
  // @@protoc_insertion_point(field_list:OakSave.Character.equipped_emote_customizations)
  return _internal_equipped_emote_customizations();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Character::_internal_mutable_equipped_emote_customizations() {
  return &equipped_emote_customizations_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Character::mutable_equipped_emote_customizations() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.Character.equipped_emote_customizations)
  return _internal_mutable_equipped_emote_customizations();
}

// repeated .OakSave.CustomPlayerColorSaveGameData selected_color_customizations = 32;
inline int Character::_internal_selected_color_customizations_size() const {
  return selected_color_customizations_.size();
}
inline int Character::selected_color_customizations_size() const {
  return _internal_selected_color_customizations_size();
}
inline void Character::clear_selected_color_customizations() {
  selected_color_customizations_.Clear();
}
inline ::OakSave::CustomPlayerColorSaveGameData* Character::mutable_selected_color_customizations(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.Character.selected_color_customizations)
  return selected_color_customizations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::CustomPlayerColorSaveGameData >*
Character::mutable_selected_color_customizations() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.Character.selected_color_customizations)
  return &selected_color_customizations_;
}
inline const ::OakSave::CustomPlayerColorSaveGameData& Character::_internal_selected_color_customizations(int index) const {
  return selected_color_customizations_.Get(index);
}
inline const ::OakSave::CustomPlayerColorSaveGameData& Character::selected_color_customizations(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.Character.selected_color_customizations)
  return _internal_selected_color_customizations(index);
}
inline ::OakSave::CustomPlayerColorSaveGameData* Character::_internal_add_selected_color_customizations() {
  return selected_color_customizations_.Add();
}
inline ::OakSave::CustomPlayerColorSaveGameData* Character::add_selected_color_customizations() {
  // @@protoc_insertion_point(field_add:OakSave.Character.selected_color_customizations)
  return _internal_add_selected_color_customizations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::CustomPlayerColorSaveGameData >&
Character::selected_color_customizations() const {
  // @@protoc_insertion_point(field_list:OakSave.Character.selected_color_customizations)
  return selected_color_customizations_;
}

// .OakSave.GuardianRankSaveGameData guardian_rank = 33;
inline bool Character::_internal_has_guardian_rank() const {
  return this != internal_default_instance() && guardian_rank_ != nullptr;
}
inline bool Character::has_guardian_rank() const {
  return _internal_has_guardian_rank();
}
inline void Character::clear_guardian_rank() {
  if (GetArena() == nullptr && guardian_rank_ != nullptr) {
    delete guardian_rank_;
  }
  guardian_rank_ = nullptr;
}
inline const ::OakSave::GuardianRankSaveGameData& Character::_internal_guardian_rank() const {
  const ::OakSave::GuardianRankSaveGameData* p = guardian_rank_;
  return p != nullptr ? *p : *reinterpret_cast<const ::OakSave::GuardianRankSaveGameData*>(
      &::OakSave::_GuardianRankSaveGameData_default_instance_);
}
inline const ::OakSave::GuardianRankSaveGameData& Character::guardian_rank() const {
  // @@protoc_insertion_point(field_get:OakSave.Character.guardian_rank)
  return _internal_guardian_rank();
}
inline void Character::unsafe_arena_set_allocated_guardian_rank(
    ::OakSave::GuardianRankSaveGameData* guardian_rank) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(guardian_rank_);
  }
  guardian_rank_ = guardian_rank;
  if (guardian_rank) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.Character.guardian_rank)
}
inline ::OakSave::GuardianRankSaveGameData* Character::release_guardian_rank() {
  auto temp = unsafe_arena_release_guardian_rank();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::OakSave::GuardianRankSaveGameData* Character::unsafe_arena_release_guardian_rank() {
  // @@protoc_insertion_point(field_release:OakSave.Character.guardian_rank)
  
  ::OakSave::GuardianRankSaveGameData* temp = guardian_rank_;
  guardian_rank_ = nullptr;
  return temp;
}
inline ::OakSave::GuardianRankSaveGameData* Character::_internal_mutable_guardian_rank() {
  
  if (guardian_rank_ == nullptr) {
    auto* p = CreateMaybeMessage<::OakSave::GuardianRankSaveGameData>(GetArena());
    guardian_rank_ = p;
  }
  return guardian_rank_;
}
inline ::OakSave::GuardianRankSaveGameData* Character::mutable_guardian_rank() {
  // @@protoc_insertion_point(field_mutable:OakSave.Character.guardian_rank)
  return _internal_mutable_guardian_rank();
}
inline void Character::set_allocated_guardian_rank(::OakSave::GuardianRankSaveGameData* guardian_rank) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete guardian_rank_;
  }
  if (guardian_rank) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(guardian_rank);
    if (message_arena != submessage_arena) {
      guardian_rank = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, guardian_rank, submessage_arena);
    }
    
  } else {
    
  }
  guardian_rank_ = guardian_rank;
  // @@protoc_insertion_point(field_set_allocated:OakSave.Character.guardian_rank)
}

// .OakSave.CrewQuartersSaveData crew_quarters_room = 34;
inline bool Character::_internal_has_crew_quarters_room() const {
  return this != internal_default_instance() && crew_quarters_room_ != nullptr;
}
inline bool Character::has_crew_quarters_room() const {
  return _internal_has_crew_quarters_room();
}
inline void Character::clear_crew_quarters_room() {
  if (GetArena() == nullptr && crew_quarters_room_ != nullptr) {
    delete crew_quarters_room_;
  }
  crew_quarters_room_ = nullptr;
}
inline const ::OakSave::CrewQuartersSaveData& Character::_internal_crew_quarters_room() const {
  const ::OakSave::CrewQuartersSaveData* p = crew_quarters_room_;
  return p != nullptr ? *p : *reinterpret_cast<const ::OakSave::CrewQuartersSaveData*>(
      &::OakSave::_CrewQuartersSaveData_default_instance_);
}
inline const ::OakSave::CrewQuartersSaveData& Character::crew_quarters_room() const {
  // @@protoc_insertion_point(field_get:OakSave.Character.crew_quarters_room)
  return _internal_crew_quarters_room();
}
inline void Character::unsafe_arena_set_allocated_crew_quarters_room(
    ::OakSave::CrewQuartersSaveData* crew_quarters_room) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(crew_quarters_room_);
  }
  crew_quarters_room_ = crew_quarters_room;
  if (crew_quarters_room) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.Character.crew_quarters_room)
}
inline ::OakSave::CrewQuartersSaveData* Character::release_crew_quarters_room() {
  auto temp = unsafe_arena_release_crew_quarters_room();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::OakSave::CrewQuartersSaveData* Character::unsafe_arena_release_crew_quarters_room() {
  // @@protoc_insertion_point(field_release:OakSave.Character.crew_quarters_room)
  
  ::OakSave::CrewQuartersSaveData* temp = crew_quarters_room_;
  crew_quarters_room_ = nullptr;
  return temp;
}
inline ::OakSave::CrewQuartersSaveData* Character::_internal_mutable_crew_quarters_room() {
  
  if (crew_quarters_room_ == nullptr) {
    auto* p = CreateMaybeMessage<::OakSave::CrewQuartersSaveData>(GetArena());
    crew_quarters_room_ = p;
  }
  return crew_quarters_room_;
}
inline ::OakSave::CrewQuartersSaveData* Character::mutable_crew_quarters_room() {
  // @@protoc_insertion_point(field_mutable:OakSave.Character.crew_quarters_room)
  return _internal_mutable_crew_quarters_room();
}
inline void Character::set_allocated_crew_quarters_room(::OakSave::CrewQuartersSaveData* crew_quarters_room) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete crew_quarters_room_;
  }
  if (crew_quarters_room) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(crew_quarters_room);
    if (message_arena != submessage_arena) {
      crew_quarters_room = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, crew_quarters_room, submessage_arena);
    }
    
  } else {
    
  }
  crew_quarters_room_ = crew_quarters_room;
  // @@protoc_insertion_point(field_set_allocated:OakSave.Character.crew_quarters_room)
}

// .OakSave.CrewQuartersGunRackSaveData crew_quarters_gun_rack = 35;
inline bool Character::_internal_has_crew_quarters_gun_rack() const {
  return this != internal_default_instance() && crew_quarters_gun_rack_ != nullptr;
}
inline bool Character::has_crew_quarters_gun_rack() const {
  return _internal_has_crew_quarters_gun_rack();
}
inline void Character::clear_crew_quarters_gun_rack() {
  if (GetArena() == nullptr && crew_quarters_gun_rack_ != nullptr) {
    delete crew_quarters_gun_rack_;
  }
  crew_quarters_gun_rack_ = nullptr;
}
inline const ::OakSave::CrewQuartersGunRackSaveData& Character::_internal_crew_quarters_gun_rack() const {
  const ::OakSave::CrewQuartersGunRackSaveData* p = crew_quarters_gun_rack_;
  return p != nullptr ? *p : *reinterpret_cast<const ::OakSave::CrewQuartersGunRackSaveData*>(
      &::OakSave::_CrewQuartersGunRackSaveData_default_instance_);
}
inline const ::OakSave::CrewQuartersGunRackSaveData& Character::crew_quarters_gun_rack() const {
  // @@protoc_insertion_point(field_get:OakSave.Character.crew_quarters_gun_rack)
  return _internal_crew_quarters_gun_rack();
}
inline void Character::unsafe_arena_set_allocated_crew_quarters_gun_rack(
    ::OakSave::CrewQuartersGunRackSaveData* crew_quarters_gun_rack) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(crew_quarters_gun_rack_);
  }
  crew_quarters_gun_rack_ = crew_quarters_gun_rack;
  if (crew_quarters_gun_rack) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.Character.crew_quarters_gun_rack)
}
inline ::OakSave::CrewQuartersGunRackSaveData* Character::release_crew_quarters_gun_rack() {
  auto temp = unsafe_arena_release_crew_quarters_gun_rack();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::OakSave::CrewQuartersGunRackSaveData* Character::unsafe_arena_release_crew_quarters_gun_rack() {
  // @@protoc_insertion_point(field_release:OakSave.Character.crew_quarters_gun_rack)
  
  ::OakSave::CrewQuartersGunRackSaveData* temp = crew_quarters_gun_rack_;
  crew_quarters_gun_rack_ = nullptr;
  return temp;
}
inline ::OakSave::CrewQuartersGunRackSaveData* Character::_internal_mutable_crew_quarters_gun_rack() {
  
  if (crew_quarters_gun_rack_ == nullptr) {
    auto* p = CreateMaybeMessage<::OakSave::CrewQuartersGunRackSaveData>(GetArena());
    crew_quarters_gun_rack_ = p;
  }
  return crew_quarters_gun_rack_;
}
inline ::OakSave::CrewQuartersGunRackSaveData* Character::mutable_crew_quarters_gun_rack() {
  // @@protoc_insertion_point(field_mutable:OakSave.Character.crew_quarters_gun_rack)
  return _internal_mutable_crew_quarters_gun_rack();
}
inline void Character::set_allocated_crew_quarters_gun_rack(::OakSave::CrewQuartersGunRackSaveData* crew_quarters_gun_rack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete crew_quarters_gun_rack_;
  }
  if (crew_quarters_gun_rack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(crew_quarters_gun_rack);
    if (message_arena != submessage_arena) {
      crew_quarters_gun_rack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, crew_quarters_gun_rack, submessage_arena);
    }
    
  } else {
    
  }
  crew_quarters_gun_rack_ = crew_quarters_gun_rack;
  // @@protoc_insertion_point(field_set_allocated:OakSave.Character.crew_quarters_gun_rack)
}

// repeated .OakSave.EchoLogSaveGameData unlocked_echo_logs = 36;
inline int Character::_internal_unlocked_echo_logs_size() const {
  return unlocked_echo_logs_.size();
}
inline int Character::unlocked_echo_logs_size() const {
  return _internal_unlocked_echo_logs_size();
}
inline void Character::clear_unlocked_echo_logs() {
  unlocked_echo_logs_.Clear();
}
inline ::OakSave::EchoLogSaveGameData* Character::mutable_unlocked_echo_logs(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.Character.unlocked_echo_logs)
  return unlocked_echo_logs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::EchoLogSaveGameData >*
Character::mutable_unlocked_echo_logs() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.Character.unlocked_echo_logs)
  return &unlocked_echo_logs_;
}
inline const ::OakSave::EchoLogSaveGameData& Character::_internal_unlocked_echo_logs(int index) const {
  return unlocked_echo_logs_.Get(index);
}
inline const ::OakSave::EchoLogSaveGameData& Character::unlocked_echo_logs(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.Character.unlocked_echo_logs)
  return _internal_unlocked_echo_logs(index);
}
inline ::OakSave::EchoLogSaveGameData* Character::_internal_add_unlocked_echo_logs() {
  return unlocked_echo_logs_.Add();
}
inline ::OakSave::EchoLogSaveGameData* Character::add_unlocked_echo_logs() {
  // @@protoc_insertion_point(field_add:OakSave.Character.unlocked_echo_logs)
  return _internal_add_unlocked_echo_logs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::EchoLogSaveGameData >&
Character::unlocked_echo_logs() const {
  // @@protoc_insertion_point(field_list:OakSave.Character.unlocked_echo_logs)
  return unlocked_echo_logs_;
}

// bool has_played_special_echo_log_insert_already = 37;
inline void Character::clear_has_played_special_echo_log_insert_already() {
  has_played_special_echo_log_insert_already_ = false;
}
inline bool Character::_internal_has_played_special_echo_log_insert_already() const {
  return has_played_special_echo_log_insert_already_;
}
inline bool Character::has_played_special_echo_log_insert_already() const {
  // @@protoc_insertion_point(field_get:OakSave.Character.has_played_special_echo_log_insert_already)
  return _internal_has_played_special_echo_log_insert_already();
}
inline void Character::_internal_set_has_played_special_echo_log_insert_already(bool value) {
  
  has_played_special_echo_log_insert_already_ = value;
}
inline void Character::set_has_played_special_echo_log_insert_already(bool value) {
  _internal_set_has_played_special_echo_log_insert_already(value);
  // @@protoc_insertion_point(field_set:OakSave.Character.has_played_special_echo_log_insert_already)
}

// repeated .OakSave.Character.NicknameMappingsEntry nickname_mappings = 38;
inline int Character::_internal_nickname_mappings_size() const {
  return nickname_mappings_.size();
}
inline int Character::nickname_mappings_size() const {
  return _internal_nickname_mappings_size();
}
inline void Character::clear_nickname_mappings() {
  nickname_mappings_.Clear();
}
inline ::OakSave::Character_NicknameMappingsEntry* Character::mutable_nickname_mappings(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.Character.nickname_mappings)
  return nickname_mappings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::Character_NicknameMappingsEntry >*
Character::mutable_nickname_mappings() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.Character.nickname_mappings)
  return &nickname_mappings_;
}
inline const ::OakSave::Character_NicknameMappingsEntry& Character::_internal_nickname_mappings(int index) const {
  return nickname_mappings_.Get(index);
}
inline const ::OakSave::Character_NicknameMappingsEntry& Character::nickname_mappings(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.Character.nickname_mappings)
  return _internal_nickname_mappings(index);
}
inline ::OakSave::Character_NicknameMappingsEntry* Character::_internal_add_nickname_mappings() {
  return nickname_mappings_.Add();
}
inline ::OakSave::Character_NicknameMappingsEntry* Character::add_nickname_mappings() {
  // @@protoc_insertion_point(field_add:OakSave.Character.nickname_mappings)
  return _internal_add_nickname_mappings();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::Character_NicknameMappingsEntry >&
Character::nickname_mappings() const {
  // @@protoc_insertion_point(field_list:OakSave.Character.nickname_mappings)
  return nickname_mappings_;
}

// .OakSave.MapIDData last_traveled_map_id = 39;
inline bool Character::_internal_has_last_traveled_map_id() const {
  return this != internal_default_instance() && last_traveled_map_id_ != nullptr;
}
inline bool Character::has_last_traveled_map_id() const {
  return _internal_has_last_traveled_map_id();
}
inline void Character::clear_last_traveled_map_id() {
  if (GetArena() == nullptr && last_traveled_map_id_ != nullptr) {
    delete last_traveled_map_id_;
  }
  last_traveled_map_id_ = nullptr;
}
inline const ::OakSave::MapIDData& Character::_internal_last_traveled_map_id() const {
  const ::OakSave::MapIDData* p = last_traveled_map_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::OakSave::MapIDData*>(
      &::OakSave::_MapIDData_default_instance_);
}
inline const ::OakSave::MapIDData& Character::last_traveled_map_id() const {
  // @@protoc_insertion_point(field_get:OakSave.Character.last_traveled_map_id)
  return _internal_last_traveled_map_id();
}
inline void Character::unsafe_arena_set_allocated_last_traveled_map_id(
    ::OakSave::MapIDData* last_traveled_map_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_traveled_map_id_);
  }
  last_traveled_map_id_ = last_traveled_map_id;
  if (last_traveled_map_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.Character.last_traveled_map_id)
}
inline ::OakSave::MapIDData* Character::release_last_traveled_map_id() {
  auto temp = unsafe_arena_release_last_traveled_map_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::OakSave::MapIDData* Character::unsafe_arena_release_last_traveled_map_id() {
  // @@protoc_insertion_point(field_release:OakSave.Character.last_traveled_map_id)
  
  ::OakSave::MapIDData* temp = last_traveled_map_id_;
  last_traveled_map_id_ = nullptr;
  return temp;
}
inline ::OakSave::MapIDData* Character::_internal_mutable_last_traveled_map_id() {
  
  if (last_traveled_map_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::OakSave::MapIDData>(GetArena());
    last_traveled_map_id_ = p;
  }
  return last_traveled_map_id_;
}
inline ::OakSave::MapIDData* Character::mutable_last_traveled_map_id() {
  // @@protoc_insertion_point(field_mutable:OakSave.Character.last_traveled_map_id)
  return _internal_mutable_last_traveled_map_id();
}
inline void Character::set_allocated_last_traveled_map_id(::OakSave::MapIDData* last_traveled_map_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete last_traveled_map_id_;
  }
  if (last_traveled_map_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(last_traveled_map_id);
    if (message_arena != submessage_arena) {
      last_traveled_map_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_traveled_map_id, submessage_arena);
    }
    
  } else {
    
  }
  last_traveled_map_id_ = last_traveled_map_id;
  // @@protoc_insertion_point(field_set_allocated:OakSave.Character.last_traveled_map_id)
}

// .OakSave.ChallengeCategoryProgressSaveData challenge_category_completion_pcts = 40;
inline bool Character::_internal_has_challenge_category_completion_pcts() const {
  return this != internal_default_instance() && challenge_category_completion_pcts_ != nullptr;
}
inline bool Character::has_challenge_category_completion_pcts() const {
  return _internal_has_challenge_category_completion_pcts();
}
inline void Character::clear_challenge_category_completion_pcts() {
  if (GetArena() == nullptr && challenge_category_completion_pcts_ != nullptr) {
    delete challenge_category_completion_pcts_;
  }
  challenge_category_completion_pcts_ = nullptr;
}
inline const ::OakSave::ChallengeCategoryProgressSaveData& Character::_internal_challenge_category_completion_pcts() const {
  const ::OakSave::ChallengeCategoryProgressSaveData* p = challenge_category_completion_pcts_;
  return p != nullptr ? *p : *reinterpret_cast<const ::OakSave::ChallengeCategoryProgressSaveData*>(
      &::OakSave::_ChallengeCategoryProgressSaveData_default_instance_);
}
inline const ::OakSave::ChallengeCategoryProgressSaveData& Character::challenge_category_completion_pcts() const {
  // @@protoc_insertion_point(field_get:OakSave.Character.challenge_category_completion_pcts)
  return _internal_challenge_category_completion_pcts();
}
inline void Character::unsafe_arena_set_allocated_challenge_category_completion_pcts(
    ::OakSave::ChallengeCategoryProgressSaveData* challenge_category_completion_pcts) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(challenge_category_completion_pcts_);
  }
  challenge_category_completion_pcts_ = challenge_category_completion_pcts;
  if (challenge_category_completion_pcts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.Character.challenge_category_completion_pcts)
}
inline ::OakSave::ChallengeCategoryProgressSaveData* Character::release_challenge_category_completion_pcts() {
  auto temp = unsafe_arena_release_challenge_category_completion_pcts();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::OakSave::ChallengeCategoryProgressSaveData* Character::unsafe_arena_release_challenge_category_completion_pcts() {
  // @@protoc_insertion_point(field_release:OakSave.Character.challenge_category_completion_pcts)
  
  ::OakSave::ChallengeCategoryProgressSaveData* temp = challenge_category_completion_pcts_;
  challenge_category_completion_pcts_ = nullptr;
  return temp;
}
inline ::OakSave::ChallengeCategoryProgressSaveData* Character::_internal_mutable_challenge_category_completion_pcts() {
  
  if (challenge_category_completion_pcts_ == nullptr) {
    auto* p = CreateMaybeMessage<::OakSave::ChallengeCategoryProgressSaveData>(GetArena());
    challenge_category_completion_pcts_ = p;
  }
  return challenge_category_completion_pcts_;
}
inline ::OakSave::ChallengeCategoryProgressSaveData* Character::mutable_challenge_category_completion_pcts() {
  // @@protoc_insertion_point(field_mutable:OakSave.Character.challenge_category_completion_pcts)
  return _internal_mutable_challenge_category_completion_pcts();
}
inline void Character::set_allocated_challenge_category_completion_pcts(::OakSave::ChallengeCategoryProgressSaveData* challenge_category_completion_pcts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete challenge_category_completion_pcts_;
  }
  if (challenge_category_completion_pcts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(challenge_category_completion_pcts);
    if (message_arena != submessage_arena) {
      challenge_category_completion_pcts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, challenge_category_completion_pcts, submessage_arena);
    }
    
  } else {
    
  }
  challenge_category_completion_pcts_ = challenge_category_completion_pcts;
  // @@protoc_insertion_point(field_set_allocated:OakSave.Character.challenge_category_completion_pcts)
}

// .OakSave.OakPlayerCharacterSlotSaveGameData character_slot_save_game_data = 41;
inline bool Character::_internal_has_character_slot_save_game_data() const {
  return this != internal_default_instance() && character_slot_save_game_data_ != nullptr;
}
inline bool Character::has_character_slot_save_game_data() const {
  return _internal_has_character_slot_save_game_data();
}
inline void Character::clear_character_slot_save_game_data() {
  if (GetArena() == nullptr && character_slot_save_game_data_ != nullptr) {
    delete character_slot_save_game_data_;
  }
  character_slot_save_game_data_ = nullptr;
}
inline const ::OakSave::OakPlayerCharacterSlotSaveGameData& Character::_internal_character_slot_save_game_data() const {
  const ::OakSave::OakPlayerCharacterSlotSaveGameData* p = character_slot_save_game_data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::OakSave::OakPlayerCharacterSlotSaveGameData*>(
      &::OakSave::_OakPlayerCharacterSlotSaveGameData_default_instance_);
}
inline const ::OakSave::OakPlayerCharacterSlotSaveGameData& Character::character_slot_save_game_data() const {
  // @@protoc_insertion_point(field_get:OakSave.Character.character_slot_save_game_data)
  return _internal_character_slot_save_game_data();
}
inline void Character::unsafe_arena_set_allocated_character_slot_save_game_data(
    ::OakSave::OakPlayerCharacterSlotSaveGameData* character_slot_save_game_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(character_slot_save_game_data_);
  }
  character_slot_save_game_data_ = character_slot_save_game_data;
  if (character_slot_save_game_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.Character.character_slot_save_game_data)
}
inline ::OakSave::OakPlayerCharacterSlotSaveGameData* Character::release_character_slot_save_game_data() {
  auto temp = unsafe_arena_release_character_slot_save_game_data();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::OakSave::OakPlayerCharacterSlotSaveGameData* Character::unsafe_arena_release_character_slot_save_game_data() {
  // @@protoc_insertion_point(field_release:OakSave.Character.character_slot_save_game_data)
  
  ::OakSave::OakPlayerCharacterSlotSaveGameData* temp = character_slot_save_game_data_;
  character_slot_save_game_data_ = nullptr;
  return temp;
}
inline ::OakSave::OakPlayerCharacterSlotSaveGameData* Character::_internal_mutable_character_slot_save_game_data() {
  
  if (character_slot_save_game_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::OakSave::OakPlayerCharacterSlotSaveGameData>(GetArena());
    character_slot_save_game_data_ = p;
  }
  return character_slot_save_game_data_;
}
inline ::OakSave::OakPlayerCharacterSlotSaveGameData* Character::mutable_character_slot_save_game_data() {
  // @@protoc_insertion_point(field_mutable:OakSave.Character.character_slot_save_game_data)
  return _internal_mutable_character_slot_save_game_data();
}
inline void Character::set_allocated_character_slot_save_game_data(::OakSave::OakPlayerCharacterSlotSaveGameData* character_slot_save_game_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete character_slot_save_game_data_;
  }
  if (character_slot_save_game_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(character_slot_save_game_data);
    if (message_arena != submessage_arena) {
      character_slot_save_game_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, character_slot_save_game_data, submessage_arena);
    }
    
  } else {
    
  }
  character_slot_save_game_data_ = character_slot_save_game_data;
  // @@protoc_insertion_point(field_set_allocated:OakSave.Character.character_slot_save_game_data)
}

// .OakSave.UITrackingSaveGameData ui_tracking_save_game_data = 42;
inline bool Character::_internal_has_ui_tracking_save_game_data() const {
  return this != internal_default_instance() && ui_tracking_save_game_data_ != nullptr;
}
inline bool Character::has_ui_tracking_save_game_data() const {
  return _internal_has_ui_tracking_save_game_data();
}
inline void Character::clear_ui_tracking_save_game_data() {
  if (GetArena() == nullptr && ui_tracking_save_game_data_ != nullptr) {
    delete ui_tracking_save_game_data_;
  }
  ui_tracking_save_game_data_ = nullptr;
}
inline const ::OakSave::UITrackingSaveGameData& Character::_internal_ui_tracking_save_game_data() const {
  const ::OakSave::UITrackingSaveGameData* p = ui_tracking_save_game_data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::OakSave::UITrackingSaveGameData*>(
      &::OakSave::_UITrackingSaveGameData_default_instance_);
}
inline const ::OakSave::UITrackingSaveGameData& Character::ui_tracking_save_game_data() const {
  // @@protoc_insertion_point(field_get:OakSave.Character.ui_tracking_save_game_data)
  return _internal_ui_tracking_save_game_data();
}
inline void Character::unsafe_arena_set_allocated_ui_tracking_save_game_data(
    ::OakSave::UITrackingSaveGameData* ui_tracking_save_game_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ui_tracking_save_game_data_);
  }
  ui_tracking_save_game_data_ = ui_tracking_save_game_data;
  if (ui_tracking_save_game_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.Character.ui_tracking_save_game_data)
}
inline ::OakSave::UITrackingSaveGameData* Character::release_ui_tracking_save_game_data() {
  auto temp = unsafe_arena_release_ui_tracking_save_game_data();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::OakSave::UITrackingSaveGameData* Character::unsafe_arena_release_ui_tracking_save_game_data() {
  // @@protoc_insertion_point(field_release:OakSave.Character.ui_tracking_save_game_data)
  
  ::OakSave::UITrackingSaveGameData* temp = ui_tracking_save_game_data_;
  ui_tracking_save_game_data_ = nullptr;
  return temp;
}
inline ::OakSave::UITrackingSaveGameData* Character::_internal_mutable_ui_tracking_save_game_data() {
  
  if (ui_tracking_save_game_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::OakSave::UITrackingSaveGameData>(GetArena());
    ui_tracking_save_game_data_ = p;
  }
  return ui_tracking_save_game_data_;
}
inline ::OakSave::UITrackingSaveGameData* Character::mutable_ui_tracking_save_game_data() {
  // @@protoc_insertion_point(field_mutable:OakSave.Character.ui_tracking_save_game_data)
  return _internal_mutable_ui_tracking_save_game_data();
}
inline void Character::set_allocated_ui_tracking_save_game_data(::OakSave::UITrackingSaveGameData* ui_tracking_save_game_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ui_tracking_save_game_data_;
  }
  if (ui_tracking_save_game_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ui_tracking_save_game_data);
    if (message_arena != submessage_arena) {
      ui_tracking_save_game_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ui_tracking_save_game_data, submessage_arena);
    }
    
  } else {
    
  }
  ui_tracking_save_game_data_ = ui_tracking_save_game_data;
  // @@protoc_insertion_point(field_set_allocated:OakSave.Character.ui_tracking_save_game_data)
}

// string preferred_character_name = 43;
inline void Character::clear_preferred_character_name() {
  preferred_character_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Character::preferred_character_name() const {
  // @@protoc_insertion_point(field_get:OakSave.Character.preferred_character_name)
  return _internal_preferred_character_name();
}
inline void Character::set_preferred_character_name(const std::string& value) {
  _internal_set_preferred_character_name(value);
  // @@protoc_insertion_point(field_set:OakSave.Character.preferred_character_name)
}
inline std::string* Character::mutable_preferred_character_name() {
  // @@protoc_insertion_point(field_mutable:OakSave.Character.preferred_character_name)
  return _internal_mutable_preferred_character_name();
}
inline const std::string& Character::_internal_preferred_character_name() const {
  return preferred_character_name_.Get();
}
inline void Character::_internal_set_preferred_character_name(const std::string& value) {
  
  preferred_character_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Character::set_preferred_character_name(std::string&& value) {
  
  preferred_character_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.Character.preferred_character_name)
}
inline void Character::set_preferred_character_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  preferred_character_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.Character.preferred_character_name)
}
inline void Character::set_preferred_character_name(const char* value,
    size_t size) {
  
  preferred_character_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.Character.preferred_character_name)
}
inline std::string* Character::_internal_mutable_preferred_character_name() {
  
  return preferred_character_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Character::release_preferred_character_name() {
  // @@protoc_insertion_point(field_release:OakSave.Character.preferred_character_name)
  return preferred_character_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Character::set_allocated_preferred_character_name(std::string* preferred_character_name) {
  if (preferred_character_name != nullptr) {
    
  } else {
    
  }
  preferred_character_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), preferred_character_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.Character.preferred_character_name)
}
inline std::string* Character::unsafe_arena_release_preferred_character_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.Character.preferred_character_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return preferred_character_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Character::unsafe_arena_set_allocated_preferred_character_name(
    std::string* preferred_character_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (preferred_character_name != nullptr) {
    
  } else {
    
  }
  preferred_character_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      preferred_character_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.Character.preferred_character_name)
}

// int32 name_character_limit = 44;
inline void Character::clear_name_character_limit() {
  name_character_limit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Character::_internal_name_character_limit() const {
  return name_character_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Character::name_character_limit() const {
  // @@protoc_insertion_point(field_get:OakSave.Character.name_character_limit)
  return _internal_name_character_limit();
}
inline void Character::_internal_set_name_character_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  name_character_limit_ = value;
}
inline void Character::set_name_character_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_name_character_limit(value);
  // @@protoc_insertion_point(field_set:OakSave.Character.name_character_limit)
}

// uint32 preferred_group_mode = 45;
inline void Character::clear_preferred_group_mode() {
  preferred_group_mode_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Character::_internal_preferred_group_mode() const {
  return preferred_group_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Character::preferred_group_mode() const {
  // @@protoc_insertion_point(field_get:OakSave.Character.preferred_group_mode)
  return _internal_preferred_group_mode();
}
inline void Character::_internal_set_preferred_group_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  preferred_group_mode_ = value;
}
inline void Character::set_preferred_group_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_preferred_group_mode(value);
  // @@protoc_insertion_point(field_set:OakSave.Character.preferred_group_mode)
}

// .OakSave.TimeOfDaySaveGameData time_of_day_save_game_data = 46;
inline bool Character::_internal_has_time_of_day_save_game_data() const {
  return this != internal_default_instance() && time_of_day_save_game_data_ != nullptr;
}
inline bool Character::has_time_of_day_save_game_data() const {
  return _internal_has_time_of_day_save_game_data();
}
inline void Character::clear_time_of_day_save_game_data() {
  if (GetArena() == nullptr && time_of_day_save_game_data_ != nullptr) {
    delete time_of_day_save_game_data_;
  }
  time_of_day_save_game_data_ = nullptr;
}
inline const ::OakSave::TimeOfDaySaveGameData& Character::_internal_time_of_day_save_game_data() const {
  const ::OakSave::TimeOfDaySaveGameData* p = time_of_day_save_game_data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::OakSave::TimeOfDaySaveGameData*>(
      &::OakSave::_TimeOfDaySaveGameData_default_instance_);
}
inline const ::OakSave::TimeOfDaySaveGameData& Character::time_of_day_save_game_data() const {
  // @@protoc_insertion_point(field_get:OakSave.Character.time_of_day_save_game_data)
  return _internal_time_of_day_save_game_data();
}
inline void Character::unsafe_arena_set_allocated_time_of_day_save_game_data(
    ::OakSave::TimeOfDaySaveGameData* time_of_day_save_game_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_of_day_save_game_data_);
  }
  time_of_day_save_game_data_ = time_of_day_save_game_data;
  if (time_of_day_save_game_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.Character.time_of_day_save_game_data)
}
inline ::OakSave::TimeOfDaySaveGameData* Character::release_time_of_day_save_game_data() {
  auto temp = unsafe_arena_release_time_of_day_save_game_data();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::OakSave::TimeOfDaySaveGameData* Character::unsafe_arena_release_time_of_day_save_game_data() {
  // @@protoc_insertion_point(field_release:OakSave.Character.time_of_day_save_game_data)
  
  ::OakSave::TimeOfDaySaveGameData* temp = time_of_day_save_game_data_;
  time_of_day_save_game_data_ = nullptr;
  return temp;
}
inline ::OakSave::TimeOfDaySaveGameData* Character::_internal_mutable_time_of_day_save_game_data() {
  
  if (time_of_day_save_game_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::OakSave::TimeOfDaySaveGameData>(GetArena());
    time_of_day_save_game_data_ = p;
  }
  return time_of_day_save_game_data_;
}
inline ::OakSave::TimeOfDaySaveGameData* Character::mutable_time_of_day_save_game_data() {
  // @@protoc_insertion_point(field_mutable:OakSave.Character.time_of_day_save_game_data)
  return _internal_mutable_time_of_day_save_game_data();
}
inline void Character::set_allocated_time_of_day_save_game_data(::OakSave::TimeOfDaySaveGameData* time_of_day_save_game_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete time_of_day_save_game_data_;
  }
  if (time_of_day_save_game_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(time_of_day_save_game_data);
    if (message_arena != submessage_arena) {
      time_of_day_save_game_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_of_day_save_game_data, submessage_arena);
    }
    
  } else {
    
  }
  time_of_day_save_game_data_ = time_of_day_save_game_data;
  // @@protoc_insertion_point(field_set_allocated:OakSave.Character.time_of_day_save_game_data)
}

// repeated .OakSave.LevelPersistence_Level_SaveGameData level_persistence_data = 47;
inline int Character::_internal_level_persistence_data_size() const {
  return level_persistence_data_.size();
}
inline int Character::level_persistence_data_size() const {
  return _internal_level_persistence_data_size();
}
inline void Character::clear_level_persistence_data() {
  level_persistence_data_.Clear();
}
inline ::OakSave::LevelPersistence_Level_SaveGameData* Character::mutable_level_persistence_data(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.Character.level_persistence_data)
  return level_persistence_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::LevelPersistence_Level_SaveGameData >*
Character::mutable_level_persistence_data() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.Character.level_persistence_data)
  return &level_persistence_data_;
}
inline const ::OakSave::LevelPersistence_Level_SaveGameData& Character::_internal_level_persistence_data(int index) const {
  return level_persistence_data_.Get(index);
}
inline const ::OakSave::LevelPersistence_Level_SaveGameData& Character::level_persistence_data(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.Character.level_persistence_data)
  return _internal_level_persistence_data(index);
}
inline ::OakSave::LevelPersistence_Level_SaveGameData* Character::_internal_add_level_persistence_data() {
  return level_persistence_data_.Add();
}
inline ::OakSave::LevelPersistence_Level_SaveGameData* Character::add_level_persistence_data() {
  // @@protoc_insertion_point(field_add:OakSave.Character.level_persistence_data)
  return _internal_add_level_persistence_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::LevelPersistence_Level_SaveGameData >&
Character::level_persistence_data() const {
  // @@protoc_insertion_point(field_list:OakSave.Character.level_persistence_data)
  return level_persistence_data_;
}

// uint32 accumulated_level_persistence_reset_timer_seconds = 48;
inline void Character::clear_accumulated_level_persistence_reset_timer_seconds() {
  accumulated_level_persistence_reset_timer_seconds_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Character::_internal_accumulated_level_persistence_reset_timer_seconds() const {
  return accumulated_level_persistence_reset_timer_seconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Character::accumulated_level_persistence_reset_timer_seconds() const {
  // @@protoc_insertion_point(field_get:OakSave.Character.accumulated_level_persistence_reset_timer_seconds)
  return _internal_accumulated_level_persistence_reset_timer_seconds();
}
inline void Character::_internal_set_accumulated_level_persistence_reset_timer_seconds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  accumulated_level_persistence_reset_timer_seconds_ = value;
}
inline void Character::set_accumulated_level_persistence_reset_timer_seconds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_accumulated_level_persistence_reset_timer_seconds(value);
  // @@protoc_insertion_point(field_set:OakSave.Character.accumulated_level_persistence_reset_timer_seconds)
}

// uint32 mayhem_level = 49;
inline void Character::clear_mayhem_level() {
  mayhem_level_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Character::_internal_mayhem_level() const {
  return mayhem_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Character::mayhem_level() const {
  // @@protoc_insertion_point(field_get:OakSave.Character.mayhem_level)
  return _internal_mayhem_level();
}
inline void Character::_internal_set_mayhem_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  mayhem_level_ = value;
}
inline void Character::set_mayhem_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mayhem_level(value);
  // @@protoc_insertion_point(field_set:OakSave.Character.mayhem_level)
}

// .OakSave.GbxZoneMapFODSaveGameData gbx_zone_map_fod_save_game_data = 50;
inline bool Character::_internal_has_gbx_zone_map_fod_save_game_data() const {
  return this != internal_default_instance() && gbx_zone_map_fod_save_game_data_ != nullptr;
}
inline bool Character::has_gbx_zone_map_fod_save_game_data() const {
  return _internal_has_gbx_zone_map_fod_save_game_data();
}
inline void Character::clear_gbx_zone_map_fod_save_game_data() {
  if (GetArena() == nullptr && gbx_zone_map_fod_save_game_data_ != nullptr) {
    delete gbx_zone_map_fod_save_game_data_;
  }
  gbx_zone_map_fod_save_game_data_ = nullptr;
}
inline const ::OakSave::GbxZoneMapFODSaveGameData& Character::_internal_gbx_zone_map_fod_save_game_data() const {
  const ::OakSave::GbxZoneMapFODSaveGameData* p = gbx_zone_map_fod_save_game_data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::OakSave::GbxZoneMapFODSaveGameData*>(
      &::OakSave::_GbxZoneMapFODSaveGameData_default_instance_);
}
inline const ::OakSave::GbxZoneMapFODSaveGameData& Character::gbx_zone_map_fod_save_game_data() const {
  // @@protoc_insertion_point(field_get:OakSave.Character.gbx_zone_map_fod_save_game_data)
  return _internal_gbx_zone_map_fod_save_game_data();
}
inline void Character::unsafe_arena_set_allocated_gbx_zone_map_fod_save_game_data(
    ::OakSave::GbxZoneMapFODSaveGameData* gbx_zone_map_fod_save_game_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gbx_zone_map_fod_save_game_data_);
  }
  gbx_zone_map_fod_save_game_data_ = gbx_zone_map_fod_save_game_data;
  if (gbx_zone_map_fod_save_game_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.Character.gbx_zone_map_fod_save_game_data)
}
inline ::OakSave::GbxZoneMapFODSaveGameData* Character::release_gbx_zone_map_fod_save_game_data() {
  auto temp = unsafe_arena_release_gbx_zone_map_fod_save_game_data();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::OakSave::GbxZoneMapFODSaveGameData* Character::unsafe_arena_release_gbx_zone_map_fod_save_game_data() {
  // @@protoc_insertion_point(field_release:OakSave.Character.gbx_zone_map_fod_save_game_data)
  
  ::OakSave::GbxZoneMapFODSaveGameData* temp = gbx_zone_map_fod_save_game_data_;
  gbx_zone_map_fod_save_game_data_ = nullptr;
  return temp;
}
inline ::OakSave::GbxZoneMapFODSaveGameData* Character::_internal_mutable_gbx_zone_map_fod_save_game_data() {
  
  if (gbx_zone_map_fod_save_game_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::OakSave::GbxZoneMapFODSaveGameData>(GetArena());
    gbx_zone_map_fod_save_game_data_ = p;
  }
  return gbx_zone_map_fod_save_game_data_;
}
inline ::OakSave::GbxZoneMapFODSaveGameData* Character::mutable_gbx_zone_map_fod_save_game_data() {
  // @@protoc_insertion_point(field_mutable:OakSave.Character.gbx_zone_map_fod_save_game_data)
  return _internal_mutable_gbx_zone_map_fod_save_game_data();
}
inline void Character::set_allocated_gbx_zone_map_fod_save_game_data(::OakSave::GbxZoneMapFODSaveGameData* gbx_zone_map_fod_save_game_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete gbx_zone_map_fod_save_game_data_;
  }
  if (gbx_zone_map_fod_save_game_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(gbx_zone_map_fod_save_game_data);
    if (message_arena != submessage_arena) {
      gbx_zone_map_fod_save_game_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gbx_zone_map_fod_save_game_data, submessage_arena);
    }
    
  } else {
    
  }
  gbx_zone_map_fod_save_game_data_ = gbx_zone_map_fod_save_game_data;
  // @@protoc_insertion_point(field_set_allocated:OakSave.Character.gbx_zone_map_fod_save_game_data)
}

// repeated .OakSave.ActiveFastTravelSaveData active_or_blacklisted_travel_stations = 51;
inline int Character::_internal_active_or_blacklisted_travel_stations_size() const {
  return active_or_blacklisted_travel_stations_.size();
}
inline int Character::active_or_blacklisted_travel_stations_size() const {
  return _internal_active_or_blacklisted_travel_stations_size();
}
inline void Character::clear_active_or_blacklisted_travel_stations() {
  active_or_blacklisted_travel_stations_.Clear();
}
inline ::OakSave::ActiveFastTravelSaveData* Character::mutable_active_or_blacklisted_travel_stations(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.Character.active_or_blacklisted_travel_stations)
  return active_or_blacklisted_travel_stations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::ActiveFastTravelSaveData >*
Character::mutable_active_or_blacklisted_travel_stations() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.Character.active_or_blacklisted_travel_stations)
  return &active_or_blacklisted_travel_stations_;
}
inline const ::OakSave::ActiveFastTravelSaveData& Character::_internal_active_or_blacklisted_travel_stations(int index) const {
  return active_or_blacklisted_travel_stations_.Get(index);
}
inline const ::OakSave::ActiveFastTravelSaveData& Character::active_or_blacklisted_travel_stations(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.Character.active_or_blacklisted_travel_stations)
  return _internal_active_or_blacklisted_travel_stations(index);
}
inline ::OakSave::ActiveFastTravelSaveData* Character::_internal_add_active_or_blacklisted_travel_stations() {
  return active_or_blacklisted_travel_stations_.Add();
}
inline ::OakSave::ActiveFastTravelSaveData* Character::add_active_or_blacklisted_travel_stations() {
  // @@protoc_insertion_point(field_add:OakSave.Character.active_or_blacklisted_travel_stations)
  return _internal_add_active_or_blacklisted_travel_stations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::ActiveFastTravelSaveData >&
Character::active_or_blacklisted_travel_stations() const {
  // @@protoc_insertion_point(field_list:OakSave.Character.active_or_blacklisted_travel_stations)
  return active_or_blacklisted_travel_stations_;
}

// repeated string last_active_travel_station_for_playthrough = 52;
inline int Character::_internal_last_active_travel_station_for_playthrough_size() const {
  return last_active_travel_station_for_playthrough_.size();
}
inline int Character::last_active_travel_station_for_playthrough_size() const {
  return _internal_last_active_travel_station_for_playthrough_size();
}
inline void Character::clear_last_active_travel_station_for_playthrough() {
  last_active_travel_station_for_playthrough_.Clear();
}
inline std::string* Character::add_last_active_travel_station_for_playthrough() {
  // @@protoc_insertion_point(field_add_mutable:OakSave.Character.last_active_travel_station_for_playthrough)
  return _internal_add_last_active_travel_station_for_playthrough();
}
inline const std::string& Character::_internal_last_active_travel_station_for_playthrough(int index) const {
  return last_active_travel_station_for_playthrough_.Get(index);
}
inline const std::string& Character::last_active_travel_station_for_playthrough(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.Character.last_active_travel_station_for_playthrough)
  return _internal_last_active_travel_station_for_playthrough(index);
}
inline std::string* Character::mutable_last_active_travel_station_for_playthrough(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.Character.last_active_travel_station_for_playthrough)
  return last_active_travel_station_for_playthrough_.Mutable(index);
}
inline void Character::set_last_active_travel_station_for_playthrough(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:OakSave.Character.last_active_travel_station_for_playthrough)
  last_active_travel_station_for_playthrough_.Mutable(index)->assign(value);
}
inline void Character::set_last_active_travel_station_for_playthrough(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:OakSave.Character.last_active_travel_station_for_playthrough)
  last_active_travel_station_for_playthrough_.Mutable(index)->assign(std::move(value));
}
inline void Character::set_last_active_travel_station_for_playthrough(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  last_active_travel_station_for_playthrough_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:OakSave.Character.last_active_travel_station_for_playthrough)
}
inline void Character::set_last_active_travel_station_for_playthrough(int index, const char* value, size_t size) {
  last_active_travel_station_for_playthrough_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:OakSave.Character.last_active_travel_station_for_playthrough)
}
inline std::string* Character::_internal_add_last_active_travel_station_for_playthrough() {
  return last_active_travel_station_for_playthrough_.Add();
}
inline void Character::add_last_active_travel_station_for_playthrough(const std::string& value) {
  last_active_travel_station_for_playthrough_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:OakSave.Character.last_active_travel_station_for_playthrough)
}
inline void Character::add_last_active_travel_station_for_playthrough(std::string&& value) {
  last_active_travel_station_for_playthrough_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:OakSave.Character.last_active_travel_station_for_playthrough)
}
inline void Character::add_last_active_travel_station_for_playthrough(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  last_active_travel_station_for_playthrough_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:OakSave.Character.last_active_travel_station_for_playthrough)
}
inline void Character::add_last_active_travel_station_for_playthrough(const char* value, size_t size) {
  last_active_travel_station_for_playthrough_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:OakSave.Character.last_active_travel_station_for_playthrough)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Character::last_active_travel_station_for_playthrough() const {
  // @@protoc_insertion_point(field_list:OakSave.Character.last_active_travel_station_for_playthrough)
  return last_active_travel_station_for_playthrough_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Character::mutable_last_active_travel_station_for_playthrough() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.Character.last_active_travel_station_for_playthrough)
  return &last_active_travel_station_for_playthrough_;
}

// repeated .OakSave.GameStateSaveData game_state_save_data_for_playthrough = 53;
inline int Character::_internal_game_state_save_data_for_playthrough_size() const {
  return game_state_save_data_for_playthrough_.size();
}
inline int Character::game_state_save_data_for_playthrough_size() const {
  return _internal_game_state_save_data_for_playthrough_size();
}
inline void Character::clear_game_state_save_data_for_playthrough() {
  game_state_save_data_for_playthrough_.Clear();
}
inline ::OakSave::GameStateSaveData* Character::mutable_game_state_save_data_for_playthrough(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.Character.game_state_save_data_for_playthrough)
  return game_state_save_data_for_playthrough_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::GameStateSaveData >*
Character::mutable_game_state_save_data_for_playthrough() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.Character.game_state_save_data_for_playthrough)
  return &game_state_save_data_for_playthrough_;
}
inline const ::OakSave::GameStateSaveData& Character::_internal_game_state_save_data_for_playthrough(int index) const {
  return game_state_save_data_for_playthrough_.Get(index);
}
inline const ::OakSave::GameStateSaveData& Character::game_state_save_data_for_playthrough(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.Character.game_state_save_data_for_playthrough)
  return _internal_game_state_save_data_for_playthrough(index);
}
inline ::OakSave::GameStateSaveData* Character::_internal_add_game_state_save_data_for_playthrough() {
  return game_state_save_data_for_playthrough_.Add();
}
inline ::OakSave::GameStateSaveData* Character::add_game_state_save_data_for_playthrough() {
  // @@protoc_insertion_point(field_add:OakSave.Character.game_state_save_data_for_playthrough)
  return _internal_add_game_state_save_data_for_playthrough();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::GameStateSaveData >&
Character::game_state_save_data_for_playthrough() const {
  // @@protoc_insertion_point(field_list:OakSave.Character.game_state_save_data_for_playthrough)
  return game_state_save_data_for_playthrough_;
}

// repeated .OakSave.RegisteredDownloadableEntitlements registered_downloadable_entitlements = 54;
inline int Character::_internal_registered_downloadable_entitlements_size() const {
  return registered_downloadable_entitlements_.size();
}
inline int Character::registered_downloadable_entitlements_size() const {
  return _internal_registered_downloadable_entitlements_size();
}
inline ::OakSave::RegisteredDownloadableEntitlements* Character::mutable_registered_downloadable_entitlements(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.Character.registered_downloadable_entitlements)
  return registered_downloadable_entitlements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::RegisteredDownloadableEntitlements >*
Character::mutable_registered_downloadable_entitlements() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.Character.registered_downloadable_entitlements)
  return &registered_downloadable_entitlements_;
}
inline const ::OakSave::RegisteredDownloadableEntitlements& Character::_internal_registered_downloadable_entitlements(int index) const {
  return registered_downloadable_entitlements_.Get(index);
}
inline const ::OakSave::RegisteredDownloadableEntitlements& Character::registered_downloadable_entitlements(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.Character.registered_downloadable_entitlements)
  return _internal_registered_downloadable_entitlements(index);
}
inline ::OakSave::RegisteredDownloadableEntitlements* Character::_internal_add_registered_downloadable_entitlements() {
  return registered_downloadable_entitlements_.Add();
}
inline ::OakSave::RegisteredDownloadableEntitlements* Character::add_registered_downloadable_entitlements() {
  // @@protoc_insertion_point(field_add:OakSave.Character.registered_downloadable_entitlements)
  return _internal_add_registered_downloadable_entitlements();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::RegisteredDownloadableEntitlements >&
Character::registered_downloadable_entitlements() const {
  // @@protoc_insertion_point(field_list:OakSave.Character.registered_downloadable_entitlements)
  return registered_downloadable_entitlements_;
}

// repeated .OakSave.PlaythroughActiveFastTravelSaveData active_travel_stations_for_playthrough = 55;
inline int Character::_internal_active_travel_stations_for_playthrough_size() const {
  return active_travel_stations_for_playthrough_.size();
}
inline int Character::active_travel_stations_for_playthrough_size() const {
  return _internal_active_travel_stations_for_playthrough_size();
}
inline void Character::clear_active_travel_stations_for_playthrough() {
  active_travel_stations_for_playthrough_.Clear();
}
inline ::OakSave::PlaythroughActiveFastTravelSaveData* Character::mutable_active_travel_stations_for_playthrough(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.Character.active_travel_stations_for_playthrough)
  return active_travel_stations_for_playthrough_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::PlaythroughActiveFastTravelSaveData >*
Character::mutable_active_travel_stations_for_playthrough() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.Character.active_travel_stations_for_playthrough)
  return &active_travel_stations_for_playthrough_;
}
inline const ::OakSave::PlaythroughActiveFastTravelSaveData& Character::_internal_active_travel_stations_for_playthrough(int index) const {
  return active_travel_stations_for_playthrough_.Get(index);
}
inline const ::OakSave::PlaythroughActiveFastTravelSaveData& Character::active_travel_stations_for_playthrough(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.Character.active_travel_stations_for_playthrough)
  return _internal_active_travel_stations_for_playthrough(index);
}
inline ::OakSave::PlaythroughActiveFastTravelSaveData* Character::_internal_add_active_travel_stations_for_playthrough() {
  return active_travel_stations_for_playthrough_.Add();
}
inline ::OakSave::PlaythroughActiveFastTravelSaveData* Character::add_active_travel_stations_for_playthrough() {
  // @@protoc_insertion_point(field_add:OakSave.Character.active_travel_stations_for_playthrough)
  return _internal_add_active_travel_stations_for_playthrough();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::PlaythroughActiveFastTravelSaveData >&
Character::active_travel_stations_for_playthrough() const {
  // @@protoc_insertion_point(field_list:OakSave.Character.active_travel_stations_for_playthrough)
  return active_travel_stations_for_playthrough_;
}

// string save_game_guid = 56;
inline void Character::clear_save_game_guid() {
  save_game_guid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Character::save_game_guid() const {
  // @@protoc_insertion_point(field_get:OakSave.Character.save_game_guid)
  return _internal_save_game_guid();
}
inline void Character::set_save_game_guid(const std::string& value) {
  _internal_set_save_game_guid(value);
  // @@protoc_insertion_point(field_set:OakSave.Character.save_game_guid)
}
inline std::string* Character::mutable_save_game_guid() {
  // @@protoc_insertion_point(field_mutable:OakSave.Character.save_game_guid)
  return _internal_mutable_save_game_guid();
}
inline const std::string& Character::_internal_save_game_guid() const {
  return save_game_guid_.Get();
}
inline void Character::_internal_set_save_game_guid(const std::string& value) {
  
  save_game_guid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Character::set_save_game_guid(std::string&& value) {
  
  save_game_guid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.Character.save_game_guid)
}
inline void Character::set_save_game_guid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  save_game_guid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.Character.save_game_guid)
}
inline void Character::set_save_game_guid(const char* value,
    size_t size) {
  
  save_game_guid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.Character.save_game_guid)
}
inline std::string* Character::_internal_mutable_save_game_guid() {
  
  return save_game_guid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Character::release_save_game_guid() {
  // @@protoc_insertion_point(field_release:OakSave.Character.save_game_guid)
  return save_game_guid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Character::set_allocated_save_game_guid(std::string* save_game_guid) {
  if (save_game_guid != nullptr) {
    
  } else {
    
  }
  save_game_guid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), save_game_guid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.Character.save_game_guid)
}
inline std::string* Character::unsafe_arena_release_save_game_guid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.Character.save_game_guid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return save_game_guid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Character::unsafe_arena_set_allocated_save_game_guid(
    std::string* save_game_guid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (save_game_guid != nullptr) {
    
  } else {
    
  }
  save_game_guid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      save_game_guid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.Character.save_game_guid)
}

// .OakSave.GuardianRankCharacterSaveGameData guardian_rank_character_data = 57;
inline bool Character::_internal_has_guardian_rank_character_data() const {
  return this != internal_default_instance() && guardian_rank_character_data_ != nullptr;
}
inline bool Character::has_guardian_rank_character_data() const {
  return _internal_has_guardian_rank_character_data();
}
inline void Character::clear_guardian_rank_character_data() {
  if (GetArena() == nullptr && guardian_rank_character_data_ != nullptr) {
    delete guardian_rank_character_data_;
  }
  guardian_rank_character_data_ = nullptr;
}
inline const ::OakSave::GuardianRankCharacterSaveGameData& Character::_internal_guardian_rank_character_data() const {
  const ::OakSave::GuardianRankCharacterSaveGameData* p = guardian_rank_character_data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::OakSave::GuardianRankCharacterSaveGameData*>(
      &::OakSave::_GuardianRankCharacterSaveGameData_default_instance_);
}
inline const ::OakSave::GuardianRankCharacterSaveGameData& Character::guardian_rank_character_data() const {
  // @@protoc_insertion_point(field_get:OakSave.Character.guardian_rank_character_data)
  return _internal_guardian_rank_character_data();
}
inline void Character::unsafe_arena_set_allocated_guardian_rank_character_data(
    ::OakSave::GuardianRankCharacterSaveGameData* guardian_rank_character_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(guardian_rank_character_data_);
  }
  guardian_rank_character_data_ = guardian_rank_character_data;
  if (guardian_rank_character_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.Character.guardian_rank_character_data)
}
inline ::OakSave::GuardianRankCharacterSaveGameData* Character::release_guardian_rank_character_data() {
  auto temp = unsafe_arena_release_guardian_rank_character_data();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::OakSave::GuardianRankCharacterSaveGameData* Character::unsafe_arena_release_guardian_rank_character_data() {
  // @@protoc_insertion_point(field_release:OakSave.Character.guardian_rank_character_data)
  
  ::OakSave::GuardianRankCharacterSaveGameData* temp = guardian_rank_character_data_;
  guardian_rank_character_data_ = nullptr;
  return temp;
}
inline ::OakSave::GuardianRankCharacterSaveGameData* Character::_internal_mutable_guardian_rank_character_data() {
  
  if (guardian_rank_character_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::OakSave::GuardianRankCharacterSaveGameData>(GetArena());
    guardian_rank_character_data_ = p;
  }
  return guardian_rank_character_data_;
}
inline ::OakSave::GuardianRankCharacterSaveGameData* Character::mutable_guardian_rank_character_data() {
  // @@protoc_insertion_point(field_mutable:OakSave.Character.guardian_rank_character_data)
  return _internal_mutable_guardian_rank_character_data();
}
inline void Character::set_allocated_guardian_rank_character_data(::OakSave::GuardianRankCharacterSaveGameData* guardian_rank_character_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete guardian_rank_character_data_;
  }
  if (guardian_rank_character_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(guardian_rank_character_data);
    if (message_arena != submessage_arena) {
      guardian_rank_character_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, guardian_rank_character_data, submessage_arena);
    }
    
  } else {
    
  }
  guardian_rank_character_data_ = guardian_rank_character_data;
  // @@protoc_insertion_point(field_set_allocated:OakSave.Character.guardian_rank_character_data)
}

// bool optional_objective_reward_fixup_applied = 58;
inline void Character::clear_optional_objective_reward_fixup_applied() {
  optional_objective_reward_fixup_applied_ = false;
}
inline bool Character::_internal_optional_objective_reward_fixup_applied() const {
  return optional_objective_reward_fixup_applied_;
}
inline bool Character::optional_objective_reward_fixup_applied() const {
  // @@protoc_insertion_point(field_get:OakSave.Character.optional_objective_reward_fixup_applied)
  return _internal_optional_objective_reward_fixup_applied();
}
inline void Character::_internal_set_optional_objective_reward_fixup_applied(bool value) {
  
  optional_objective_reward_fixup_applied_ = value;
}
inline void Character::set_optional_objective_reward_fixup_applied(bool value) {
  _internal_set_optional_objective_reward_fixup_applied(value);
  // @@protoc_insertion_point(field_set:OakSave.Character.optional_objective_reward_fixup_applied)
}

// bool vehicle_part_rewards_fixup_applied = 59;
inline void Character::clear_vehicle_part_rewards_fixup_applied() {
  vehicle_part_rewards_fixup_applied_ = false;
}
inline bool Character::_internal_vehicle_part_rewards_fixup_applied() const {
  return vehicle_part_rewards_fixup_applied_;
}
inline bool Character::vehicle_part_rewards_fixup_applied() const {
  // @@protoc_insertion_point(field_get:OakSave.Character.vehicle_part_rewards_fixup_applied)
  return _internal_vehicle_part_rewards_fixup_applied();
}
inline void Character::_internal_set_vehicle_part_rewards_fixup_applied(bool value) {
  
  vehicle_part_rewards_fixup_applied_ = value;
}
inline void Character::set_vehicle_part_rewards_fixup_applied(bool value) {
  _internal_set_vehicle_part_rewards_fixup_applied(value);
  // @@protoc_insertion_point(field_set:OakSave.Character.vehicle_part_rewards_fixup_applied)
}

// uint32 last_active_league = 60;
inline void Character::clear_last_active_league() {
  last_active_league_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Character::_internal_last_active_league() const {
  return last_active_league_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Character::last_active_league() const {
  // @@protoc_insertion_point(field_get:OakSave.Character.last_active_league)
  return _internal_last_active_league();
}
inline void Character::_internal_set_last_active_league(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  last_active_league_ = value;
}
inline void Character::set_last_active_league(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_last_active_league(value);
  // @@protoc_insertion_point(field_set:OakSave.Character.last_active_league)
}

// uint32 last_active_league_instance = 61;
inline void Character::clear_last_active_league_instance() {
  last_active_league_instance_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Character::_internal_last_active_league_instance() const {
  return last_active_league_instance_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Character::last_active_league_instance() const {
  // @@protoc_insertion_point(field_get:OakSave.Character.last_active_league_instance)
  return _internal_last_active_league_instance();
}
inline void Character::_internal_set_last_active_league_instance(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  last_active_league_instance_ = value;
}
inline void Character::set_last_active_league_instance(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_last_active_league_instance(value);
  // @@protoc_insertion_point(field_set:OakSave.Character.last_active_league_instance)
}

// repeated .OakSave.Character.ActiveLeagueInstanceForEventEntry active_league_instance_for_event = 62;
inline int Character::_internal_active_league_instance_for_event_size() const {
  return active_league_instance_for_event_.size();
}
inline int Character::active_league_instance_for_event_size() const {
  return _internal_active_league_instance_for_event_size();
}
inline void Character::clear_active_league_instance_for_event() {
  active_league_instance_for_event_.Clear();
}
inline ::OakSave::Character_ActiveLeagueInstanceForEventEntry* Character::mutable_active_league_instance_for_event(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.Character.active_league_instance_for_event)
  return active_league_instance_for_event_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::Character_ActiveLeagueInstanceForEventEntry >*
Character::mutable_active_league_instance_for_event() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.Character.active_league_instance_for_event)
  return &active_league_instance_for_event_;
}
inline const ::OakSave::Character_ActiveLeagueInstanceForEventEntry& Character::_internal_active_league_instance_for_event(int index) const {
  return active_league_instance_for_event_.Get(index);
}
inline const ::OakSave::Character_ActiveLeagueInstanceForEventEntry& Character::active_league_instance_for_event(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.Character.active_league_instance_for_event)
  return _internal_active_league_instance_for_event(index);
}
inline ::OakSave::Character_ActiveLeagueInstanceForEventEntry* Character::_internal_add_active_league_instance_for_event() {
  return active_league_instance_for_event_.Add();
}
inline ::OakSave::Character_ActiveLeagueInstanceForEventEntry* Character::add_active_league_instance_for_event() {
  // @@protoc_insertion_point(field_add:OakSave.Character.active_league_instance_for_event)
  return _internal_add_active_league_instance_for_event();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::Character_ActiveLeagueInstanceForEventEntry >&
Character::active_league_instance_for_event() const {
  // @@protoc_insertion_point(field_list:OakSave.Character.active_league_instance_for_event)
  return active_league_instance_for_event_;
}

// bool levelled_save_vehicle_part_rewards_fixup_applied = 63;
inline void Character::clear_levelled_save_vehicle_part_rewards_fixup_applied() {
  levelled_save_vehicle_part_rewards_fixup_applied_ = false;
}
inline bool Character::_internal_levelled_save_vehicle_part_rewards_fixup_applied() const {
  return levelled_save_vehicle_part_rewards_fixup_applied_;
}
inline bool Character::levelled_save_vehicle_part_rewards_fixup_applied() const {
  // @@protoc_insertion_point(field_get:OakSave.Character.levelled_save_vehicle_part_rewards_fixup_applied)
  return _internal_levelled_save_vehicle_part_rewards_fixup_applied();
}
inline void Character::_internal_set_levelled_save_vehicle_part_rewards_fixup_applied(bool value) {
  
  levelled_save_vehicle_part_rewards_fixup_applied_ = value;
}
inline void Character::set_levelled_save_vehicle_part_rewards_fixup_applied(bool value) {
  _internal_set_levelled_save_vehicle_part_rewards_fixup_applied(value);
  // @@protoc_insertion_point(field_set:OakSave.Character.levelled_save_vehicle_part_rewards_fixup_applied)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace OakSave

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::OakSave::MissionStatusPlayerSaveGameData_MissionState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::OakSave::MissionStatusPlayerSaveGameData_MissionState>() {
  return ::OakSave::MissionStatusPlayerSaveGameData_MissionState_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_OakSave_2eproto
