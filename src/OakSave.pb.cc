// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OakSave.proto

#include "OakSave.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_OakSave_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActiveFastTravelSaveData_OakSave_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakSave_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChallengeCategoryProgressSaveData_OakSave_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakShared_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ChallengeSaveGameData_OakShared_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakSave_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Character_ActiveLeagueInstanceForEventEntry_OakSave_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakSave_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Character_NicknameMappingsEntry_OakSave_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakSave_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CrewQuartersDecorationSaveData_OakSave_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakSave_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CrewQuartersGunRackItemSaveData_OakSave_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakSave_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CrewQuartersGunRackSaveData_OakSave_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakSave_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CrewQuartersSaveData_OakSave_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakSave_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CustomPlayerColorSaveGameData_OakSave_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakSave_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DiscoveredAreaInfo_OakSave_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakSave_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DiscoveredLevelInfo_OakSave_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakSave_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DiscoverySaveData_OakSave_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakSave_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EchoLogSaveGameData_OakSave_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakSave_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EquippedInventorySaveGameData_OakSave_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakShared_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameStatSaveGameData_OakShared_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakSave_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameStateSaveData_OakSave_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakSave_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GbxZoneMapFODSaveGameData_OakSave_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakSave_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GbxZoneMapFODSavedLevelData_OakSave_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakSave_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GuardianRankCharacterSaveGameData_OakSave_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakSave_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GuardianRankPerkCharacterSaveGameData_OakSave_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakSave_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GuardianRankRewardCharacterSaveGameData_OakSave_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakSave_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GuardianRankSaveGameData_OakSave_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakSave_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InventoryBalanceStateInitializationData_OakSave_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakShared_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InventoryCategorySaveData_OakShared_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakSave_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LevelPersistence_Actor_SaveGameData_OakSave_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakSave_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LevelPersistence_Level_SaveGameData_OakSave_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakSave_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MapIDData_OakSave_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakSave_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MissionPlaythroughSaveGameData_OakSave_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakSave_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MissionStatusPlayerSaveGameData_OakSave_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakSave_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OakAbilitySlotSaveGameData_OakSave_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakSave_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OakAbilityTreeItemSaveGameData_OakSave_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakSave_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OakActionAbilityAugmentConfigurationSaveGameData_OakSave_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakSave_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OakActionAbilityAugmentSaveGameData_OakSave_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakSave_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OakCARMenuVehicleConfigSaveData_OakSave_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakSave_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OakInventoryItemSaveGameData_OakSave_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakSave_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_OakPlayerAbilitySaveGameData_OakSave_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakSave_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OakPlayerCharacterAugmentSaveGameData_OakSave_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakSave_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OakPlayerCharacterSlotSaveGameData_OakSave_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakShared_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OakSDUSaveGameData_OakShared_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakSave_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlanetCycleInfo_OakSave_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakSave_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerClassSaveGameData_OakSave_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakSave_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlaythroughActiveFastTravelSaveData_OakSave_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakSave_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegionSaveGameData_OakSave_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakShared_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RegisteredDownloadableEntitlements_OakShared_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakSave_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResourcePoolSavegameData_OakSave_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakSave_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TimeOfDaySaveGameData_OakSave_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakSave_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UITrackingSaveGameData_OakSave_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakShared_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vec3_OakShared_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakSave_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VehicleUnlockedSaveGameData_OakSave_2eproto;
namespace OakSave {
class PlayerClassSaveGameDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerClassSaveGameData> _instance;
} _PlayerClassSaveGameData_default_instance_;
class ResourcePoolSavegameDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResourcePoolSavegameData> _instance;
} _ResourcePoolSavegameData_default_instance_;
class RegionSaveGameDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegionSaveGameData> _instance;
} _RegionSaveGameData_default_instance_;
class InventoryBalanceStateInitializationDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InventoryBalanceStateInitializationData> _instance;
} _InventoryBalanceStateInitializationData_default_instance_;
class OakInventoryItemSaveGameDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OakInventoryItemSaveGameData> _instance;
} _OakInventoryItemSaveGameData_default_instance_;
class EquippedInventorySaveGameDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EquippedInventorySaveGameData> _instance;
} _EquippedInventorySaveGameData_default_instance_;
class OakAbilityTreeItemSaveGameDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OakAbilityTreeItemSaveGameData> _instance;
} _OakAbilityTreeItemSaveGameData_default_instance_;
class OakAbilitySlotSaveGameDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OakAbilitySlotSaveGameData> _instance;
} _OakAbilitySlotSaveGameData_default_instance_;
class OakActionAbilityAugmentSaveGameDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OakActionAbilityAugmentSaveGameData> _instance;
} _OakActionAbilityAugmentSaveGameData_default_instance_;
class OakActionAbilityAugmentConfigurationSaveGameDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OakActionAbilityAugmentConfigurationSaveGameData> _instance;
} _OakActionAbilityAugmentConfigurationSaveGameData_default_instance_;
class OakPlayerAbilitySaveGameDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OakPlayerAbilitySaveGameData> _instance;
} _OakPlayerAbilitySaveGameData_default_instance_;
class MissionStatusPlayerSaveGameDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MissionStatusPlayerSaveGameData> _instance;
} _MissionStatusPlayerSaveGameData_default_instance_;
class MissionPlaythroughSaveGameDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MissionPlaythroughSaveGameData> _instance;
} _MissionPlaythroughSaveGameData_default_instance_;
class ActiveFastTravelSaveDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActiveFastTravelSaveData> _instance;
} _ActiveFastTravelSaveData_default_instance_;
class PlaythroughActiveFastTravelSaveDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlaythroughActiveFastTravelSaveData> _instance;
} _PlaythroughActiveFastTravelSaveData_default_instance_;
class DiscoveredAreaInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DiscoveredAreaInfo> _instance;
} _DiscoveredAreaInfo_default_instance_;
class DiscoveredLevelInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DiscoveredLevelInfo> _instance;
} _DiscoveredLevelInfo_default_instance_;
class DiscoveredPlanetInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DiscoveredPlanetInfo> _instance;
} _DiscoveredPlanetInfo_default_instance_;
class DiscoverySaveDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DiscoverySaveData> _instance;
} _DiscoverySaveData_default_instance_;
class VehicleUnlockedSaveGameDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VehicleUnlockedSaveGameData> _instance;
} _VehicleUnlockedSaveGameData_default_instance_;
class OakCARMenuVehicleConfigSaveDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OakCARMenuVehicleConfigSaveData> _instance;
} _OakCARMenuVehicleConfigSaveData_default_instance_;
class CustomPlayerColorSaveGameDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CustomPlayerColorSaveGameData> _instance;
} _CustomPlayerColorSaveGameData_default_instance_;
class GuardianRankSaveGameDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GuardianRankSaveGameData> _instance;
} _GuardianRankSaveGameData_default_instance_;
class GuardianRankRewardCharacterSaveGameDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GuardianRankRewardCharacterSaveGameData> _instance;
} _GuardianRankRewardCharacterSaveGameData_default_instance_;
class GuardianRankPerkCharacterSaveGameDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GuardianRankPerkCharacterSaveGameData> _instance;
} _GuardianRankPerkCharacterSaveGameData_default_instance_;
class GuardianRankCharacterSaveGameDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GuardianRankCharacterSaveGameData> _instance;
} _GuardianRankCharacterSaveGameData_default_instance_;
class CrewQuartersDecorationSaveDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CrewQuartersDecorationSaveData> _instance;
} _CrewQuartersDecorationSaveData_default_instance_;
class CrewQuartersSaveDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CrewQuartersSaveData> _instance;
} _CrewQuartersSaveData_default_instance_;
class CrewQuartersGunRackItemSaveDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CrewQuartersGunRackItemSaveData> _instance;
} _CrewQuartersGunRackItemSaveData_default_instance_;
class CrewQuartersGunRackSaveDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CrewQuartersGunRackSaveData> _instance;
} _CrewQuartersGunRackSaveData_default_instance_;
class EchoLogSaveGameDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EchoLogSaveGameData> _instance;
} _EchoLogSaveGameData_default_instance_;
class MapIDDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapIDData> _instance;
} _MapIDData_default_instance_;
class GameStateSaveDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameStateSaveData> _instance;
} _GameStateSaveData_default_instance_;
class ChallengeCategoryProgressSaveDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChallengeCategoryProgressSaveData> _instance;
} _ChallengeCategoryProgressSaveData_default_instance_;
class OakPlayerCharacterAugmentSaveGameDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OakPlayerCharacterAugmentSaveGameData> _instance;
} _OakPlayerCharacterAugmentSaveGameData_default_instance_;
class OakPlayerCharacterSlotSaveGameDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OakPlayerCharacterSlotSaveGameData> _instance;
} _OakPlayerCharacterSlotSaveGameData_default_instance_;
class UITrackingSaveGameDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UITrackingSaveGameData> _instance;
} _UITrackingSaveGameData_default_instance_;
class PlanetCycleInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlanetCycleInfo> _instance;
} _PlanetCycleInfo_default_instance_;
class TimeOfDaySaveGameDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TimeOfDaySaveGameData> _instance;
} _TimeOfDaySaveGameData_default_instance_;
class LevelPersistence_Actor_SaveGameDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LevelPersistence_Actor_SaveGameData> _instance;
} _LevelPersistence_Actor_SaveGameData_default_instance_;
class LevelPersistence_Level_SaveGameDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LevelPersistence_Level_SaveGameData> _instance;
} _LevelPersistence_Level_SaveGameData_default_instance_;
class GbxZoneMapFODSavedLevelDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GbxZoneMapFODSavedLevelData> _instance;
} _GbxZoneMapFODSavedLevelData_default_instance_;
class GbxZoneMapFODSaveGameDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GbxZoneMapFODSaveGameData> _instance;
} _GbxZoneMapFODSaveGameData_default_instance_;
class Character_NicknameMappingsEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Character_NicknameMappingsEntry> _instance;
} _Character_NicknameMappingsEntry_default_instance_;
class Character_ActiveLeagueInstanceForEventEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Character_ActiveLeagueInstanceForEventEntry> _instance;
} _Character_ActiveLeagueInstanceForEventEntry_default_instance_;
class CharacterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Character> _instance;
} _Character_default_instance_;
}  // namespace OakSave
static void InitDefaultsscc_info_ActiveFastTravelSaveData_OakSave_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_ActiveFastTravelSaveData_default_instance_;
    new (ptr) ::OakSave::ActiveFastTravelSaveData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::ActiveFastTravelSaveData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActiveFastTravelSaveData_OakSave_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ActiveFastTravelSaveData_OakSave_2eproto}, {}};

static void InitDefaultsscc_info_ChallengeCategoryProgressSaveData_OakSave_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_ChallengeCategoryProgressSaveData_default_instance_;
    new (ptr) ::OakSave::ChallengeCategoryProgressSaveData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::ChallengeCategoryProgressSaveData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChallengeCategoryProgressSaveData_OakSave_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChallengeCategoryProgressSaveData_OakSave_2eproto}, {}};

static void InitDefaultsscc_info_Character_OakSave_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_Character_default_instance_;
    new (ptr) ::OakSave::Character();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::Character::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<33> scc_info_Character_OakSave_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 33, 0, InitDefaultsscc_info_Character_OakSave_2eproto}, {
      &scc_info_PlayerClassSaveGameData_OakSave_2eproto.base,
      &scc_info_ResourcePoolSavegameData_OakSave_2eproto.base,
      &scc_info_RegionSaveGameData_OakSave_2eproto.base,
      &scc_info_GameStatSaveGameData_OakShared_2eproto.base,
      &scc_info_InventoryCategorySaveData_OakShared_2eproto.base,
      &scc_info_OakInventoryItemSaveGameData_OakSave_2eproto.base,
      &scc_info_EquippedInventorySaveGameData_OakSave_2eproto.base,
      &scc_info_OakPlayerAbilitySaveGameData_OakSave_2eproto.base,
      &scc_info_MissionPlaythroughSaveGameData_OakSave_2eproto.base,
      &scc_info_DiscoverySaveData_OakSave_2eproto.base,
      &scc_info_VehicleUnlockedSaveGameData_OakSave_2eproto.base,
      &scc_info_OakCARMenuVehicleConfigSaveData_OakSave_2eproto.base,
      &scc_info_ChallengeSaveGameData_OakShared_2eproto.base,
      &scc_info_OakSDUSaveGameData_OakShared_2eproto.base,
      &scc_info_CustomPlayerColorSaveGameData_OakSave_2eproto.base,
      &scc_info_GuardianRankSaveGameData_OakSave_2eproto.base,
      &scc_info_CrewQuartersSaveData_OakSave_2eproto.base,
      &scc_info_CrewQuartersGunRackSaveData_OakSave_2eproto.base,
      &scc_info_EchoLogSaveGameData_OakSave_2eproto.base,
      &scc_info_Character_NicknameMappingsEntry_OakSave_2eproto.base,
      &scc_info_MapIDData_OakSave_2eproto.base,
      &scc_info_ChallengeCategoryProgressSaveData_OakSave_2eproto.base,
      &scc_info_OakPlayerCharacterSlotSaveGameData_OakSave_2eproto.base,
      &scc_info_UITrackingSaveGameData_OakSave_2eproto.base,
      &scc_info_TimeOfDaySaveGameData_OakSave_2eproto.base,
      &scc_info_LevelPersistence_Level_SaveGameData_OakSave_2eproto.base,
      &scc_info_GbxZoneMapFODSaveGameData_OakSave_2eproto.base,
      &scc_info_ActiveFastTravelSaveData_OakSave_2eproto.base,
      &scc_info_GameStateSaveData_OakSave_2eproto.base,
      &scc_info_RegisteredDownloadableEntitlements_OakShared_2eproto.base,
      &scc_info_PlaythroughActiveFastTravelSaveData_OakSave_2eproto.base,
      &scc_info_GuardianRankCharacterSaveGameData_OakSave_2eproto.base,
      &scc_info_Character_ActiveLeagueInstanceForEventEntry_OakSave_2eproto.base,}};

static void InitDefaultsscc_info_Character_ActiveLeagueInstanceForEventEntry_OakSave_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_Character_ActiveLeagueInstanceForEventEntry_default_instance_;
    new (ptr) ::OakSave::Character_ActiveLeagueInstanceForEventEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::Character_ActiveLeagueInstanceForEventEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Character_ActiveLeagueInstanceForEventEntry_OakSave_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Character_ActiveLeagueInstanceForEventEntry_OakSave_2eproto}, {}};

static void InitDefaultsscc_info_Character_NicknameMappingsEntry_OakSave_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_Character_NicknameMappingsEntry_default_instance_;
    new (ptr) ::OakSave::Character_NicknameMappingsEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::Character_NicknameMappingsEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Character_NicknameMappingsEntry_OakSave_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Character_NicknameMappingsEntry_OakSave_2eproto}, {}};

static void InitDefaultsscc_info_CrewQuartersDecorationSaveData_OakSave_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_CrewQuartersDecorationSaveData_default_instance_;
    new (ptr) ::OakSave::CrewQuartersDecorationSaveData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::CrewQuartersDecorationSaveData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CrewQuartersDecorationSaveData_OakSave_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CrewQuartersDecorationSaveData_OakSave_2eproto}, {}};

static void InitDefaultsscc_info_CrewQuartersGunRackItemSaveData_OakSave_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_CrewQuartersGunRackItemSaveData_default_instance_;
    new (ptr) ::OakSave::CrewQuartersGunRackItemSaveData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::CrewQuartersGunRackItemSaveData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CrewQuartersGunRackItemSaveData_OakSave_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CrewQuartersGunRackItemSaveData_OakSave_2eproto}, {
      &scc_info_InventoryBalanceStateInitializationData_OakSave_2eproto.base,}};

static void InitDefaultsscc_info_CrewQuartersGunRackSaveData_OakSave_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_CrewQuartersGunRackSaveData_default_instance_;
    new (ptr) ::OakSave::CrewQuartersGunRackSaveData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::CrewQuartersGunRackSaveData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CrewQuartersGunRackSaveData_OakSave_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CrewQuartersGunRackSaveData_OakSave_2eproto}, {
      &scc_info_CrewQuartersGunRackItemSaveData_OakSave_2eproto.base,}};

static void InitDefaultsscc_info_CrewQuartersSaveData_OakSave_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_CrewQuartersSaveData_default_instance_;
    new (ptr) ::OakSave::CrewQuartersSaveData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::CrewQuartersSaveData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CrewQuartersSaveData_OakSave_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CrewQuartersSaveData_OakSave_2eproto}, {
      &scc_info_CrewQuartersDecorationSaveData_OakSave_2eproto.base,}};

static void InitDefaultsscc_info_CustomPlayerColorSaveGameData_OakSave_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_CustomPlayerColorSaveGameData_default_instance_;
    new (ptr) ::OakSave::CustomPlayerColorSaveGameData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::CustomPlayerColorSaveGameData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CustomPlayerColorSaveGameData_OakSave_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CustomPlayerColorSaveGameData_OakSave_2eproto}, {
      &scc_info_Vec3_OakShared_2eproto.base,}};

static void InitDefaultsscc_info_DiscoveredAreaInfo_OakSave_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_DiscoveredAreaInfo_default_instance_;
    new (ptr) ::OakSave::DiscoveredAreaInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::DiscoveredAreaInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DiscoveredAreaInfo_OakSave_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DiscoveredAreaInfo_OakSave_2eproto}, {}};

static void InitDefaultsscc_info_DiscoveredLevelInfo_OakSave_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_DiscoveredLevelInfo_default_instance_;
    new (ptr) ::OakSave::DiscoveredLevelInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::DiscoveredLevelInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DiscoveredLevelInfo_OakSave_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DiscoveredLevelInfo_OakSave_2eproto}, {
      &scc_info_DiscoveredAreaInfo_OakSave_2eproto.base,}};

static void InitDefaultsscc_info_DiscoveredPlanetInfo_OakSave_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_DiscoveredPlanetInfo_default_instance_;
    new (ptr) ::OakSave::DiscoveredPlanetInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::DiscoveredPlanetInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DiscoveredPlanetInfo_OakSave_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DiscoveredPlanetInfo_OakSave_2eproto}, {}};

static void InitDefaultsscc_info_DiscoverySaveData_OakSave_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_DiscoverySaveData_default_instance_;
    new (ptr) ::OakSave::DiscoverySaveData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::DiscoverySaveData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DiscoverySaveData_OakSave_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DiscoverySaveData_OakSave_2eproto}, {
      &scc_info_DiscoveredLevelInfo_OakSave_2eproto.base,}};

static void InitDefaultsscc_info_EchoLogSaveGameData_OakSave_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_EchoLogSaveGameData_default_instance_;
    new (ptr) ::OakSave::EchoLogSaveGameData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::EchoLogSaveGameData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EchoLogSaveGameData_OakSave_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EchoLogSaveGameData_OakSave_2eproto}, {}};

static void InitDefaultsscc_info_EquippedInventorySaveGameData_OakSave_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_EquippedInventorySaveGameData_default_instance_;
    new (ptr) ::OakSave::EquippedInventorySaveGameData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::EquippedInventorySaveGameData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EquippedInventorySaveGameData_OakSave_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EquippedInventorySaveGameData_OakSave_2eproto}, {}};

static void InitDefaultsscc_info_GameStateSaveData_OakSave_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_GameStateSaveData_default_instance_;
    new (ptr) ::OakSave::GameStateSaveData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::GameStateSaveData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameStateSaveData_OakSave_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GameStateSaveData_OakSave_2eproto}, {
      &scc_info_MapIDData_OakSave_2eproto.base,}};

static void InitDefaultsscc_info_GbxZoneMapFODSaveGameData_OakSave_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_GbxZoneMapFODSaveGameData_default_instance_;
    new (ptr) ::OakSave::GbxZoneMapFODSaveGameData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::GbxZoneMapFODSaveGameData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GbxZoneMapFODSaveGameData_OakSave_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GbxZoneMapFODSaveGameData_OakSave_2eproto}, {
      &scc_info_GbxZoneMapFODSavedLevelData_OakSave_2eproto.base,}};

static void InitDefaultsscc_info_GbxZoneMapFODSavedLevelData_OakSave_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_GbxZoneMapFODSavedLevelData_default_instance_;
    new (ptr) ::OakSave::GbxZoneMapFODSavedLevelData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::GbxZoneMapFODSavedLevelData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GbxZoneMapFODSavedLevelData_OakSave_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GbxZoneMapFODSavedLevelData_OakSave_2eproto}, {}};

static void InitDefaultsscc_info_GuardianRankCharacterSaveGameData_OakSave_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_GuardianRankCharacterSaveGameData_default_instance_;
    new (ptr) ::OakSave::GuardianRankCharacterSaveGameData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::GuardianRankCharacterSaveGameData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GuardianRankCharacterSaveGameData_OakSave_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GuardianRankCharacterSaveGameData_OakSave_2eproto}, {
      &scc_info_GuardianRankRewardCharacterSaveGameData_OakSave_2eproto.base,
      &scc_info_GuardianRankPerkCharacterSaveGameData_OakSave_2eproto.base,}};

static void InitDefaultsscc_info_GuardianRankPerkCharacterSaveGameData_OakSave_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_GuardianRankPerkCharacterSaveGameData_default_instance_;
    new (ptr) ::OakSave::GuardianRankPerkCharacterSaveGameData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::GuardianRankPerkCharacterSaveGameData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GuardianRankPerkCharacterSaveGameData_OakSave_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GuardianRankPerkCharacterSaveGameData_OakSave_2eproto}, {}};

static void InitDefaultsscc_info_GuardianRankRewardCharacterSaveGameData_OakSave_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_GuardianRankRewardCharacterSaveGameData_default_instance_;
    new (ptr) ::OakSave::GuardianRankRewardCharacterSaveGameData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::GuardianRankRewardCharacterSaveGameData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GuardianRankRewardCharacterSaveGameData_OakSave_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GuardianRankRewardCharacterSaveGameData_OakSave_2eproto}, {}};

static void InitDefaultsscc_info_GuardianRankSaveGameData_OakSave_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_GuardianRankSaveGameData_default_instance_;
    new (ptr) ::OakSave::GuardianRankSaveGameData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::GuardianRankSaveGameData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GuardianRankSaveGameData_OakSave_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GuardianRankSaveGameData_OakSave_2eproto}, {}};

static void InitDefaultsscc_info_InventoryBalanceStateInitializationData_OakSave_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_InventoryBalanceStateInitializationData_default_instance_;
    new (ptr) ::OakSave::InventoryBalanceStateInitializationData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::InventoryBalanceStateInitializationData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InventoryBalanceStateInitializationData_OakSave_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InventoryBalanceStateInitializationData_OakSave_2eproto}, {}};

static void InitDefaultsscc_info_LevelPersistence_Actor_SaveGameData_OakSave_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_LevelPersistence_Actor_SaveGameData_default_instance_;
    new (ptr) ::OakSave::LevelPersistence_Actor_SaveGameData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::LevelPersistence_Actor_SaveGameData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LevelPersistence_Actor_SaveGameData_OakSave_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LevelPersistence_Actor_SaveGameData_OakSave_2eproto}, {}};

static void InitDefaultsscc_info_LevelPersistence_Level_SaveGameData_OakSave_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_LevelPersistence_Level_SaveGameData_default_instance_;
    new (ptr) ::OakSave::LevelPersistence_Level_SaveGameData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::LevelPersistence_Level_SaveGameData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LevelPersistence_Level_SaveGameData_OakSave_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LevelPersistence_Level_SaveGameData_OakSave_2eproto}, {
      &scc_info_LevelPersistence_Actor_SaveGameData_OakSave_2eproto.base,}};

static void InitDefaultsscc_info_MapIDData_OakSave_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_MapIDData_default_instance_;
    new (ptr) ::OakSave::MapIDData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::MapIDData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MapIDData_OakSave_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MapIDData_OakSave_2eproto}, {}};

static void InitDefaultsscc_info_MissionPlaythroughSaveGameData_OakSave_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_MissionPlaythroughSaveGameData_default_instance_;
    new (ptr) ::OakSave::MissionPlaythroughSaveGameData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::MissionPlaythroughSaveGameData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MissionPlaythroughSaveGameData_OakSave_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MissionPlaythroughSaveGameData_OakSave_2eproto}, {
      &scc_info_MissionStatusPlayerSaveGameData_OakSave_2eproto.base,}};

static void InitDefaultsscc_info_MissionStatusPlayerSaveGameData_OakSave_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_MissionStatusPlayerSaveGameData_default_instance_;
    new (ptr) ::OakSave::MissionStatusPlayerSaveGameData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::MissionStatusPlayerSaveGameData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MissionStatusPlayerSaveGameData_OakSave_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MissionStatusPlayerSaveGameData_OakSave_2eproto}, {}};

static void InitDefaultsscc_info_OakAbilitySlotSaveGameData_OakSave_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_OakAbilitySlotSaveGameData_default_instance_;
    new (ptr) ::OakSave::OakAbilitySlotSaveGameData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::OakAbilitySlotSaveGameData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OakAbilitySlotSaveGameData_OakSave_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OakAbilitySlotSaveGameData_OakSave_2eproto}, {}};

static void InitDefaultsscc_info_OakAbilityTreeItemSaveGameData_OakSave_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_OakAbilityTreeItemSaveGameData_default_instance_;
    new (ptr) ::OakSave::OakAbilityTreeItemSaveGameData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::OakAbilityTreeItemSaveGameData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OakAbilityTreeItemSaveGameData_OakSave_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OakAbilityTreeItemSaveGameData_OakSave_2eproto}, {}};

static void InitDefaultsscc_info_OakActionAbilityAugmentConfigurationSaveGameData_OakSave_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_OakActionAbilityAugmentConfigurationSaveGameData_default_instance_;
    new (ptr) ::OakSave::OakActionAbilityAugmentConfigurationSaveGameData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::OakActionAbilityAugmentConfigurationSaveGameData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OakActionAbilityAugmentConfigurationSaveGameData_OakSave_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OakActionAbilityAugmentConfigurationSaveGameData_OakSave_2eproto}, {}};

static void InitDefaultsscc_info_OakActionAbilityAugmentSaveGameData_OakSave_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_OakActionAbilityAugmentSaveGameData_default_instance_;
    new (ptr) ::OakSave::OakActionAbilityAugmentSaveGameData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::OakActionAbilityAugmentSaveGameData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OakActionAbilityAugmentSaveGameData_OakSave_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OakActionAbilityAugmentSaveGameData_OakSave_2eproto}, {}};

static void InitDefaultsscc_info_OakCARMenuVehicleConfigSaveData_OakSave_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_OakCARMenuVehicleConfigSaveData_default_instance_;
    new (ptr) ::OakSave::OakCARMenuVehicleConfigSaveData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::OakCARMenuVehicleConfigSaveData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OakCARMenuVehicleConfigSaveData_OakSave_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OakCARMenuVehicleConfigSaveData_OakSave_2eproto}, {}};

static void InitDefaultsscc_info_OakInventoryItemSaveGameData_OakSave_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_OakInventoryItemSaveGameData_default_instance_;
    new (ptr) ::OakSave::OakInventoryItemSaveGameData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::OakInventoryItemSaveGameData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OakInventoryItemSaveGameData_OakSave_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OakInventoryItemSaveGameData_OakSave_2eproto}, {
      &scc_info_InventoryBalanceStateInitializationData_OakSave_2eproto.base,}};

static void InitDefaultsscc_info_OakPlayerAbilitySaveGameData_OakSave_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_OakPlayerAbilitySaveGameData_default_instance_;
    new (ptr) ::OakSave::OakPlayerAbilitySaveGameData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::OakPlayerAbilitySaveGameData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_OakPlayerAbilitySaveGameData_OakSave_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_OakPlayerAbilitySaveGameData_OakSave_2eproto}, {
      &scc_info_OakAbilityTreeItemSaveGameData_OakSave_2eproto.base,
      &scc_info_OakAbilitySlotSaveGameData_OakSave_2eproto.base,
      &scc_info_OakActionAbilityAugmentSaveGameData_OakSave_2eproto.base,
      &scc_info_OakActionAbilityAugmentConfigurationSaveGameData_OakSave_2eproto.base,}};

static void InitDefaultsscc_info_OakPlayerCharacterAugmentSaveGameData_OakSave_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_OakPlayerCharacterAugmentSaveGameData_default_instance_;
    new (ptr) ::OakSave::OakPlayerCharacterAugmentSaveGameData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::OakPlayerCharacterAugmentSaveGameData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OakPlayerCharacterAugmentSaveGameData_OakSave_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OakPlayerCharacterAugmentSaveGameData_OakSave_2eproto}, {}};

static void InitDefaultsscc_info_OakPlayerCharacterSlotSaveGameData_OakSave_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_OakPlayerCharacterSlotSaveGameData_default_instance_;
    new (ptr) ::OakSave::OakPlayerCharacterSlotSaveGameData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::OakPlayerCharacterSlotSaveGameData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OakPlayerCharacterSlotSaveGameData_OakSave_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OakPlayerCharacterSlotSaveGameData_OakSave_2eproto}, {
      &scc_info_OakPlayerCharacterAugmentSaveGameData_OakSave_2eproto.base,}};

static void InitDefaultsscc_info_PlanetCycleInfo_OakSave_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_PlanetCycleInfo_default_instance_;
    new (ptr) ::OakSave::PlanetCycleInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::PlanetCycleInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlanetCycleInfo_OakSave_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PlanetCycleInfo_OakSave_2eproto}, {}};

static void InitDefaultsscc_info_PlayerClassSaveGameData_OakSave_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_PlayerClassSaveGameData_default_instance_;
    new (ptr) ::OakSave::PlayerClassSaveGameData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::PlayerClassSaveGameData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerClassSaveGameData_OakSave_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PlayerClassSaveGameData_OakSave_2eproto}, {}};

static void InitDefaultsscc_info_PlaythroughActiveFastTravelSaveData_OakSave_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_PlaythroughActiveFastTravelSaveData_default_instance_;
    new (ptr) ::OakSave::PlaythroughActiveFastTravelSaveData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::PlaythroughActiveFastTravelSaveData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlaythroughActiveFastTravelSaveData_OakSave_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PlaythroughActiveFastTravelSaveData_OakSave_2eproto}, {
      &scc_info_ActiveFastTravelSaveData_OakSave_2eproto.base,}};

static void InitDefaultsscc_info_RegionSaveGameData_OakSave_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_RegionSaveGameData_default_instance_;
    new (ptr) ::OakSave::RegionSaveGameData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::RegionSaveGameData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegionSaveGameData_OakSave_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RegionSaveGameData_OakSave_2eproto}, {}};

static void InitDefaultsscc_info_ResourcePoolSavegameData_OakSave_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_ResourcePoolSavegameData_default_instance_;
    new (ptr) ::OakSave::ResourcePoolSavegameData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::ResourcePoolSavegameData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResourcePoolSavegameData_OakSave_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ResourcePoolSavegameData_OakSave_2eproto}, {}};

static void InitDefaultsscc_info_TimeOfDaySaveGameData_OakSave_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_TimeOfDaySaveGameData_default_instance_;
    new (ptr) ::OakSave::TimeOfDaySaveGameData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::TimeOfDaySaveGameData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TimeOfDaySaveGameData_OakSave_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TimeOfDaySaveGameData_OakSave_2eproto}, {
      &scc_info_PlanetCycleInfo_OakSave_2eproto.base,}};

static void InitDefaultsscc_info_UITrackingSaveGameData_OakSave_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_UITrackingSaveGameData_default_instance_;
    new (ptr) ::OakSave::UITrackingSaveGameData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::UITrackingSaveGameData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UITrackingSaveGameData_OakSave_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UITrackingSaveGameData_OakSave_2eproto}, {}};

static void InitDefaultsscc_info_VehicleUnlockedSaveGameData_OakSave_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_VehicleUnlockedSaveGameData_default_instance_;
    new (ptr) ::OakSave::VehicleUnlockedSaveGameData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::VehicleUnlockedSaveGameData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VehicleUnlockedSaveGameData_OakSave_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VehicleUnlockedSaveGameData_OakSave_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_OakSave_2eproto[46];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_OakSave_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_OakSave_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_OakSave_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::PlayerClassSaveGameData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::PlayerClassSaveGameData, player_class_path_),
  PROTOBUF_FIELD_OFFSET(::OakSave::PlayerClassSaveGameData, dlc_package_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::ResourcePoolSavegameData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::ResourcePoolSavegameData, amount_),
  PROTOBUF_FIELD_OFFSET(::OakSave::ResourcePoolSavegameData, resource_path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::RegionSaveGameData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::RegionSaveGameData, game_stage_),
  PROTOBUF_FIELD_OFFSET(::OakSave::RegionSaveGameData, play_through_idx_),
  PROTOBUF_FIELD_OFFSET(::OakSave::RegionSaveGameData, region_path_),
  PROTOBUF_FIELD_OFFSET(::OakSave::RegionSaveGameData, dlc_package_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::InventoryBalanceStateInitializationData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::InventoryBalanceStateInitializationData, game_stage_),
  PROTOBUF_FIELD_OFFSET(::OakSave::InventoryBalanceStateInitializationData, inventory_data_),
  PROTOBUF_FIELD_OFFSET(::OakSave::InventoryBalanceStateInitializationData, inventory_balance_data_),
  PROTOBUF_FIELD_OFFSET(::OakSave::InventoryBalanceStateInitializationData, manufacturer_data_),
  PROTOBUF_FIELD_OFFSET(::OakSave::InventoryBalanceStateInitializationData, part_list_),
  PROTOBUF_FIELD_OFFSET(::OakSave::InventoryBalanceStateInitializationData, generic_part_list_),
  PROTOBUF_FIELD_OFFSET(::OakSave::InventoryBalanceStateInitializationData, additional_data_),
  PROTOBUF_FIELD_OFFSET(::OakSave::InventoryBalanceStateInitializationData, customization_part_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::OakInventoryItemSaveGameData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::OakInventoryItemSaveGameData, item_serial_number_),
  PROTOBUF_FIELD_OFFSET(::OakSave::OakInventoryItemSaveGameData, pickup_order_index_),
  PROTOBUF_FIELD_OFFSET(::OakSave::OakInventoryItemSaveGameData, flags_),
  PROTOBUF_FIELD_OFFSET(::OakSave::OakInventoryItemSaveGameData, weapon_skin_path_),
  PROTOBUF_FIELD_OFFSET(::OakSave::OakInventoryItemSaveGameData, development_save_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::EquippedInventorySaveGameData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::EquippedInventorySaveGameData, inventory_list_index_),
  PROTOBUF_FIELD_OFFSET(::OakSave::EquippedInventorySaveGameData, enabled_),
  PROTOBUF_FIELD_OFFSET(::OakSave::EquippedInventorySaveGameData, slot_data_path_),
  PROTOBUF_FIELD_OFFSET(::OakSave::EquippedInventorySaveGameData, trinket_data_path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::OakAbilityTreeItemSaveGameData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::OakAbilityTreeItemSaveGameData, item_asset_path_),
  PROTOBUF_FIELD_OFFSET(::OakSave::OakAbilityTreeItemSaveGameData, points_),
  PROTOBUF_FIELD_OFFSET(::OakSave::OakAbilityTreeItemSaveGameData, max_points_),
  PROTOBUF_FIELD_OFFSET(::OakSave::OakAbilityTreeItemSaveGameData, tree_identifier_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::OakAbilitySlotSaveGameData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::OakAbilitySlotSaveGameData, ability_class_path_),
  PROTOBUF_FIELD_OFFSET(::OakSave::OakAbilitySlotSaveGameData, slot_asset_path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::OakActionAbilityAugmentSaveGameData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::OakActionAbilityAugmentSaveGameData, action_ability_class_path_),
  PROTOBUF_FIELD_OFFSET(::OakSave::OakActionAbilityAugmentSaveGameData, slot_asset_path_),
  PROTOBUF_FIELD_OFFSET(::OakSave::OakActionAbilityAugmentSaveGameData, augment_asset_path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::OakActionAbilityAugmentConfigurationSaveGameData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::OakActionAbilityAugmentConfigurationSaveGameData, ability_class_path_),
  PROTOBUF_FIELD_OFFSET(::OakSave::OakActionAbilityAugmentConfigurationSaveGameData, augment_asset_path_),
  PROTOBUF_FIELD_OFFSET(::OakSave::OakActionAbilityAugmentConfigurationSaveGameData, mod_slot_asset_path_),
  PROTOBUF_FIELD_OFFSET(::OakSave::OakActionAbilityAugmentConfigurationSaveGameData, mod_asset_path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::OakPlayerAbilitySaveGameData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::OakPlayerAbilitySaveGameData, ability_points_),
  PROTOBUF_FIELD_OFFSET(::OakSave::OakPlayerAbilitySaveGameData, tree_item_list_),
  PROTOBUF_FIELD_OFFSET(::OakSave::OakPlayerAbilitySaveGameData, ability_slot_list_),
  PROTOBUF_FIELD_OFFSET(::OakSave::OakPlayerAbilitySaveGameData, augment_slot_list_),
  PROTOBUF_FIELD_OFFSET(::OakSave::OakPlayerAbilitySaveGameData, augment_configuration_list_),
  PROTOBUF_FIELD_OFFSET(::OakSave::OakPlayerAbilitySaveGameData, tree_grade_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::MissionStatusPlayerSaveGameData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::MissionStatusPlayerSaveGameData, status_),
  PROTOBUF_FIELD_OFFSET(::OakSave::MissionStatusPlayerSaveGameData, has_been_viewed_in_log_),
  PROTOBUF_FIELD_OFFSET(::OakSave::MissionStatusPlayerSaveGameData, objectives_progress_),
  PROTOBUF_FIELD_OFFSET(::OakSave::MissionStatusPlayerSaveGameData, mission_class_path_),
  PROTOBUF_FIELD_OFFSET(::OakSave::MissionStatusPlayerSaveGameData, active_objective_set_path_),
  PROTOBUF_FIELD_OFFSET(::OakSave::MissionStatusPlayerSaveGameData, dlc_package_id_),
  PROTOBUF_FIELD_OFFSET(::OakSave::MissionStatusPlayerSaveGameData, kickoff_played_),
  PROTOBUF_FIELD_OFFSET(::OakSave::MissionStatusPlayerSaveGameData, league_instance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::MissionPlaythroughSaveGameData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::MissionPlaythroughSaveGameData, mission_list_),
  PROTOBUF_FIELD_OFFSET(::OakSave::MissionPlaythroughSaveGameData, tracked_mission_class_path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::ActiveFastTravelSaveData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::ActiveFastTravelSaveData, active_travel_station_name_),
  PROTOBUF_FIELD_OFFSET(::OakSave::ActiveFastTravelSaveData, blacklisted_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::PlaythroughActiveFastTravelSaveData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::PlaythroughActiveFastTravelSaveData, active_travel_stations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::DiscoveredAreaInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::DiscoveredAreaInfo, discovered_area_name_),
  PROTOBUF_FIELD_OFFSET(::OakSave::DiscoveredAreaInfo, discovered_playthroughs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::DiscoveredLevelInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::DiscoveredLevelInfo, discovered_level_name_),
  PROTOBUF_FIELD_OFFSET(::OakSave::DiscoveredLevelInfo, discovered_playthroughs_),
  PROTOBUF_FIELD_OFFSET(::OakSave::DiscoveredLevelInfo, discovered_area_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::DiscoveredPlanetInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::DiscoveredPlanetInfo, discovered_planet_),
  PROTOBUF_FIELD_OFFSET(::OakSave::DiscoveredPlanetInfo, is_new_planet_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::DiscoverySaveData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::DiscoverySaveData, discovered_level_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::VehicleUnlockedSaveGameData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::VehicleUnlockedSaveGameData, asset_path_),
  PROTOBUF_FIELD_OFFSET(::OakSave::VehicleUnlockedSaveGameData, just_unlocked_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::OakCARMenuVehicleConfigSaveData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::OakCARMenuVehicleConfigSaveData, loadout_save_name_),
  PROTOBUF_FIELD_OFFSET(::OakSave::OakCARMenuVehicleConfigSaveData, body_asset_path_),
  PROTOBUF_FIELD_OFFSET(::OakSave::OakCARMenuVehicleConfigSaveData, wheel_asset_path_),
  PROTOBUF_FIELD_OFFSET(::OakSave::OakCARMenuVehicleConfigSaveData, armor_asset_path_),
  PROTOBUF_FIELD_OFFSET(::OakSave::OakCARMenuVehicleConfigSaveData, core_mod_asset_path_),
  PROTOBUF_FIELD_OFFSET(::OakSave::OakCARMenuVehicleConfigSaveData, gunner_weapon_asset_path_),
  PROTOBUF_FIELD_OFFSET(::OakSave::OakCARMenuVehicleConfigSaveData, driver_weapon_asset_path_),
  PROTOBUF_FIELD_OFFSET(::OakSave::OakCARMenuVehicleConfigSaveData, ornament_asset_path_),
  PROTOBUF_FIELD_OFFSET(::OakSave::OakCARMenuVehicleConfigSaveData, material_decal_asset_path_),
  PROTOBUF_FIELD_OFFSET(::OakSave::OakCARMenuVehicleConfigSaveData, material_asset_path_),
  PROTOBUF_FIELD_OFFSET(::OakSave::OakCARMenuVehicleConfigSaveData, color_index_1_),
  PROTOBUF_FIELD_OFFSET(::OakSave::OakCARMenuVehicleConfigSaveData, color_index_2_),
  PROTOBUF_FIELD_OFFSET(::OakSave::OakCARMenuVehicleConfigSaveData, color_index_3_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::CustomPlayerColorSaveGameData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::CustomPlayerColorSaveGameData, color_parameter_),
  PROTOBUF_FIELD_OFFSET(::OakSave::CustomPlayerColorSaveGameData, applied_color_),
  PROTOBUF_FIELD_OFFSET(::OakSave::CustomPlayerColorSaveGameData, split_color_),
  PROTOBUF_FIELD_OFFSET(::OakSave::CustomPlayerColorSaveGameData, use_default_color_),
  PROTOBUF_FIELD_OFFSET(::OakSave::CustomPlayerColorSaveGameData, use_default_split_color_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::GuardianRankSaveGameData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::GuardianRankSaveGameData, guardian_rank_),
  PROTOBUF_FIELD_OFFSET(::OakSave::GuardianRankSaveGameData, guardian_experience_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::GuardianRankRewardCharacterSaveGameData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::GuardianRankRewardCharacterSaveGameData, num_tokens_),
  PROTOBUF_FIELD_OFFSET(::OakSave::GuardianRankRewardCharacterSaveGameData, is_enabled_),
  PROTOBUF_FIELD_OFFSET(::OakSave::GuardianRankRewardCharacterSaveGameData, reward_data_path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::GuardianRankPerkCharacterSaveGameData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::GuardianRankPerkCharacterSaveGameData, is_enabled_),
  PROTOBUF_FIELD_OFFSET(::OakSave::GuardianRankPerkCharacterSaveGameData, perk_data_path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::GuardianRankCharacterSaveGameData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::GuardianRankCharacterSaveGameData, guardian_available_tokens_),
  PROTOBUF_FIELD_OFFSET(::OakSave::GuardianRankCharacterSaveGameData, guardian_rank_),
  PROTOBUF_FIELD_OFFSET(::OakSave::GuardianRankCharacterSaveGameData, guardian_experience_),
  PROTOBUF_FIELD_OFFSET(::OakSave::GuardianRankCharacterSaveGameData, rank_rewards_),
  PROTOBUF_FIELD_OFFSET(::OakSave::GuardianRankCharacterSaveGameData, rank_perks_),
  PROTOBUF_FIELD_OFFSET(::OakSave::GuardianRankCharacterSaveGameData, guardian_reward_random_seed_),
  PROTOBUF_FIELD_OFFSET(::OakSave::GuardianRankCharacterSaveGameData, new_guardian_experience_),
  PROTOBUF_FIELD_OFFSET(::OakSave::GuardianRankCharacterSaveGameData, is_rank_system_enabled_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::CrewQuartersDecorationSaveData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::CrewQuartersDecorationSaveData, decoration_index_),
  PROTOBUF_FIELD_OFFSET(::OakSave::CrewQuartersDecorationSaveData, decoration_data_path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::CrewQuartersSaveData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::CrewQuartersSaveData, preferred_room_assignment_),
  PROTOBUF_FIELD_OFFSET(::OakSave::CrewQuartersSaveData, decorations_),
  PROTOBUF_FIELD_OFFSET(::OakSave::CrewQuartersSaveData, room_data_path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::CrewQuartersGunRackItemSaveData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::CrewQuartersGunRackItemSaveData, encrypted_serial_number_),
  PROTOBUF_FIELD_OFFSET(::OakSave::CrewQuartersGunRackItemSaveData, slot_asset_path_),
  PROTOBUF_FIELD_OFFSET(::OakSave::CrewQuartersGunRackItemSaveData, development_save_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::CrewQuartersGunRackSaveData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::CrewQuartersGunRackSaveData, rack_save_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::EchoLogSaveGameData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::EchoLogSaveGameData, has_been_seen_in_log_),
  PROTOBUF_FIELD_OFFSET(::OakSave::EchoLogSaveGameData, echo_log_path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::MapIDData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::MapIDData, zone_name_id_),
  PROTOBUF_FIELD_OFFSET(::OakSave::MapIDData, map_name_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::GameStateSaveData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::GameStateSaveData, last_traveled_map_id_),
  PROTOBUF_FIELD_OFFSET(::OakSave::GameStateSaveData, mayhem_level_),
  PROTOBUF_FIELD_OFFSET(::OakSave::GameStateSaveData, mayhem_random_seed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::ChallengeCategoryProgressSaveData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::ChallengeCategoryProgressSaveData, category_progress_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::OakPlayerCharacterAugmentSaveGameData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::OakPlayerCharacterAugmentSaveGameData, slot_asset_path_),
  PROTOBUF_FIELD_OFFSET(::OakSave::OakPlayerCharacterAugmentSaveGameData, augment_asset_path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::OakPlayerCharacterSlotSaveGameData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::OakPlayerCharacterSlotSaveGameData, augment_slot_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::UITrackingSaveGameData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::UITrackingSaveGameData, has_seen_skill_menu_unlock_),
  PROTOBUF_FIELD_OFFSET(::OakSave::UITrackingSaveGameData, has_seen_guardian_rank_menu_unlock_),
  PROTOBUF_FIELD_OFFSET(::OakSave::UITrackingSaveGameData, has_seen_echo_boot_ammo_bar_),
  PROTOBUF_FIELD_OFFSET(::OakSave::UITrackingSaveGameData, has_seen_echo_boot_shield_bar_),
  PROTOBUF_FIELD_OFFSET(::OakSave::UITrackingSaveGameData, has_seen_echo_boot_grenades_),
  PROTOBUF_FIELD_OFFSET(::OakSave::UITrackingSaveGameData, highest_thvm_breadcrumb_seen_),
  PROTOBUF_FIELD_OFFSET(::OakSave::UITrackingSaveGameData, inventory_slot_unlocks_seen_),
  PROTOBUF_FIELD_OFFSET(::OakSave::UITrackingSaveGameData, saved_spin_offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::PlanetCycleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::PlanetCycleInfo, planet_name_),
  PROTOBUF_FIELD_OFFSET(::OakSave::PlanetCycleInfo, cycle_length_),
  PROTOBUF_FIELD_OFFSET(::OakSave::PlanetCycleInfo, last_cached_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::TimeOfDaySaveGameData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::TimeOfDaySaveGameData, planet_cycle_info_),
  PROTOBUF_FIELD_OFFSET(::OakSave::TimeOfDaySaveGameData, planet_cycle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::LevelPersistence_Actor_SaveGameData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::LevelPersistence_Actor_SaveGameData, actor_name_),
  PROTOBUF_FIELD_OFFSET(::OakSave::LevelPersistence_Actor_SaveGameData, timer_remaining_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::LevelPersistence_Level_SaveGameData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::LevelPersistence_Level_SaveGameData, level_name_),
  PROTOBUF_FIELD_OFFSET(::OakSave::LevelPersistence_Level_SaveGameData, saved_actors_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::GbxZoneMapFODSavedLevelData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::GbxZoneMapFODSavedLevelData, level_name_),
  PROTOBUF_FIELD_OFFSET(::OakSave::GbxZoneMapFODSavedLevelData, fod_texture_size_),
  PROTOBUF_FIELD_OFFSET(::OakSave::GbxZoneMapFODSavedLevelData, num_chunks_),
  PROTOBUF_FIELD_OFFSET(::OakSave::GbxZoneMapFODSavedLevelData, discovery_percentage_),
  PROTOBUF_FIELD_OFFSET(::OakSave::GbxZoneMapFODSavedLevelData, data_state_),
  PROTOBUF_FIELD_OFFSET(::OakSave::GbxZoneMapFODSavedLevelData, data_revision_),
  PROTOBUF_FIELD_OFFSET(::OakSave::GbxZoneMapFODSavedLevelData, fod_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::GbxZoneMapFODSaveGameData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::GbxZoneMapFODSaveGameData, level_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::Character_NicknameMappingsEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::Character_NicknameMappingsEntry, key_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Character_NicknameMappingsEntry, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::Character_ActiveLeagueInstanceForEventEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::Character_ActiveLeagueInstanceForEventEntry, key_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Character_ActiveLeagueInstanceForEventEntry, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::Character, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::Character, save_game_id_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Character, last_save_timestamp_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Character, time_played_seconds_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Character, player_class_data_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Character, resource_pools_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Character, saved_regions_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Character, experience_points_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Character, game_stats_data_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Character, inventory_category_list_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Character, inventory_items_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Character, equipped_inventory_list_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Character, active_weapon_list_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Character, ability_data_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Character, last_play_through_index_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Character, playthroughs_completed_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Character, show_new_playthrough_notification_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Character, mission_playthroughs_data_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Character, active_travel_stations_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Character, discovery_data_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Character, last_active_travel_station_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Character, vehicles_unlocked_data_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Character, vehicle_parts_unlocked_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Character, vehicle_loadouts_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Character, vehicle_last_loadout_index_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Character, challenge_data_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Character, sdu_list_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Character, selected_customizations_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Character, equipped_emote_customizations_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Character, selected_color_customizations_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Character, guardian_rank_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Character, crew_quarters_room_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Character, crew_quarters_gun_rack_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Character, unlocked_echo_logs_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Character, has_played_special_echo_log_insert_already_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Character, nickname_mappings_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Character, last_traveled_map_id_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Character, challenge_category_completion_pcts_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Character, character_slot_save_game_data_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Character, ui_tracking_save_game_data_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Character, preferred_character_name_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Character, name_character_limit_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Character, preferred_group_mode_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Character, time_of_day_save_game_data_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Character, level_persistence_data_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Character, accumulated_level_persistence_reset_timer_seconds_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Character, mayhem_level_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Character, gbx_zone_map_fod_save_game_data_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Character, active_or_blacklisted_travel_stations_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Character, last_active_travel_station_for_playthrough_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Character, game_state_save_data_for_playthrough_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Character, registered_downloadable_entitlements_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Character, active_travel_stations_for_playthrough_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Character, save_game_guid_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Character, guardian_rank_character_data_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Character, optional_objective_reward_fixup_applied_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Character, vehicle_part_rewards_fixup_applied_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Character, last_active_league_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Character, last_active_league_instance_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Character, active_league_instance_for_event_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Character, levelled_save_vehicle_part_rewards_fixup_applied_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::OakSave::PlayerClassSaveGameData)},
  { 7, -1, sizeof(::OakSave::ResourcePoolSavegameData)},
  { 14, -1, sizeof(::OakSave::RegionSaveGameData)},
  { 23, -1, sizeof(::OakSave::InventoryBalanceStateInitializationData)},
  { 36, -1, sizeof(::OakSave::OakInventoryItemSaveGameData)},
  { 46, -1, sizeof(::OakSave::EquippedInventorySaveGameData)},
  { 55, -1, sizeof(::OakSave::OakAbilityTreeItemSaveGameData)},
  { 64, -1, sizeof(::OakSave::OakAbilitySlotSaveGameData)},
  { 71, -1, sizeof(::OakSave::OakActionAbilityAugmentSaveGameData)},
  { 79, -1, sizeof(::OakSave::OakActionAbilityAugmentConfigurationSaveGameData)},
  { 88, -1, sizeof(::OakSave::OakPlayerAbilitySaveGameData)},
  { 99, -1, sizeof(::OakSave::MissionStatusPlayerSaveGameData)},
  { 112, -1, sizeof(::OakSave::MissionPlaythroughSaveGameData)},
  { 119, -1, sizeof(::OakSave::ActiveFastTravelSaveData)},
  { 126, -1, sizeof(::OakSave::PlaythroughActiveFastTravelSaveData)},
  { 132, -1, sizeof(::OakSave::DiscoveredAreaInfo)},
  { 139, -1, sizeof(::OakSave::DiscoveredLevelInfo)},
  { 147, -1, sizeof(::OakSave::DiscoveredPlanetInfo)},
  { 154, -1, sizeof(::OakSave::DiscoverySaveData)},
  { 160, -1, sizeof(::OakSave::VehicleUnlockedSaveGameData)},
  { 167, -1, sizeof(::OakSave::OakCARMenuVehicleConfigSaveData)},
  { 185, -1, sizeof(::OakSave::CustomPlayerColorSaveGameData)},
  { 195, -1, sizeof(::OakSave::GuardianRankSaveGameData)},
  { 202, -1, sizeof(::OakSave::GuardianRankRewardCharacterSaveGameData)},
  { 210, -1, sizeof(::OakSave::GuardianRankPerkCharacterSaveGameData)},
  { 217, -1, sizeof(::OakSave::GuardianRankCharacterSaveGameData)},
  { 230, -1, sizeof(::OakSave::CrewQuartersDecorationSaveData)},
  { 237, -1, sizeof(::OakSave::CrewQuartersSaveData)},
  { 245, -1, sizeof(::OakSave::CrewQuartersGunRackItemSaveData)},
  { 253, -1, sizeof(::OakSave::CrewQuartersGunRackSaveData)},
  { 259, -1, sizeof(::OakSave::EchoLogSaveGameData)},
  { 266, -1, sizeof(::OakSave::MapIDData)},
  { 273, -1, sizeof(::OakSave::GameStateSaveData)},
  { 281, -1, sizeof(::OakSave::ChallengeCategoryProgressSaveData)},
  { 287, -1, sizeof(::OakSave::OakPlayerCharacterAugmentSaveGameData)},
  { 294, -1, sizeof(::OakSave::OakPlayerCharacterSlotSaveGameData)},
  { 300, -1, sizeof(::OakSave::UITrackingSaveGameData)},
  { 313, -1, sizeof(::OakSave::PlanetCycleInfo)},
  { 321, -1, sizeof(::OakSave::TimeOfDaySaveGameData)},
  { 328, -1, sizeof(::OakSave::LevelPersistence_Actor_SaveGameData)},
  { 335, -1, sizeof(::OakSave::LevelPersistence_Level_SaveGameData)},
  { 342, -1, sizeof(::OakSave::GbxZoneMapFODSavedLevelData)},
  { 354, -1, sizeof(::OakSave::GbxZoneMapFODSaveGameData)},
  { 360, -1, sizeof(::OakSave::Character_NicknameMappingsEntry)},
  { 367, -1, sizeof(::OakSave::Character_ActiveLeagueInstanceForEventEntry)},
  { 374, -1, sizeof(::OakSave::Character)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_PlayerClassSaveGameData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_ResourcePoolSavegameData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_RegionSaveGameData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_InventoryBalanceStateInitializationData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_OakInventoryItemSaveGameData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_EquippedInventorySaveGameData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_OakAbilityTreeItemSaveGameData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_OakAbilitySlotSaveGameData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_OakActionAbilityAugmentSaveGameData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_OakActionAbilityAugmentConfigurationSaveGameData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_OakPlayerAbilitySaveGameData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_MissionStatusPlayerSaveGameData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_MissionPlaythroughSaveGameData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_ActiveFastTravelSaveData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_PlaythroughActiveFastTravelSaveData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_DiscoveredAreaInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_DiscoveredLevelInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_DiscoveredPlanetInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_DiscoverySaveData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_VehicleUnlockedSaveGameData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_OakCARMenuVehicleConfigSaveData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_CustomPlayerColorSaveGameData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_GuardianRankSaveGameData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_GuardianRankRewardCharacterSaveGameData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_GuardianRankPerkCharacterSaveGameData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_GuardianRankCharacterSaveGameData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_CrewQuartersDecorationSaveData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_CrewQuartersSaveData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_CrewQuartersGunRackItemSaveData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_CrewQuartersGunRackSaveData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_EchoLogSaveGameData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_MapIDData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_GameStateSaveData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_ChallengeCategoryProgressSaveData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_OakPlayerCharacterAugmentSaveGameData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_OakPlayerCharacterSlotSaveGameData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_UITrackingSaveGameData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_PlanetCycleInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_TimeOfDaySaveGameData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_LevelPersistence_Actor_SaveGameData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_LevelPersistence_Level_SaveGameData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_GbxZoneMapFODSavedLevelData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_GbxZoneMapFODSaveGameData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_Character_NicknameMappingsEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_Character_ActiveLeagueInstanceForEventEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_Character_default_instance_),
};

const char descriptor_table_protodef_OakSave_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rOakSave.proto\022\007OakSave\032\017OakShared.prot"
  "o\"L\n\027PlayerClassSaveGameData\022\031\n\021player_c"
  "lass_path\030\001 \001(\t\022\026\n\016dlc_package_id\030\002 \001(\r\""
  "A\n\030ResourcePoolSavegameData\022\016\n\006amount\030\001 "
  "\001(\002\022\025\n\rresource_path\030\002 \001(\t\"o\n\022RegionSave"
  "GameData\022\022\n\ngame_stage\030\001 \001(\005\022\030\n\020play_thr"
  "ough_idx\030\002 \001(\005\022\023\n\013region_path\030\003 \001(\t\022\026\n\016d"
  "lc_package_id\030\004 \001(\r\"\370\001\n\'InventoryBalance"
  "StateInitializationData\022\022\n\ngame_stage\030\001 "
  "\001(\005\022\026\n\016inventory_data\030\002 \001(\t\022\036\n\026inventory"
  "_balance_data\030\003 \001(\t\022\031\n\021manufacturer_data"
  "\030\004 \001(\t\022\021\n\tpart_list\030\005 \003(\t\022\031\n\021generic_par"
  "t_list\030\006 \003(\t\022\027\n\017additional_data\030\007 \001(\014\022\037\n"
  "\027customization_part_list\030\010 \003(\t\"\320\001\n\034OakIn"
  "ventoryItemSaveGameData\022\032\n\022item_serial_n"
  "umber\030\001 \001(\014\022\032\n\022pickup_order_index\030\002 \001(\005\022"
  "\r\n\005flags\030\003 \001(\005\022\030\n\020weapon_skin_path\030\004 \001(\t"
  "\022O\n\025development_save_data\030\005 \001(\01320.OakSav"
  "e.InventoryBalanceStateInitializationDat"
  "a\"\201\001\n\035EquippedInventorySaveGameData\022\034\n\024i"
  "nventory_list_index\030\001 \001(\005\022\017\n\007enabled\030\002 \001"
  "(\010\022\026\n\016slot_data_path\030\003 \001(\t\022\031\n\021trinket_da"
  "ta_path\030\004 \001(\t\"v\n\036OakAbilityTreeItemSaveG"
  "ameData\022\027\n\017item_asset_path\030\001 \001(\t\022\016\n\006poin"
  "ts\030\002 \001(\005\022\022\n\nmax_points\030\003 \001(\005\022\027\n\017tree_ide"
  "ntifier\030\004 \001(\005\"Q\n\032OakAbilitySlotSaveGameD"
  "ata\022\032\n\022ability_class_path\030\001 \001(\t\022\027\n\017slot_"
  "asset_path\030\002 \001(\t\"}\n#OakActionAbilityAugm"
  "entSaveGameData\022!\n\031action_ability_class_"
  "path\030\001 \001(\t\022\027\n\017slot_asset_path\030\002 \001(\t\022\032\n\022a"
  "ugment_asset_path\030\003 \001(\t\"\237\001\n0OakActionAbi"
  "lityAugmentConfigurationSaveGameData\022\032\n\022"
  "ability_class_path\030\001 \001(\t\022\032\n\022augment_asse"
  "t_path\030\002 \001(\t\022\033\n\023mod_slot_asset_path\030\003 \001("
  "\t\022\026\n\016mod_asset_path\030\004 \001(\t\"\363\002\n\034OakPlayerA"
  "bilitySaveGameData\022\026\n\016ability_points\030\001 \001"
  "(\005\022\?\n\016tree_item_list\030\002 \003(\0132\'.OakSave.Oak"
  "AbilityTreeItemSaveGameData\022>\n\021ability_s"
  "lot_list\030\003 \003(\0132#.OakSave.OakAbilitySlotS"
  "aveGameData\022G\n\021augment_slot_list\030\004 \003(\0132,"
  ".OakSave.OakActionAbilityAugmentSaveGame"
  "Data\022]\n\032augment_configuration_list\030\005 \003(\013"
  "29.OakSave.OakActionAbilityAugmentConfig"
  "urationSaveGameData\022\022\n\ntree_grade\030\006 \001(\005\""
  "\217\003\n\037MissionStatusPlayerSaveGameData\022E\n\006s"
  "tatus\030\001 \001(\01625.OakSave.MissionStatusPlaye"
  "rSaveGameData.MissionState\022\036\n\026has_been_v"
  "iewed_in_log\030\002 \001(\010\022\033\n\023objectives_progres"
  "s\030\003 \003(\005\022\032\n\022mission_class_path\030\004 \001(\t\022!\n\031a"
  "ctive_objective_set_path\030\005 \001(\t\022\026\n\016dlc_pa"
  "ckage_id\030\006 \001(\r\022\026\n\016kickoff_played\030\007 \001(\010\022\027"
  "\n\017league_instance\030\010 \001(\r\"`\n\014MissionState\022"
  "\021\n\rMS_NotStarted\020\000\022\r\n\tMS_Active\020\001\022\017\n\013MS_"
  "Complete\020\002\022\r\n\tMS_Failed\020\003\022\016\n\nMS_Unknown\020"
  "\004\"\204\001\n\036MissionPlaythroughSaveGameData\022>\n\014"
  "mission_list\030\001 \003(\0132(.OakSave.MissionStat"
  "usPlayerSaveGameData\022\"\n\032tracked_mission_"
  "class_path\030\002 \001(\t\"S\n\030ActiveFastTravelSave"
  "Data\022\"\n\032active_travel_station_name\030\001 \001(\t"
  "\022\023\n\013blacklisted\030\002 \001(\010\"h\n#PlaythroughActi"
  "veFastTravelSaveData\022A\n\026active_travel_st"
  "ations\030\001 \003(\0132!.OakSave.ActiveFastTravelS"
  "aveData\"S\n\022DiscoveredAreaInfo\022\034\n\024discove"
  "red_area_name\030\001 \001(\t\022\037\n\027discovered_playth"
  "roughs\030\002 \001(\r\"\220\001\n\023DiscoveredLevelInfo\022\035\n\025"
  "discovered_level_name\030\001 \001(\t\022\037\n\027discovere"
  "d_playthroughs\030\003 \001(\r\0229\n\024discovered_area_"
  "info\030\004 \003(\0132\033.OakSave.DiscoveredAreaInfo\""
  "H\n\024DiscoveredPlanetInfo\022\031\n\021discovered_pl"
  "anet\030\001 \001(\t\022\025\n\ris_new_planet\030\002 \001(\010\"P\n\021Dis"
  "coverySaveData\022;\n\025discovered_level_info\030"
  "\001 \003(\0132\034.OakSave.DiscoveredLevelInfo\"H\n\033V"
  "ehicleUnlockedSaveGameData\022\022\n\nasset_path"
  "\030\001 \001(\t\022\025\n\rjust_unlocked\030\002 \001(\010\"\214\003\n\037OakCAR"
  "MenuVehicleConfigSaveData\022\031\n\021loadout_sav"
  "e_name\030\001 \001(\t\022\027\n\017body_asset_path\030\002 \001(\t\022\030\n"
  "\020wheel_asset_path\030\003 \001(\t\022\030\n\020armor_asset_p"
  "ath\030\004 \001(\t\022\033\n\023core_mod_asset_path\030\005 \001(\t\022 "
  "\n\030gunner_weapon_asset_path\030\006 \001(\t\022 \n\030driv"
  "er_weapon_asset_path\030\007 \001(\t\022\033\n\023ornament_a"
  "sset_path\030\010 \001(\t\022!\n\031material_decal_asset_"
  "path\030\t \001(\t\022\033\n\023material_asset_path\030\n \001(\t\022"
  "\025\n\rcolor_index_1\030\013 \001(\005\022\025\n\rcolor_index_2\030"
  "\014 \001(\005\022\025\n\rcolor_index_3\030\r \001(\005\"\276\001\n\035CustomP"
  "layerColorSaveGameData\022\027\n\017color_paramete"
  "r\030\001 \001(\t\022$\n\rapplied_color\030\002 \001(\0132\r.OakSave"
  ".Vec3\022\"\n\013split_color\030\003 \001(\0132\r.OakSave.Vec"
  "3\022\031\n\021use_default_color\030\004 \001(\010\022\037\n\027use_defa"
  "ult_split_color\030\005 \001(\010\"N\n\030GuardianRankSav"
  "eGameData\022\025\n\rguardian_rank\030\001 \001(\005\022\033\n\023guar"
  "dian_experience\030\002 \001(\005\"k\n\'GuardianRankRew"
  "ardCharacterSaveGameData\022\022\n\nnum_tokens\030\001"
  " \001(\005\022\022\n\nis_enabled\030\002 \001(\010\022\030\n\020reward_data_"
  "path\030\003 \001(\t\"S\n%GuardianRankPerkCharacterS"
  "aveGameData\022\022\n\nis_enabled\030\001 \001(\010\022\026\n\016perk_"
  "data_path\030\002 \001(\t\"\354\002\n!GuardianRankCharacte"
  "rSaveGameData\022!\n\031guardian_available_toke"
  "ns\030\001 \001(\005\022\025\n\rguardian_rank\030\002 \001(\005\022\033\n\023guard"
  "ian_experience\030\003 \001(\005\022F\n\014rank_rewards\030\004 \003"
  "(\01320.OakSave.GuardianRankRewardCharacter"
  "SaveGameData\022B\n\nrank_perks\030\005 \003(\0132..OakSa"
  "ve.GuardianRankPerkCharacterSaveGameData"
  "\022#\n\033guardian_reward_random_seed\030\006 \001(\005\022\037\n"
  "\027new_guardian_experience\030\007 \001(\003\022\036\n\026is_ran"
  "k_system_enabled\030\010 \001(\010\"X\n\036CrewQuartersDe"
  "corationSaveData\022\030\n\020decoration_index\030\001 \001"
  "(\005\022\034\n\024decoration_data_path\030\002 \001(\t\"\217\001\n\024Cre"
  "wQuartersSaveData\022!\n\031preferred_room_assi"
  "gnment\030\001 \001(\005\022<\n\013decorations\030\002 \003(\0132\'.OakS"
  "ave.CrewQuartersDecorationSaveData\022\026\n\016ro"
  "om_data_path\030\003 \001(\t\"\254\001\n\037CrewQuartersGunRa"
  "ckItemSaveData\022\037\n\027encrypted_serial_numbe"
  "r\030\001 \001(\014\022\027\n\017slot_asset_path\030\002 \001(\t\022O\n\025deve"
  "lopment_save_data\030\003 \001(\01320.OakSave.Invent"
  "oryBalanceStateInitializationData\"_\n\033Cre"
  "wQuartersGunRackSaveData\022@\n\016rack_save_da"
  "ta\030\001 \003(\0132(.OakSave.CrewQuartersGunRackIt"
  "emSaveData\"J\n\023EchoLogSaveGameData\022\034\n\024has"
  "_been_seen_in_log\030\001 \001(\010\022\025\n\recho_log_path"
  "\030\002 \001(\t\"6\n\tMapIDData\022\024\n\014zone_name_id\030\001 \001("
  "\r\022\023\n\013map_name_id\030\002 \001(\r\"w\n\021GameStateSaveD"
  "ata\0220\n\024last_traveled_map_id\030\001 \001(\0132\022.OakS"
  "ave.MapIDData\022\024\n\014mayhem_level\030\002 \001(\005\022\032\n\022m"
  "ayhem_random_seed\030\003 \001(\005\">\n!ChallengeCate"
  "goryProgressSaveData\022\031\n\021category_progres"
  "s\030\001 \001(\014\"\\\n%OakPlayerCharacterAugmentSave"
  "GameData\022\027\n\017slot_asset_path\030\001 \001(\t\022\032\n\022aug"
  "ment_asset_path\030\002 \001(\t\"o\n\"OakPlayerCharac"
  "terSlotSaveGameData\022I\n\021augment_slot_list"
  "\030\001 \003(\0132..OakSave.OakPlayerCharacterAugme"
  "ntSaveGameData\"\277\002\n\026UITrackingSaveGameDat"
  "a\022\"\n\032has_seen_skill_menu_unlock\030\001 \001(\010\022*\n"
  "\"has_seen_guardian_rank_menu_unlock\030\002 \001("
  "\010\022#\n\033has_seen_echo_boot_ammo_bar\030\003 \001(\010\022%"
  "\n\035has_seen_echo_boot_shield_bar\030\004 \001(\010\022#\n"
  "\033has_seen_echo_boot_grenades\030\005 \001(\010\022$\n\034hi"
  "ghest_thvm_breadcrumb_seen\030\006 \001(\005\022#\n\033inve"
  "ntory_slot_unlocks_seen\030\007 \003(\t\022\031\n\021saved_s"
  "pin_offset\030\010 \001(\005\"V\n\017PlanetCycleInfo\022\023\n\013p"
  "lanet_name\030\001 \001(\t\022\024\n\014cycle_length\030\002 \001(\002\022\030"
  "\n\020last_cached_time\030\003 \001(\002\"b\n\025TimeOfDaySav"
  "eGameData\0223\n\021planet_cycle_info\030\001 \003(\0132\030.O"
  "akSave.PlanetCycleInfo\022\024\n\014planet_cycle\030\002"
  " \001(\t\"R\n#LevelPersistence_Actor_SaveGameD"
  "ata\022\022\n\nactor_name\030\001 \001(\t\022\027\n\017timer_remaini"
  "ng\030\002 \001(\005\"}\n#LevelPersistence_Level_SaveG"
  "ameData\022\022\n\nlevel_name\030\001 \001(\t\022B\n\014saved_act"
  "ors\030\002 \003(\0132,.OakSave.LevelPersistence_Act"
  "or_SaveGameData\"\272\001\n\033GbxZoneMapFODSavedLe"
  "velData\022\022\n\nlevel_name\030\001 \001(\t\022\030\n\020fod_textu"
  "re_size\030\002 \001(\r\022\022\n\nnum_chunks\030\003 \001(\r\022\034\n\024dis"
  "covery_percentage\030\004 \001(\002\022\022\n\ndata_state\030\005 "
  "\001(\r\022\025\n\rdata_revision\030\006 \001(\r\022\020\n\010fod_data\030\007"
  " \001(\014\"U\n\031GbxZoneMapFODSaveGameData\0228\n\nlev"
  "el_data\030\001 \003(\0132$.OakSave.GbxZoneMapFODSav"
  "edLevelData\"\275\032\n\tCharacter\022\024\n\014save_game_i"
  "d\030\001 \001(\r\022\033\n\023last_save_timestamp\030\002 \001(\003\022\033\n\023"
  "time_played_seconds\030\003 \001(\r\022;\n\021player_clas"
  "s_data\030\004 \001(\0132 .OakSave.PlayerClassSaveGa"
  "meData\0229\n\016resource_pools\030\005 \003(\0132!.OakSave"
  ".ResourcePoolSavegameData\0222\n\rsaved_regio"
  "ns\030\006 \003(\0132\033.OakSave.RegionSaveGameData\022\031\n"
  "\021experience_points\030\007 \001(\005\0226\n\017game_stats_d"
  "ata\030\010 \003(\0132\035.OakSave.GameStatSaveGameData"
  "\022C\n\027inventory_category_list\030\t \003(\0132\".OakS"
  "ave.InventoryCategorySaveData\022>\n\017invento"
  "ry_items\030\n \003(\0132%.OakSave.OakInventoryIte"
  "mSaveGameData\022G\n\027equipped_inventory_list"
  "\030\013 \003(\0132&.OakSave.EquippedInventorySaveGa"
  "meData\022\032\n\022active_weapon_list\030\014 \003(\005\022;\n\014ab"
  "ility_data\030\r \001(\0132%.OakSave.OakPlayerAbil"
  "itySaveGameData\022\037\n\027last_play_through_ind"
  "ex\030\016 \001(\005\022\036\n\026playthroughs_completed\030\017 \001(\005"
  "\022)\n!show_new_playthrough_notification\030\020 "
  "\001(\010\022J\n\031mission_playthroughs_data\030\021 \003(\0132\'"
  ".OakSave.MissionPlaythroughSaveGameData\022"
  "\036\n\026active_travel_stations\030\025 \003(\t\0222\n\016disco"
  "very_data\030\026 \001(\0132\032.OakSave.DiscoverySaveD"
  "ata\022\"\n\032last_active_travel_station\030\027 \001(\t\022"
  "D\n\026vehicles_unlocked_data\030\030 \003(\0132$.OakSav"
  "e.VehicleUnlockedSaveGameData\022\036\n\026vehicle"
  "_parts_unlocked\030\031 \003(\t\022B\n\020vehicle_loadout"
  "s\030\032 \003(\0132(.OakSave.OakCARMenuVehicleConfi"
  "gSaveData\022\"\n\032vehicle_last_loadout_index\030"
  "\033 \001(\005\0226\n\016challenge_data\030\034 \003(\0132\036.OakSave."
  "ChallengeSaveGameData\022-\n\010sdu_list\030\035 \003(\0132"
  "\033.OakSave.OakSDUSaveGameData\022\037\n\027selected"
  "_customizations\030\036 \003(\t\022%\n\035equipped_emote_"
  "customizations\030\037 \003(\005\022M\n\035selected_color_c"
  "ustomizations\030  \003(\0132&.OakSave.CustomPlay"
  "erColorSaveGameData\0228\n\rguardian_rank\030! \001"
  "(\0132!.OakSave.GuardianRankSaveGameData\0229\n"
  "\022crew_quarters_room\030\" \001(\0132\035.OakSave.Crew"
  "QuartersSaveData\022D\n\026crew_quarters_gun_ra"
  "ck\030# \001(\0132$.OakSave.CrewQuartersGunRackSa"
  "veData\0228\n\022unlocked_echo_logs\030$ \003(\0132\034.Oak"
  "Save.EchoLogSaveGameData\0222\n*has_played_s"
  "pecial_echo_log_insert_already\030% \001(\010\022C\n\021"
  "nickname_mappings\030& \003(\0132(.OakSave.Charac"
  "ter.NicknameMappingsEntry\0220\n\024last_travel"
  "ed_map_id\030\' \001(\0132\022.OakSave.MapIDData\022V\n\"c"
  "hallenge_category_completion_pcts\030( \001(\0132"
  "*.OakSave.ChallengeCategoryProgressSaveD"
  "ata\022R\n\035character_slot_save_game_data\030) \001"
  "(\0132+.OakSave.OakPlayerCharacterSlotSaveG"
  "ameData\022C\n\032ui_tracking_save_game_data\030* "
  "\001(\0132\037.OakSave.UITrackingSaveGameData\022 \n\030"
  "preferred_character_name\030+ \001(\t\022\034\n\024name_c"
  "haracter_limit\030, \001(\005\022\034\n\024preferred_group_"
  "mode\030- \001(\r\022B\n\032time_of_day_save_game_data"
  "\030. \001(\0132\036.OakSave.TimeOfDaySaveGameData\022L"
  "\n\026level_persistence_data\030/ \003(\0132,.OakSave"
  ".LevelPersistence_Level_SaveGameData\0229\n1"
  "accumulated_level_persistence_reset_time"
  "r_seconds\0300 \001(\r\022\024\n\014mayhem_level\0301 \001(\r\022K\n"
  "\037gbx_zone_map_fod_save_game_data\0302 \001(\0132\""
  ".OakSave.GbxZoneMapFODSaveGameData\022P\n%ac"
  "tive_or_blacklisted_travel_stations\0303 \003("
  "\0132!.OakSave.ActiveFastTravelSaveData\0222\n*"
  "last_active_travel_station_for_playthrou"
  "gh\0304 \003(\t\022H\n$game_state_save_data_for_pla"
  "ythrough\0305 \003(\0132\032.OakSave.GameStateSaveDa"
  "ta\022Y\n$registered_downloadable_entitlemen"
  "ts\0306 \003(\0132+.OakSave.RegisteredDownloadabl"
  "eEntitlements\022\\\n&active_travel_stations_"
  "for_playthrough\0307 \003(\0132,.OakSave.Playthro"
  "ughActiveFastTravelSaveData\022\026\n\016save_game"
  "_guid\0308 \001(\t\022P\n\034guardian_rank_character_d"
  "ata\0309 \001(\0132*.OakSave.GuardianRankCharacte"
  "rSaveGameData\022/\n\'optional_objective_rewa"
  "rd_fixup_applied\030: \001(\010\022*\n\"vehicle_part_r"
  "ewards_fixup_applied\030; \001(\010\022\032\n\022last_activ"
  "e_league\030< \001(\r\022#\n\033last_active_league_ins"
  "tance\030= \001(\r\022^\n active_league_instance_fo"
  "r_event\030> \003(\01324.OakSave.Character.Active"
  "LeagueInstanceForEventEntry\0228\n0levelled_"
  "save_vehicle_part_rewards_fixup_applied\030"
  "\? \001(\010\0323\n\025NicknameMappingsEntry\022\013\n\003key\030\001 "
  "\001(\t\022\r\n\005value\030\002 \001(\t\032\?\n!ActiveLeagueInstan"
  "ceForEventEntry\022\013\n\003key\030\001 \001(\r\022\r\n\005value\030\002 "
  "\001(\rb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_OakSave_2eproto_deps[1] = {
  &::descriptor_table_OakShared_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_OakSave_2eproto_sccs[46] = {
  &scc_info_ActiveFastTravelSaveData_OakSave_2eproto.base,
  &scc_info_ChallengeCategoryProgressSaveData_OakSave_2eproto.base,
  &scc_info_Character_OakSave_2eproto.base,
  &scc_info_Character_ActiveLeagueInstanceForEventEntry_OakSave_2eproto.base,
  &scc_info_Character_NicknameMappingsEntry_OakSave_2eproto.base,
  &scc_info_CrewQuartersDecorationSaveData_OakSave_2eproto.base,
  &scc_info_CrewQuartersGunRackItemSaveData_OakSave_2eproto.base,
  &scc_info_CrewQuartersGunRackSaveData_OakSave_2eproto.base,
  &scc_info_CrewQuartersSaveData_OakSave_2eproto.base,
  &scc_info_CustomPlayerColorSaveGameData_OakSave_2eproto.base,
  &scc_info_DiscoveredAreaInfo_OakSave_2eproto.base,
  &scc_info_DiscoveredLevelInfo_OakSave_2eproto.base,
  &scc_info_DiscoveredPlanetInfo_OakSave_2eproto.base,
  &scc_info_DiscoverySaveData_OakSave_2eproto.base,
  &scc_info_EchoLogSaveGameData_OakSave_2eproto.base,
  &scc_info_EquippedInventorySaveGameData_OakSave_2eproto.base,
  &scc_info_GameStateSaveData_OakSave_2eproto.base,
  &scc_info_GbxZoneMapFODSaveGameData_OakSave_2eproto.base,
  &scc_info_GbxZoneMapFODSavedLevelData_OakSave_2eproto.base,
  &scc_info_GuardianRankCharacterSaveGameData_OakSave_2eproto.base,
  &scc_info_GuardianRankPerkCharacterSaveGameData_OakSave_2eproto.base,
  &scc_info_GuardianRankRewardCharacterSaveGameData_OakSave_2eproto.base,
  &scc_info_GuardianRankSaveGameData_OakSave_2eproto.base,
  &scc_info_InventoryBalanceStateInitializationData_OakSave_2eproto.base,
  &scc_info_LevelPersistence_Actor_SaveGameData_OakSave_2eproto.base,
  &scc_info_LevelPersistence_Level_SaveGameData_OakSave_2eproto.base,
  &scc_info_MapIDData_OakSave_2eproto.base,
  &scc_info_MissionPlaythroughSaveGameData_OakSave_2eproto.base,
  &scc_info_MissionStatusPlayerSaveGameData_OakSave_2eproto.base,
  &scc_info_OakAbilitySlotSaveGameData_OakSave_2eproto.base,
  &scc_info_OakAbilityTreeItemSaveGameData_OakSave_2eproto.base,
  &scc_info_OakActionAbilityAugmentConfigurationSaveGameData_OakSave_2eproto.base,
  &scc_info_OakActionAbilityAugmentSaveGameData_OakSave_2eproto.base,
  &scc_info_OakCARMenuVehicleConfigSaveData_OakSave_2eproto.base,
  &scc_info_OakInventoryItemSaveGameData_OakSave_2eproto.base,
  &scc_info_OakPlayerAbilitySaveGameData_OakSave_2eproto.base,
  &scc_info_OakPlayerCharacterAugmentSaveGameData_OakSave_2eproto.base,
  &scc_info_OakPlayerCharacterSlotSaveGameData_OakSave_2eproto.base,
  &scc_info_PlanetCycleInfo_OakSave_2eproto.base,
  &scc_info_PlayerClassSaveGameData_OakSave_2eproto.base,
  &scc_info_PlaythroughActiveFastTravelSaveData_OakSave_2eproto.base,
  &scc_info_RegionSaveGameData_OakSave_2eproto.base,
  &scc_info_ResourcePoolSavegameData_OakSave_2eproto.base,
  &scc_info_TimeOfDaySaveGameData_OakSave_2eproto.base,
  &scc_info_UITrackingSaveGameData_OakSave_2eproto.base,
  &scc_info_VehicleUnlockedSaveGameData_OakSave_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_OakSave_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_OakSave_2eproto = {
  false, false, descriptor_table_protodef_OakSave_2eproto, "OakSave.proto", 9611,
  &descriptor_table_OakSave_2eproto_once, descriptor_table_OakSave_2eproto_sccs, descriptor_table_OakSave_2eproto_deps, 46, 1,
  schemas, file_default_instances, TableStruct_OakSave_2eproto::offsets,
  file_level_metadata_OakSave_2eproto, 46, file_level_enum_descriptors_OakSave_2eproto, file_level_service_descriptors_OakSave_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_OakSave_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_OakSave_2eproto)), true);
namespace OakSave {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MissionStatusPlayerSaveGameData_MissionState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_OakSave_2eproto);
  return file_level_enum_descriptors_OakSave_2eproto[0];
}
bool MissionStatusPlayerSaveGameData_MissionState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MissionStatusPlayerSaveGameData_MissionState MissionStatusPlayerSaveGameData::MS_NotStarted;
constexpr MissionStatusPlayerSaveGameData_MissionState MissionStatusPlayerSaveGameData::MS_Active;
constexpr MissionStatusPlayerSaveGameData_MissionState MissionStatusPlayerSaveGameData::MS_Complete;
constexpr MissionStatusPlayerSaveGameData_MissionState MissionStatusPlayerSaveGameData::MS_Failed;
constexpr MissionStatusPlayerSaveGameData_MissionState MissionStatusPlayerSaveGameData::MS_Unknown;
constexpr MissionStatusPlayerSaveGameData_MissionState MissionStatusPlayerSaveGameData::MissionState_MIN;
constexpr MissionStatusPlayerSaveGameData_MissionState MissionStatusPlayerSaveGameData::MissionState_MAX;
constexpr int MissionStatusPlayerSaveGameData::MissionState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void PlayerClassSaveGameData::InitAsDefaultInstance() {
}
class PlayerClassSaveGameData::_Internal {
 public:
};

PlayerClassSaveGameData::PlayerClassSaveGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.PlayerClassSaveGameData)
}
PlayerClassSaveGameData::PlayerClassSaveGameData(const PlayerClassSaveGameData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  player_class_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_player_class_path().empty()) {
    player_class_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_player_class_path(),
      GetArena());
  }
  dlc_package_id_ = from.dlc_package_id_;
  // @@protoc_insertion_point(copy_constructor:OakSave.PlayerClassSaveGameData)
}

void PlayerClassSaveGameData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlayerClassSaveGameData_OakSave_2eproto.base);
  player_class_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dlc_package_id_ = 0u;
}

PlayerClassSaveGameData::~PlayerClassSaveGameData() {
  // @@protoc_insertion_point(destructor:OakSave.PlayerClassSaveGameData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlayerClassSaveGameData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  player_class_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PlayerClassSaveGameData::ArenaDtor(void* object) {
  PlayerClassSaveGameData* _this = reinterpret_cast< PlayerClassSaveGameData* >(object);
  (void)_this;
}
void PlayerClassSaveGameData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerClassSaveGameData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerClassSaveGameData& PlayerClassSaveGameData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerClassSaveGameData_OakSave_2eproto.base);
  return *internal_default_instance();
}


void PlayerClassSaveGameData::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.PlayerClassSaveGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_class_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dlc_package_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerClassSaveGameData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string player_class_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_player_class_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.PlayerClassSaveGameData.player_class_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 dlc_package_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          dlc_package_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerClassSaveGameData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.PlayerClassSaveGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string player_class_path = 1;
  if (this->player_class_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_player_class_path().data(), static_cast<int>(this->_internal_player_class_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.PlayerClassSaveGameData.player_class_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_player_class_path(), target);
  }

  // uint32 dlc_package_id = 2;
  if (this->dlc_package_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_dlc_package_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.PlayerClassSaveGameData)
  return target;
}

size_t PlayerClassSaveGameData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.PlayerClassSaveGameData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string player_class_path = 1;
  if (this->player_class_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_player_class_path());
  }

  // uint32 dlc_package_id = 2;
  if (this->dlc_package_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dlc_package_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerClassSaveGameData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.PlayerClassSaveGameData)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerClassSaveGameData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerClassSaveGameData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.PlayerClassSaveGameData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.PlayerClassSaveGameData)
    MergeFrom(*source);
  }
}

void PlayerClassSaveGameData::MergeFrom(const PlayerClassSaveGameData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.PlayerClassSaveGameData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.player_class_path().size() > 0) {
    _internal_set_player_class_path(from._internal_player_class_path());
  }
  if (from.dlc_package_id() != 0) {
    _internal_set_dlc_package_id(from._internal_dlc_package_id());
  }
}

void PlayerClassSaveGameData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.PlayerClassSaveGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerClassSaveGameData::CopyFrom(const PlayerClassSaveGameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.PlayerClassSaveGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerClassSaveGameData::IsInitialized() const {
  return true;
}

void PlayerClassSaveGameData::InternalSwap(PlayerClassSaveGameData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  player_class_path_.Swap(&other->player_class_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(dlc_package_id_, other->dlc_package_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerClassSaveGameData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResourcePoolSavegameData::InitAsDefaultInstance() {
}
class ResourcePoolSavegameData::_Internal {
 public:
};

ResourcePoolSavegameData::ResourcePoolSavegameData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.ResourcePoolSavegameData)
}
ResourcePoolSavegameData::ResourcePoolSavegameData(const ResourcePoolSavegameData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  resource_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_resource_path().empty()) {
    resource_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_resource_path(),
      GetArena());
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:OakSave.ResourcePoolSavegameData)
}

void ResourcePoolSavegameData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResourcePoolSavegameData_OakSave_2eproto.base);
  resource_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_ = 0;
}

ResourcePoolSavegameData::~ResourcePoolSavegameData() {
  // @@protoc_insertion_point(destructor:OakSave.ResourcePoolSavegameData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResourcePoolSavegameData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  resource_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResourcePoolSavegameData::ArenaDtor(void* object) {
  ResourcePoolSavegameData* _this = reinterpret_cast< ResourcePoolSavegameData* >(object);
  (void)_this;
}
void ResourcePoolSavegameData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResourcePoolSavegameData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResourcePoolSavegameData& ResourcePoolSavegameData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResourcePoolSavegameData_OakSave_2eproto.base);
  return *internal_default_instance();
}


void ResourcePoolSavegameData::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.ResourcePoolSavegameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resource_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  amount_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourcePoolSavegameData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float amount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string resource_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_resource_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.ResourcePoolSavegameData.resource_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResourcePoolSavegameData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.ResourcePoolSavegameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float amount = 1;
  if (!(this->amount() <= 0 && this->amount() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_amount(), target);
  }

  // string resource_path = 2;
  if (this->resource_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resource_path().data(), static_cast<int>(this->_internal_resource_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.ResourcePoolSavegameData.resource_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_resource_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.ResourcePoolSavegameData)
  return target;
}

size_t ResourcePoolSavegameData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.ResourcePoolSavegameData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string resource_path = 2;
  if (this->resource_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resource_path());
  }

  // float amount = 1;
  if (!(this->amount() <= 0 && this->amount() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResourcePoolSavegameData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.ResourcePoolSavegameData)
  GOOGLE_DCHECK_NE(&from, this);
  const ResourcePoolSavegameData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResourcePoolSavegameData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.ResourcePoolSavegameData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.ResourcePoolSavegameData)
    MergeFrom(*source);
  }
}

void ResourcePoolSavegameData::MergeFrom(const ResourcePoolSavegameData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.ResourcePoolSavegameData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.resource_path().size() > 0) {
    _internal_set_resource_path(from._internal_resource_path());
  }
  if (!(from.amount() <= 0 && from.amount() >= 0)) {
    _internal_set_amount(from._internal_amount());
  }
}

void ResourcePoolSavegameData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.ResourcePoolSavegameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourcePoolSavegameData::CopyFrom(const ResourcePoolSavegameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.ResourcePoolSavegameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourcePoolSavegameData::IsInitialized() const {
  return true;
}

void ResourcePoolSavegameData::InternalSwap(ResourcePoolSavegameData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  resource_path_.Swap(&other->resource_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(amount_, other->amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourcePoolSavegameData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegionSaveGameData::InitAsDefaultInstance() {
}
class RegionSaveGameData::_Internal {
 public:
};

RegionSaveGameData::RegionSaveGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.RegionSaveGameData)
}
RegionSaveGameData::RegionSaveGameData(const RegionSaveGameData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  region_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_region_path().empty()) {
    region_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_region_path(),
      GetArena());
  }
  ::memcpy(&game_stage_, &from.game_stage_,
    static_cast<size_t>(reinterpret_cast<char*>(&dlc_package_id_) -
    reinterpret_cast<char*>(&game_stage_)) + sizeof(dlc_package_id_));
  // @@protoc_insertion_point(copy_constructor:OakSave.RegionSaveGameData)
}

void RegionSaveGameData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegionSaveGameData_OakSave_2eproto.base);
  region_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&game_stage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dlc_package_id_) -
      reinterpret_cast<char*>(&game_stage_)) + sizeof(dlc_package_id_));
}

RegionSaveGameData::~RegionSaveGameData() {
  // @@protoc_insertion_point(destructor:OakSave.RegionSaveGameData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RegionSaveGameData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  region_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RegionSaveGameData::ArenaDtor(void* object) {
  RegionSaveGameData* _this = reinterpret_cast< RegionSaveGameData* >(object);
  (void)_this;
}
void RegionSaveGameData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegionSaveGameData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegionSaveGameData& RegionSaveGameData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegionSaveGameData_OakSave_2eproto.base);
  return *internal_default_instance();
}


void RegionSaveGameData::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.RegionSaveGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  region_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&game_stage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dlc_package_id_) -
      reinterpret_cast<char*>(&game_stage_)) + sizeof(dlc_package_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegionSaveGameData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 game_stage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          game_stage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 play_through_idx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          play_through_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string region_path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_region_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.RegionSaveGameData.region_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 dlc_package_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          dlc_package_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegionSaveGameData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.RegionSaveGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 game_stage = 1;
  if (this->game_stage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_game_stage(), target);
  }

  // int32 play_through_idx = 2;
  if (this->play_through_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_play_through_idx(), target);
  }

  // string region_path = 3;
  if (this->region_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_region_path().data(), static_cast<int>(this->_internal_region_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.RegionSaveGameData.region_path");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_region_path(), target);
  }

  // uint32 dlc_package_id = 4;
  if (this->dlc_package_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_dlc_package_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.RegionSaveGameData)
  return target;
}

size_t RegionSaveGameData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.RegionSaveGameData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string region_path = 3;
  if (this->region_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_region_path());
  }

  // int32 game_stage = 1;
  if (this->game_stage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_game_stage());
  }

  // int32 play_through_idx = 2;
  if (this->play_through_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_play_through_idx());
  }

  // uint32 dlc_package_id = 4;
  if (this->dlc_package_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dlc_package_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegionSaveGameData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.RegionSaveGameData)
  GOOGLE_DCHECK_NE(&from, this);
  const RegionSaveGameData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegionSaveGameData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.RegionSaveGameData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.RegionSaveGameData)
    MergeFrom(*source);
  }
}

void RegionSaveGameData::MergeFrom(const RegionSaveGameData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.RegionSaveGameData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.region_path().size() > 0) {
    _internal_set_region_path(from._internal_region_path());
  }
  if (from.game_stage() != 0) {
    _internal_set_game_stage(from._internal_game_stage());
  }
  if (from.play_through_idx() != 0) {
    _internal_set_play_through_idx(from._internal_play_through_idx());
  }
  if (from.dlc_package_id() != 0) {
    _internal_set_dlc_package_id(from._internal_dlc_package_id());
  }
}

void RegionSaveGameData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.RegionSaveGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionSaveGameData::CopyFrom(const RegionSaveGameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.RegionSaveGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionSaveGameData::IsInitialized() const {
  return true;
}

void RegionSaveGameData::InternalSwap(RegionSaveGameData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  region_path_.Swap(&other->region_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegionSaveGameData, dlc_package_id_)
      + sizeof(RegionSaveGameData::dlc_package_id_)
      - PROTOBUF_FIELD_OFFSET(RegionSaveGameData, game_stage_)>(
          reinterpret_cast<char*>(&game_stage_),
          reinterpret_cast<char*>(&other->game_stage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegionSaveGameData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InventoryBalanceStateInitializationData::InitAsDefaultInstance() {
}
class InventoryBalanceStateInitializationData::_Internal {
 public:
};

InventoryBalanceStateInitializationData::InventoryBalanceStateInitializationData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  part_list_(arena),
  generic_part_list_(arena),
  customization_part_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.InventoryBalanceStateInitializationData)
}
InventoryBalanceStateInitializationData::InventoryBalanceStateInitializationData(const InventoryBalanceStateInitializationData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      part_list_(from.part_list_),
      generic_part_list_(from.generic_part_list_),
      customization_part_list_(from.customization_part_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  inventory_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_inventory_data().empty()) {
    inventory_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_inventory_data(),
      GetArena());
  }
  inventory_balance_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_inventory_balance_data().empty()) {
    inventory_balance_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_inventory_balance_data(),
      GetArena());
  }
  manufacturer_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_manufacturer_data().empty()) {
    manufacturer_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_manufacturer_data(),
      GetArena());
  }
  additional_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_additional_data().empty()) {
    additional_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_additional_data(),
      GetArena());
  }
  game_stage_ = from.game_stage_;
  // @@protoc_insertion_point(copy_constructor:OakSave.InventoryBalanceStateInitializationData)
}

void InventoryBalanceStateInitializationData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InventoryBalanceStateInitializationData_OakSave_2eproto.base);
  inventory_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  inventory_balance_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  manufacturer_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  additional_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  game_stage_ = 0;
}

InventoryBalanceStateInitializationData::~InventoryBalanceStateInitializationData() {
  // @@protoc_insertion_point(destructor:OakSave.InventoryBalanceStateInitializationData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InventoryBalanceStateInitializationData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  inventory_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  inventory_balance_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  manufacturer_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  additional_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InventoryBalanceStateInitializationData::ArenaDtor(void* object) {
  InventoryBalanceStateInitializationData* _this = reinterpret_cast< InventoryBalanceStateInitializationData* >(object);
  (void)_this;
}
void InventoryBalanceStateInitializationData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InventoryBalanceStateInitializationData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InventoryBalanceStateInitializationData& InventoryBalanceStateInitializationData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InventoryBalanceStateInitializationData_OakSave_2eproto.base);
  return *internal_default_instance();
}


void InventoryBalanceStateInitializationData::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.InventoryBalanceStateInitializationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  part_list_.Clear();
  generic_part_list_.Clear();
  customization_part_list_.Clear();
  inventory_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  inventory_balance_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  manufacturer_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  additional_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  game_stage_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InventoryBalanceStateInitializationData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 game_stage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          game_stage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string inventory_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_inventory_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.InventoryBalanceStateInitializationData.inventory_data"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string inventory_balance_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_inventory_balance_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.InventoryBalanceStateInitializationData.inventory_balance_data"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string manufacturer_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_manufacturer_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.InventoryBalanceStateInitializationData.manufacturer_data"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string part_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_part_list();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.InventoryBalanceStateInitializationData.part_list"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string generic_part_list = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_generic_part_list();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.InventoryBalanceStateInitializationData.generic_part_list"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes additional_data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_additional_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string customization_part_list = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_customization_part_list();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.InventoryBalanceStateInitializationData.customization_part_list"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InventoryBalanceStateInitializationData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.InventoryBalanceStateInitializationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 game_stage = 1;
  if (this->game_stage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_game_stage(), target);
  }

  // string inventory_data = 2;
  if (this->inventory_data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_inventory_data().data(), static_cast<int>(this->_internal_inventory_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.InventoryBalanceStateInitializationData.inventory_data");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_inventory_data(), target);
  }

  // string inventory_balance_data = 3;
  if (this->inventory_balance_data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_inventory_balance_data().data(), static_cast<int>(this->_internal_inventory_balance_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.InventoryBalanceStateInitializationData.inventory_balance_data");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_inventory_balance_data(), target);
  }

  // string manufacturer_data = 4;
  if (this->manufacturer_data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_manufacturer_data().data(), static_cast<int>(this->_internal_manufacturer_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.InventoryBalanceStateInitializationData.manufacturer_data");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_manufacturer_data(), target);
  }

  // repeated string part_list = 5;
  for (int i = 0, n = this->_internal_part_list_size(); i < n; i++) {
    const auto& s = this->_internal_part_list(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.InventoryBalanceStateInitializationData.part_list");
    target = stream->WriteString(5, s, target);
  }

  // repeated string generic_part_list = 6;
  for (int i = 0, n = this->_internal_generic_part_list_size(); i < n; i++) {
    const auto& s = this->_internal_generic_part_list(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.InventoryBalanceStateInitializationData.generic_part_list");
    target = stream->WriteString(6, s, target);
  }

  // bytes additional_data = 7;
  if (this->additional_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_additional_data(), target);
  }

  // repeated string customization_part_list = 8;
  for (int i = 0, n = this->_internal_customization_part_list_size(); i < n; i++) {
    const auto& s = this->_internal_customization_part_list(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.InventoryBalanceStateInitializationData.customization_part_list");
    target = stream->WriteString(8, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.InventoryBalanceStateInitializationData)
  return target;
}

size_t InventoryBalanceStateInitializationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.InventoryBalanceStateInitializationData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string part_list = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(part_list_.size());
  for (int i = 0, n = part_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      part_list_.Get(i));
  }

  // repeated string generic_part_list = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(generic_part_list_.size());
  for (int i = 0, n = generic_part_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      generic_part_list_.Get(i));
  }

  // repeated string customization_part_list = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(customization_part_list_.size());
  for (int i = 0, n = customization_part_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      customization_part_list_.Get(i));
  }

  // string inventory_data = 2;
  if (this->inventory_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_inventory_data());
  }

  // string inventory_balance_data = 3;
  if (this->inventory_balance_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_inventory_balance_data());
  }

  // string manufacturer_data = 4;
  if (this->manufacturer_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_manufacturer_data());
  }

  // bytes additional_data = 7;
  if (this->additional_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_additional_data());
  }

  // int32 game_stage = 1;
  if (this->game_stage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_game_stage());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InventoryBalanceStateInitializationData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.InventoryBalanceStateInitializationData)
  GOOGLE_DCHECK_NE(&from, this);
  const InventoryBalanceStateInitializationData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InventoryBalanceStateInitializationData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.InventoryBalanceStateInitializationData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.InventoryBalanceStateInitializationData)
    MergeFrom(*source);
  }
}

void InventoryBalanceStateInitializationData::MergeFrom(const InventoryBalanceStateInitializationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.InventoryBalanceStateInitializationData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  part_list_.MergeFrom(from.part_list_);
  generic_part_list_.MergeFrom(from.generic_part_list_);
  customization_part_list_.MergeFrom(from.customization_part_list_);
  if (from.inventory_data().size() > 0) {
    _internal_set_inventory_data(from._internal_inventory_data());
  }
  if (from.inventory_balance_data().size() > 0) {
    _internal_set_inventory_balance_data(from._internal_inventory_balance_data());
  }
  if (from.manufacturer_data().size() > 0) {
    _internal_set_manufacturer_data(from._internal_manufacturer_data());
  }
  if (from.additional_data().size() > 0) {
    _internal_set_additional_data(from._internal_additional_data());
  }
  if (from.game_stage() != 0) {
    _internal_set_game_stage(from._internal_game_stage());
  }
}

void InventoryBalanceStateInitializationData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.InventoryBalanceStateInitializationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InventoryBalanceStateInitializationData::CopyFrom(const InventoryBalanceStateInitializationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.InventoryBalanceStateInitializationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InventoryBalanceStateInitializationData::IsInitialized() const {
  return true;
}

void InventoryBalanceStateInitializationData::InternalSwap(InventoryBalanceStateInitializationData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  part_list_.InternalSwap(&other->part_list_);
  generic_part_list_.InternalSwap(&other->generic_part_list_);
  customization_part_list_.InternalSwap(&other->customization_part_list_);
  inventory_data_.Swap(&other->inventory_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  inventory_balance_data_.Swap(&other->inventory_balance_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  manufacturer_data_.Swap(&other->manufacturer_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  additional_data_.Swap(&other->additional_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(game_stage_, other->game_stage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InventoryBalanceStateInitializationData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OakInventoryItemSaveGameData::InitAsDefaultInstance() {
  ::OakSave::_OakInventoryItemSaveGameData_default_instance_._instance.get_mutable()->development_save_data_ = const_cast< ::OakSave::InventoryBalanceStateInitializationData*>(
      ::OakSave::InventoryBalanceStateInitializationData::internal_default_instance());
}
class OakInventoryItemSaveGameData::_Internal {
 public:
  static const ::OakSave::InventoryBalanceStateInitializationData& development_save_data(const OakInventoryItemSaveGameData* msg);
};

const ::OakSave::InventoryBalanceStateInitializationData&
OakInventoryItemSaveGameData::_Internal::development_save_data(const OakInventoryItemSaveGameData* msg) {
  return *msg->development_save_data_;
}
OakInventoryItemSaveGameData::OakInventoryItemSaveGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.OakInventoryItemSaveGameData)
}
OakInventoryItemSaveGameData::OakInventoryItemSaveGameData(const OakInventoryItemSaveGameData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  item_serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_item_serial_number().empty()) {
    item_serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_item_serial_number(),
      GetArena());
  }
  weapon_skin_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_weapon_skin_path().empty()) {
    weapon_skin_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_weapon_skin_path(),
      GetArena());
  }
  if (from._internal_has_development_save_data()) {
    development_save_data_ = new ::OakSave::InventoryBalanceStateInitializationData(*from.development_save_data_);
  } else {
    development_save_data_ = nullptr;
  }
  ::memcpy(&pickup_order_index_, &from.pickup_order_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&pickup_order_index_)) + sizeof(flags_));
  // @@protoc_insertion_point(copy_constructor:OakSave.OakInventoryItemSaveGameData)
}

void OakInventoryItemSaveGameData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OakInventoryItemSaveGameData_OakSave_2eproto.base);
  item_serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  weapon_skin_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&development_save_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&development_save_data_)) + sizeof(flags_));
}

OakInventoryItemSaveGameData::~OakInventoryItemSaveGameData() {
  // @@protoc_insertion_point(destructor:OakSave.OakInventoryItemSaveGameData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OakInventoryItemSaveGameData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  item_serial_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  weapon_skin_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete development_save_data_;
}

void OakInventoryItemSaveGameData::ArenaDtor(void* object) {
  OakInventoryItemSaveGameData* _this = reinterpret_cast< OakInventoryItemSaveGameData* >(object);
  (void)_this;
}
void OakInventoryItemSaveGameData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OakInventoryItemSaveGameData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OakInventoryItemSaveGameData& OakInventoryItemSaveGameData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OakInventoryItemSaveGameData_OakSave_2eproto.base);
  return *internal_default_instance();
}


void OakInventoryItemSaveGameData::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.OakInventoryItemSaveGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_serial_number_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  weapon_skin_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && development_save_data_ != nullptr) {
    delete development_save_data_;
  }
  development_save_data_ = nullptr;
  ::memset(&pickup_order_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&pickup_order_index_)) + sizeof(flags_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OakInventoryItemSaveGameData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes item_serial_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_item_serial_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pickup_order_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          pickup_order_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string weapon_skin_path = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_weapon_skin_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.OakInventoryItemSaveGameData.weapon_skin_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OakSave.InventoryBalanceStateInitializationData development_save_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_development_save_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OakInventoryItemSaveGameData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.OakInventoryItemSaveGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes item_serial_number = 1;
  if (this->item_serial_number().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_item_serial_number(), target);
  }

  // int32 pickup_order_index = 2;
  if (this->pickup_order_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_pickup_order_index(), target);
  }

  // int32 flags = 3;
  if (this->flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_flags(), target);
  }

  // string weapon_skin_path = 4;
  if (this->weapon_skin_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_weapon_skin_path().data(), static_cast<int>(this->_internal_weapon_skin_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.OakInventoryItemSaveGameData.weapon_skin_path");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_weapon_skin_path(), target);
  }

  // .OakSave.InventoryBalanceStateInitializationData development_save_data = 5;
  if (this->has_development_save_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::development_save_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.OakInventoryItemSaveGameData)
  return target;
}

size_t OakInventoryItemSaveGameData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.OakInventoryItemSaveGameData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes item_serial_number = 1;
  if (this->item_serial_number().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_item_serial_number());
  }

  // string weapon_skin_path = 4;
  if (this->weapon_skin_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_weapon_skin_path());
  }

  // .OakSave.InventoryBalanceStateInitializationData development_save_data = 5;
  if (this->has_development_save_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *development_save_data_);
  }

  // int32 pickup_order_index = 2;
  if (this->pickup_order_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pickup_order_index());
  }

  // int32 flags = 3;
  if (this->flags() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_flags());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OakInventoryItemSaveGameData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.OakInventoryItemSaveGameData)
  GOOGLE_DCHECK_NE(&from, this);
  const OakInventoryItemSaveGameData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OakInventoryItemSaveGameData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.OakInventoryItemSaveGameData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.OakInventoryItemSaveGameData)
    MergeFrom(*source);
  }
}

void OakInventoryItemSaveGameData::MergeFrom(const OakInventoryItemSaveGameData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.OakInventoryItemSaveGameData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.item_serial_number().size() > 0) {
    _internal_set_item_serial_number(from._internal_item_serial_number());
  }
  if (from.weapon_skin_path().size() > 0) {
    _internal_set_weapon_skin_path(from._internal_weapon_skin_path());
  }
  if (from.has_development_save_data()) {
    _internal_mutable_development_save_data()->::OakSave::InventoryBalanceStateInitializationData::MergeFrom(from._internal_development_save_data());
  }
  if (from.pickup_order_index() != 0) {
    _internal_set_pickup_order_index(from._internal_pickup_order_index());
  }
  if (from.flags() != 0) {
    _internal_set_flags(from._internal_flags());
  }
}

void OakInventoryItemSaveGameData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.OakInventoryItemSaveGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OakInventoryItemSaveGameData::CopyFrom(const OakInventoryItemSaveGameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.OakInventoryItemSaveGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OakInventoryItemSaveGameData::IsInitialized() const {
  return true;
}

void OakInventoryItemSaveGameData::InternalSwap(OakInventoryItemSaveGameData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  item_serial_number_.Swap(&other->item_serial_number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  weapon_skin_path_.Swap(&other->weapon_skin_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OakInventoryItemSaveGameData, flags_)
      + sizeof(OakInventoryItemSaveGameData::flags_)
      - PROTOBUF_FIELD_OFFSET(OakInventoryItemSaveGameData, development_save_data_)>(
          reinterpret_cast<char*>(&development_save_data_),
          reinterpret_cast<char*>(&other->development_save_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OakInventoryItemSaveGameData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EquippedInventorySaveGameData::InitAsDefaultInstance() {
}
class EquippedInventorySaveGameData::_Internal {
 public:
};

EquippedInventorySaveGameData::EquippedInventorySaveGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.EquippedInventorySaveGameData)
}
EquippedInventorySaveGameData::EquippedInventorySaveGameData(const EquippedInventorySaveGameData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  slot_data_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_slot_data_path().empty()) {
    slot_data_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_slot_data_path(),
      GetArena());
  }
  trinket_data_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_trinket_data_path().empty()) {
    trinket_data_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_trinket_data_path(),
      GetArena());
  }
  ::memcpy(&inventory_list_index_, &from.inventory_list_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&enabled_) -
    reinterpret_cast<char*>(&inventory_list_index_)) + sizeof(enabled_));
  // @@protoc_insertion_point(copy_constructor:OakSave.EquippedInventorySaveGameData)
}

void EquippedInventorySaveGameData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EquippedInventorySaveGameData_OakSave_2eproto.base);
  slot_data_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trinket_data_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&inventory_list_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enabled_) -
      reinterpret_cast<char*>(&inventory_list_index_)) + sizeof(enabled_));
}

EquippedInventorySaveGameData::~EquippedInventorySaveGameData() {
  // @@protoc_insertion_point(destructor:OakSave.EquippedInventorySaveGameData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EquippedInventorySaveGameData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  slot_data_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trinket_data_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EquippedInventorySaveGameData::ArenaDtor(void* object) {
  EquippedInventorySaveGameData* _this = reinterpret_cast< EquippedInventorySaveGameData* >(object);
  (void)_this;
}
void EquippedInventorySaveGameData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EquippedInventorySaveGameData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EquippedInventorySaveGameData& EquippedInventorySaveGameData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EquippedInventorySaveGameData_OakSave_2eproto.base);
  return *internal_default_instance();
}


void EquippedInventorySaveGameData::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.EquippedInventorySaveGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slot_data_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  trinket_data_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&inventory_list_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enabled_) -
      reinterpret_cast<char*>(&inventory_list_index_)) + sizeof(enabled_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EquippedInventorySaveGameData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 inventory_list_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          inventory_list_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string slot_data_path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_slot_data_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.EquippedInventorySaveGameData.slot_data_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string trinket_data_path = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_trinket_data_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.EquippedInventorySaveGameData.trinket_data_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EquippedInventorySaveGameData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.EquippedInventorySaveGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 inventory_list_index = 1;
  if (this->inventory_list_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_inventory_list_index(), target);
  }

  // bool enabled = 2;
  if (this->enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enabled(), target);
  }

  // string slot_data_path = 3;
  if (this->slot_data_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_slot_data_path().data(), static_cast<int>(this->_internal_slot_data_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.EquippedInventorySaveGameData.slot_data_path");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_slot_data_path(), target);
  }

  // string trinket_data_path = 4;
  if (this->trinket_data_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trinket_data_path().data(), static_cast<int>(this->_internal_trinket_data_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.EquippedInventorySaveGameData.trinket_data_path");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_trinket_data_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.EquippedInventorySaveGameData)
  return target;
}

size_t EquippedInventorySaveGameData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.EquippedInventorySaveGameData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string slot_data_path = 3;
  if (this->slot_data_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_slot_data_path());
  }

  // string trinket_data_path = 4;
  if (this->trinket_data_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trinket_data_path());
  }

  // int32 inventory_list_index = 1;
  if (this->inventory_list_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inventory_list_index());
  }

  // bool enabled = 2;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EquippedInventorySaveGameData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.EquippedInventorySaveGameData)
  GOOGLE_DCHECK_NE(&from, this);
  const EquippedInventorySaveGameData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EquippedInventorySaveGameData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.EquippedInventorySaveGameData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.EquippedInventorySaveGameData)
    MergeFrom(*source);
  }
}

void EquippedInventorySaveGameData::MergeFrom(const EquippedInventorySaveGameData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.EquippedInventorySaveGameData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.slot_data_path().size() > 0) {
    _internal_set_slot_data_path(from._internal_slot_data_path());
  }
  if (from.trinket_data_path().size() > 0) {
    _internal_set_trinket_data_path(from._internal_trinket_data_path());
  }
  if (from.inventory_list_index() != 0) {
    _internal_set_inventory_list_index(from._internal_inventory_list_index());
  }
  if (from.enabled() != 0) {
    _internal_set_enabled(from._internal_enabled());
  }
}

void EquippedInventorySaveGameData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.EquippedInventorySaveGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquippedInventorySaveGameData::CopyFrom(const EquippedInventorySaveGameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.EquippedInventorySaveGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquippedInventorySaveGameData::IsInitialized() const {
  return true;
}

void EquippedInventorySaveGameData::InternalSwap(EquippedInventorySaveGameData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  slot_data_path_.Swap(&other->slot_data_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  trinket_data_path_.Swap(&other->trinket_data_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EquippedInventorySaveGameData, enabled_)
      + sizeof(EquippedInventorySaveGameData::enabled_)
      - PROTOBUF_FIELD_OFFSET(EquippedInventorySaveGameData, inventory_list_index_)>(
          reinterpret_cast<char*>(&inventory_list_index_),
          reinterpret_cast<char*>(&other->inventory_list_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EquippedInventorySaveGameData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OakAbilityTreeItemSaveGameData::InitAsDefaultInstance() {
}
class OakAbilityTreeItemSaveGameData::_Internal {
 public:
};

OakAbilityTreeItemSaveGameData::OakAbilityTreeItemSaveGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.OakAbilityTreeItemSaveGameData)
}
OakAbilityTreeItemSaveGameData::OakAbilityTreeItemSaveGameData(const OakAbilityTreeItemSaveGameData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  item_asset_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_item_asset_path().empty()) {
    item_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_item_asset_path(),
      GetArena());
  }
  ::memcpy(&points_, &from.points_,
    static_cast<size_t>(reinterpret_cast<char*>(&tree_identifier_) -
    reinterpret_cast<char*>(&points_)) + sizeof(tree_identifier_));
  // @@protoc_insertion_point(copy_constructor:OakSave.OakAbilityTreeItemSaveGameData)
}

void OakAbilityTreeItemSaveGameData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OakAbilityTreeItemSaveGameData_OakSave_2eproto.base);
  item_asset_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&points_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tree_identifier_) -
      reinterpret_cast<char*>(&points_)) + sizeof(tree_identifier_));
}

OakAbilityTreeItemSaveGameData::~OakAbilityTreeItemSaveGameData() {
  // @@protoc_insertion_point(destructor:OakSave.OakAbilityTreeItemSaveGameData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OakAbilityTreeItemSaveGameData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  item_asset_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OakAbilityTreeItemSaveGameData::ArenaDtor(void* object) {
  OakAbilityTreeItemSaveGameData* _this = reinterpret_cast< OakAbilityTreeItemSaveGameData* >(object);
  (void)_this;
}
void OakAbilityTreeItemSaveGameData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OakAbilityTreeItemSaveGameData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OakAbilityTreeItemSaveGameData& OakAbilityTreeItemSaveGameData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OakAbilityTreeItemSaveGameData_OakSave_2eproto.base);
  return *internal_default_instance();
}


void OakAbilityTreeItemSaveGameData::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.OakAbilityTreeItemSaveGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_asset_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&points_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tree_identifier_) -
      reinterpret_cast<char*>(&points_)) + sizeof(tree_identifier_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OakAbilityTreeItemSaveGameData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string item_asset_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_item_asset_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.OakAbilityTreeItemSaveGameData.item_asset_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 points = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_points = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          max_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 tree_identifier = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          tree_identifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OakAbilityTreeItemSaveGameData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.OakAbilityTreeItemSaveGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string item_asset_path = 1;
  if (this->item_asset_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_item_asset_path().data(), static_cast<int>(this->_internal_item_asset_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.OakAbilityTreeItemSaveGameData.item_asset_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_item_asset_path(), target);
  }

  // int32 points = 2;
  if (this->points() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_points(), target);
  }

  // int32 max_points = 3;
  if (this->max_points() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_max_points(), target);
  }

  // int32 tree_identifier = 4;
  if (this->tree_identifier() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_tree_identifier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.OakAbilityTreeItemSaveGameData)
  return target;
}

size_t OakAbilityTreeItemSaveGameData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.OakAbilityTreeItemSaveGameData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string item_asset_path = 1;
  if (this->item_asset_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_item_asset_path());
  }

  // int32 points = 2;
  if (this->points() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_points());
  }

  // int32 max_points = 3;
  if (this->max_points() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_points());
  }

  // int32 tree_identifier = 4;
  if (this->tree_identifier() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tree_identifier());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OakAbilityTreeItemSaveGameData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.OakAbilityTreeItemSaveGameData)
  GOOGLE_DCHECK_NE(&from, this);
  const OakAbilityTreeItemSaveGameData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OakAbilityTreeItemSaveGameData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.OakAbilityTreeItemSaveGameData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.OakAbilityTreeItemSaveGameData)
    MergeFrom(*source);
  }
}

void OakAbilityTreeItemSaveGameData::MergeFrom(const OakAbilityTreeItemSaveGameData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.OakAbilityTreeItemSaveGameData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.item_asset_path().size() > 0) {
    _internal_set_item_asset_path(from._internal_item_asset_path());
  }
  if (from.points() != 0) {
    _internal_set_points(from._internal_points());
  }
  if (from.max_points() != 0) {
    _internal_set_max_points(from._internal_max_points());
  }
  if (from.tree_identifier() != 0) {
    _internal_set_tree_identifier(from._internal_tree_identifier());
  }
}

void OakAbilityTreeItemSaveGameData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.OakAbilityTreeItemSaveGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OakAbilityTreeItemSaveGameData::CopyFrom(const OakAbilityTreeItemSaveGameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.OakAbilityTreeItemSaveGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OakAbilityTreeItemSaveGameData::IsInitialized() const {
  return true;
}

void OakAbilityTreeItemSaveGameData::InternalSwap(OakAbilityTreeItemSaveGameData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  item_asset_path_.Swap(&other->item_asset_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OakAbilityTreeItemSaveGameData, tree_identifier_)
      + sizeof(OakAbilityTreeItemSaveGameData::tree_identifier_)
      - PROTOBUF_FIELD_OFFSET(OakAbilityTreeItemSaveGameData, points_)>(
          reinterpret_cast<char*>(&points_),
          reinterpret_cast<char*>(&other->points_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OakAbilityTreeItemSaveGameData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OakAbilitySlotSaveGameData::InitAsDefaultInstance() {
}
class OakAbilitySlotSaveGameData::_Internal {
 public:
};

OakAbilitySlotSaveGameData::OakAbilitySlotSaveGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.OakAbilitySlotSaveGameData)
}
OakAbilitySlotSaveGameData::OakAbilitySlotSaveGameData(const OakAbilitySlotSaveGameData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ability_class_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ability_class_path().empty()) {
    ability_class_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ability_class_path(),
      GetArena());
  }
  slot_asset_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_slot_asset_path().empty()) {
    slot_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_slot_asset_path(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:OakSave.OakAbilitySlotSaveGameData)
}

void OakAbilitySlotSaveGameData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OakAbilitySlotSaveGameData_OakSave_2eproto.base);
  ability_class_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  slot_asset_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

OakAbilitySlotSaveGameData::~OakAbilitySlotSaveGameData() {
  // @@protoc_insertion_point(destructor:OakSave.OakAbilitySlotSaveGameData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OakAbilitySlotSaveGameData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ability_class_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  slot_asset_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OakAbilitySlotSaveGameData::ArenaDtor(void* object) {
  OakAbilitySlotSaveGameData* _this = reinterpret_cast< OakAbilitySlotSaveGameData* >(object);
  (void)_this;
}
void OakAbilitySlotSaveGameData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OakAbilitySlotSaveGameData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OakAbilitySlotSaveGameData& OakAbilitySlotSaveGameData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OakAbilitySlotSaveGameData_OakSave_2eproto.base);
  return *internal_default_instance();
}


void OakAbilitySlotSaveGameData::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.OakAbilitySlotSaveGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ability_class_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  slot_asset_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OakAbilitySlotSaveGameData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ability_class_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ability_class_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.OakAbilitySlotSaveGameData.ability_class_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string slot_asset_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_slot_asset_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.OakAbilitySlotSaveGameData.slot_asset_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OakAbilitySlotSaveGameData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.OakAbilitySlotSaveGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ability_class_path = 1;
  if (this->ability_class_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ability_class_path().data(), static_cast<int>(this->_internal_ability_class_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.OakAbilitySlotSaveGameData.ability_class_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ability_class_path(), target);
  }

  // string slot_asset_path = 2;
  if (this->slot_asset_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_slot_asset_path().data(), static_cast<int>(this->_internal_slot_asset_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.OakAbilitySlotSaveGameData.slot_asset_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_slot_asset_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.OakAbilitySlotSaveGameData)
  return target;
}

size_t OakAbilitySlotSaveGameData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.OakAbilitySlotSaveGameData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ability_class_path = 1;
  if (this->ability_class_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ability_class_path());
  }

  // string slot_asset_path = 2;
  if (this->slot_asset_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_slot_asset_path());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OakAbilitySlotSaveGameData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.OakAbilitySlotSaveGameData)
  GOOGLE_DCHECK_NE(&from, this);
  const OakAbilitySlotSaveGameData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OakAbilitySlotSaveGameData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.OakAbilitySlotSaveGameData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.OakAbilitySlotSaveGameData)
    MergeFrom(*source);
  }
}

void OakAbilitySlotSaveGameData::MergeFrom(const OakAbilitySlotSaveGameData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.OakAbilitySlotSaveGameData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ability_class_path().size() > 0) {
    _internal_set_ability_class_path(from._internal_ability_class_path());
  }
  if (from.slot_asset_path().size() > 0) {
    _internal_set_slot_asset_path(from._internal_slot_asset_path());
  }
}

void OakAbilitySlotSaveGameData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.OakAbilitySlotSaveGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OakAbilitySlotSaveGameData::CopyFrom(const OakAbilitySlotSaveGameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.OakAbilitySlotSaveGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OakAbilitySlotSaveGameData::IsInitialized() const {
  return true;
}

void OakAbilitySlotSaveGameData::InternalSwap(OakAbilitySlotSaveGameData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ability_class_path_.Swap(&other->ability_class_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  slot_asset_path_.Swap(&other->slot_asset_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata OakAbilitySlotSaveGameData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OakActionAbilityAugmentSaveGameData::InitAsDefaultInstance() {
}
class OakActionAbilityAugmentSaveGameData::_Internal {
 public:
};

OakActionAbilityAugmentSaveGameData::OakActionAbilityAugmentSaveGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.OakActionAbilityAugmentSaveGameData)
}
OakActionAbilityAugmentSaveGameData::OakActionAbilityAugmentSaveGameData(const OakActionAbilityAugmentSaveGameData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  action_ability_class_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action_ability_class_path().empty()) {
    action_ability_class_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_action_ability_class_path(),
      GetArena());
  }
  slot_asset_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_slot_asset_path().empty()) {
    slot_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_slot_asset_path(),
      GetArena());
  }
  augment_asset_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_augment_asset_path().empty()) {
    augment_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_augment_asset_path(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:OakSave.OakActionAbilityAugmentSaveGameData)
}

void OakActionAbilityAugmentSaveGameData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OakActionAbilityAugmentSaveGameData_OakSave_2eproto.base);
  action_ability_class_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  slot_asset_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  augment_asset_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

OakActionAbilityAugmentSaveGameData::~OakActionAbilityAugmentSaveGameData() {
  // @@protoc_insertion_point(destructor:OakSave.OakActionAbilityAugmentSaveGameData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OakActionAbilityAugmentSaveGameData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  action_ability_class_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  slot_asset_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  augment_asset_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OakActionAbilityAugmentSaveGameData::ArenaDtor(void* object) {
  OakActionAbilityAugmentSaveGameData* _this = reinterpret_cast< OakActionAbilityAugmentSaveGameData* >(object);
  (void)_this;
}
void OakActionAbilityAugmentSaveGameData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OakActionAbilityAugmentSaveGameData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OakActionAbilityAugmentSaveGameData& OakActionAbilityAugmentSaveGameData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OakActionAbilityAugmentSaveGameData_OakSave_2eproto.base);
  return *internal_default_instance();
}


void OakActionAbilityAugmentSaveGameData::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.OakActionAbilityAugmentSaveGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  action_ability_class_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  slot_asset_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  augment_asset_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OakActionAbilityAugmentSaveGameData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string action_ability_class_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_action_ability_class_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.OakActionAbilityAugmentSaveGameData.action_ability_class_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string slot_asset_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_slot_asset_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.OakActionAbilityAugmentSaveGameData.slot_asset_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string augment_asset_path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_augment_asset_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.OakActionAbilityAugmentSaveGameData.augment_asset_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OakActionAbilityAugmentSaveGameData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.OakActionAbilityAugmentSaveGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string action_ability_class_path = 1;
  if (this->action_ability_class_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action_ability_class_path().data(), static_cast<int>(this->_internal_action_ability_class_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.OakActionAbilityAugmentSaveGameData.action_ability_class_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_action_ability_class_path(), target);
  }

  // string slot_asset_path = 2;
  if (this->slot_asset_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_slot_asset_path().data(), static_cast<int>(this->_internal_slot_asset_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.OakActionAbilityAugmentSaveGameData.slot_asset_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_slot_asset_path(), target);
  }

  // string augment_asset_path = 3;
  if (this->augment_asset_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_augment_asset_path().data(), static_cast<int>(this->_internal_augment_asset_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.OakActionAbilityAugmentSaveGameData.augment_asset_path");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_augment_asset_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.OakActionAbilityAugmentSaveGameData)
  return target;
}

size_t OakActionAbilityAugmentSaveGameData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.OakActionAbilityAugmentSaveGameData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string action_ability_class_path = 1;
  if (this->action_ability_class_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action_ability_class_path());
  }

  // string slot_asset_path = 2;
  if (this->slot_asset_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_slot_asset_path());
  }

  // string augment_asset_path = 3;
  if (this->augment_asset_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_augment_asset_path());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OakActionAbilityAugmentSaveGameData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.OakActionAbilityAugmentSaveGameData)
  GOOGLE_DCHECK_NE(&from, this);
  const OakActionAbilityAugmentSaveGameData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OakActionAbilityAugmentSaveGameData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.OakActionAbilityAugmentSaveGameData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.OakActionAbilityAugmentSaveGameData)
    MergeFrom(*source);
  }
}

void OakActionAbilityAugmentSaveGameData::MergeFrom(const OakActionAbilityAugmentSaveGameData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.OakActionAbilityAugmentSaveGameData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.action_ability_class_path().size() > 0) {
    _internal_set_action_ability_class_path(from._internal_action_ability_class_path());
  }
  if (from.slot_asset_path().size() > 0) {
    _internal_set_slot_asset_path(from._internal_slot_asset_path());
  }
  if (from.augment_asset_path().size() > 0) {
    _internal_set_augment_asset_path(from._internal_augment_asset_path());
  }
}

void OakActionAbilityAugmentSaveGameData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.OakActionAbilityAugmentSaveGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OakActionAbilityAugmentSaveGameData::CopyFrom(const OakActionAbilityAugmentSaveGameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.OakActionAbilityAugmentSaveGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OakActionAbilityAugmentSaveGameData::IsInitialized() const {
  return true;
}

void OakActionAbilityAugmentSaveGameData::InternalSwap(OakActionAbilityAugmentSaveGameData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  action_ability_class_path_.Swap(&other->action_ability_class_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  slot_asset_path_.Swap(&other->slot_asset_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  augment_asset_path_.Swap(&other->augment_asset_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata OakActionAbilityAugmentSaveGameData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OakActionAbilityAugmentConfigurationSaveGameData::InitAsDefaultInstance() {
}
class OakActionAbilityAugmentConfigurationSaveGameData::_Internal {
 public:
};

OakActionAbilityAugmentConfigurationSaveGameData::OakActionAbilityAugmentConfigurationSaveGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.OakActionAbilityAugmentConfigurationSaveGameData)
}
OakActionAbilityAugmentConfigurationSaveGameData::OakActionAbilityAugmentConfigurationSaveGameData(const OakActionAbilityAugmentConfigurationSaveGameData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ability_class_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ability_class_path().empty()) {
    ability_class_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ability_class_path(),
      GetArena());
  }
  augment_asset_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_augment_asset_path().empty()) {
    augment_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_augment_asset_path(),
      GetArena());
  }
  mod_slot_asset_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mod_slot_asset_path().empty()) {
    mod_slot_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_mod_slot_asset_path(),
      GetArena());
  }
  mod_asset_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mod_asset_path().empty()) {
    mod_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_mod_asset_path(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:OakSave.OakActionAbilityAugmentConfigurationSaveGameData)
}

void OakActionAbilityAugmentConfigurationSaveGameData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OakActionAbilityAugmentConfigurationSaveGameData_OakSave_2eproto.base);
  ability_class_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  augment_asset_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mod_slot_asset_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mod_asset_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

OakActionAbilityAugmentConfigurationSaveGameData::~OakActionAbilityAugmentConfigurationSaveGameData() {
  // @@protoc_insertion_point(destructor:OakSave.OakActionAbilityAugmentConfigurationSaveGameData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OakActionAbilityAugmentConfigurationSaveGameData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ability_class_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  augment_asset_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mod_slot_asset_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mod_asset_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OakActionAbilityAugmentConfigurationSaveGameData::ArenaDtor(void* object) {
  OakActionAbilityAugmentConfigurationSaveGameData* _this = reinterpret_cast< OakActionAbilityAugmentConfigurationSaveGameData* >(object);
  (void)_this;
}
void OakActionAbilityAugmentConfigurationSaveGameData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OakActionAbilityAugmentConfigurationSaveGameData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OakActionAbilityAugmentConfigurationSaveGameData& OakActionAbilityAugmentConfigurationSaveGameData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OakActionAbilityAugmentConfigurationSaveGameData_OakSave_2eproto.base);
  return *internal_default_instance();
}


void OakActionAbilityAugmentConfigurationSaveGameData::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.OakActionAbilityAugmentConfigurationSaveGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ability_class_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  augment_asset_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mod_slot_asset_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mod_asset_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OakActionAbilityAugmentConfigurationSaveGameData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ability_class_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ability_class_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.OakActionAbilityAugmentConfigurationSaveGameData.ability_class_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string augment_asset_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_augment_asset_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.OakActionAbilityAugmentConfigurationSaveGameData.augment_asset_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mod_slot_asset_path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_mod_slot_asset_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.OakActionAbilityAugmentConfigurationSaveGameData.mod_slot_asset_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mod_asset_path = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_mod_asset_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.OakActionAbilityAugmentConfigurationSaveGameData.mod_asset_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OakActionAbilityAugmentConfigurationSaveGameData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.OakActionAbilityAugmentConfigurationSaveGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ability_class_path = 1;
  if (this->ability_class_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ability_class_path().data(), static_cast<int>(this->_internal_ability_class_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.OakActionAbilityAugmentConfigurationSaveGameData.ability_class_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ability_class_path(), target);
  }

  // string augment_asset_path = 2;
  if (this->augment_asset_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_augment_asset_path().data(), static_cast<int>(this->_internal_augment_asset_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.OakActionAbilityAugmentConfigurationSaveGameData.augment_asset_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_augment_asset_path(), target);
  }

  // string mod_slot_asset_path = 3;
  if (this->mod_slot_asset_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mod_slot_asset_path().data(), static_cast<int>(this->_internal_mod_slot_asset_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.OakActionAbilityAugmentConfigurationSaveGameData.mod_slot_asset_path");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_mod_slot_asset_path(), target);
  }

  // string mod_asset_path = 4;
  if (this->mod_asset_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mod_asset_path().data(), static_cast<int>(this->_internal_mod_asset_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.OakActionAbilityAugmentConfigurationSaveGameData.mod_asset_path");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_mod_asset_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.OakActionAbilityAugmentConfigurationSaveGameData)
  return target;
}

size_t OakActionAbilityAugmentConfigurationSaveGameData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.OakActionAbilityAugmentConfigurationSaveGameData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ability_class_path = 1;
  if (this->ability_class_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ability_class_path());
  }

  // string augment_asset_path = 2;
  if (this->augment_asset_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_augment_asset_path());
  }

  // string mod_slot_asset_path = 3;
  if (this->mod_slot_asset_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mod_slot_asset_path());
  }

  // string mod_asset_path = 4;
  if (this->mod_asset_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mod_asset_path());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OakActionAbilityAugmentConfigurationSaveGameData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.OakActionAbilityAugmentConfigurationSaveGameData)
  GOOGLE_DCHECK_NE(&from, this);
  const OakActionAbilityAugmentConfigurationSaveGameData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OakActionAbilityAugmentConfigurationSaveGameData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.OakActionAbilityAugmentConfigurationSaveGameData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.OakActionAbilityAugmentConfigurationSaveGameData)
    MergeFrom(*source);
  }
}

void OakActionAbilityAugmentConfigurationSaveGameData::MergeFrom(const OakActionAbilityAugmentConfigurationSaveGameData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.OakActionAbilityAugmentConfigurationSaveGameData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ability_class_path().size() > 0) {
    _internal_set_ability_class_path(from._internal_ability_class_path());
  }
  if (from.augment_asset_path().size() > 0) {
    _internal_set_augment_asset_path(from._internal_augment_asset_path());
  }
  if (from.mod_slot_asset_path().size() > 0) {
    _internal_set_mod_slot_asset_path(from._internal_mod_slot_asset_path());
  }
  if (from.mod_asset_path().size() > 0) {
    _internal_set_mod_asset_path(from._internal_mod_asset_path());
  }
}

void OakActionAbilityAugmentConfigurationSaveGameData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.OakActionAbilityAugmentConfigurationSaveGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OakActionAbilityAugmentConfigurationSaveGameData::CopyFrom(const OakActionAbilityAugmentConfigurationSaveGameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.OakActionAbilityAugmentConfigurationSaveGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OakActionAbilityAugmentConfigurationSaveGameData::IsInitialized() const {
  return true;
}

void OakActionAbilityAugmentConfigurationSaveGameData::InternalSwap(OakActionAbilityAugmentConfigurationSaveGameData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ability_class_path_.Swap(&other->ability_class_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  augment_asset_path_.Swap(&other->augment_asset_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mod_slot_asset_path_.Swap(&other->mod_slot_asset_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mod_asset_path_.Swap(&other->mod_asset_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata OakActionAbilityAugmentConfigurationSaveGameData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OakPlayerAbilitySaveGameData::InitAsDefaultInstance() {
}
class OakPlayerAbilitySaveGameData::_Internal {
 public:
};

OakPlayerAbilitySaveGameData::OakPlayerAbilitySaveGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tree_item_list_(arena),
  ability_slot_list_(arena),
  augment_slot_list_(arena),
  augment_configuration_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.OakPlayerAbilitySaveGameData)
}
OakPlayerAbilitySaveGameData::OakPlayerAbilitySaveGameData(const OakPlayerAbilitySaveGameData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tree_item_list_(from.tree_item_list_),
      ability_slot_list_(from.ability_slot_list_),
      augment_slot_list_(from.augment_slot_list_),
      augment_configuration_list_(from.augment_configuration_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ability_points_, &from.ability_points_,
    static_cast<size_t>(reinterpret_cast<char*>(&tree_grade_) -
    reinterpret_cast<char*>(&ability_points_)) + sizeof(tree_grade_));
  // @@protoc_insertion_point(copy_constructor:OakSave.OakPlayerAbilitySaveGameData)
}

void OakPlayerAbilitySaveGameData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OakPlayerAbilitySaveGameData_OakSave_2eproto.base);
  ::memset(&ability_points_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tree_grade_) -
      reinterpret_cast<char*>(&ability_points_)) + sizeof(tree_grade_));
}

OakPlayerAbilitySaveGameData::~OakPlayerAbilitySaveGameData() {
  // @@protoc_insertion_point(destructor:OakSave.OakPlayerAbilitySaveGameData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OakPlayerAbilitySaveGameData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OakPlayerAbilitySaveGameData::ArenaDtor(void* object) {
  OakPlayerAbilitySaveGameData* _this = reinterpret_cast< OakPlayerAbilitySaveGameData* >(object);
  (void)_this;
}
void OakPlayerAbilitySaveGameData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OakPlayerAbilitySaveGameData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OakPlayerAbilitySaveGameData& OakPlayerAbilitySaveGameData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OakPlayerAbilitySaveGameData_OakSave_2eproto.base);
  return *internal_default_instance();
}


void OakPlayerAbilitySaveGameData::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.OakPlayerAbilitySaveGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tree_item_list_.Clear();
  ability_slot_list_.Clear();
  augment_slot_list_.Clear();
  augment_configuration_list_.Clear();
  ::memset(&ability_points_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tree_grade_) -
      reinterpret_cast<char*>(&ability_points_)) + sizeof(tree_grade_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OakPlayerAbilitySaveGameData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ability_points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ability_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .OakSave.OakAbilityTreeItemSaveGameData tree_item_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tree_item_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .OakSave.OakAbilitySlotSaveGameData ability_slot_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ability_slot_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .OakSave.OakActionAbilityAugmentSaveGameData augment_slot_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_augment_slot_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .OakSave.OakActionAbilityAugmentConfigurationSaveGameData augment_configuration_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_augment_configuration_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 tree_grade = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          tree_grade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OakPlayerAbilitySaveGameData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.OakPlayerAbilitySaveGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ability_points = 1;
  if (this->ability_points() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ability_points(), target);
  }

  // repeated .OakSave.OakAbilityTreeItemSaveGameData tree_item_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tree_item_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_tree_item_list(i), target, stream);
  }

  // repeated .OakSave.OakAbilitySlotSaveGameData ability_slot_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ability_slot_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_ability_slot_list(i), target, stream);
  }

  // repeated .OakSave.OakActionAbilityAugmentSaveGameData augment_slot_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_augment_slot_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_augment_slot_list(i), target, stream);
  }

  // repeated .OakSave.OakActionAbilityAugmentConfigurationSaveGameData augment_configuration_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_augment_configuration_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_augment_configuration_list(i), target, stream);
  }

  // int32 tree_grade = 6;
  if (this->tree_grade() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_tree_grade(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.OakPlayerAbilitySaveGameData)
  return target;
}

size_t OakPlayerAbilitySaveGameData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.OakPlayerAbilitySaveGameData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .OakSave.OakAbilityTreeItemSaveGameData tree_item_list = 2;
  total_size += 1UL * this->_internal_tree_item_list_size();
  for (const auto& msg : this->tree_item_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .OakSave.OakAbilitySlotSaveGameData ability_slot_list = 3;
  total_size += 1UL * this->_internal_ability_slot_list_size();
  for (const auto& msg : this->ability_slot_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .OakSave.OakActionAbilityAugmentSaveGameData augment_slot_list = 4;
  total_size += 1UL * this->_internal_augment_slot_list_size();
  for (const auto& msg : this->augment_slot_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .OakSave.OakActionAbilityAugmentConfigurationSaveGameData augment_configuration_list = 5;
  total_size += 1UL * this->_internal_augment_configuration_list_size();
  for (const auto& msg : this->augment_configuration_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 ability_points = 1;
  if (this->ability_points() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ability_points());
  }

  // int32 tree_grade = 6;
  if (this->tree_grade() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tree_grade());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OakPlayerAbilitySaveGameData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.OakPlayerAbilitySaveGameData)
  GOOGLE_DCHECK_NE(&from, this);
  const OakPlayerAbilitySaveGameData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OakPlayerAbilitySaveGameData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.OakPlayerAbilitySaveGameData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.OakPlayerAbilitySaveGameData)
    MergeFrom(*source);
  }
}

void OakPlayerAbilitySaveGameData::MergeFrom(const OakPlayerAbilitySaveGameData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.OakPlayerAbilitySaveGameData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tree_item_list_.MergeFrom(from.tree_item_list_);
  ability_slot_list_.MergeFrom(from.ability_slot_list_);
  augment_slot_list_.MergeFrom(from.augment_slot_list_);
  augment_configuration_list_.MergeFrom(from.augment_configuration_list_);
  if (from.ability_points() != 0) {
    _internal_set_ability_points(from._internal_ability_points());
  }
  if (from.tree_grade() != 0) {
    _internal_set_tree_grade(from._internal_tree_grade());
  }
}

void OakPlayerAbilitySaveGameData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.OakPlayerAbilitySaveGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OakPlayerAbilitySaveGameData::CopyFrom(const OakPlayerAbilitySaveGameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.OakPlayerAbilitySaveGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OakPlayerAbilitySaveGameData::IsInitialized() const {
  return true;
}

void OakPlayerAbilitySaveGameData::InternalSwap(OakPlayerAbilitySaveGameData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tree_item_list_.InternalSwap(&other->tree_item_list_);
  ability_slot_list_.InternalSwap(&other->ability_slot_list_);
  augment_slot_list_.InternalSwap(&other->augment_slot_list_);
  augment_configuration_list_.InternalSwap(&other->augment_configuration_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OakPlayerAbilitySaveGameData, tree_grade_)
      + sizeof(OakPlayerAbilitySaveGameData::tree_grade_)
      - PROTOBUF_FIELD_OFFSET(OakPlayerAbilitySaveGameData, ability_points_)>(
          reinterpret_cast<char*>(&ability_points_),
          reinterpret_cast<char*>(&other->ability_points_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OakPlayerAbilitySaveGameData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MissionStatusPlayerSaveGameData::InitAsDefaultInstance() {
}
class MissionStatusPlayerSaveGameData::_Internal {
 public:
};

MissionStatusPlayerSaveGameData::MissionStatusPlayerSaveGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  objectives_progress_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.MissionStatusPlayerSaveGameData)
}
MissionStatusPlayerSaveGameData::MissionStatusPlayerSaveGameData(const MissionStatusPlayerSaveGameData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      objectives_progress_(from.objectives_progress_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mission_class_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mission_class_path().empty()) {
    mission_class_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_mission_class_path(),
      GetArena());
  }
  active_objective_set_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_active_objective_set_path().empty()) {
    active_objective_set_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_active_objective_set_path(),
      GetArena());
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&league_instance_) -
    reinterpret_cast<char*>(&status_)) + sizeof(league_instance_));
  // @@protoc_insertion_point(copy_constructor:OakSave.MissionStatusPlayerSaveGameData)
}

void MissionStatusPlayerSaveGameData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MissionStatusPlayerSaveGameData_OakSave_2eproto.base);
  mission_class_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  active_objective_set_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&league_instance_) -
      reinterpret_cast<char*>(&status_)) + sizeof(league_instance_));
}

MissionStatusPlayerSaveGameData::~MissionStatusPlayerSaveGameData() {
  // @@protoc_insertion_point(destructor:OakSave.MissionStatusPlayerSaveGameData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MissionStatusPlayerSaveGameData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  mission_class_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  active_objective_set_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MissionStatusPlayerSaveGameData::ArenaDtor(void* object) {
  MissionStatusPlayerSaveGameData* _this = reinterpret_cast< MissionStatusPlayerSaveGameData* >(object);
  (void)_this;
}
void MissionStatusPlayerSaveGameData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MissionStatusPlayerSaveGameData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MissionStatusPlayerSaveGameData& MissionStatusPlayerSaveGameData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MissionStatusPlayerSaveGameData_OakSave_2eproto.base);
  return *internal_default_instance();
}


void MissionStatusPlayerSaveGameData::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.MissionStatusPlayerSaveGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  objectives_progress_.Clear();
  mission_class_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  active_objective_set_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&league_instance_) -
      reinterpret_cast<char*>(&status_)) + sizeof(league_instance_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MissionStatusPlayerSaveGameData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .OakSave.MissionStatusPlayerSaveGameData.MissionState status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::OakSave::MissionStatusPlayerSaveGameData_MissionState>(val));
        } else goto handle_unusual;
        continue;
      // bool has_been_viewed_in_log = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          has_been_viewed_in_log_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 objectives_progress = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_objectives_progress(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_objectives_progress(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mission_class_path = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_mission_class_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.MissionStatusPlayerSaveGameData.mission_class_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string active_objective_set_path = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_active_objective_set_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.MissionStatusPlayerSaveGameData.active_objective_set_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 dlc_package_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          dlc_package_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool kickoff_played = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          kickoff_played_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 league_instance = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          league_instance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MissionStatusPlayerSaveGameData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.MissionStatusPlayerSaveGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OakSave.MissionStatusPlayerSaveGameData.MissionState status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // bool has_been_viewed_in_log = 2;
  if (this->has_been_viewed_in_log() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_has_been_viewed_in_log(), target);
  }

  // repeated int32 objectives_progress = 3;
  {
    int byte_size = _objectives_progress_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_objectives_progress(), byte_size, target);
    }
  }

  // string mission_class_path = 4;
  if (this->mission_class_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mission_class_path().data(), static_cast<int>(this->_internal_mission_class_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.MissionStatusPlayerSaveGameData.mission_class_path");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_mission_class_path(), target);
  }

  // string active_objective_set_path = 5;
  if (this->active_objective_set_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_active_objective_set_path().data(), static_cast<int>(this->_internal_active_objective_set_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.MissionStatusPlayerSaveGameData.active_objective_set_path");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_active_objective_set_path(), target);
  }

  // uint32 dlc_package_id = 6;
  if (this->dlc_package_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_dlc_package_id(), target);
  }

  // bool kickoff_played = 7;
  if (this->kickoff_played() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_kickoff_played(), target);
  }

  // uint32 league_instance = 8;
  if (this->league_instance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_league_instance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.MissionStatusPlayerSaveGameData)
  return target;
}

size_t MissionStatusPlayerSaveGameData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.MissionStatusPlayerSaveGameData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 objectives_progress = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->objectives_progress_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _objectives_progress_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string mission_class_path = 4;
  if (this->mission_class_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mission_class_path());
  }

  // string active_objective_set_path = 5;
  if (this->active_objective_set_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_active_objective_set_path());
  }

  // .OakSave.MissionStatusPlayerSaveGameData.MissionState status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // bool has_been_viewed_in_log = 2;
  if (this->has_been_viewed_in_log() != 0) {
    total_size += 1 + 1;
  }

  // bool kickoff_played = 7;
  if (this->kickoff_played() != 0) {
    total_size += 1 + 1;
  }

  // uint32 dlc_package_id = 6;
  if (this->dlc_package_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dlc_package_id());
  }

  // uint32 league_instance = 8;
  if (this->league_instance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_league_instance());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MissionStatusPlayerSaveGameData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.MissionStatusPlayerSaveGameData)
  GOOGLE_DCHECK_NE(&from, this);
  const MissionStatusPlayerSaveGameData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MissionStatusPlayerSaveGameData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.MissionStatusPlayerSaveGameData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.MissionStatusPlayerSaveGameData)
    MergeFrom(*source);
  }
}

void MissionStatusPlayerSaveGameData::MergeFrom(const MissionStatusPlayerSaveGameData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.MissionStatusPlayerSaveGameData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  objectives_progress_.MergeFrom(from.objectives_progress_);
  if (from.mission_class_path().size() > 0) {
    _internal_set_mission_class_path(from._internal_mission_class_path());
  }
  if (from.active_objective_set_path().size() > 0) {
    _internal_set_active_objective_set_path(from._internal_active_objective_set_path());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.has_been_viewed_in_log() != 0) {
    _internal_set_has_been_viewed_in_log(from._internal_has_been_viewed_in_log());
  }
  if (from.kickoff_played() != 0) {
    _internal_set_kickoff_played(from._internal_kickoff_played());
  }
  if (from.dlc_package_id() != 0) {
    _internal_set_dlc_package_id(from._internal_dlc_package_id());
  }
  if (from.league_instance() != 0) {
    _internal_set_league_instance(from._internal_league_instance());
  }
}

void MissionStatusPlayerSaveGameData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.MissionStatusPlayerSaveGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MissionStatusPlayerSaveGameData::CopyFrom(const MissionStatusPlayerSaveGameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.MissionStatusPlayerSaveGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MissionStatusPlayerSaveGameData::IsInitialized() const {
  return true;
}

void MissionStatusPlayerSaveGameData::InternalSwap(MissionStatusPlayerSaveGameData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  objectives_progress_.InternalSwap(&other->objectives_progress_);
  mission_class_path_.Swap(&other->mission_class_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  active_objective_set_path_.Swap(&other->active_objective_set_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MissionStatusPlayerSaveGameData, league_instance_)
      + sizeof(MissionStatusPlayerSaveGameData::league_instance_)
      - PROTOBUF_FIELD_OFFSET(MissionStatusPlayerSaveGameData, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MissionStatusPlayerSaveGameData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MissionPlaythroughSaveGameData::InitAsDefaultInstance() {
}
class MissionPlaythroughSaveGameData::_Internal {
 public:
};

MissionPlaythroughSaveGameData::MissionPlaythroughSaveGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mission_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.MissionPlaythroughSaveGameData)
}
MissionPlaythroughSaveGameData::MissionPlaythroughSaveGameData(const MissionPlaythroughSaveGameData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      mission_list_(from.mission_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tracked_mission_class_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tracked_mission_class_path().empty()) {
    tracked_mission_class_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tracked_mission_class_path(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:OakSave.MissionPlaythroughSaveGameData)
}

void MissionPlaythroughSaveGameData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MissionPlaythroughSaveGameData_OakSave_2eproto.base);
  tracked_mission_class_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MissionPlaythroughSaveGameData::~MissionPlaythroughSaveGameData() {
  // @@protoc_insertion_point(destructor:OakSave.MissionPlaythroughSaveGameData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MissionPlaythroughSaveGameData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tracked_mission_class_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MissionPlaythroughSaveGameData::ArenaDtor(void* object) {
  MissionPlaythroughSaveGameData* _this = reinterpret_cast< MissionPlaythroughSaveGameData* >(object);
  (void)_this;
}
void MissionPlaythroughSaveGameData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MissionPlaythroughSaveGameData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MissionPlaythroughSaveGameData& MissionPlaythroughSaveGameData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MissionPlaythroughSaveGameData_OakSave_2eproto.base);
  return *internal_default_instance();
}


void MissionPlaythroughSaveGameData::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.MissionPlaythroughSaveGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mission_list_.Clear();
  tracked_mission_class_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MissionPlaythroughSaveGameData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .OakSave.MissionStatusPlayerSaveGameData mission_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mission_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string tracked_mission_class_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_tracked_mission_class_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.MissionPlaythroughSaveGameData.tracked_mission_class_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MissionPlaythroughSaveGameData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.MissionPlaythroughSaveGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .OakSave.MissionStatusPlayerSaveGameData mission_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mission_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_mission_list(i), target, stream);
  }

  // string tracked_mission_class_path = 2;
  if (this->tracked_mission_class_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tracked_mission_class_path().data(), static_cast<int>(this->_internal_tracked_mission_class_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.MissionPlaythroughSaveGameData.tracked_mission_class_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tracked_mission_class_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.MissionPlaythroughSaveGameData)
  return target;
}

size_t MissionPlaythroughSaveGameData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.MissionPlaythroughSaveGameData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .OakSave.MissionStatusPlayerSaveGameData mission_list = 1;
  total_size += 1UL * this->_internal_mission_list_size();
  for (const auto& msg : this->mission_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string tracked_mission_class_path = 2;
  if (this->tracked_mission_class_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tracked_mission_class_path());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MissionPlaythroughSaveGameData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.MissionPlaythroughSaveGameData)
  GOOGLE_DCHECK_NE(&from, this);
  const MissionPlaythroughSaveGameData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MissionPlaythroughSaveGameData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.MissionPlaythroughSaveGameData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.MissionPlaythroughSaveGameData)
    MergeFrom(*source);
  }
}

void MissionPlaythroughSaveGameData::MergeFrom(const MissionPlaythroughSaveGameData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.MissionPlaythroughSaveGameData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mission_list_.MergeFrom(from.mission_list_);
  if (from.tracked_mission_class_path().size() > 0) {
    _internal_set_tracked_mission_class_path(from._internal_tracked_mission_class_path());
  }
}

void MissionPlaythroughSaveGameData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.MissionPlaythroughSaveGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MissionPlaythroughSaveGameData::CopyFrom(const MissionPlaythroughSaveGameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.MissionPlaythroughSaveGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MissionPlaythroughSaveGameData::IsInitialized() const {
  return true;
}

void MissionPlaythroughSaveGameData::InternalSwap(MissionPlaythroughSaveGameData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  mission_list_.InternalSwap(&other->mission_list_);
  tracked_mission_class_path_.Swap(&other->tracked_mission_class_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MissionPlaythroughSaveGameData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ActiveFastTravelSaveData::InitAsDefaultInstance() {
}
class ActiveFastTravelSaveData::_Internal {
 public:
};

ActiveFastTravelSaveData::ActiveFastTravelSaveData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.ActiveFastTravelSaveData)
}
ActiveFastTravelSaveData::ActiveFastTravelSaveData(const ActiveFastTravelSaveData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  active_travel_station_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_active_travel_station_name().empty()) {
    active_travel_station_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_active_travel_station_name(),
      GetArena());
  }
  blacklisted_ = from.blacklisted_;
  // @@protoc_insertion_point(copy_constructor:OakSave.ActiveFastTravelSaveData)
}

void ActiveFastTravelSaveData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActiveFastTravelSaveData_OakSave_2eproto.base);
  active_travel_station_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  blacklisted_ = false;
}

ActiveFastTravelSaveData::~ActiveFastTravelSaveData() {
  // @@protoc_insertion_point(destructor:OakSave.ActiveFastTravelSaveData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ActiveFastTravelSaveData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  active_travel_station_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ActiveFastTravelSaveData::ArenaDtor(void* object) {
  ActiveFastTravelSaveData* _this = reinterpret_cast< ActiveFastTravelSaveData* >(object);
  (void)_this;
}
void ActiveFastTravelSaveData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActiveFastTravelSaveData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActiveFastTravelSaveData& ActiveFastTravelSaveData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActiveFastTravelSaveData_OakSave_2eproto.base);
  return *internal_default_instance();
}


void ActiveFastTravelSaveData::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.ActiveFastTravelSaveData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  active_travel_station_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  blacklisted_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActiveFastTravelSaveData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string active_travel_station_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_active_travel_station_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.ActiveFastTravelSaveData.active_travel_station_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool blacklisted = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          blacklisted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActiveFastTravelSaveData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.ActiveFastTravelSaveData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string active_travel_station_name = 1;
  if (this->active_travel_station_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_active_travel_station_name().data(), static_cast<int>(this->_internal_active_travel_station_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.ActiveFastTravelSaveData.active_travel_station_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_active_travel_station_name(), target);
  }

  // bool blacklisted = 2;
  if (this->blacklisted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_blacklisted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.ActiveFastTravelSaveData)
  return target;
}

size_t ActiveFastTravelSaveData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.ActiveFastTravelSaveData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string active_travel_station_name = 1;
  if (this->active_travel_station_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_active_travel_station_name());
  }

  // bool blacklisted = 2;
  if (this->blacklisted() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActiveFastTravelSaveData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.ActiveFastTravelSaveData)
  GOOGLE_DCHECK_NE(&from, this);
  const ActiveFastTravelSaveData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActiveFastTravelSaveData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.ActiveFastTravelSaveData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.ActiveFastTravelSaveData)
    MergeFrom(*source);
  }
}

void ActiveFastTravelSaveData::MergeFrom(const ActiveFastTravelSaveData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.ActiveFastTravelSaveData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.active_travel_station_name().size() > 0) {
    _internal_set_active_travel_station_name(from._internal_active_travel_station_name());
  }
  if (from.blacklisted() != 0) {
    _internal_set_blacklisted(from._internal_blacklisted());
  }
}

void ActiveFastTravelSaveData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.ActiveFastTravelSaveData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActiveFastTravelSaveData::CopyFrom(const ActiveFastTravelSaveData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.ActiveFastTravelSaveData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActiveFastTravelSaveData::IsInitialized() const {
  return true;
}

void ActiveFastTravelSaveData::InternalSwap(ActiveFastTravelSaveData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  active_travel_station_name_.Swap(&other->active_travel_station_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(blacklisted_, other->blacklisted_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActiveFastTravelSaveData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlaythroughActiveFastTravelSaveData::InitAsDefaultInstance() {
}
class PlaythroughActiveFastTravelSaveData::_Internal {
 public:
};

PlaythroughActiveFastTravelSaveData::PlaythroughActiveFastTravelSaveData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  active_travel_stations_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.PlaythroughActiveFastTravelSaveData)
}
PlaythroughActiveFastTravelSaveData::PlaythroughActiveFastTravelSaveData(const PlaythroughActiveFastTravelSaveData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      active_travel_stations_(from.active_travel_stations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:OakSave.PlaythroughActiveFastTravelSaveData)
}

void PlaythroughActiveFastTravelSaveData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlaythroughActiveFastTravelSaveData_OakSave_2eproto.base);
}

PlaythroughActiveFastTravelSaveData::~PlaythroughActiveFastTravelSaveData() {
  // @@protoc_insertion_point(destructor:OakSave.PlaythroughActiveFastTravelSaveData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlaythroughActiveFastTravelSaveData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PlaythroughActiveFastTravelSaveData::ArenaDtor(void* object) {
  PlaythroughActiveFastTravelSaveData* _this = reinterpret_cast< PlaythroughActiveFastTravelSaveData* >(object);
  (void)_this;
}
void PlaythroughActiveFastTravelSaveData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlaythroughActiveFastTravelSaveData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlaythroughActiveFastTravelSaveData& PlaythroughActiveFastTravelSaveData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlaythroughActiveFastTravelSaveData_OakSave_2eproto.base);
  return *internal_default_instance();
}


void PlaythroughActiveFastTravelSaveData::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.PlaythroughActiveFastTravelSaveData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  active_travel_stations_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlaythroughActiveFastTravelSaveData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .OakSave.ActiveFastTravelSaveData active_travel_stations = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_active_travel_stations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlaythroughActiveFastTravelSaveData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.PlaythroughActiveFastTravelSaveData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .OakSave.ActiveFastTravelSaveData active_travel_stations = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_active_travel_stations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_active_travel_stations(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.PlaythroughActiveFastTravelSaveData)
  return target;
}

size_t PlaythroughActiveFastTravelSaveData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.PlaythroughActiveFastTravelSaveData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .OakSave.ActiveFastTravelSaveData active_travel_stations = 1;
  total_size += 1UL * this->_internal_active_travel_stations_size();
  for (const auto& msg : this->active_travel_stations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlaythroughActiveFastTravelSaveData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.PlaythroughActiveFastTravelSaveData)
  GOOGLE_DCHECK_NE(&from, this);
  const PlaythroughActiveFastTravelSaveData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlaythroughActiveFastTravelSaveData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.PlaythroughActiveFastTravelSaveData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.PlaythroughActiveFastTravelSaveData)
    MergeFrom(*source);
  }
}

void PlaythroughActiveFastTravelSaveData::MergeFrom(const PlaythroughActiveFastTravelSaveData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.PlaythroughActiveFastTravelSaveData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  active_travel_stations_.MergeFrom(from.active_travel_stations_);
}

void PlaythroughActiveFastTravelSaveData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.PlaythroughActiveFastTravelSaveData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaythroughActiveFastTravelSaveData::CopyFrom(const PlaythroughActiveFastTravelSaveData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.PlaythroughActiveFastTravelSaveData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaythroughActiveFastTravelSaveData::IsInitialized() const {
  return true;
}

void PlaythroughActiveFastTravelSaveData::InternalSwap(PlaythroughActiveFastTravelSaveData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  active_travel_stations_.InternalSwap(&other->active_travel_stations_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlaythroughActiveFastTravelSaveData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DiscoveredAreaInfo::InitAsDefaultInstance() {
}
class DiscoveredAreaInfo::_Internal {
 public:
};

DiscoveredAreaInfo::DiscoveredAreaInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.DiscoveredAreaInfo)
}
DiscoveredAreaInfo::DiscoveredAreaInfo(const DiscoveredAreaInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  discovered_area_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_discovered_area_name().empty()) {
    discovered_area_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_discovered_area_name(),
      GetArena());
  }
  discovered_playthroughs_ = from.discovered_playthroughs_;
  // @@protoc_insertion_point(copy_constructor:OakSave.DiscoveredAreaInfo)
}

void DiscoveredAreaInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DiscoveredAreaInfo_OakSave_2eproto.base);
  discovered_area_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  discovered_playthroughs_ = 0u;
}

DiscoveredAreaInfo::~DiscoveredAreaInfo() {
  // @@protoc_insertion_point(destructor:OakSave.DiscoveredAreaInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DiscoveredAreaInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  discovered_area_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DiscoveredAreaInfo::ArenaDtor(void* object) {
  DiscoveredAreaInfo* _this = reinterpret_cast< DiscoveredAreaInfo* >(object);
  (void)_this;
}
void DiscoveredAreaInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DiscoveredAreaInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DiscoveredAreaInfo& DiscoveredAreaInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DiscoveredAreaInfo_OakSave_2eproto.base);
  return *internal_default_instance();
}


void DiscoveredAreaInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.DiscoveredAreaInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  discovered_area_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  discovered_playthroughs_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DiscoveredAreaInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string discovered_area_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_discovered_area_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.DiscoveredAreaInfo.discovered_area_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 discovered_playthroughs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          discovered_playthroughs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DiscoveredAreaInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.DiscoveredAreaInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string discovered_area_name = 1;
  if (this->discovered_area_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_discovered_area_name().data(), static_cast<int>(this->_internal_discovered_area_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.DiscoveredAreaInfo.discovered_area_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_discovered_area_name(), target);
  }

  // uint32 discovered_playthroughs = 2;
  if (this->discovered_playthroughs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_discovered_playthroughs(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.DiscoveredAreaInfo)
  return target;
}

size_t DiscoveredAreaInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.DiscoveredAreaInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string discovered_area_name = 1;
  if (this->discovered_area_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_discovered_area_name());
  }

  // uint32 discovered_playthroughs = 2;
  if (this->discovered_playthroughs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_discovered_playthroughs());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DiscoveredAreaInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.DiscoveredAreaInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DiscoveredAreaInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DiscoveredAreaInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.DiscoveredAreaInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.DiscoveredAreaInfo)
    MergeFrom(*source);
  }
}

void DiscoveredAreaInfo::MergeFrom(const DiscoveredAreaInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.DiscoveredAreaInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.discovered_area_name().size() > 0) {
    _internal_set_discovered_area_name(from._internal_discovered_area_name());
  }
  if (from.discovered_playthroughs() != 0) {
    _internal_set_discovered_playthroughs(from._internal_discovered_playthroughs());
  }
}

void DiscoveredAreaInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.DiscoveredAreaInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiscoveredAreaInfo::CopyFrom(const DiscoveredAreaInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.DiscoveredAreaInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiscoveredAreaInfo::IsInitialized() const {
  return true;
}

void DiscoveredAreaInfo::InternalSwap(DiscoveredAreaInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  discovered_area_name_.Swap(&other->discovered_area_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(discovered_playthroughs_, other->discovered_playthroughs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DiscoveredAreaInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DiscoveredLevelInfo::InitAsDefaultInstance() {
}
class DiscoveredLevelInfo::_Internal {
 public:
};

DiscoveredLevelInfo::DiscoveredLevelInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  discovered_area_info_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.DiscoveredLevelInfo)
}
DiscoveredLevelInfo::DiscoveredLevelInfo(const DiscoveredLevelInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      discovered_area_info_(from.discovered_area_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  discovered_level_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_discovered_level_name().empty()) {
    discovered_level_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_discovered_level_name(),
      GetArena());
  }
  discovered_playthroughs_ = from.discovered_playthroughs_;
  // @@protoc_insertion_point(copy_constructor:OakSave.DiscoveredLevelInfo)
}

void DiscoveredLevelInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DiscoveredLevelInfo_OakSave_2eproto.base);
  discovered_level_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  discovered_playthroughs_ = 0u;
}

DiscoveredLevelInfo::~DiscoveredLevelInfo() {
  // @@protoc_insertion_point(destructor:OakSave.DiscoveredLevelInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DiscoveredLevelInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  discovered_level_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DiscoveredLevelInfo::ArenaDtor(void* object) {
  DiscoveredLevelInfo* _this = reinterpret_cast< DiscoveredLevelInfo* >(object);
  (void)_this;
}
void DiscoveredLevelInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DiscoveredLevelInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DiscoveredLevelInfo& DiscoveredLevelInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DiscoveredLevelInfo_OakSave_2eproto.base);
  return *internal_default_instance();
}


void DiscoveredLevelInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.DiscoveredLevelInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  discovered_area_info_.Clear();
  discovered_level_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  discovered_playthroughs_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DiscoveredLevelInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string discovered_level_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_discovered_level_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.DiscoveredLevelInfo.discovered_level_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 discovered_playthroughs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          discovered_playthroughs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .OakSave.DiscoveredAreaInfo discovered_area_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_discovered_area_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DiscoveredLevelInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.DiscoveredLevelInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string discovered_level_name = 1;
  if (this->discovered_level_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_discovered_level_name().data(), static_cast<int>(this->_internal_discovered_level_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.DiscoveredLevelInfo.discovered_level_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_discovered_level_name(), target);
  }

  // uint32 discovered_playthroughs = 3;
  if (this->discovered_playthroughs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_discovered_playthroughs(), target);
  }

  // repeated .OakSave.DiscoveredAreaInfo discovered_area_info = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_discovered_area_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_discovered_area_info(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.DiscoveredLevelInfo)
  return target;
}

size_t DiscoveredLevelInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.DiscoveredLevelInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .OakSave.DiscoveredAreaInfo discovered_area_info = 4;
  total_size += 1UL * this->_internal_discovered_area_info_size();
  for (const auto& msg : this->discovered_area_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string discovered_level_name = 1;
  if (this->discovered_level_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_discovered_level_name());
  }

  // uint32 discovered_playthroughs = 3;
  if (this->discovered_playthroughs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_discovered_playthroughs());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DiscoveredLevelInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.DiscoveredLevelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DiscoveredLevelInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DiscoveredLevelInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.DiscoveredLevelInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.DiscoveredLevelInfo)
    MergeFrom(*source);
  }
}

void DiscoveredLevelInfo::MergeFrom(const DiscoveredLevelInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.DiscoveredLevelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  discovered_area_info_.MergeFrom(from.discovered_area_info_);
  if (from.discovered_level_name().size() > 0) {
    _internal_set_discovered_level_name(from._internal_discovered_level_name());
  }
  if (from.discovered_playthroughs() != 0) {
    _internal_set_discovered_playthroughs(from._internal_discovered_playthroughs());
  }
}

void DiscoveredLevelInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.DiscoveredLevelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiscoveredLevelInfo::CopyFrom(const DiscoveredLevelInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.DiscoveredLevelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiscoveredLevelInfo::IsInitialized() const {
  return true;
}

void DiscoveredLevelInfo::InternalSwap(DiscoveredLevelInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  discovered_area_info_.InternalSwap(&other->discovered_area_info_);
  discovered_level_name_.Swap(&other->discovered_level_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(discovered_playthroughs_, other->discovered_playthroughs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DiscoveredLevelInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DiscoveredPlanetInfo::InitAsDefaultInstance() {
}
class DiscoveredPlanetInfo::_Internal {
 public:
};

DiscoveredPlanetInfo::DiscoveredPlanetInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.DiscoveredPlanetInfo)
}
DiscoveredPlanetInfo::DiscoveredPlanetInfo(const DiscoveredPlanetInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  discovered_planet_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_discovered_planet().empty()) {
    discovered_planet_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_discovered_planet(),
      GetArena());
  }
  is_new_planet_ = from.is_new_planet_;
  // @@protoc_insertion_point(copy_constructor:OakSave.DiscoveredPlanetInfo)
}

void DiscoveredPlanetInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DiscoveredPlanetInfo_OakSave_2eproto.base);
  discovered_planet_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  is_new_planet_ = false;
}

DiscoveredPlanetInfo::~DiscoveredPlanetInfo() {
  // @@protoc_insertion_point(destructor:OakSave.DiscoveredPlanetInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DiscoveredPlanetInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  discovered_planet_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DiscoveredPlanetInfo::ArenaDtor(void* object) {
  DiscoveredPlanetInfo* _this = reinterpret_cast< DiscoveredPlanetInfo* >(object);
  (void)_this;
}
void DiscoveredPlanetInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DiscoveredPlanetInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DiscoveredPlanetInfo& DiscoveredPlanetInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DiscoveredPlanetInfo_OakSave_2eproto.base);
  return *internal_default_instance();
}


void DiscoveredPlanetInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.DiscoveredPlanetInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  discovered_planet_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  is_new_planet_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DiscoveredPlanetInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string discovered_planet = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_discovered_planet();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.DiscoveredPlanetInfo.discovered_planet"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_new_planet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_new_planet_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DiscoveredPlanetInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.DiscoveredPlanetInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string discovered_planet = 1;
  if (this->discovered_planet().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_discovered_planet().data(), static_cast<int>(this->_internal_discovered_planet().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.DiscoveredPlanetInfo.discovered_planet");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_discovered_planet(), target);
  }

  // bool is_new_planet = 2;
  if (this->is_new_planet() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_new_planet(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.DiscoveredPlanetInfo)
  return target;
}

size_t DiscoveredPlanetInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.DiscoveredPlanetInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string discovered_planet = 1;
  if (this->discovered_planet().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_discovered_planet());
  }

  // bool is_new_planet = 2;
  if (this->is_new_planet() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DiscoveredPlanetInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.DiscoveredPlanetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DiscoveredPlanetInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DiscoveredPlanetInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.DiscoveredPlanetInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.DiscoveredPlanetInfo)
    MergeFrom(*source);
  }
}

void DiscoveredPlanetInfo::MergeFrom(const DiscoveredPlanetInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.DiscoveredPlanetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.discovered_planet().size() > 0) {
    _internal_set_discovered_planet(from._internal_discovered_planet());
  }
  if (from.is_new_planet() != 0) {
    _internal_set_is_new_planet(from._internal_is_new_planet());
  }
}

void DiscoveredPlanetInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.DiscoveredPlanetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiscoveredPlanetInfo::CopyFrom(const DiscoveredPlanetInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.DiscoveredPlanetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiscoveredPlanetInfo::IsInitialized() const {
  return true;
}

void DiscoveredPlanetInfo::InternalSwap(DiscoveredPlanetInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  discovered_planet_.Swap(&other->discovered_planet_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(is_new_planet_, other->is_new_planet_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DiscoveredPlanetInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DiscoverySaveData::InitAsDefaultInstance() {
}
class DiscoverySaveData::_Internal {
 public:
};

DiscoverySaveData::DiscoverySaveData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  discovered_level_info_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.DiscoverySaveData)
}
DiscoverySaveData::DiscoverySaveData(const DiscoverySaveData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      discovered_level_info_(from.discovered_level_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:OakSave.DiscoverySaveData)
}

void DiscoverySaveData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DiscoverySaveData_OakSave_2eproto.base);
}

DiscoverySaveData::~DiscoverySaveData() {
  // @@protoc_insertion_point(destructor:OakSave.DiscoverySaveData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DiscoverySaveData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DiscoverySaveData::ArenaDtor(void* object) {
  DiscoverySaveData* _this = reinterpret_cast< DiscoverySaveData* >(object);
  (void)_this;
}
void DiscoverySaveData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DiscoverySaveData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DiscoverySaveData& DiscoverySaveData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DiscoverySaveData_OakSave_2eproto.base);
  return *internal_default_instance();
}


void DiscoverySaveData::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.DiscoverySaveData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  discovered_level_info_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DiscoverySaveData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .OakSave.DiscoveredLevelInfo discovered_level_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_discovered_level_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DiscoverySaveData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.DiscoverySaveData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .OakSave.DiscoveredLevelInfo discovered_level_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_discovered_level_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_discovered_level_info(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.DiscoverySaveData)
  return target;
}

size_t DiscoverySaveData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.DiscoverySaveData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .OakSave.DiscoveredLevelInfo discovered_level_info = 1;
  total_size += 1UL * this->_internal_discovered_level_info_size();
  for (const auto& msg : this->discovered_level_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DiscoverySaveData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.DiscoverySaveData)
  GOOGLE_DCHECK_NE(&from, this);
  const DiscoverySaveData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DiscoverySaveData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.DiscoverySaveData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.DiscoverySaveData)
    MergeFrom(*source);
  }
}

void DiscoverySaveData::MergeFrom(const DiscoverySaveData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.DiscoverySaveData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  discovered_level_info_.MergeFrom(from.discovered_level_info_);
}

void DiscoverySaveData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.DiscoverySaveData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiscoverySaveData::CopyFrom(const DiscoverySaveData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.DiscoverySaveData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiscoverySaveData::IsInitialized() const {
  return true;
}

void DiscoverySaveData::InternalSwap(DiscoverySaveData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  discovered_level_info_.InternalSwap(&other->discovered_level_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DiscoverySaveData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VehicleUnlockedSaveGameData::InitAsDefaultInstance() {
}
class VehicleUnlockedSaveGameData::_Internal {
 public:
};

VehicleUnlockedSaveGameData::VehicleUnlockedSaveGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.VehicleUnlockedSaveGameData)
}
VehicleUnlockedSaveGameData::VehicleUnlockedSaveGameData(const VehicleUnlockedSaveGameData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  asset_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_asset_path().empty()) {
    asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_asset_path(),
      GetArena());
  }
  just_unlocked_ = from.just_unlocked_;
  // @@protoc_insertion_point(copy_constructor:OakSave.VehicleUnlockedSaveGameData)
}

void VehicleUnlockedSaveGameData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VehicleUnlockedSaveGameData_OakSave_2eproto.base);
  asset_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  just_unlocked_ = false;
}

VehicleUnlockedSaveGameData::~VehicleUnlockedSaveGameData() {
  // @@protoc_insertion_point(destructor:OakSave.VehicleUnlockedSaveGameData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VehicleUnlockedSaveGameData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  asset_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VehicleUnlockedSaveGameData::ArenaDtor(void* object) {
  VehicleUnlockedSaveGameData* _this = reinterpret_cast< VehicleUnlockedSaveGameData* >(object);
  (void)_this;
}
void VehicleUnlockedSaveGameData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VehicleUnlockedSaveGameData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VehicleUnlockedSaveGameData& VehicleUnlockedSaveGameData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VehicleUnlockedSaveGameData_OakSave_2eproto.base);
  return *internal_default_instance();
}


void VehicleUnlockedSaveGameData::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.VehicleUnlockedSaveGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  asset_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  just_unlocked_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VehicleUnlockedSaveGameData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string asset_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_asset_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.VehicleUnlockedSaveGameData.asset_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool just_unlocked = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          just_unlocked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VehicleUnlockedSaveGameData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.VehicleUnlockedSaveGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string asset_path = 1;
  if (this->asset_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset_path().data(), static_cast<int>(this->_internal_asset_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.VehicleUnlockedSaveGameData.asset_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_asset_path(), target);
  }

  // bool just_unlocked = 2;
  if (this->just_unlocked() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_just_unlocked(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.VehicleUnlockedSaveGameData)
  return target;
}

size_t VehicleUnlockedSaveGameData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.VehicleUnlockedSaveGameData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string asset_path = 1;
  if (this->asset_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset_path());
  }

  // bool just_unlocked = 2;
  if (this->just_unlocked() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleUnlockedSaveGameData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.VehicleUnlockedSaveGameData)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleUnlockedSaveGameData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VehicleUnlockedSaveGameData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.VehicleUnlockedSaveGameData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.VehicleUnlockedSaveGameData)
    MergeFrom(*source);
  }
}

void VehicleUnlockedSaveGameData::MergeFrom(const VehicleUnlockedSaveGameData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.VehicleUnlockedSaveGameData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.asset_path().size() > 0) {
    _internal_set_asset_path(from._internal_asset_path());
  }
  if (from.just_unlocked() != 0) {
    _internal_set_just_unlocked(from._internal_just_unlocked());
  }
}

void VehicleUnlockedSaveGameData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.VehicleUnlockedSaveGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleUnlockedSaveGameData::CopyFrom(const VehicleUnlockedSaveGameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.VehicleUnlockedSaveGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleUnlockedSaveGameData::IsInitialized() const {
  return true;
}

void VehicleUnlockedSaveGameData::InternalSwap(VehicleUnlockedSaveGameData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  asset_path_.Swap(&other->asset_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(just_unlocked_, other->just_unlocked_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleUnlockedSaveGameData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OakCARMenuVehicleConfigSaveData::InitAsDefaultInstance() {
}
class OakCARMenuVehicleConfigSaveData::_Internal {
 public:
};

OakCARMenuVehicleConfigSaveData::OakCARMenuVehicleConfigSaveData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.OakCARMenuVehicleConfigSaveData)
}
OakCARMenuVehicleConfigSaveData::OakCARMenuVehicleConfigSaveData(const OakCARMenuVehicleConfigSaveData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  loadout_save_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_loadout_save_name().empty()) {
    loadout_save_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_loadout_save_name(),
      GetArena());
  }
  body_asset_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_body_asset_path().empty()) {
    body_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_body_asset_path(),
      GetArena());
  }
  wheel_asset_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_wheel_asset_path().empty()) {
    wheel_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_wheel_asset_path(),
      GetArena());
  }
  armor_asset_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_armor_asset_path().empty()) {
    armor_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_armor_asset_path(),
      GetArena());
  }
  core_mod_asset_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_core_mod_asset_path().empty()) {
    core_mod_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_core_mod_asset_path(),
      GetArena());
  }
  gunner_weapon_asset_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gunner_weapon_asset_path().empty()) {
    gunner_weapon_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_gunner_weapon_asset_path(),
      GetArena());
  }
  driver_weapon_asset_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_driver_weapon_asset_path().empty()) {
    driver_weapon_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_driver_weapon_asset_path(),
      GetArena());
  }
  ornament_asset_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ornament_asset_path().empty()) {
    ornament_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ornament_asset_path(),
      GetArena());
  }
  material_decal_asset_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_material_decal_asset_path().empty()) {
    material_decal_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_material_decal_asset_path(),
      GetArena());
  }
  material_asset_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_material_asset_path().empty()) {
    material_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_material_asset_path(),
      GetArena());
  }
  ::memcpy(&color_index_1_, &from.color_index_1_,
    static_cast<size_t>(reinterpret_cast<char*>(&color_index_3_) -
    reinterpret_cast<char*>(&color_index_1_)) + sizeof(color_index_3_));
  // @@protoc_insertion_point(copy_constructor:OakSave.OakCARMenuVehicleConfigSaveData)
}

void OakCARMenuVehicleConfigSaveData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OakCARMenuVehicleConfigSaveData_OakSave_2eproto.base);
  loadout_save_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  body_asset_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  wheel_asset_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  armor_asset_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  core_mod_asset_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gunner_weapon_asset_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  driver_weapon_asset_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ornament_asset_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  material_decal_asset_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  material_asset_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&color_index_1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&color_index_3_) -
      reinterpret_cast<char*>(&color_index_1_)) + sizeof(color_index_3_));
}

OakCARMenuVehicleConfigSaveData::~OakCARMenuVehicleConfigSaveData() {
  // @@protoc_insertion_point(destructor:OakSave.OakCARMenuVehicleConfigSaveData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OakCARMenuVehicleConfigSaveData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  loadout_save_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  body_asset_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  wheel_asset_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  armor_asset_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  core_mod_asset_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gunner_weapon_asset_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  driver_weapon_asset_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ornament_asset_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  material_decal_asset_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  material_asset_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OakCARMenuVehicleConfigSaveData::ArenaDtor(void* object) {
  OakCARMenuVehicleConfigSaveData* _this = reinterpret_cast< OakCARMenuVehicleConfigSaveData* >(object);
  (void)_this;
}
void OakCARMenuVehicleConfigSaveData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OakCARMenuVehicleConfigSaveData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OakCARMenuVehicleConfigSaveData& OakCARMenuVehicleConfigSaveData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OakCARMenuVehicleConfigSaveData_OakSave_2eproto.base);
  return *internal_default_instance();
}


void OakCARMenuVehicleConfigSaveData::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.OakCARMenuVehicleConfigSaveData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  loadout_save_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  body_asset_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  wheel_asset_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  armor_asset_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  core_mod_asset_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  gunner_weapon_asset_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  driver_weapon_asset_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ornament_asset_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  material_decal_asset_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  material_asset_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&color_index_1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&color_index_3_) -
      reinterpret_cast<char*>(&color_index_1_)) + sizeof(color_index_3_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OakCARMenuVehicleConfigSaveData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string loadout_save_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_loadout_save_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.OakCARMenuVehicleConfigSaveData.loadout_save_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string body_asset_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_body_asset_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.OakCARMenuVehicleConfigSaveData.body_asset_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string wheel_asset_path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_wheel_asset_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.OakCARMenuVehicleConfigSaveData.wheel_asset_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string armor_asset_path = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_armor_asset_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.OakCARMenuVehicleConfigSaveData.armor_asset_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string core_mod_asset_path = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_core_mod_asset_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.OakCARMenuVehicleConfigSaveData.core_mod_asset_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string gunner_weapon_asset_path = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_gunner_weapon_asset_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.OakCARMenuVehicleConfigSaveData.gunner_weapon_asset_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string driver_weapon_asset_path = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_driver_weapon_asset_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.OakCARMenuVehicleConfigSaveData.driver_weapon_asset_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ornament_asset_path = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_ornament_asset_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.OakCARMenuVehicleConfigSaveData.ornament_asset_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string material_decal_asset_path = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_material_decal_asset_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.OakCARMenuVehicleConfigSaveData.material_decal_asset_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string material_asset_path = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_material_asset_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.OakCARMenuVehicleConfigSaveData.material_asset_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 color_index_1 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          color_index_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 color_index_2 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          color_index_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 color_index_3 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          color_index_3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OakCARMenuVehicleConfigSaveData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.OakCARMenuVehicleConfigSaveData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string loadout_save_name = 1;
  if (this->loadout_save_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_loadout_save_name().data(), static_cast<int>(this->_internal_loadout_save_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.OakCARMenuVehicleConfigSaveData.loadout_save_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_loadout_save_name(), target);
  }

  // string body_asset_path = 2;
  if (this->body_asset_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_body_asset_path().data(), static_cast<int>(this->_internal_body_asset_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.OakCARMenuVehicleConfigSaveData.body_asset_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_body_asset_path(), target);
  }

  // string wheel_asset_path = 3;
  if (this->wheel_asset_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_wheel_asset_path().data(), static_cast<int>(this->_internal_wheel_asset_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.OakCARMenuVehicleConfigSaveData.wheel_asset_path");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_wheel_asset_path(), target);
  }

  // string armor_asset_path = 4;
  if (this->armor_asset_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_armor_asset_path().data(), static_cast<int>(this->_internal_armor_asset_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.OakCARMenuVehicleConfigSaveData.armor_asset_path");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_armor_asset_path(), target);
  }

  // string core_mod_asset_path = 5;
  if (this->core_mod_asset_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_core_mod_asset_path().data(), static_cast<int>(this->_internal_core_mod_asset_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.OakCARMenuVehicleConfigSaveData.core_mod_asset_path");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_core_mod_asset_path(), target);
  }

  // string gunner_weapon_asset_path = 6;
  if (this->gunner_weapon_asset_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gunner_weapon_asset_path().data(), static_cast<int>(this->_internal_gunner_weapon_asset_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.OakCARMenuVehicleConfigSaveData.gunner_weapon_asset_path");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_gunner_weapon_asset_path(), target);
  }

  // string driver_weapon_asset_path = 7;
  if (this->driver_weapon_asset_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_driver_weapon_asset_path().data(), static_cast<int>(this->_internal_driver_weapon_asset_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.OakCARMenuVehicleConfigSaveData.driver_weapon_asset_path");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_driver_weapon_asset_path(), target);
  }

  // string ornament_asset_path = 8;
  if (this->ornament_asset_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ornament_asset_path().data(), static_cast<int>(this->_internal_ornament_asset_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.OakCARMenuVehicleConfigSaveData.ornament_asset_path");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_ornament_asset_path(), target);
  }

  // string material_decal_asset_path = 9;
  if (this->material_decal_asset_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_material_decal_asset_path().data(), static_cast<int>(this->_internal_material_decal_asset_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.OakCARMenuVehicleConfigSaveData.material_decal_asset_path");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_material_decal_asset_path(), target);
  }

  // string material_asset_path = 10;
  if (this->material_asset_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_material_asset_path().data(), static_cast<int>(this->_internal_material_asset_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.OakCARMenuVehicleConfigSaveData.material_asset_path");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_material_asset_path(), target);
  }

  // int32 color_index_1 = 11;
  if (this->color_index_1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_color_index_1(), target);
  }

  // int32 color_index_2 = 12;
  if (this->color_index_2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_color_index_2(), target);
  }

  // int32 color_index_3 = 13;
  if (this->color_index_3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_color_index_3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.OakCARMenuVehicleConfigSaveData)
  return target;
}

size_t OakCARMenuVehicleConfigSaveData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.OakCARMenuVehicleConfigSaveData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string loadout_save_name = 1;
  if (this->loadout_save_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_loadout_save_name());
  }

  // string body_asset_path = 2;
  if (this->body_asset_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_body_asset_path());
  }

  // string wheel_asset_path = 3;
  if (this->wheel_asset_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_wheel_asset_path());
  }

  // string armor_asset_path = 4;
  if (this->armor_asset_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_armor_asset_path());
  }

  // string core_mod_asset_path = 5;
  if (this->core_mod_asset_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_core_mod_asset_path());
  }

  // string gunner_weapon_asset_path = 6;
  if (this->gunner_weapon_asset_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gunner_weapon_asset_path());
  }

  // string driver_weapon_asset_path = 7;
  if (this->driver_weapon_asset_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_driver_weapon_asset_path());
  }

  // string ornament_asset_path = 8;
  if (this->ornament_asset_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ornament_asset_path());
  }

  // string material_decal_asset_path = 9;
  if (this->material_decal_asset_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_material_decal_asset_path());
  }

  // string material_asset_path = 10;
  if (this->material_asset_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_material_asset_path());
  }

  // int32 color_index_1 = 11;
  if (this->color_index_1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_color_index_1());
  }

  // int32 color_index_2 = 12;
  if (this->color_index_2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_color_index_2());
  }

  // int32 color_index_3 = 13;
  if (this->color_index_3() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_color_index_3());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OakCARMenuVehicleConfigSaveData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.OakCARMenuVehicleConfigSaveData)
  GOOGLE_DCHECK_NE(&from, this);
  const OakCARMenuVehicleConfigSaveData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OakCARMenuVehicleConfigSaveData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.OakCARMenuVehicleConfigSaveData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.OakCARMenuVehicleConfigSaveData)
    MergeFrom(*source);
  }
}

void OakCARMenuVehicleConfigSaveData::MergeFrom(const OakCARMenuVehicleConfigSaveData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.OakCARMenuVehicleConfigSaveData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.loadout_save_name().size() > 0) {
    _internal_set_loadout_save_name(from._internal_loadout_save_name());
  }
  if (from.body_asset_path().size() > 0) {
    _internal_set_body_asset_path(from._internal_body_asset_path());
  }
  if (from.wheel_asset_path().size() > 0) {
    _internal_set_wheel_asset_path(from._internal_wheel_asset_path());
  }
  if (from.armor_asset_path().size() > 0) {
    _internal_set_armor_asset_path(from._internal_armor_asset_path());
  }
  if (from.core_mod_asset_path().size() > 0) {
    _internal_set_core_mod_asset_path(from._internal_core_mod_asset_path());
  }
  if (from.gunner_weapon_asset_path().size() > 0) {
    _internal_set_gunner_weapon_asset_path(from._internal_gunner_weapon_asset_path());
  }
  if (from.driver_weapon_asset_path().size() > 0) {
    _internal_set_driver_weapon_asset_path(from._internal_driver_weapon_asset_path());
  }
  if (from.ornament_asset_path().size() > 0) {
    _internal_set_ornament_asset_path(from._internal_ornament_asset_path());
  }
  if (from.material_decal_asset_path().size() > 0) {
    _internal_set_material_decal_asset_path(from._internal_material_decal_asset_path());
  }
  if (from.material_asset_path().size() > 0) {
    _internal_set_material_asset_path(from._internal_material_asset_path());
  }
  if (from.color_index_1() != 0) {
    _internal_set_color_index_1(from._internal_color_index_1());
  }
  if (from.color_index_2() != 0) {
    _internal_set_color_index_2(from._internal_color_index_2());
  }
  if (from.color_index_3() != 0) {
    _internal_set_color_index_3(from._internal_color_index_3());
  }
}

void OakCARMenuVehicleConfigSaveData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.OakCARMenuVehicleConfigSaveData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OakCARMenuVehicleConfigSaveData::CopyFrom(const OakCARMenuVehicleConfigSaveData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.OakCARMenuVehicleConfigSaveData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OakCARMenuVehicleConfigSaveData::IsInitialized() const {
  return true;
}

void OakCARMenuVehicleConfigSaveData::InternalSwap(OakCARMenuVehicleConfigSaveData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  loadout_save_name_.Swap(&other->loadout_save_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  body_asset_path_.Swap(&other->body_asset_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  wheel_asset_path_.Swap(&other->wheel_asset_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  armor_asset_path_.Swap(&other->armor_asset_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  core_mod_asset_path_.Swap(&other->core_mod_asset_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  gunner_weapon_asset_path_.Swap(&other->gunner_weapon_asset_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  driver_weapon_asset_path_.Swap(&other->driver_weapon_asset_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ornament_asset_path_.Swap(&other->ornament_asset_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  material_decal_asset_path_.Swap(&other->material_decal_asset_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  material_asset_path_.Swap(&other->material_asset_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OakCARMenuVehicleConfigSaveData, color_index_3_)
      + sizeof(OakCARMenuVehicleConfigSaveData::color_index_3_)
      - PROTOBUF_FIELD_OFFSET(OakCARMenuVehicleConfigSaveData, color_index_1_)>(
          reinterpret_cast<char*>(&color_index_1_),
          reinterpret_cast<char*>(&other->color_index_1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OakCARMenuVehicleConfigSaveData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CustomPlayerColorSaveGameData::InitAsDefaultInstance() {
  ::OakSave::_CustomPlayerColorSaveGameData_default_instance_._instance.get_mutable()->applied_color_ = const_cast< ::OakSave::Vec3*>(
      ::OakSave::Vec3::internal_default_instance());
  ::OakSave::_CustomPlayerColorSaveGameData_default_instance_._instance.get_mutable()->split_color_ = const_cast< ::OakSave::Vec3*>(
      ::OakSave::Vec3::internal_default_instance());
}
class CustomPlayerColorSaveGameData::_Internal {
 public:
  static const ::OakSave::Vec3& applied_color(const CustomPlayerColorSaveGameData* msg);
  static const ::OakSave::Vec3& split_color(const CustomPlayerColorSaveGameData* msg);
};

const ::OakSave::Vec3&
CustomPlayerColorSaveGameData::_Internal::applied_color(const CustomPlayerColorSaveGameData* msg) {
  return *msg->applied_color_;
}
const ::OakSave::Vec3&
CustomPlayerColorSaveGameData::_Internal::split_color(const CustomPlayerColorSaveGameData* msg) {
  return *msg->split_color_;
}
void CustomPlayerColorSaveGameData::clear_applied_color() {
  if (GetArena() == nullptr && applied_color_ != nullptr) {
    delete applied_color_;
  }
  applied_color_ = nullptr;
}
void CustomPlayerColorSaveGameData::clear_split_color() {
  if (GetArena() == nullptr && split_color_ != nullptr) {
    delete split_color_;
  }
  split_color_ = nullptr;
}
CustomPlayerColorSaveGameData::CustomPlayerColorSaveGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.CustomPlayerColorSaveGameData)
}
CustomPlayerColorSaveGameData::CustomPlayerColorSaveGameData(const CustomPlayerColorSaveGameData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  color_parameter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_color_parameter().empty()) {
    color_parameter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_color_parameter(),
      GetArena());
  }
  if (from._internal_has_applied_color()) {
    applied_color_ = new ::OakSave::Vec3(*from.applied_color_);
  } else {
    applied_color_ = nullptr;
  }
  if (from._internal_has_split_color()) {
    split_color_ = new ::OakSave::Vec3(*from.split_color_);
  } else {
    split_color_ = nullptr;
  }
  ::memcpy(&use_default_color_, &from.use_default_color_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_default_split_color_) -
    reinterpret_cast<char*>(&use_default_color_)) + sizeof(use_default_split_color_));
  // @@protoc_insertion_point(copy_constructor:OakSave.CustomPlayerColorSaveGameData)
}

void CustomPlayerColorSaveGameData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CustomPlayerColorSaveGameData_OakSave_2eproto.base);
  color_parameter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&applied_color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_default_split_color_) -
      reinterpret_cast<char*>(&applied_color_)) + sizeof(use_default_split_color_));
}

CustomPlayerColorSaveGameData::~CustomPlayerColorSaveGameData() {
  // @@protoc_insertion_point(destructor:OakSave.CustomPlayerColorSaveGameData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CustomPlayerColorSaveGameData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  color_parameter_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete applied_color_;
  if (this != internal_default_instance()) delete split_color_;
}

void CustomPlayerColorSaveGameData::ArenaDtor(void* object) {
  CustomPlayerColorSaveGameData* _this = reinterpret_cast< CustomPlayerColorSaveGameData* >(object);
  (void)_this;
}
void CustomPlayerColorSaveGameData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CustomPlayerColorSaveGameData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CustomPlayerColorSaveGameData& CustomPlayerColorSaveGameData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CustomPlayerColorSaveGameData_OakSave_2eproto.base);
  return *internal_default_instance();
}


void CustomPlayerColorSaveGameData::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.CustomPlayerColorSaveGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  color_parameter_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && applied_color_ != nullptr) {
    delete applied_color_;
  }
  applied_color_ = nullptr;
  if (GetArena() == nullptr && split_color_ != nullptr) {
    delete split_color_;
  }
  split_color_ = nullptr;
  ::memset(&use_default_color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_default_split_color_) -
      reinterpret_cast<char*>(&use_default_color_)) + sizeof(use_default_split_color_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CustomPlayerColorSaveGameData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string color_parameter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_color_parameter();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.CustomPlayerColorSaveGameData.color_parameter"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OakSave.Vec3 applied_color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_applied_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OakSave.Vec3 split_color = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_split_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool use_default_color = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          use_default_color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool use_default_split_color = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          use_default_split_color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CustomPlayerColorSaveGameData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.CustomPlayerColorSaveGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string color_parameter = 1;
  if (this->color_parameter().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_color_parameter().data(), static_cast<int>(this->_internal_color_parameter().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.CustomPlayerColorSaveGameData.color_parameter");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_color_parameter(), target);
  }

  // .OakSave.Vec3 applied_color = 2;
  if (this->has_applied_color()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::applied_color(this), target, stream);
  }

  // .OakSave.Vec3 split_color = 3;
  if (this->has_split_color()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::split_color(this), target, stream);
  }

  // bool use_default_color = 4;
  if (this->use_default_color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_use_default_color(), target);
  }

  // bool use_default_split_color = 5;
  if (this->use_default_split_color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_use_default_split_color(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.CustomPlayerColorSaveGameData)
  return target;
}

size_t CustomPlayerColorSaveGameData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.CustomPlayerColorSaveGameData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string color_parameter = 1;
  if (this->color_parameter().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_color_parameter());
  }

  // .OakSave.Vec3 applied_color = 2;
  if (this->has_applied_color()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *applied_color_);
  }

  // .OakSave.Vec3 split_color = 3;
  if (this->has_split_color()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *split_color_);
  }

  // bool use_default_color = 4;
  if (this->use_default_color() != 0) {
    total_size += 1 + 1;
  }

  // bool use_default_split_color = 5;
  if (this->use_default_split_color() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CustomPlayerColorSaveGameData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.CustomPlayerColorSaveGameData)
  GOOGLE_DCHECK_NE(&from, this);
  const CustomPlayerColorSaveGameData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CustomPlayerColorSaveGameData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.CustomPlayerColorSaveGameData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.CustomPlayerColorSaveGameData)
    MergeFrom(*source);
  }
}

void CustomPlayerColorSaveGameData::MergeFrom(const CustomPlayerColorSaveGameData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.CustomPlayerColorSaveGameData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.color_parameter().size() > 0) {
    _internal_set_color_parameter(from._internal_color_parameter());
  }
  if (from.has_applied_color()) {
    _internal_mutable_applied_color()->::OakSave::Vec3::MergeFrom(from._internal_applied_color());
  }
  if (from.has_split_color()) {
    _internal_mutable_split_color()->::OakSave::Vec3::MergeFrom(from._internal_split_color());
  }
  if (from.use_default_color() != 0) {
    _internal_set_use_default_color(from._internal_use_default_color());
  }
  if (from.use_default_split_color() != 0) {
    _internal_set_use_default_split_color(from._internal_use_default_split_color());
  }
}

void CustomPlayerColorSaveGameData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.CustomPlayerColorSaveGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomPlayerColorSaveGameData::CopyFrom(const CustomPlayerColorSaveGameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.CustomPlayerColorSaveGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomPlayerColorSaveGameData::IsInitialized() const {
  return true;
}

void CustomPlayerColorSaveGameData::InternalSwap(CustomPlayerColorSaveGameData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  color_parameter_.Swap(&other->color_parameter_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CustomPlayerColorSaveGameData, use_default_split_color_)
      + sizeof(CustomPlayerColorSaveGameData::use_default_split_color_)
      - PROTOBUF_FIELD_OFFSET(CustomPlayerColorSaveGameData, applied_color_)>(
          reinterpret_cast<char*>(&applied_color_),
          reinterpret_cast<char*>(&other->applied_color_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CustomPlayerColorSaveGameData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GuardianRankSaveGameData::InitAsDefaultInstance() {
}
class GuardianRankSaveGameData::_Internal {
 public:
};

GuardianRankSaveGameData::GuardianRankSaveGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.GuardianRankSaveGameData)
}
GuardianRankSaveGameData::GuardianRankSaveGameData(const GuardianRankSaveGameData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&guardian_rank_, &from.guardian_rank_,
    static_cast<size_t>(reinterpret_cast<char*>(&guardian_experience_) -
    reinterpret_cast<char*>(&guardian_rank_)) + sizeof(guardian_experience_));
  // @@protoc_insertion_point(copy_constructor:OakSave.GuardianRankSaveGameData)
}

void GuardianRankSaveGameData::SharedCtor() {
  ::memset(&guardian_rank_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&guardian_experience_) -
      reinterpret_cast<char*>(&guardian_rank_)) + sizeof(guardian_experience_));
}

GuardianRankSaveGameData::~GuardianRankSaveGameData() {
  // @@protoc_insertion_point(destructor:OakSave.GuardianRankSaveGameData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GuardianRankSaveGameData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GuardianRankSaveGameData::ArenaDtor(void* object) {
  GuardianRankSaveGameData* _this = reinterpret_cast< GuardianRankSaveGameData* >(object);
  (void)_this;
}
void GuardianRankSaveGameData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GuardianRankSaveGameData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GuardianRankSaveGameData& GuardianRankSaveGameData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GuardianRankSaveGameData_OakSave_2eproto.base);
  return *internal_default_instance();
}


void GuardianRankSaveGameData::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.GuardianRankSaveGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&guardian_rank_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&guardian_experience_) -
      reinterpret_cast<char*>(&guardian_rank_)) + sizeof(guardian_experience_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GuardianRankSaveGameData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 guardian_rank = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          guardian_rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 guardian_experience = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          guardian_experience_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GuardianRankSaveGameData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.GuardianRankSaveGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 guardian_rank = 1;
  if (this->guardian_rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_guardian_rank(), target);
  }

  // int32 guardian_experience = 2;
  if (this->guardian_experience() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_guardian_experience(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.GuardianRankSaveGameData)
  return target;
}

size_t GuardianRankSaveGameData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.GuardianRankSaveGameData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 guardian_rank = 1;
  if (this->guardian_rank() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_guardian_rank());
  }

  // int32 guardian_experience = 2;
  if (this->guardian_experience() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_guardian_experience());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GuardianRankSaveGameData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.GuardianRankSaveGameData)
  GOOGLE_DCHECK_NE(&from, this);
  const GuardianRankSaveGameData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GuardianRankSaveGameData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.GuardianRankSaveGameData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.GuardianRankSaveGameData)
    MergeFrom(*source);
  }
}

void GuardianRankSaveGameData::MergeFrom(const GuardianRankSaveGameData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.GuardianRankSaveGameData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.guardian_rank() != 0) {
    _internal_set_guardian_rank(from._internal_guardian_rank());
  }
  if (from.guardian_experience() != 0) {
    _internal_set_guardian_experience(from._internal_guardian_experience());
  }
}

void GuardianRankSaveGameData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.GuardianRankSaveGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuardianRankSaveGameData::CopyFrom(const GuardianRankSaveGameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.GuardianRankSaveGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuardianRankSaveGameData::IsInitialized() const {
  return true;
}

void GuardianRankSaveGameData::InternalSwap(GuardianRankSaveGameData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GuardianRankSaveGameData, guardian_experience_)
      + sizeof(GuardianRankSaveGameData::guardian_experience_)
      - PROTOBUF_FIELD_OFFSET(GuardianRankSaveGameData, guardian_rank_)>(
          reinterpret_cast<char*>(&guardian_rank_),
          reinterpret_cast<char*>(&other->guardian_rank_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GuardianRankSaveGameData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GuardianRankRewardCharacterSaveGameData::InitAsDefaultInstance() {
}
class GuardianRankRewardCharacterSaveGameData::_Internal {
 public:
};

GuardianRankRewardCharacterSaveGameData::GuardianRankRewardCharacterSaveGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.GuardianRankRewardCharacterSaveGameData)
}
GuardianRankRewardCharacterSaveGameData::GuardianRankRewardCharacterSaveGameData(const GuardianRankRewardCharacterSaveGameData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reward_data_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reward_data_path().empty()) {
    reward_data_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_reward_data_path(),
      GetArena());
  }
  ::memcpy(&num_tokens_, &from.num_tokens_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_enabled_) -
    reinterpret_cast<char*>(&num_tokens_)) + sizeof(is_enabled_));
  // @@protoc_insertion_point(copy_constructor:OakSave.GuardianRankRewardCharacterSaveGameData)
}

void GuardianRankRewardCharacterSaveGameData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GuardianRankRewardCharacterSaveGameData_OakSave_2eproto.base);
  reward_data_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&num_tokens_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_enabled_) -
      reinterpret_cast<char*>(&num_tokens_)) + sizeof(is_enabled_));
}

GuardianRankRewardCharacterSaveGameData::~GuardianRankRewardCharacterSaveGameData() {
  // @@protoc_insertion_point(destructor:OakSave.GuardianRankRewardCharacterSaveGameData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GuardianRankRewardCharacterSaveGameData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  reward_data_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GuardianRankRewardCharacterSaveGameData::ArenaDtor(void* object) {
  GuardianRankRewardCharacterSaveGameData* _this = reinterpret_cast< GuardianRankRewardCharacterSaveGameData* >(object);
  (void)_this;
}
void GuardianRankRewardCharacterSaveGameData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GuardianRankRewardCharacterSaveGameData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GuardianRankRewardCharacterSaveGameData& GuardianRankRewardCharacterSaveGameData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GuardianRankRewardCharacterSaveGameData_OakSave_2eproto.base);
  return *internal_default_instance();
}


void GuardianRankRewardCharacterSaveGameData::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.GuardianRankRewardCharacterSaveGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reward_data_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&num_tokens_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_enabled_) -
      reinterpret_cast<char*>(&num_tokens_)) + sizeof(is_enabled_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GuardianRankRewardCharacterSaveGameData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 num_tokens = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          num_tokens_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_enabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reward_data_path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_reward_data_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.GuardianRankRewardCharacterSaveGameData.reward_data_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GuardianRankRewardCharacterSaveGameData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.GuardianRankRewardCharacterSaveGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num_tokens = 1;
  if (this->num_tokens() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_num_tokens(), target);
  }

  // bool is_enabled = 2;
  if (this->is_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_enabled(), target);
  }

  // string reward_data_path = 3;
  if (this->reward_data_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reward_data_path().data(), static_cast<int>(this->_internal_reward_data_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.GuardianRankRewardCharacterSaveGameData.reward_data_path");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_reward_data_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.GuardianRankRewardCharacterSaveGameData)
  return target;
}

size_t GuardianRankRewardCharacterSaveGameData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.GuardianRankRewardCharacterSaveGameData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reward_data_path = 3;
  if (this->reward_data_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reward_data_path());
  }

  // int32 num_tokens = 1;
  if (this->num_tokens() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_tokens());
  }

  // bool is_enabled = 2;
  if (this->is_enabled() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GuardianRankRewardCharacterSaveGameData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.GuardianRankRewardCharacterSaveGameData)
  GOOGLE_DCHECK_NE(&from, this);
  const GuardianRankRewardCharacterSaveGameData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GuardianRankRewardCharacterSaveGameData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.GuardianRankRewardCharacterSaveGameData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.GuardianRankRewardCharacterSaveGameData)
    MergeFrom(*source);
  }
}

void GuardianRankRewardCharacterSaveGameData::MergeFrom(const GuardianRankRewardCharacterSaveGameData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.GuardianRankRewardCharacterSaveGameData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reward_data_path().size() > 0) {
    _internal_set_reward_data_path(from._internal_reward_data_path());
  }
  if (from.num_tokens() != 0) {
    _internal_set_num_tokens(from._internal_num_tokens());
  }
  if (from.is_enabled() != 0) {
    _internal_set_is_enabled(from._internal_is_enabled());
  }
}

void GuardianRankRewardCharacterSaveGameData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.GuardianRankRewardCharacterSaveGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuardianRankRewardCharacterSaveGameData::CopyFrom(const GuardianRankRewardCharacterSaveGameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.GuardianRankRewardCharacterSaveGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuardianRankRewardCharacterSaveGameData::IsInitialized() const {
  return true;
}

void GuardianRankRewardCharacterSaveGameData::InternalSwap(GuardianRankRewardCharacterSaveGameData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  reward_data_path_.Swap(&other->reward_data_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GuardianRankRewardCharacterSaveGameData, is_enabled_)
      + sizeof(GuardianRankRewardCharacterSaveGameData::is_enabled_)
      - PROTOBUF_FIELD_OFFSET(GuardianRankRewardCharacterSaveGameData, num_tokens_)>(
          reinterpret_cast<char*>(&num_tokens_),
          reinterpret_cast<char*>(&other->num_tokens_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GuardianRankRewardCharacterSaveGameData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GuardianRankPerkCharacterSaveGameData::InitAsDefaultInstance() {
}
class GuardianRankPerkCharacterSaveGameData::_Internal {
 public:
};

GuardianRankPerkCharacterSaveGameData::GuardianRankPerkCharacterSaveGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.GuardianRankPerkCharacterSaveGameData)
}
GuardianRankPerkCharacterSaveGameData::GuardianRankPerkCharacterSaveGameData(const GuardianRankPerkCharacterSaveGameData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  perk_data_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_perk_data_path().empty()) {
    perk_data_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_perk_data_path(),
      GetArena());
  }
  is_enabled_ = from.is_enabled_;
  // @@protoc_insertion_point(copy_constructor:OakSave.GuardianRankPerkCharacterSaveGameData)
}

void GuardianRankPerkCharacterSaveGameData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GuardianRankPerkCharacterSaveGameData_OakSave_2eproto.base);
  perk_data_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  is_enabled_ = false;
}

GuardianRankPerkCharacterSaveGameData::~GuardianRankPerkCharacterSaveGameData() {
  // @@protoc_insertion_point(destructor:OakSave.GuardianRankPerkCharacterSaveGameData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GuardianRankPerkCharacterSaveGameData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  perk_data_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GuardianRankPerkCharacterSaveGameData::ArenaDtor(void* object) {
  GuardianRankPerkCharacterSaveGameData* _this = reinterpret_cast< GuardianRankPerkCharacterSaveGameData* >(object);
  (void)_this;
}
void GuardianRankPerkCharacterSaveGameData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GuardianRankPerkCharacterSaveGameData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GuardianRankPerkCharacterSaveGameData& GuardianRankPerkCharacterSaveGameData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GuardianRankPerkCharacterSaveGameData_OakSave_2eproto.base);
  return *internal_default_instance();
}


void GuardianRankPerkCharacterSaveGameData::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.GuardianRankPerkCharacterSaveGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  perk_data_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  is_enabled_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GuardianRankPerkCharacterSaveGameData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string perk_data_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_perk_data_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.GuardianRankPerkCharacterSaveGameData.perk_data_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GuardianRankPerkCharacterSaveGameData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.GuardianRankPerkCharacterSaveGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_enabled = 1;
  if (this->is_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_enabled(), target);
  }

  // string perk_data_path = 2;
  if (this->perk_data_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_perk_data_path().data(), static_cast<int>(this->_internal_perk_data_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.GuardianRankPerkCharacterSaveGameData.perk_data_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_perk_data_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.GuardianRankPerkCharacterSaveGameData)
  return target;
}

size_t GuardianRankPerkCharacterSaveGameData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.GuardianRankPerkCharacterSaveGameData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string perk_data_path = 2;
  if (this->perk_data_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_perk_data_path());
  }

  // bool is_enabled = 1;
  if (this->is_enabled() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GuardianRankPerkCharacterSaveGameData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.GuardianRankPerkCharacterSaveGameData)
  GOOGLE_DCHECK_NE(&from, this);
  const GuardianRankPerkCharacterSaveGameData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GuardianRankPerkCharacterSaveGameData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.GuardianRankPerkCharacterSaveGameData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.GuardianRankPerkCharacterSaveGameData)
    MergeFrom(*source);
  }
}

void GuardianRankPerkCharacterSaveGameData::MergeFrom(const GuardianRankPerkCharacterSaveGameData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.GuardianRankPerkCharacterSaveGameData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.perk_data_path().size() > 0) {
    _internal_set_perk_data_path(from._internal_perk_data_path());
  }
  if (from.is_enabled() != 0) {
    _internal_set_is_enabled(from._internal_is_enabled());
  }
}

void GuardianRankPerkCharacterSaveGameData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.GuardianRankPerkCharacterSaveGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuardianRankPerkCharacterSaveGameData::CopyFrom(const GuardianRankPerkCharacterSaveGameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.GuardianRankPerkCharacterSaveGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuardianRankPerkCharacterSaveGameData::IsInitialized() const {
  return true;
}

void GuardianRankPerkCharacterSaveGameData::InternalSwap(GuardianRankPerkCharacterSaveGameData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  perk_data_path_.Swap(&other->perk_data_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(is_enabled_, other->is_enabled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GuardianRankPerkCharacterSaveGameData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GuardianRankCharacterSaveGameData::InitAsDefaultInstance() {
}
class GuardianRankCharacterSaveGameData::_Internal {
 public:
};

GuardianRankCharacterSaveGameData::GuardianRankCharacterSaveGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  rank_rewards_(arena),
  rank_perks_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.GuardianRankCharacterSaveGameData)
}
GuardianRankCharacterSaveGameData::GuardianRankCharacterSaveGameData(const GuardianRankCharacterSaveGameData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rank_rewards_(from.rank_rewards_),
      rank_perks_(from.rank_perks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&guardian_available_tokens_, &from.guardian_available_tokens_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_rank_system_enabled_) -
    reinterpret_cast<char*>(&guardian_available_tokens_)) + sizeof(is_rank_system_enabled_));
  // @@protoc_insertion_point(copy_constructor:OakSave.GuardianRankCharacterSaveGameData)
}

void GuardianRankCharacterSaveGameData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GuardianRankCharacterSaveGameData_OakSave_2eproto.base);
  ::memset(&guardian_available_tokens_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_rank_system_enabled_) -
      reinterpret_cast<char*>(&guardian_available_tokens_)) + sizeof(is_rank_system_enabled_));
}

GuardianRankCharacterSaveGameData::~GuardianRankCharacterSaveGameData() {
  // @@protoc_insertion_point(destructor:OakSave.GuardianRankCharacterSaveGameData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GuardianRankCharacterSaveGameData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GuardianRankCharacterSaveGameData::ArenaDtor(void* object) {
  GuardianRankCharacterSaveGameData* _this = reinterpret_cast< GuardianRankCharacterSaveGameData* >(object);
  (void)_this;
}
void GuardianRankCharacterSaveGameData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GuardianRankCharacterSaveGameData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GuardianRankCharacterSaveGameData& GuardianRankCharacterSaveGameData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GuardianRankCharacterSaveGameData_OakSave_2eproto.base);
  return *internal_default_instance();
}


void GuardianRankCharacterSaveGameData::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.GuardianRankCharacterSaveGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rank_rewards_.Clear();
  rank_perks_.Clear();
  ::memset(&guardian_available_tokens_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_rank_system_enabled_) -
      reinterpret_cast<char*>(&guardian_available_tokens_)) + sizeof(is_rank_system_enabled_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GuardianRankCharacterSaveGameData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 guardian_available_tokens = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          guardian_available_tokens_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 guardian_rank = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          guardian_rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 guardian_experience = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          guardian_experience_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .OakSave.GuardianRankRewardCharacterSaveGameData rank_rewards = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rank_rewards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .OakSave.GuardianRankPerkCharacterSaveGameData rank_perks = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rank_perks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 guardian_reward_random_seed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          guardian_reward_random_seed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 new_guardian_experience = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          new_guardian_experience_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_rank_system_enabled = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          is_rank_system_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GuardianRankCharacterSaveGameData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.GuardianRankCharacterSaveGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 guardian_available_tokens = 1;
  if (this->guardian_available_tokens() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_guardian_available_tokens(), target);
  }

  // int32 guardian_rank = 2;
  if (this->guardian_rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_guardian_rank(), target);
  }

  // int32 guardian_experience = 3;
  if (this->guardian_experience() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_guardian_experience(), target);
  }

  // repeated .OakSave.GuardianRankRewardCharacterSaveGameData rank_rewards = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rank_rewards_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_rank_rewards(i), target, stream);
  }

  // repeated .OakSave.GuardianRankPerkCharacterSaveGameData rank_perks = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rank_perks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_rank_perks(i), target, stream);
  }

  // int32 guardian_reward_random_seed = 6;
  if (this->guardian_reward_random_seed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_guardian_reward_random_seed(), target);
  }

  // int64 new_guardian_experience = 7;
  if (this->new_guardian_experience() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_new_guardian_experience(), target);
  }

  // bool is_rank_system_enabled = 8;
  if (this->is_rank_system_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_is_rank_system_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.GuardianRankCharacterSaveGameData)
  return target;
}

size_t GuardianRankCharacterSaveGameData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.GuardianRankCharacterSaveGameData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .OakSave.GuardianRankRewardCharacterSaveGameData rank_rewards = 4;
  total_size += 1UL * this->_internal_rank_rewards_size();
  for (const auto& msg : this->rank_rewards_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .OakSave.GuardianRankPerkCharacterSaveGameData rank_perks = 5;
  total_size += 1UL * this->_internal_rank_perks_size();
  for (const auto& msg : this->rank_perks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 guardian_available_tokens = 1;
  if (this->guardian_available_tokens() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_guardian_available_tokens());
  }

  // int32 guardian_rank = 2;
  if (this->guardian_rank() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_guardian_rank());
  }

  // int32 guardian_experience = 3;
  if (this->guardian_experience() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_guardian_experience());
  }

  // int32 guardian_reward_random_seed = 6;
  if (this->guardian_reward_random_seed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_guardian_reward_random_seed());
  }

  // int64 new_guardian_experience = 7;
  if (this->new_guardian_experience() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_new_guardian_experience());
  }

  // bool is_rank_system_enabled = 8;
  if (this->is_rank_system_enabled() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GuardianRankCharacterSaveGameData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.GuardianRankCharacterSaveGameData)
  GOOGLE_DCHECK_NE(&from, this);
  const GuardianRankCharacterSaveGameData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GuardianRankCharacterSaveGameData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.GuardianRankCharacterSaveGameData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.GuardianRankCharacterSaveGameData)
    MergeFrom(*source);
  }
}

void GuardianRankCharacterSaveGameData::MergeFrom(const GuardianRankCharacterSaveGameData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.GuardianRankCharacterSaveGameData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rank_rewards_.MergeFrom(from.rank_rewards_);
  rank_perks_.MergeFrom(from.rank_perks_);
  if (from.guardian_available_tokens() != 0) {
    _internal_set_guardian_available_tokens(from._internal_guardian_available_tokens());
  }
  if (from.guardian_rank() != 0) {
    _internal_set_guardian_rank(from._internal_guardian_rank());
  }
  if (from.guardian_experience() != 0) {
    _internal_set_guardian_experience(from._internal_guardian_experience());
  }
  if (from.guardian_reward_random_seed() != 0) {
    _internal_set_guardian_reward_random_seed(from._internal_guardian_reward_random_seed());
  }
  if (from.new_guardian_experience() != 0) {
    _internal_set_new_guardian_experience(from._internal_new_guardian_experience());
  }
  if (from.is_rank_system_enabled() != 0) {
    _internal_set_is_rank_system_enabled(from._internal_is_rank_system_enabled());
  }
}

void GuardianRankCharacterSaveGameData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.GuardianRankCharacterSaveGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuardianRankCharacterSaveGameData::CopyFrom(const GuardianRankCharacterSaveGameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.GuardianRankCharacterSaveGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuardianRankCharacterSaveGameData::IsInitialized() const {
  return true;
}

void GuardianRankCharacterSaveGameData::InternalSwap(GuardianRankCharacterSaveGameData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  rank_rewards_.InternalSwap(&other->rank_rewards_);
  rank_perks_.InternalSwap(&other->rank_perks_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GuardianRankCharacterSaveGameData, is_rank_system_enabled_)
      + sizeof(GuardianRankCharacterSaveGameData::is_rank_system_enabled_)
      - PROTOBUF_FIELD_OFFSET(GuardianRankCharacterSaveGameData, guardian_available_tokens_)>(
          reinterpret_cast<char*>(&guardian_available_tokens_),
          reinterpret_cast<char*>(&other->guardian_available_tokens_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GuardianRankCharacterSaveGameData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CrewQuartersDecorationSaveData::InitAsDefaultInstance() {
}
class CrewQuartersDecorationSaveData::_Internal {
 public:
};

CrewQuartersDecorationSaveData::CrewQuartersDecorationSaveData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.CrewQuartersDecorationSaveData)
}
CrewQuartersDecorationSaveData::CrewQuartersDecorationSaveData(const CrewQuartersDecorationSaveData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  decoration_data_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_decoration_data_path().empty()) {
    decoration_data_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_decoration_data_path(),
      GetArena());
  }
  decoration_index_ = from.decoration_index_;
  // @@protoc_insertion_point(copy_constructor:OakSave.CrewQuartersDecorationSaveData)
}

void CrewQuartersDecorationSaveData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CrewQuartersDecorationSaveData_OakSave_2eproto.base);
  decoration_data_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  decoration_index_ = 0;
}

CrewQuartersDecorationSaveData::~CrewQuartersDecorationSaveData() {
  // @@protoc_insertion_point(destructor:OakSave.CrewQuartersDecorationSaveData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CrewQuartersDecorationSaveData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  decoration_data_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CrewQuartersDecorationSaveData::ArenaDtor(void* object) {
  CrewQuartersDecorationSaveData* _this = reinterpret_cast< CrewQuartersDecorationSaveData* >(object);
  (void)_this;
}
void CrewQuartersDecorationSaveData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CrewQuartersDecorationSaveData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CrewQuartersDecorationSaveData& CrewQuartersDecorationSaveData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CrewQuartersDecorationSaveData_OakSave_2eproto.base);
  return *internal_default_instance();
}


void CrewQuartersDecorationSaveData::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.CrewQuartersDecorationSaveData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  decoration_data_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  decoration_index_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CrewQuartersDecorationSaveData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 decoration_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          decoration_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string decoration_data_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_decoration_data_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.CrewQuartersDecorationSaveData.decoration_data_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CrewQuartersDecorationSaveData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.CrewQuartersDecorationSaveData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 decoration_index = 1;
  if (this->decoration_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_decoration_index(), target);
  }

  // string decoration_data_path = 2;
  if (this->decoration_data_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_decoration_data_path().data(), static_cast<int>(this->_internal_decoration_data_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.CrewQuartersDecorationSaveData.decoration_data_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_decoration_data_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.CrewQuartersDecorationSaveData)
  return target;
}

size_t CrewQuartersDecorationSaveData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.CrewQuartersDecorationSaveData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string decoration_data_path = 2;
  if (this->decoration_data_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_decoration_data_path());
  }

  // int32 decoration_index = 1;
  if (this->decoration_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_decoration_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CrewQuartersDecorationSaveData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.CrewQuartersDecorationSaveData)
  GOOGLE_DCHECK_NE(&from, this);
  const CrewQuartersDecorationSaveData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CrewQuartersDecorationSaveData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.CrewQuartersDecorationSaveData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.CrewQuartersDecorationSaveData)
    MergeFrom(*source);
  }
}

void CrewQuartersDecorationSaveData::MergeFrom(const CrewQuartersDecorationSaveData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.CrewQuartersDecorationSaveData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.decoration_data_path().size() > 0) {
    _internal_set_decoration_data_path(from._internal_decoration_data_path());
  }
  if (from.decoration_index() != 0) {
    _internal_set_decoration_index(from._internal_decoration_index());
  }
}

void CrewQuartersDecorationSaveData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.CrewQuartersDecorationSaveData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrewQuartersDecorationSaveData::CopyFrom(const CrewQuartersDecorationSaveData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.CrewQuartersDecorationSaveData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrewQuartersDecorationSaveData::IsInitialized() const {
  return true;
}

void CrewQuartersDecorationSaveData::InternalSwap(CrewQuartersDecorationSaveData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  decoration_data_path_.Swap(&other->decoration_data_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(decoration_index_, other->decoration_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CrewQuartersDecorationSaveData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CrewQuartersSaveData::InitAsDefaultInstance() {
}
class CrewQuartersSaveData::_Internal {
 public:
};

CrewQuartersSaveData::CrewQuartersSaveData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  decorations_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.CrewQuartersSaveData)
}
CrewQuartersSaveData::CrewQuartersSaveData(const CrewQuartersSaveData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      decorations_(from.decorations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  room_data_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_room_data_path().empty()) {
    room_data_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_room_data_path(),
      GetArena());
  }
  preferred_room_assignment_ = from.preferred_room_assignment_;
  // @@protoc_insertion_point(copy_constructor:OakSave.CrewQuartersSaveData)
}

void CrewQuartersSaveData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CrewQuartersSaveData_OakSave_2eproto.base);
  room_data_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  preferred_room_assignment_ = 0;
}

CrewQuartersSaveData::~CrewQuartersSaveData() {
  // @@protoc_insertion_point(destructor:OakSave.CrewQuartersSaveData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CrewQuartersSaveData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  room_data_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CrewQuartersSaveData::ArenaDtor(void* object) {
  CrewQuartersSaveData* _this = reinterpret_cast< CrewQuartersSaveData* >(object);
  (void)_this;
}
void CrewQuartersSaveData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CrewQuartersSaveData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CrewQuartersSaveData& CrewQuartersSaveData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CrewQuartersSaveData_OakSave_2eproto.base);
  return *internal_default_instance();
}


void CrewQuartersSaveData::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.CrewQuartersSaveData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  decorations_.Clear();
  room_data_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  preferred_room_assignment_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CrewQuartersSaveData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 preferred_room_assignment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          preferred_room_assignment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .OakSave.CrewQuartersDecorationSaveData decorations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_decorations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string room_data_path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_room_data_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.CrewQuartersSaveData.room_data_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CrewQuartersSaveData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.CrewQuartersSaveData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 preferred_room_assignment = 1;
  if (this->preferred_room_assignment() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_preferred_room_assignment(), target);
  }

  // repeated .OakSave.CrewQuartersDecorationSaveData decorations = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_decorations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_decorations(i), target, stream);
  }

  // string room_data_path = 3;
  if (this->room_data_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_data_path().data(), static_cast<int>(this->_internal_room_data_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.CrewQuartersSaveData.room_data_path");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_room_data_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.CrewQuartersSaveData)
  return target;
}

size_t CrewQuartersSaveData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.CrewQuartersSaveData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .OakSave.CrewQuartersDecorationSaveData decorations = 2;
  total_size += 1UL * this->_internal_decorations_size();
  for (const auto& msg : this->decorations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string room_data_path = 3;
  if (this->room_data_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_data_path());
  }

  // int32 preferred_room_assignment = 1;
  if (this->preferred_room_assignment() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_preferred_room_assignment());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CrewQuartersSaveData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.CrewQuartersSaveData)
  GOOGLE_DCHECK_NE(&from, this);
  const CrewQuartersSaveData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CrewQuartersSaveData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.CrewQuartersSaveData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.CrewQuartersSaveData)
    MergeFrom(*source);
  }
}

void CrewQuartersSaveData::MergeFrom(const CrewQuartersSaveData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.CrewQuartersSaveData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  decorations_.MergeFrom(from.decorations_);
  if (from.room_data_path().size() > 0) {
    _internal_set_room_data_path(from._internal_room_data_path());
  }
  if (from.preferred_room_assignment() != 0) {
    _internal_set_preferred_room_assignment(from._internal_preferred_room_assignment());
  }
}

void CrewQuartersSaveData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.CrewQuartersSaveData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrewQuartersSaveData::CopyFrom(const CrewQuartersSaveData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.CrewQuartersSaveData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrewQuartersSaveData::IsInitialized() const {
  return true;
}

void CrewQuartersSaveData::InternalSwap(CrewQuartersSaveData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  decorations_.InternalSwap(&other->decorations_);
  room_data_path_.Swap(&other->room_data_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(preferred_room_assignment_, other->preferred_room_assignment_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CrewQuartersSaveData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CrewQuartersGunRackItemSaveData::InitAsDefaultInstance() {
  ::OakSave::_CrewQuartersGunRackItemSaveData_default_instance_._instance.get_mutable()->development_save_data_ = const_cast< ::OakSave::InventoryBalanceStateInitializationData*>(
      ::OakSave::InventoryBalanceStateInitializationData::internal_default_instance());
}
class CrewQuartersGunRackItemSaveData::_Internal {
 public:
  static const ::OakSave::InventoryBalanceStateInitializationData& development_save_data(const CrewQuartersGunRackItemSaveData* msg);
};

const ::OakSave::InventoryBalanceStateInitializationData&
CrewQuartersGunRackItemSaveData::_Internal::development_save_data(const CrewQuartersGunRackItemSaveData* msg) {
  return *msg->development_save_data_;
}
CrewQuartersGunRackItemSaveData::CrewQuartersGunRackItemSaveData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.CrewQuartersGunRackItemSaveData)
}
CrewQuartersGunRackItemSaveData::CrewQuartersGunRackItemSaveData(const CrewQuartersGunRackItemSaveData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  encrypted_serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_encrypted_serial_number().empty()) {
    encrypted_serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_encrypted_serial_number(),
      GetArena());
  }
  slot_asset_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_slot_asset_path().empty()) {
    slot_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_slot_asset_path(),
      GetArena());
  }
  if (from._internal_has_development_save_data()) {
    development_save_data_ = new ::OakSave::InventoryBalanceStateInitializationData(*from.development_save_data_);
  } else {
    development_save_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:OakSave.CrewQuartersGunRackItemSaveData)
}

void CrewQuartersGunRackItemSaveData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CrewQuartersGunRackItemSaveData_OakSave_2eproto.base);
  encrypted_serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  slot_asset_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  development_save_data_ = nullptr;
}

CrewQuartersGunRackItemSaveData::~CrewQuartersGunRackItemSaveData() {
  // @@protoc_insertion_point(destructor:OakSave.CrewQuartersGunRackItemSaveData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CrewQuartersGunRackItemSaveData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  encrypted_serial_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  slot_asset_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete development_save_data_;
}

void CrewQuartersGunRackItemSaveData::ArenaDtor(void* object) {
  CrewQuartersGunRackItemSaveData* _this = reinterpret_cast< CrewQuartersGunRackItemSaveData* >(object);
  (void)_this;
}
void CrewQuartersGunRackItemSaveData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CrewQuartersGunRackItemSaveData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CrewQuartersGunRackItemSaveData& CrewQuartersGunRackItemSaveData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CrewQuartersGunRackItemSaveData_OakSave_2eproto.base);
  return *internal_default_instance();
}


void CrewQuartersGunRackItemSaveData::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.CrewQuartersGunRackItemSaveData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  encrypted_serial_number_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  slot_asset_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && development_save_data_ != nullptr) {
    delete development_save_data_;
  }
  development_save_data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CrewQuartersGunRackItemSaveData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes encrypted_serial_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_encrypted_serial_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string slot_asset_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_slot_asset_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.CrewQuartersGunRackItemSaveData.slot_asset_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OakSave.InventoryBalanceStateInitializationData development_save_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_development_save_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CrewQuartersGunRackItemSaveData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.CrewQuartersGunRackItemSaveData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes encrypted_serial_number = 1;
  if (this->encrypted_serial_number().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_encrypted_serial_number(), target);
  }

  // string slot_asset_path = 2;
  if (this->slot_asset_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_slot_asset_path().data(), static_cast<int>(this->_internal_slot_asset_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.CrewQuartersGunRackItemSaveData.slot_asset_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_slot_asset_path(), target);
  }

  // .OakSave.InventoryBalanceStateInitializationData development_save_data = 3;
  if (this->has_development_save_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::development_save_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.CrewQuartersGunRackItemSaveData)
  return target;
}

size_t CrewQuartersGunRackItemSaveData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.CrewQuartersGunRackItemSaveData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes encrypted_serial_number = 1;
  if (this->encrypted_serial_number().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_encrypted_serial_number());
  }

  // string slot_asset_path = 2;
  if (this->slot_asset_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_slot_asset_path());
  }

  // .OakSave.InventoryBalanceStateInitializationData development_save_data = 3;
  if (this->has_development_save_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *development_save_data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CrewQuartersGunRackItemSaveData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.CrewQuartersGunRackItemSaveData)
  GOOGLE_DCHECK_NE(&from, this);
  const CrewQuartersGunRackItemSaveData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CrewQuartersGunRackItemSaveData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.CrewQuartersGunRackItemSaveData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.CrewQuartersGunRackItemSaveData)
    MergeFrom(*source);
  }
}

void CrewQuartersGunRackItemSaveData::MergeFrom(const CrewQuartersGunRackItemSaveData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.CrewQuartersGunRackItemSaveData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.encrypted_serial_number().size() > 0) {
    _internal_set_encrypted_serial_number(from._internal_encrypted_serial_number());
  }
  if (from.slot_asset_path().size() > 0) {
    _internal_set_slot_asset_path(from._internal_slot_asset_path());
  }
  if (from.has_development_save_data()) {
    _internal_mutable_development_save_data()->::OakSave::InventoryBalanceStateInitializationData::MergeFrom(from._internal_development_save_data());
  }
}

void CrewQuartersGunRackItemSaveData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.CrewQuartersGunRackItemSaveData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrewQuartersGunRackItemSaveData::CopyFrom(const CrewQuartersGunRackItemSaveData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.CrewQuartersGunRackItemSaveData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrewQuartersGunRackItemSaveData::IsInitialized() const {
  return true;
}

void CrewQuartersGunRackItemSaveData::InternalSwap(CrewQuartersGunRackItemSaveData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  encrypted_serial_number_.Swap(&other->encrypted_serial_number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  slot_asset_path_.Swap(&other->slot_asset_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(development_save_data_, other->development_save_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CrewQuartersGunRackItemSaveData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CrewQuartersGunRackSaveData::InitAsDefaultInstance() {
}
class CrewQuartersGunRackSaveData::_Internal {
 public:
};

CrewQuartersGunRackSaveData::CrewQuartersGunRackSaveData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  rack_save_data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.CrewQuartersGunRackSaveData)
}
CrewQuartersGunRackSaveData::CrewQuartersGunRackSaveData(const CrewQuartersGunRackSaveData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rack_save_data_(from.rack_save_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:OakSave.CrewQuartersGunRackSaveData)
}

void CrewQuartersGunRackSaveData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CrewQuartersGunRackSaveData_OakSave_2eproto.base);
}

CrewQuartersGunRackSaveData::~CrewQuartersGunRackSaveData() {
  // @@protoc_insertion_point(destructor:OakSave.CrewQuartersGunRackSaveData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CrewQuartersGunRackSaveData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CrewQuartersGunRackSaveData::ArenaDtor(void* object) {
  CrewQuartersGunRackSaveData* _this = reinterpret_cast< CrewQuartersGunRackSaveData* >(object);
  (void)_this;
}
void CrewQuartersGunRackSaveData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CrewQuartersGunRackSaveData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CrewQuartersGunRackSaveData& CrewQuartersGunRackSaveData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CrewQuartersGunRackSaveData_OakSave_2eproto.base);
  return *internal_default_instance();
}


void CrewQuartersGunRackSaveData::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.CrewQuartersGunRackSaveData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rack_save_data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CrewQuartersGunRackSaveData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .OakSave.CrewQuartersGunRackItemSaveData rack_save_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rack_save_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CrewQuartersGunRackSaveData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.CrewQuartersGunRackSaveData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .OakSave.CrewQuartersGunRackItemSaveData rack_save_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rack_save_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_rack_save_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.CrewQuartersGunRackSaveData)
  return target;
}

size_t CrewQuartersGunRackSaveData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.CrewQuartersGunRackSaveData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .OakSave.CrewQuartersGunRackItemSaveData rack_save_data = 1;
  total_size += 1UL * this->_internal_rack_save_data_size();
  for (const auto& msg : this->rack_save_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CrewQuartersGunRackSaveData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.CrewQuartersGunRackSaveData)
  GOOGLE_DCHECK_NE(&from, this);
  const CrewQuartersGunRackSaveData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CrewQuartersGunRackSaveData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.CrewQuartersGunRackSaveData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.CrewQuartersGunRackSaveData)
    MergeFrom(*source);
  }
}

void CrewQuartersGunRackSaveData::MergeFrom(const CrewQuartersGunRackSaveData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.CrewQuartersGunRackSaveData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rack_save_data_.MergeFrom(from.rack_save_data_);
}

void CrewQuartersGunRackSaveData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.CrewQuartersGunRackSaveData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrewQuartersGunRackSaveData::CopyFrom(const CrewQuartersGunRackSaveData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.CrewQuartersGunRackSaveData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrewQuartersGunRackSaveData::IsInitialized() const {
  return true;
}

void CrewQuartersGunRackSaveData::InternalSwap(CrewQuartersGunRackSaveData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  rack_save_data_.InternalSwap(&other->rack_save_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CrewQuartersGunRackSaveData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EchoLogSaveGameData::InitAsDefaultInstance() {
}
class EchoLogSaveGameData::_Internal {
 public:
};

EchoLogSaveGameData::EchoLogSaveGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.EchoLogSaveGameData)
}
EchoLogSaveGameData::EchoLogSaveGameData(const EchoLogSaveGameData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  echo_log_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_echo_log_path().empty()) {
    echo_log_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_echo_log_path(),
      GetArena());
  }
  has_been_seen_in_log_ = from.has_been_seen_in_log_;
  // @@protoc_insertion_point(copy_constructor:OakSave.EchoLogSaveGameData)
}

void EchoLogSaveGameData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EchoLogSaveGameData_OakSave_2eproto.base);
  echo_log_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  has_been_seen_in_log_ = false;
}

EchoLogSaveGameData::~EchoLogSaveGameData() {
  // @@protoc_insertion_point(destructor:OakSave.EchoLogSaveGameData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EchoLogSaveGameData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  echo_log_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EchoLogSaveGameData::ArenaDtor(void* object) {
  EchoLogSaveGameData* _this = reinterpret_cast< EchoLogSaveGameData* >(object);
  (void)_this;
}
void EchoLogSaveGameData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EchoLogSaveGameData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EchoLogSaveGameData& EchoLogSaveGameData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EchoLogSaveGameData_OakSave_2eproto.base);
  return *internal_default_instance();
}


void EchoLogSaveGameData::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.EchoLogSaveGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  echo_log_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  has_been_seen_in_log_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EchoLogSaveGameData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool has_been_seen_in_log = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          has_been_seen_in_log_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string echo_log_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_echo_log_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.EchoLogSaveGameData.echo_log_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EchoLogSaveGameData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.EchoLogSaveGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool has_been_seen_in_log = 1;
  if (this->has_been_seen_in_log() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_has_been_seen_in_log(), target);
  }

  // string echo_log_path = 2;
  if (this->echo_log_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_echo_log_path().data(), static_cast<int>(this->_internal_echo_log_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.EchoLogSaveGameData.echo_log_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_echo_log_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.EchoLogSaveGameData)
  return target;
}

size_t EchoLogSaveGameData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.EchoLogSaveGameData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string echo_log_path = 2;
  if (this->echo_log_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_echo_log_path());
  }

  // bool has_been_seen_in_log = 1;
  if (this->has_been_seen_in_log() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EchoLogSaveGameData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.EchoLogSaveGameData)
  GOOGLE_DCHECK_NE(&from, this);
  const EchoLogSaveGameData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EchoLogSaveGameData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.EchoLogSaveGameData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.EchoLogSaveGameData)
    MergeFrom(*source);
  }
}

void EchoLogSaveGameData::MergeFrom(const EchoLogSaveGameData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.EchoLogSaveGameData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.echo_log_path().size() > 0) {
    _internal_set_echo_log_path(from._internal_echo_log_path());
  }
  if (from.has_been_seen_in_log() != 0) {
    _internal_set_has_been_seen_in_log(from._internal_has_been_seen_in_log());
  }
}

void EchoLogSaveGameData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.EchoLogSaveGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EchoLogSaveGameData::CopyFrom(const EchoLogSaveGameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.EchoLogSaveGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EchoLogSaveGameData::IsInitialized() const {
  return true;
}

void EchoLogSaveGameData::InternalSwap(EchoLogSaveGameData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  echo_log_path_.Swap(&other->echo_log_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(has_been_seen_in_log_, other->has_been_seen_in_log_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EchoLogSaveGameData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MapIDData::InitAsDefaultInstance() {
}
class MapIDData::_Internal {
 public:
};

MapIDData::MapIDData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.MapIDData)
}
MapIDData::MapIDData(const MapIDData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&zone_name_id_, &from.zone_name_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&map_name_id_) -
    reinterpret_cast<char*>(&zone_name_id_)) + sizeof(map_name_id_));
  // @@protoc_insertion_point(copy_constructor:OakSave.MapIDData)
}

void MapIDData::SharedCtor() {
  ::memset(&zone_name_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&map_name_id_) -
      reinterpret_cast<char*>(&zone_name_id_)) + sizeof(map_name_id_));
}

MapIDData::~MapIDData() {
  // @@protoc_insertion_point(destructor:OakSave.MapIDData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MapIDData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MapIDData::ArenaDtor(void* object) {
  MapIDData* _this = reinterpret_cast< MapIDData* >(object);
  (void)_this;
}
void MapIDData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MapIDData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapIDData& MapIDData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MapIDData_OakSave_2eproto.base);
  return *internal_default_instance();
}


void MapIDData::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.MapIDData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&zone_name_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&map_name_id_) -
      reinterpret_cast<char*>(&zone_name_id_)) + sizeof(map_name_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapIDData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 zone_name_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          zone_name_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 map_name_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          map_name_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MapIDData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.MapIDData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 zone_name_id = 1;
  if (this->zone_name_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_zone_name_id(), target);
  }

  // uint32 map_name_id = 2;
  if (this->map_name_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_map_name_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.MapIDData)
  return target;
}

size_t MapIDData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.MapIDData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 zone_name_id = 1;
  if (this->zone_name_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_zone_name_id());
  }

  // uint32 map_name_id = 2;
  if (this->map_name_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_map_name_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapIDData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.MapIDData)
  GOOGLE_DCHECK_NE(&from, this);
  const MapIDData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MapIDData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.MapIDData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.MapIDData)
    MergeFrom(*source);
  }
}

void MapIDData::MergeFrom(const MapIDData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.MapIDData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.zone_name_id() != 0) {
    _internal_set_zone_name_id(from._internal_zone_name_id());
  }
  if (from.map_name_id() != 0) {
    _internal_set_map_name_id(from._internal_map_name_id());
  }
}

void MapIDData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.MapIDData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapIDData::CopyFrom(const MapIDData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.MapIDData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapIDData::IsInitialized() const {
  return true;
}

void MapIDData::InternalSwap(MapIDData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MapIDData, map_name_id_)
      + sizeof(MapIDData::map_name_id_)
      - PROTOBUF_FIELD_OFFSET(MapIDData, zone_name_id_)>(
          reinterpret_cast<char*>(&zone_name_id_),
          reinterpret_cast<char*>(&other->zone_name_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MapIDData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameStateSaveData::InitAsDefaultInstance() {
  ::OakSave::_GameStateSaveData_default_instance_._instance.get_mutable()->last_traveled_map_id_ = const_cast< ::OakSave::MapIDData*>(
      ::OakSave::MapIDData::internal_default_instance());
}
class GameStateSaveData::_Internal {
 public:
  static const ::OakSave::MapIDData& last_traveled_map_id(const GameStateSaveData* msg);
};

const ::OakSave::MapIDData&
GameStateSaveData::_Internal::last_traveled_map_id(const GameStateSaveData* msg) {
  return *msg->last_traveled_map_id_;
}
GameStateSaveData::GameStateSaveData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.GameStateSaveData)
}
GameStateSaveData::GameStateSaveData(const GameStateSaveData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_last_traveled_map_id()) {
    last_traveled_map_id_ = new ::OakSave::MapIDData(*from.last_traveled_map_id_);
  } else {
    last_traveled_map_id_ = nullptr;
  }
  ::memcpy(&mayhem_level_, &from.mayhem_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&mayhem_random_seed_) -
    reinterpret_cast<char*>(&mayhem_level_)) + sizeof(mayhem_random_seed_));
  // @@protoc_insertion_point(copy_constructor:OakSave.GameStateSaveData)
}

void GameStateSaveData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameStateSaveData_OakSave_2eproto.base);
  ::memset(&last_traveled_map_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mayhem_random_seed_) -
      reinterpret_cast<char*>(&last_traveled_map_id_)) + sizeof(mayhem_random_seed_));
}

GameStateSaveData::~GameStateSaveData() {
  // @@protoc_insertion_point(destructor:OakSave.GameStateSaveData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameStateSaveData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete last_traveled_map_id_;
}

void GameStateSaveData::ArenaDtor(void* object) {
  GameStateSaveData* _this = reinterpret_cast< GameStateSaveData* >(object);
  (void)_this;
}
void GameStateSaveData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameStateSaveData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameStateSaveData& GameStateSaveData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameStateSaveData_OakSave_2eproto.base);
  return *internal_default_instance();
}


void GameStateSaveData::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.GameStateSaveData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && last_traveled_map_id_ != nullptr) {
    delete last_traveled_map_id_;
  }
  last_traveled_map_id_ = nullptr;
  ::memset(&mayhem_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mayhem_random_seed_) -
      reinterpret_cast<char*>(&mayhem_level_)) + sizeof(mayhem_random_seed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameStateSaveData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .OakSave.MapIDData last_traveled_map_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_traveled_map_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mayhem_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          mayhem_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mayhem_random_seed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          mayhem_random_seed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameStateSaveData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.GameStateSaveData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .OakSave.MapIDData last_traveled_map_id = 1;
  if (this->has_last_traveled_map_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::last_traveled_map_id(this), target, stream);
  }

  // int32 mayhem_level = 2;
  if (this->mayhem_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_mayhem_level(), target);
  }

  // int32 mayhem_random_seed = 3;
  if (this->mayhem_random_seed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_mayhem_random_seed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.GameStateSaveData)
  return target;
}

size_t GameStateSaveData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.GameStateSaveData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .OakSave.MapIDData last_traveled_map_id = 1;
  if (this->has_last_traveled_map_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *last_traveled_map_id_);
  }

  // int32 mayhem_level = 2;
  if (this->mayhem_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mayhem_level());
  }

  // int32 mayhem_random_seed = 3;
  if (this->mayhem_random_seed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mayhem_random_seed());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameStateSaveData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.GameStateSaveData)
  GOOGLE_DCHECK_NE(&from, this);
  const GameStateSaveData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameStateSaveData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.GameStateSaveData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.GameStateSaveData)
    MergeFrom(*source);
  }
}

void GameStateSaveData::MergeFrom(const GameStateSaveData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.GameStateSaveData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_last_traveled_map_id()) {
    _internal_mutable_last_traveled_map_id()->::OakSave::MapIDData::MergeFrom(from._internal_last_traveled_map_id());
  }
  if (from.mayhem_level() != 0) {
    _internal_set_mayhem_level(from._internal_mayhem_level());
  }
  if (from.mayhem_random_seed() != 0) {
    _internal_set_mayhem_random_seed(from._internal_mayhem_random_seed());
  }
}

void GameStateSaveData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.GameStateSaveData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameStateSaveData::CopyFrom(const GameStateSaveData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.GameStateSaveData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameStateSaveData::IsInitialized() const {
  return true;
}

void GameStateSaveData::InternalSwap(GameStateSaveData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameStateSaveData, mayhem_random_seed_)
      + sizeof(GameStateSaveData::mayhem_random_seed_)
      - PROTOBUF_FIELD_OFFSET(GameStateSaveData, last_traveled_map_id_)>(
          reinterpret_cast<char*>(&last_traveled_map_id_),
          reinterpret_cast<char*>(&other->last_traveled_map_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameStateSaveData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChallengeCategoryProgressSaveData::InitAsDefaultInstance() {
}
class ChallengeCategoryProgressSaveData::_Internal {
 public:
};

ChallengeCategoryProgressSaveData::ChallengeCategoryProgressSaveData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.ChallengeCategoryProgressSaveData)
}
ChallengeCategoryProgressSaveData::ChallengeCategoryProgressSaveData(const ChallengeCategoryProgressSaveData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  category_progress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_category_progress().empty()) {
    category_progress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_category_progress(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:OakSave.ChallengeCategoryProgressSaveData)
}

void ChallengeCategoryProgressSaveData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChallengeCategoryProgressSaveData_OakSave_2eproto.base);
  category_progress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ChallengeCategoryProgressSaveData::~ChallengeCategoryProgressSaveData() {
  // @@protoc_insertion_point(destructor:OakSave.ChallengeCategoryProgressSaveData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChallengeCategoryProgressSaveData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  category_progress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChallengeCategoryProgressSaveData::ArenaDtor(void* object) {
  ChallengeCategoryProgressSaveData* _this = reinterpret_cast< ChallengeCategoryProgressSaveData* >(object);
  (void)_this;
}
void ChallengeCategoryProgressSaveData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChallengeCategoryProgressSaveData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChallengeCategoryProgressSaveData& ChallengeCategoryProgressSaveData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChallengeCategoryProgressSaveData_OakSave_2eproto.base);
  return *internal_default_instance();
}


void ChallengeCategoryProgressSaveData::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.ChallengeCategoryProgressSaveData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  category_progress_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChallengeCategoryProgressSaveData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes category_progress = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_category_progress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChallengeCategoryProgressSaveData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.ChallengeCategoryProgressSaveData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes category_progress = 1;
  if (this->category_progress().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_category_progress(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.ChallengeCategoryProgressSaveData)
  return target;
}

size_t ChallengeCategoryProgressSaveData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.ChallengeCategoryProgressSaveData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes category_progress = 1;
  if (this->category_progress().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_category_progress());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChallengeCategoryProgressSaveData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.ChallengeCategoryProgressSaveData)
  GOOGLE_DCHECK_NE(&from, this);
  const ChallengeCategoryProgressSaveData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChallengeCategoryProgressSaveData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.ChallengeCategoryProgressSaveData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.ChallengeCategoryProgressSaveData)
    MergeFrom(*source);
  }
}

void ChallengeCategoryProgressSaveData::MergeFrom(const ChallengeCategoryProgressSaveData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.ChallengeCategoryProgressSaveData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.category_progress().size() > 0) {
    _internal_set_category_progress(from._internal_category_progress());
  }
}

void ChallengeCategoryProgressSaveData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.ChallengeCategoryProgressSaveData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChallengeCategoryProgressSaveData::CopyFrom(const ChallengeCategoryProgressSaveData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.ChallengeCategoryProgressSaveData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChallengeCategoryProgressSaveData::IsInitialized() const {
  return true;
}

void ChallengeCategoryProgressSaveData::InternalSwap(ChallengeCategoryProgressSaveData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  category_progress_.Swap(&other->category_progress_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ChallengeCategoryProgressSaveData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OakPlayerCharacterAugmentSaveGameData::InitAsDefaultInstance() {
}
class OakPlayerCharacterAugmentSaveGameData::_Internal {
 public:
};

OakPlayerCharacterAugmentSaveGameData::OakPlayerCharacterAugmentSaveGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.OakPlayerCharacterAugmentSaveGameData)
}
OakPlayerCharacterAugmentSaveGameData::OakPlayerCharacterAugmentSaveGameData(const OakPlayerCharacterAugmentSaveGameData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  slot_asset_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_slot_asset_path().empty()) {
    slot_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_slot_asset_path(),
      GetArena());
  }
  augment_asset_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_augment_asset_path().empty()) {
    augment_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_augment_asset_path(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:OakSave.OakPlayerCharacterAugmentSaveGameData)
}

void OakPlayerCharacterAugmentSaveGameData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OakPlayerCharacterAugmentSaveGameData_OakSave_2eproto.base);
  slot_asset_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  augment_asset_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

OakPlayerCharacterAugmentSaveGameData::~OakPlayerCharacterAugmentSaveGameData() {
  // @@protoc_insertion_point(destructor:OakSave.OakPlayerCharacterAugmentSaveGameData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OakPlayerCharacterAugmentSaveGameData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  slot_asset_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  augment_asset_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OakPlayerCharacterAugmentSaveGameData::ArenaDtor(void* object) {
  OakPlayerCharacterAugmentSaveGameData* _this = reinterpret_cast< OakPlayerCharacterAugmentSaveGameData* >(object);
  (void)_this;
}
void OakPlayerCharacterAugmentSaveGameData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OakPlayerCharacterAugmentSaveGameData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OakPlayerCharacterAugmentSaveGameData& OakPlayerCharacterAugmentSaveGameData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OakPlayerCharacterAugmentSaveGameData_OakSave_2eproto.base);
  return *internal_default_instance();
}


void OakPlayerCharacterAugmentSaveGameData::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.OakPlayerCharacterAugmentSaveGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slot_asset_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  augment_asset_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OakPlayerCharacterAugmentSaveGameData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string slot_asset_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_slot_asset_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.OakPlayerCharacterAugmentSaveGameData.slot_asset_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string augment_asset_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_augment_asset_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.OakPlayerCharacterAugmentSaveGameData.augment_asset_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OakPlayerCharacterAugmentSaveGameData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.OakPlayerCharacterAugmentSaveGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string slot_asset_path = 1;
  if (this->slot_asset_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_slot_asset_path().data(), static_cast<int>(this->_internal_slot_asset_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.OakPlayerCharacterAugmentSaveGameData.slot_asset_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_slot_asset_path(), target);
  }

  // string augment_asset_path = 2;
  if (this->augment_asset_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_augment_asset_path().data(), static_cast<int>(this->_internal_augment_asset_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.OakPlayerCharacterAugmentSaveGameData.augment_asset_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_augment_asset_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.OakPlayerCharacterAugmentSaveGameData)
  return target;
}

size_t OakPlayerCharacterAugmentSaveGameData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.OakPlayerCharacterAugmentSaveGameData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string slot_asset_path = 1;
  if (this->slot_asset_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_slot_asset_path());
  }

  // string augment_asset_path = 2;
  if (this->augment_asset_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_augment_asset_path());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OakPlayerCharacterAugmentSaveGameData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.OakPlayerCharacterAugmentSaveGameData)
  GOOGLE_DCHECK_NE(&from, this);
  const OakPlayerCharacterAugmentSaveGameData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OakPlayerCharacterAugmentSaveGameData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.OakPlayerCharacterAugmentSaveGameData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.OakPlayerCharacterAugmentSaveGameData)
    MergeFrom(*source);
  }
}

void OakPlayerCharacterAugmentSaveGameData::MergeFrom(const OakPlayerCharacterAugmentSaveGameData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.OakPlayerCharacterAugmentSaveGameData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.slot_asset_path().size() > 0) {
    _internal_set_slot_asset_path(from._internal_slot_asset_path());
  }
  if (from.augment_asset_path().size() > 0) {
    _internal_set_augment_asset_path(from._internal_augment_asset_path());
  }
}

void OakPlayerCharacterAugmentSaveGameData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.OakPlayerCharacterAugmentSaveGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OakPlayerCharacterAugmentSaveGameData::CopyFrom(const OakPlayerCharacterAugmentSaveGameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.OakPlayerCharacterAugmentSaveGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OakPlayerCharacterAugmentSaveGameData::IsInitialized() const {
  return true;
}

void OakPlayerCharacterAugmentSaveGameData::InternalSwap(OakPlayerCharacterAugmentSaveGameData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  slot_asset_path_.Swap(&other->slot_asset_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  augment_asset_path_.Swap(&other->augment_asset_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata OakPlayerCharacterAugmentSaveGameData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OakPlayerCharacterSlotSaveGameData::InitAsDefaultInstance() {
}
class OakPlayerCharacterSlotSaveGameData::_Internal {
 public:
};

OakPlayerCharacterSlotSaveGameData::OakPlayerCharacterSlotSaveGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  augment_slot_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.OakPlayerCharacterSlotSaveGameData)
}
OakPlayerCharacterSlotSaveGameData::OakPlayerCharacterSlotSaveGameData(const OakPlayerCharacterSlotSaveGameData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      augment_slot_list_(from.augment_slot_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:OakSave.OakPlayerCharacterSlotSaveGameData)
}

void OakPlayerCharacterSlotSaveGameData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OakPlayerCharacterSlotSaveGameData_OakSave_2eproto.base);
}

OakPlayerCharacterSlotSaveGameData::~OakPlayerCharacterSlotSaveGameData() {
  // @@protoc_insertion_point(destructor:OakSave.OakPlayerCharacterSlotSaveGameData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OakPlayerCharacterSlotSaveGameData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OakPlayerCharacterSlotSaveGameData::ArenaDtor(void* object) {
  OakPlayerCharacterSlotSaveGameData* _this = reinterpret_cast< OakPlayerCharacterSlotSaveGameData* >(object);
  (void)_this;
}
void OakPlayerCharacterSlotSaveGameData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OakPlayerCharacterSlotSaveGameData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OakPlayerCharacterSlotSaveGameData& OakPlayerCharacterSlotSaveGameData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OakPlayerCharacterSlotSaveGameData_OakSave_2eproto.base);
  return *internal_default_instance();
}


void OakPlayerCharacterSlotSaveGameData::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.OakPlayerCharacterSlotSaveGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  augment_slot_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OakPlayerCharacterSlotSaveGameData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .OakSave.OakPlayerCharacterAugmentSaveGameData augment_slot_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_augment_slot_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OakPlayerCharacterSlotSaveGameData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.OakPlayerCharacterSlotSaveGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .OakSave.OakPlayerCharacterAugmentSaveGameData augment_slot_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_augment_slot_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_augment_slot_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.OakPlayerCharacterSlotSaveGameData)
  return target;
}

size_t OakPlayerCharacterSlotSaveGameData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.OakPlayerCharacterSlotSaveGameData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .OakSave.OakPlayerCharacterAugmentSaveGameData augment_slot_list = 1;
  total_size += 1UL * this->_internal_augment_slot_list_size();
  for (const auto& msg : this->augment_slot_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OakPlayerCharacterSlotSaveGameData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.OakPlayerCharacterSlotSaveGameData)
  GOOGLE_DCHECK_NE(&from, this);
  const OakPlayerCharacterSlotSaveGameData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OakPlayerCharacterSlotSaveGameData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.OakPlayerCharacterSlotSaveGameData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.OakPlayerCharacterSlotSaveGameData)
    MergeFrom(*source);
  }
}

void OakPlayerCharacterSlotSaveGameData::MergeFrom(const OakPlayerCharacterSlotSaveGameData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.OakPlayerCharacterSlotSaveGameData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  augment_slot_list_.MergeFrom(from.augment_slot_list_);
}

void OakPlayerCharacterSlotSaveGameData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.OakPlayerCharacterSlotSaveGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OakPlayerCharacterSlotSaveGameData::CopyFrom(const OakPlayerCharacterSlotSaveGameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.OakPlayerCharacterSlotSaveGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OakPlayerCharacterSlotSaveGameData::IsInitialized() const {
  return true;
}

void OakPlayerCharacterSlotSaveGameData::InternalSwap(OakPlayerCharacterSlotSaveGameData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  augment_slot_list_.InternalSwap(&other->augment_slot_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OakPlayerCharacterSlotSaveGameData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UITrackingSaveGameData::InitAsDefaultInstance() {
}
class UITrackingSaveGameData::_Internal {
 public:
};

UITrackingSaveGameData::UITrackingSaveGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  inventory_slot_unlocks_seen_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.UITrackingSaveGameData)
}
UITrackingSaveGameData::UITrackingSaveGameData(const UITrackingSaveGameData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      inventory_slot_unlocks_seen_(from.inventory_slot_unlocks_seen_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&has_seen_skill_menu_unlock_, &from.has_seen_skill_menu_unlock_,
    static_cast<size_t>(reinterpret_cast<char*>(&saved_spin_offset_) -
    reinterpret_cast<char*>(&has_seen_skill_menu_unlock_)) + sizeof(saved_spin_offset_));
  // @@protoc_insertion_point(copy_constructor:OakSave.UITrackingSaveGameData)
}

void UITrackingSaveGameData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UITrackingSaveGameData_OakSave_2eproto.base);
  ::memset(&has_seen_skill_menu_unlock_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&saved_spin_offset_) -
      reinterpret_cast<char*>(&has_seen_skill_menu_unlock_)) + sizeof(saved_spin_offset_));
}

UITrackingSaveGameData::~UITrackingSaveGameData() {
  // @@protoc_insertion_point(destructor:OakSave.UITrackingSaveGameData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UITrackingSaveGameData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UITrackingSaveGameData::ArenaDtor(void* object) {
  UITrackingSaveGameData* _this = reinterpret_cast< UITrackingSaveGameData* >(object);
  (void)_this;
}
void UITrackingSaveGameData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UITrackingSaveGameData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UITrackingSaveGameData& UITrackingSaveGameData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UITrackingSaveGameData_OakSave_2eproto.base);
  return *internal_default_instance();
}


void UITrackingSaveGameData::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.UITrackingSaveGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inventory_slot_unlocks_seen_.Clear();
  ::memset(&has_seen_skill_menu_unlock_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&saved_spin_offset_) -
      reinterpret_cast<char*>(&has_seen_skill_menu_unlock_)) + sizeof(saved_spin_offset_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UITrackingSaveGameData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool has_seen_skill_menu_unlock = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          has_seen_skill_menu_unlock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool has_seen_guardian_rank_menu_unlock = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          has_seen_guardian_rank_menu_unlock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool has_seen_echo_boot_ammo_bar = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          has_seen_echo_boot_ammo_bar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool has_seen_echo_boot_shield_bar = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          has_seen_echo_boot_shield_bar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool has_seen_echo_boot_grenades = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          has_seen_echo_boot_grenades_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 highest_thvm_breadcrumb_seen = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          highest_thvm_breadcrumb_seen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string inventory_slot_unlocks_seen = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_inventory_slot_unlocks_seen();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.UITrackingSaveGameData.inventory_slot_unlocks_seen"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 saved_spin_offset = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          saved_spin_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UITrackingSaveGameData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.UITrackingSaveGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool has_seen_skill_menu_unlock = 1;
  if (this->has_seen_skill_menu_unlock() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_has_seen_skill_menu_unlock(), target);
  }

  // bool has_seen_guardian_rank_menu_unlock = 2;
  if (this->has_seen_guardian_rank_menu_unlock() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_has_seen_guardian_rank_menu_unlock(), target);
  }

  // bool has_seen_echo_boot_ammo_bar = 3;
  if (this->has_seen_echo_boot_ammo_bar() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_has_seen_echo_boot_ammo_bar(), target);
  }

  // bool has_seen_echo_boot_shield_bar = 4;
  if (this->has_seen_echo_boot_shield_bar() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_has_seen_echo_boot_shield_bar(), target);
  }

  // bool has_seen_echo_boot_grenades = 5;
  if (this->has_seen_echo_boot_grenades() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_has_seen_echo_boot_grenades(), target);
  }

  // int32 highest_thvm_breadcrumb_seen = 6;
  if (this->highest_thvm_breadcrumb_seen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_highest_thvm_breadcrumb_seen(), target);
  }

  // repeated string inventory_slot_unlocks_seen = 7;
  for (int i = 0, n = this->_internal_inventory_slot_unlocks_seen_size(); i < n; i++) {
    const auto& s = this->_internal_inventory_slot_unlocks_seen(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.UITrackingSaveGameData.inventory_slot_unlocks_seen");
    target = stream->WriteString(7, s, target);
  }

  // int32 saved_spin_offset = 8;
  if (this->saved_spin_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_saved_spin_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.UITrackingSaveGameData)
  return target;
}

size_t UITrackingSaveGameData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.UITrackingSaveGameData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string inventory_slot_unlocks_seen = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(inventory_slot_unlocks_seen_.size());
  for (int i = 0, n = inventory_slot_unlocks_seen_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      inventory_slot_unlocks_seen_.Get(i));
  }

  // bool has_seen_skill_menu_unlock = 1;
  if (this->has_seen_skill_menu_unlock() != 0) {
    total_size += 1 + 1;
  }

  // bool has_seen_guardian_rank_menu_unlock = 2;
  if (this->has_seen_guardian_rank_menu_unlock() != 0) {
    total_size += 1 + 1;
  }

  // bool has_seen_echo_boot_ammo_bar = 3;
  if (this->has_seen_echo_boot_ammo_bar() != 0) {
    total_size += 1 + 1;
  }

  // bool has_seen_echo_boot_shield_bar = 4;
  if (this->has_seen_echo_boot_shield_bar() != 0) {
    total_size += 1 + 1;
  }

  // bool has_seen_echo_boot_grenades = 5;
  if (this->has_seen_echo_boot_grenades() != 0) {
    total_size += 1 + 1;
  }

  // int32 highest_thvm_breadcrumb_seen = 6;
  if (this->highest_thvm_breadcrumb_seen() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_highest_thvm_breadcrumb_seen());
  }

  // int32 saved_spin_offset = 8;
  if (this->saved_spin_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_saved_spin_offset());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UITrackingSaveGameData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.UITrackingSaveGameData)
  GOOGLE_DCHECK_NE(&from, this);
  const UITrackingSaveGameData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UITrackingSaveGameData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.UITrackingSaveGameData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.UITrackingSaveGameData)
    MergeFrom(*source);
  }
}

void UITrackingSaveGameData::MergeFrom(const UITrackingSaveGameData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.UITrackingSaveGameData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inventory_slot_unlocks_seen_.MergeFrom(from.inventory_slot_unlocks_seen_);
  if (from.has_seen_skill_menu_unlock() != 0) {
    _internal_set_has_seen_skill_menu_unlock(from._internal_has_seen_skill_menu_unlock());
  }
  if (from.has_seen_guardian_rank_menu_unlock() != 0) {
    _internal_set_has_seen_guardian_rank_menu_unlock(from._internal_has_seen_guardian_rank_menu_unlock());
  }
  if (from.has_seen_echo_boot_ammo_bar() != 0) {
    _internal_set_has_seen_echo_boot_ammo_bar(from._internal_has_seen_echo_boot_ammo_bar());
  }
  if (from.has_seen_echo_boot_shield_bar() != 0) {
    _internal_set_has_seen_echo_boot_shield_bar(from._internal_has_seen_echo_boot_shield_bar());
  }
  if (from.has_seen_echo_boot_grenades() != 0) {
    _internal_set_has_seen_echo_boot_grenades(from._internal_has_seen_echo_boot_grenades());
  }
  if (from.highest_thvm_breadcrumb_seen() != 0) {
    _internal_set_highest_thvm_breadcrumb_seen(from._internal_highest_thvm_breadcrumb_seen());
  }
  if (from.saved_spin_offset() != 0) {
    _internal_set_saved_spin_offset(from._internal_saved_spin_offset());
  }
}

void UITrackingSaveGameData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.UITrackingSaveGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UITrackingSaveGameData::CopyFrom(const UITrackingSaveGameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.UITrackingSaveGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UITrackingSaveGameData::IsInitialized() const {
  return true;
}

void UITrackingSaveGameData::InternalSwap(UITrackingSaveGameData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  inventory_slot_unlocks_seen_.InternalSwap(&other->inventory_slot_unlocks_seen_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UITrackingSaveGameData, saved_spin_offset_)
      + sizeof(UITrackingSaveGameData::saved_spin_offset_)
      - PROTOBUF_FIELD_OFFSET(UITrackingSaveGameData, has_seen_skill_menu_unlock_)>(
          reinterpret_cast<char*>(&has_seen_skill_menu_unlock_),
          reinterpret_cast<char*>(&other->has_seen_skill_menu_unlock_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UITrackingSaveGameData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlanetCycleInfo::InitAsDefaultInstance() {
}
class PlanetCycleInfo::_Internal {
 public:
};

PlanetCycleInfo::PlanetCycleInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.PlanetCycleInfo)
}
PlanetCycleInfo::PlanetCycleInfo(const PlanetCycleInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  planet_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_planet_name().empty()) {
    planet_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_planet_name(),
      GetArena());
  }
  ::memcpy(&cycle_length_, &from.cycle_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_cached_time_) -
    reinterpret_cast<char*>(&cycle_length_)) + sizeof(last_cached_time_));
  // @@protoc_insertion_point(copy_constructor:OakSave.PlanetCycleInfo)
}

void PlanetCycleInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlanetCycleInfo_OakSave_2eproto.base);
  planet_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&cycle_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_cached_time_) -
      reinterpret_cast<char*>(&cycle_length_)) + sizeof(last_cached_time_));
}

PlanetCycleInfo::~PlanetCycleInfo() {
  // @@protoc_insertion_point(destructor:OakSave.PlanetCycleInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlanetCycleInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  planet_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PlanetCycleInfo::ArenaDtor(void* object) {
  PlanetCycleInfo* _this = reinterpret_cast< PlanetCycleInfo* >(object);
  (void)_this;
}
void PlanetCycleInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlanetCycleInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlanetCycleInfo& PlanetCycleInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlanetCycleInfo_OakSave_2eproto.base);
  return *internal_default_instance();
}


void PlanetCycleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.PlanetCycleInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  planet_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&cycle_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_cached_time_) -
      reinterpret_cast<char*>(&cycle_length_)) + sizeof(last_cached_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlanetCycleInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string planet_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_planet_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.PlanetCycleInfo.planet_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float cycle_length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          cycle_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float last_cached_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          last_cached_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlanetCycleInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.PlanetCycleInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string planet_name = 1;
  if (this->planet_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_planet_name().data(), static_cast<int>(this->_internal_planet_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.PlanetCycleInfo.planet_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_planet_name(), target);
  }

  // float cycle_length = 2;
  if (!(this->cycle_length() <= 0 && this->cycle_length() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_cycle_length(), target);
  }

  // float last_cached_time = 3;
  if (!(this->last_cached_time() <= 0 && this->last_cached_time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_last_cached_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.PlanetCycleInfo)
  return target;
}

size_t PlanetCycleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.PlanetCycleInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string planet_name = 1;
  if (this->planet_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_planet_name());
  }

  // float cycle_length = 2;
  if (!(this->cycle_length() <= 0 && this->cycle_length() >= 0)) {
    total_size += 1 + 4;
  }

  // float last_cached_time = 3;
  if (!(this->last_cached_time() <= 0 && this->last_cached_time() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlanetCycleInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.PlanetCycleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PlanetCycleInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlanetCycleInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.PlanetCycleInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.PlanetCycleInfo)
    MergeFrom(*source);
  }
}

void PlanetCycleInfo::MergeFrom(const PlanetCycleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.PlanetCycleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.planet_name().size() > 0) {
    _internal_set_planet_name(from._internal_planet_name());
  }
  if (!(from.cycle_length() <= 0 && from.cycle_length() >= 0)) {
    _internal_set_cycle_length(from._internal_cycle_length());
  }
  if (!(from.last_cached_time() <= 0 && from.last_cached_time() >= 0)) {
    _internal_set_last_cached_time(from._internal_last_cached_time());
  }
}

void PlanetCycleInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.PlanetCycleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanetCycleInfo::CopyFrom(const PlanetCycleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.PlanetCycleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetCycleInfo::IsInitialized() const {
  return true;
}

void PlanetCycleInfo::InternalSwap(PlanetCycleInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  planet_name_.Swap(&other->planet_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlanetCycleInfo, last_cached_time_)
      + sizeof(PlanetCycleInfo::last_cached_time_)
      - PROTOBUF_FIELD_OFFSET(PlanetCycleInfo, cycle_length_)>(
          reinterpret_cast<char*>(&cycle_length_),
          reinterpret_cast<char*>(&other->cycle_length_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlanetCycleInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TimeOfDaySaveGameData::InitAsDefaultInstance() {
}
class TimeOfDaySaveGameData::_Internal {
 public:
};

TimeOfDaySaveGameData::TimeOfDaySaveGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  planet_cycle_info_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.TimeOfDaySaveGameData)
}
TimeOfDaySaveGameData::TimeOfDaySaveGameData(const TimeOfDaySaveGameData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      planet_cycle_info_(from.planet_cycle_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  planet_cycle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_planet_cycle().empty()) {
    planet_cycle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_planet_cycle(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:OakSave.TimeOfDaySaveGameData)
}

void TimeOfDaySaveGameData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TimeOfDaySaveGameData_OakSave_2eproto.base);
  planet_cycle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TimeOfDaySaveGameData::~TimeOfDaySaveGameData() {
  // @@protoc_insertion_point(destructor:OakSave.TimeOfDaySaveGameData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TimeOfDaySaveGameData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  planet_cycle_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TimeOfDaySaveGameData::ArenaDtor(void* object) {
  TimeOfDaySaveGameData* _this = reinterpret_cast< TimeOfDaySaveGameData* >(object);
  (void)_this;
}
void TimeOfDaySaveGameData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TimeOfDaySaveGameData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimeOfDaySaveGameData& TimeOfDaySaveGameData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TimeOfDaySaveGameData_OakSave_2eproto.base);
  return *internal_default_instance();
}


void TimeOfDaySaveGameData::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.TimeOfDaySaveGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  planet_cycle_info_.Clear();
  planet_cycle_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimeOfDaySaveGameData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .OakSave.PlanetCycleInfo planet_cycle_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_planet_cycle_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string planet_cycle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_planet_cycle();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.TimeOfDaySaveGameData.planet_cycle"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimeOfDaySaveGameData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.TimeOfDaySaveGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .OakSave.PlanetCycleInfo planet_cycle_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_planet_cycle_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_planet_cycle_info(i), target, stream);
  }

  // string planet_cycle = 2;
  if (this->planet_cycle().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_planet_cycle().data(), static_cast<int>(this->_internal_planet_cycle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.TimeOfDaySaveGameData.planet_cycle");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_planet_cycle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.TimeOfDaySaveGameData)
  return target;
}

size_t TimeOfDaySaveGameData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.TimeOfDaySaveGameData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .OakSave.PlanetCycleInfo planet_cycle_info = 1;
  total_size += 1UL * this->_internal_planet_cycle_info_size();
  for (const auto& msg : this->planet_cycle_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string planet_cycle = 2;
  if (this->planet_cycle().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_planet_cycle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimeOfDaySaveGameData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.TimeOfDaySaveGameData)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeOfDaySaveGameData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimeOfDaySaveGameData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.TimeOfDaySaveGameData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.TimeOfDaySaveGameData)
    MergeFrom(*source);
  }
}

void TimeOfDaySaveGameData::MergeFrom(const TimeOfDaySaveGameData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.TimeOfDaySaveGameData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  planet_cycle_info_.MergeFrom(from.planet_cycle_info_);
  if (from.planet_cycle().size() > 0) {
    _internal_set_planet_cycle(from._internal_planet_cycle());
  }
}

void TimeOfDaySaveGameData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.TimeOfDaySaveGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeOfDaySaveGameData::CopyFrom(const TimeOfDaySaveGameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.TimeOfDaySaveGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeOfDaySaveGameData::IsInitialized() const {
  return true;
}

void TimeOfDaySaveGameData::InternalSwap(TimeOfDaySaveGameData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  planet_cycle_info_.InternalSwap(&other->planet_cycle_info_);
  planet_cycle_.Swap(&other->planet_cycle_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeOfDaySaveGameData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LevelPersistence_Actor_SaveGameData::InitAsDefaultInstance() {
}
class LevelPersistence_Actor_SaveGameData::_Internal {
 public:
};

LevelPersistence_Actor_SaveGameData::LevelPersistence_Actor_SaveGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.LevelPersistence_Actor_SaveGameData)
}
LevelPersistence_Actor_SaveGameData::LevelPersistence_Actor_SaveGameData(const LevelPersistence_Actor_SaveGameData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  actor_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_actor_name().empty()) {
    actor_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_actor_name(),
      GetArena());
  }
  timer_remaining_ = from.timer_remaining_;
  // @@protoc_insertion_point(copy_constructor:OakSave.LevelPersistence_Actor_SaveGameData)
}

void LevelPersistence_Actor_SaveGameData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LevelPersistence_Actor_SaveGameData_OakSave_2eproto.base);
  actor_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timer_remaining_ = 0;
}

LevelPersistence_Actor_SaveGameData::~LevelPersistence_Actor_SaveGameData() {
  // @@protoc_insertion_point(destructor:OakSave.LevelPersistence_Actor_SaveGameData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LevelPersistence_Actor_SaveGameData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  actor_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LevelPersistence_Actor_SaveGameData::ArenaDtor(void* object) {
  LevelPersistence_Actor_SaveGameData* _this = reinterpret_cast< LevelPersistence_Actor_SaveGameData* >(object);
  (void)_this;
}
void LevelPersistence_Actor_SaveGameData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LevelPersistence_Actor_SaveGameData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LevelPersistence_Actor_SaveGameData& LevelPersistence_Actor_SaveGameData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LevelPersistence_Actor_SaveGameData_OakSave_2eproto.base);
  return *internal_default_instance();
}


void LevelPersistence_Actor_SaveGameData::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.LevelPersistence_Actor_SaveGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actor_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  timer_remaining_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LevelPersistence_Actor_SaveGameData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string actor_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_actor_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.LevelPersistence_Actor_SaveGameData.actor_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 timer_remaining = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timer_remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LevelPersistence_Actor_SaveGameData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.LevelPersistence_Actor_SaveGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string actor_name = 1;
  if (this->actor_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_actor_name().data(), static_cast<int>(this->_internal_actor_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.LevelPersistence_Actor_SaveGameData.actor_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_actor_name(), target);
  }

  // int32 timer_remaining = 2;
  if (this->timer_remaining() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_timer_remaining(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.LevelPersistence_Actor_SaveGameData)
  return target;
}

size_t LevelPersistence_Actor_SaveGameData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.LevelPersistence_Actor_SaveGameData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string actor_name = 1;
  if (this->actor_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_actor_name());
  }

  // int32 timer_remaining = 2;
  if (this->timer_remaining() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_timer_remaining());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LevelPersistence_Actor_SaveGameData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.LevelPersistence_Actor_SaveGameData)
  GOOGLE_DCHECK_NE(&from, this);
  const LevelPersistence_Actor_SaveGameData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LevelPersistence_Actor_SaveGameData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.LevelPersistence_Actor_SaveGameData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.LevelPersistence_Actor_SaveGameData)
    MergeFrom(*source);
  }
}

void LevelPersistence_Actor_SaveGameData::MergeFrom(const LevelPersistence_Actor_SaveGameData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.LevelPersistence_Actor_SaveGameData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.actor_name().size() > 0) {
    _internal_set_actor_name(from._internal_actor_name());
  }
  if (from.timer_remaining() != 0) {
    _internal_set_timer_remaining(from._internal_timer_remaining());
  }
}

void LevelPersistence_Actor_SaveGameData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.LevelPersistence_Actor_SaveGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LevelPersistence_Actor_SaveGameData::CopyFrom(const LevelPersistence_Actor_SaveGameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.LevelPersistence_Actor_SaveGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LevelPersistence_Actor_SaveGameData::IsInitialized() const {
  return true;
}

void LevelPersistence_Actor_SaveGameData::InternalSwap(LevelPersistence_Actor_SaveGameData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  actor_name_.Swap(&other->actor_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(timer_remaining_, other->timer_remaining_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LevelPersistence_Actor_SaveGameData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LevelPersistence_Level_SaveGameData::InitAsDefaultInstance() {
}
class LevelPersistence_Level_SaveGameData::_Internal {
 public:
};

LevelPersistence_Level_SaveGameData::LevelPersistence_Level_SaveGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  saved_actors_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.LevelPersistence_Level_SaveGameData)
}
LevelPersistence_Level_SaveGameData::LevelPersistence_Level_SaveGameData(const LevelPersistence_Level_SaveGameData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      saved_actors_(from.saved_actors_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  level_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_level_name().empty()) {
    level_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_level_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:OakSave.LevelPersistence_Level_SaveGameData)
}

void LevelPersistence_Level_SaveGameData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LevelPersistence_Level_SaveGameData_OakSave_2eproto.base);
  level_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LevelPersistence_Level_SaveGameData::~LevelPersistence_Level_SaveGameData() {
  // @@protoc_insertion_point(destructor:OakSave.LevelPersistence_Level_SaveGameData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LevelPersistence_Level_SaveGameData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  level_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LevelPersistence_Level_SaveGameData::ArenaDtor(void* object) {
  LevelPersistence_Level_SaveGameData* _this = reinterpret_cast< LevelPersistence_Level_SaveGameData* >(object);
  (void)_this;
}
void LevelPersistence_Level_SaveGameData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LevelPersistence_Level_SaveGameData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LevelPersistence_Level_SaveGameData& LevelPersistence_Level_SaveGameData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LevelPersistence_Level_SaveGameData_OakSave_2eproto.base);
  return *internal_default_instance();
}


void LevelPersistence_Level_SaveGameData::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.LevelPersistence_Level_SaveGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  saved_actors_.Clear();
  level_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LevelPersistence_Level_SaveGameData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string level_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_level_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.LevelPersistence_Level_SaveGameData.level_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .OakSave.LevelPersistence_Actor_SaveGameData saved_actors = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_saved_actors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LevelPersistence_Level_SaveGameData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.LevelPersistence_Level_SaveGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string level_name = 1;
  if (this->level_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_level_name().data(), static_cast<int>(this->_internal_level_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.LevelPersistence_Level_SaveGameData.level_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_level_name(), target);
  }

  // repeated .OakSave.LevelPersistence_Actor_SaveGameData saved_actors = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_saved_actors_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_saved_actors(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.LevelPersistence_Level_SaveGameData)
  return target;
}

size_t LevelPersistence_Level_SaveGameData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.LevelPersistence_Level_SaveGameData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .OakSave.LevelPersistence_Actor_SaveGameData saved_actors = 2;
  total_size += 1UL * this->_internal_saved_actors_size();
  for (const auto& msg : this->saved_actors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string level_name = 1;
  if (this->level_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_level_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LevelPersistence_Level_SaveGameData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.LevelPersistence_Level_SaveGameData)
  GOOGLE_DCHECK_NE(&from, this);
  const LevelPersistence_Level_SaveGameData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LevelPersistence_Level_SaveGameData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.LevelPersistence_Level_SaveGameData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.LevelPersistence_Level_SaveGameData)
    MergeFrom(*source);
  }
}

void LevelPersistence_Level_SaveGameData::MergeFrom(const LevelPersistence_Level_SaveGameData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.LevelPersistence_Level_SaveGameData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  saved_actors_.MergeFrom(from.saved_actors_);
  if (from.level_name().size() > 0) {
    _internal_set_level_name(from._internal_level_name());
  }
}

void LevelPersistence_Level_SaveGameData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.LevelPersistence_Level_SaveGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LevelPersistence_Level_SaveGameData::CopyFrom(const LevelPersistence_Level_SaveGameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.LevelPersistence_Level_SaveGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LevelPersistence_Level_SaveGameData::IsInitialized() const {
  return true;
}

void LevelPersistence_Level_SaveGameData::InternalSwap(LevelPersistence_Level_SaveGameData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  saved_actors_.InternalSwap(&other->saved_actors_);
  level_name_.Swap(&other->level_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata LevelPersistence_Level_SaveGameData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GbxZoneMapFODSavedLevelData::InitAsDefaultInstance() {
}
class GbxZoneMapFODSavedLevelData::_Internal {
 public:
};

GbxZoneMapFODSavedLevelData::GbxZoneMapFODSavedLevelData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.GbxZoneMapFODSavedLevelData)
}
GbxZoneMapFODSavedLevelData::GbxZoneMapFODSavedLevelData(const GbxZoneMapFODSavedLevelData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  level_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_level_name().empty()) {
    level_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_level_name(),
      GetArena());
  }
  fod_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fod_data().empty()) {
    fod_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_fod_data(),
      GetArena());
  }
  ::memcpy(&fod_texture_size_, &from.fod_texture_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&data_revision_) -
    reinterpret_cast<char*>(&fod_texture_size_)) + sizeof(data_revision_));
  // @@protoc_insertion_point(copy_constructor:OakSave.GbxZoneMapFODSavedLevelData)
}

void GbxZoneMapFODSavedLevelData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GbxZoneMapFODSavedLevelData_OakSave_2eproto.base);
  level_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fod_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&fod_texture_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_revision_) -
      reinterpret_cast<char*>(&fod_texture_size_)) + sizeof(data_revision_));
}

GbxZoneMapFODSavedLevelData::~GbxZoneMapFODSavedLevelData() {
  // @@protoc_insertion_point(destructor:OakSave.GbxZoneMapFODSavedLevelData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GbxZoneMapFODSavedLevelData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  level_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fod_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GbxZoneMapFODSavedLevelData::ArenaDtor(void* object) {
  GbxZoneMapFODSavedLevelData* _this = reinterpret_cast< GbxZoneMapFODSavedLevelData* >(object);
  (void)_this;
}
void GbxZoneMapFODSavedLevelData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GbxZoneMapFODSavedLevelData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GbxZoneMapFODSavedLevelData& GbxZoneMapFODSavedLevelData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GbxZoneMapFODSavedLevelData_OakSave_2eproto.base);
  return *internal_default_instance();
}


void GbxZoneMapFODSavedLevelData::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.GbxZoneMapFODSavedLevelData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  level_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fod_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&fod_texture_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_revision_) -
      reinterpret_cast<char*>(&fod_texture_size_)) + sizeof(data_revision_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GbxZoneMapFODSavedLevelData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string level_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_level_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.GbxZoneMapFODSavedLevelData.level_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 fod_texture_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          fod_texture_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num_chunks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          num_chunks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float discovery_percentage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          discovery_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 data_state = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          data_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 data_revision = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          data_revision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes fod_data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_fod_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GbxZoneMapFODSavedLevelData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.GbxZoneMapFODSavedLevelData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string level_name = 1;
  if (this->level_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_level_name().data(), static_cast<int>(this->_internal_level_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.GbxZoneMapFODSavedLevelData.level_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_level_name(), target);
  }

  // uint32 fod_texture_size = 2;
  if (this->fod_texture_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_fod_texture_size(), target);
  }

  // uint32 num_chunks = 3;
  if (this->num_chunks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_num_chunks(), target);
  }

  // float discovery_percentage = 4;
  if (!(this->discovery_percentage() <= 0 && this->discovery_percentage() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_discovery_percentage(), target);
  }

  // uint32 data_state = 5;
  if (this->data_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_data_state(), target);
  }

  // uint32 data_revision = 6;
  if (this->data_revision() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_data_revision(), target);
  }

  // bytes fod_data = 7;
  if (this->fod_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_fod_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.GbxZoneMapFODSavedLevelData)
  return target;
}

size_t GbxZoneMapFODSavedLevelData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.GbxZoneMapFODSavedLevelData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string level_name = 1;
  if (this->level_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_level_name());
  }

  // bytes fod_data = 7;
  if (this->fod_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_fod_data());
  }

  // uint32 fod_texture_size = 2;
  if (this->fod_texture_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_fod_texture_size());
  }

  // uint32 num_chunks = 3;
  if (this->num_chunks() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_chunks());
  }

  // float discovery_percentage = 4;
  if (!(this->discovery_percentage() <= 0 && this->discovery_percentage() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 data_state = 5;
  if (this->data_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data_state());
  }

  // uint32 data_revision = 6;
  if (this->data_revision() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data_revision());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GbxZoneMapFODSavedLevelData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.GbxZoneMapFODSavedLevelData)
  GOOGLE_DCHECK_NE(&from, this);
  const GbxZoneMapFODSavedLevelData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GbxZoneMapFODSavedLevelData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.GbxZoneMapFODSavedLevelData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.GbxZoneMapFODSavedLevelData)
    MergeFrom(*source);
  }
}

void GbxZoneMapFODSavedLevelData::MergeFrom(const GbxZoneMapFODSavedLevelData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.GbxZoneMapFODSavedLevelData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.level_name().size() > 0) {
    _internal_set_level_name(from._internal_level_name());
  }
  if (from.fod_data().size() > 0) {
    _internal_set_fod_data(from._internal_fod_data());
  }
  if (from.fod_texture_size() != 0) {
    _internal_set_fod_texture_size(from._internal_fod_texture_size());
  }
  if (from.num_chunks() != 0) {
    _internal_set_num_chunks(from._internal_num_chunks());
  }
  if (!(from.discovery_percentage() <= 0 && from.discovery_percentage() >= 0)) {
    _internal_set_discovery_percentage(from._internal_discovery_percentage());
  }
  if (from.data_state() != 0) {
    _internal_set_data_state(from._internal_data_state());
  }
  if (from.data_revision() != 0) {
    _internal_set_data_revision(from._internal_data_revision());
  }
}

void GbxZoneMapFODSavedLevelData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.GbxZoneMapFODSavedLevelData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GbxZoneMapFODSavedLevelData::CopyFrom(const GbxZoneMapFODSavedLevelData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.GbxZoneMapFODSavedLevelData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GbxZoneMapFODSavedLevelData::IsInitialized() const {
  return true;
}

void GbxZoneMapFODSavedLevelData::InternalSwap(GbxZoneMapFODSavedLevelData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  level_name_.Swap(&other->level_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fod_data_.Swap(&other->fod_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GbxZoneMapFODSavedLevelData, data_revision_)
      + sizeof(GbxZoneMapFODSavedLevelData::data_revision_)
      - PROTOBUF_FIELD_OFFSET(GbxZoneMapFODSavedLevelData, fod_texture_size_)>(
          reinterpret_cast<char*>(&fod_texture_size_),
          reinterpret_cast<char*>(&other->fod_texture_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GbxZoneMapFODSavedLevelData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GbxZoneMapFODSaveGameData::InitAsDefaultInstance() {
}
class GbxZoneMapFODSaveGameData::_Internal {
 public:
};

GbxZoneMapFODSaveGameData::GbxZoneMapFODSaveGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  level_data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.GbxZoneMapFODSaveGameData)
}
GbxZoneMapFODSaveGameData::GbxZoneMapFODSaveGameData(const GbxZoneMapFODSaveGameData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      level_data_(from.level_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:OakSave.GbxZoneMapFODSaveGameData)
}

void GbxZoneMapFODSaveGameData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GbxZoneMapFODSaveGameData_OakSave_2eproto.base);
}

GbxZoneMapFODSaveGameData::~GbxZoneMapFODSaveGameData() {
  // @@protoc_insertion_point(destructor:OakSave.GbxZoneMapFODSaveGameData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GbxZoneMapFODSaveGameData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GbxZoneMapFODSaveGameData::ArenaDtor(void* object) {
  GbxZoneMapFODSaveGameData* _this = reinterpret_cast< GbxZoneMapFODSaveGameData* >(object);
  (void)_this;
}
void GbxZoneMapFODSaveGameData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GbxZoneMapFODSaveGameData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GbxZoneMapFODSaveGameData& GbxZoneMapFODSaveGameData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GbxZoneMapFODSaveGameData_OakSave_2eproto.base);
  return *internal_default_instance();
}


void GbxZoneMapFODSaveGameData::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.GbxZoneMapFODSaveGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  level_data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GbxZoneMapFODSaveGameData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .OakSave.GbxZoneMapFODSavedLevelData level_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_level_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GbxZoneMapFODSaveGameData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.GbxZoneMapFODSaveGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .OakSave.GbxZoneMapFODSavedLevelData level_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_level_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_level_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.GbxZoneMapFODSaveGameData)
  return target;
}

size_t GbxZoneMapFODSaveGameData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.GbxZoneMapFODSaveGameData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .OakSave.GbxZoneMapFODSavedLevelData level_data = 1;
  total_size += 1UL * this->_internal_level_data_size();
  for (const auto& msg : this->level_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GbxZoneMapFODSaveGameData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.GbxZoneMapFODSaveGameData)
  GOOGLE_DCHECK_NE(&from, this);
  const GbxZoneMapFODSaveGameData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GbxZoneMapFODSaveGameData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.GbxZoneMapFODSaveGameData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.GbxZoneMapFODSaveGameData)
    MergeFrom(*source);
  }
}

void GbxZoneMapFODSaveGameData::MergeFrom(const GbxZoneMapFODSaveGameData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.GbxZoneMapFODSaveGameData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  level_data_.MergeFrom(from.level_data_);
}

void GbxZoneMapFODSaveGameData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.GbxZoneMapFODSaveGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GbxZoneMapFODSaveGameData::CopyFrom(const GbxZoneMapFODSaveGameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.GbxZoneMapFODSaveGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GbxZoneMapFODSaveGameData::IsInitialized() const {
  return true;
}

void GbxZoneMapFODSaveGameData::InternalSwap(GbxZoneMapFODSaveGameData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  level_data_.InternalSwap(&other->level_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GbxZoneMapFODSaveGameData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Character_NicknameMappingsEntry::InitAsDefaultInstance() {
}
class Character_NicknameMappingsEntry::_Internal {
 public:
};

Character_NicknameMappingsEntry::Character_NicknameMappingsEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.Character.NicknameMappingsEntry)
}
Character_NicknameMappingsEntry::Character_NicknameMappingsEntry(const Character_NicknameMappingsEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:OakSave.Character.NicknameMappingsEntry)
}

void Character_NicknameMappingsEntry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Character_NicknameMappingsEntry_OakSave_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Character_NicknameMappingsEntry::~Character_NicknameMappingsEntry() {
  // @@protoc_insertion_point(destructor:OakSave.Character.NicknameMappingsEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Character_NicknameMappingsEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Character_NicknameMappingsEntry::ArenaDtor(void* object) {
  Character_NicknameMappingsEntry* _this = reinterpret_cast< Character_NicknameMappingsEntry* >(object);
  (void)_this;
}
void Character_NicknameMappingsEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Character_NicknameMappingsEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Character_NicknameMappingsEntry& Character_NicknameMappingsEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Character_NicknameMappingsEntry_OakSave_2eproto.base);
  return *internal_default_instance();
}


void Character_NicknameMappingsEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.Character.NicknameMappingsEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Character_NicknameMappingsEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.Character.NicknameMappingsEntry.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.Character.NicknameMappingsEntry.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Character_NicknameMappingsEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.Character.NicknameMappingsEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.Character.NicknameMappingsEntry.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.Character.NicknameMappingsEntry.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.Character.NicknameMappingsEntry)
  return target;
}

size_t Character_NicknameMappingsEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.Character.NicknameMappingsEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Character_NicknameMappingsEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.Character.NicknameMappingsEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const Character_NicknameMappingsEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Character_NicknameMappingsEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.Character.NicknameMappingsEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.Character.NicknameMappingsEntry)
    MergeFrom(*source);
  }
}

void Character_NicknameMappingsEntry::MergeFrom(const Character_NicknameMappingsEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.Character.NicknameMappingsEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
}

void Character_NicknameMappingsEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.Character.NicknameMappingsEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Character_NicknameMappingsEntry::CopyFrom(const Character_NicknameMappingsEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.Character.NicknameMappingsEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Character_NicknameMappingsEntry::IsInitialized() const {
  return true;
}

void Character_NicknameMappingsEntry::InternalSwap(Character_NicknameMappingsEntry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Character_NicknameMappingsEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Character_ActiveLeagueInstanceForEventEntry::InitAsDefaultInstance() {
}
class Character_ActiveLeagueInstanceForEventEntry::_Internal {
 public:
};

Character_ActiveLeagueInstanceForEventEntry::Character_ActiveLeagueInstanceForEventEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.Character.ActiveLeagueInstanceForEventEntry)
}
Character_ActiveLeagueInstanceForEventEntry::Character_ActiveLeagueInstanceForEventEntry(const Character_ActiveLeagueInstanceForEventEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&key_, &from.key_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&key_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:OakSave.Character.ActiveLeagueInstanceForEventEntry)
}

void Character_ActiveLeagueInstanceForEventEntry::SharedCtor() {
  ::memset(&key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&key_)) + sizeof(value_));
}

Character_ActiveLeagueInstanceForEventEntry::~Character_ActiveLeagueInstanceForEventEntry() {
  // @@protoc_insertion_point(destructor:OakSave.Character.ActiveLeagueInstanceForEventEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Character_ActiveLeagueInstanceForEventEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Character_ActiveLeagueInstanceForEventEntry::ArenaDtor(void* object) {
  Character_ActiveLeagueInstanceForEventEntry* _this = reinterpret_cast< Character_ActiveLeagueInstanceForEventEntry* >(object);
  (void)_this;
}
void Character_ActiveLeagueInstanceForEventEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Character_ActiveLeagueInstanceForEventEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Character_ActiveLeagueInstanceForEventEntry& Character_ActiveLeagueInstanceForEventEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Character_ActiveLeagueInstanceForEventEntry_OakSave_2eproto.base);
  return *internal_default_instance();
}


void Character_ActiveLeagueInstanceForEventEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.Character.ActiveLeagueInstanceForEventEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&key_)) + sizeof(value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Character_ActiveLeagueInstanceForEventEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Character_ActiveLeagueInstanceForEventEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.Character.ActiveLeagueInstanceForEventEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 key = 1;
  if (this->key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_key(), target);
  }

  // uint32 value = 2;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.Character.ActiveLeagueInstanceForEventEntry)
  return target;
}

size_t Character_ActiveLeagueInstanceForEventEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.Character.ActiveLeagueInstanceForEventEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 key = 1;
  if (this->key() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_key());
  }

  // uint32 value = 2;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Character_ActiveLeagueInstanceForEventEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.Character.ActiveLeagueInstanceForEventEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const Character_ActiveLeagueInstanceForEventEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Character_ActiveLeagueInstanceForEventEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.Character.ActiveLeagueInstanceForEventEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.Character.ActiveLeagueInstanceForEventEntry)
    MergeFrom(*source);
  }
}

void Character_ActiveLeagueInstanceForEventEntry::MergeFrom(const Character_ActiveLeagueInstanceForEventEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.Character.ActiveLeagueInstanceForEventEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key() != 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void Character_ActiveLeagueInstanceForEventEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.Character.ActiveLeagueInstanceForEventEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Character_ActiveLeagueInstanceForEventEntry::CopyFrom(const Character_ActiveLeagueInstanceForEventEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.Character.ActiveLeagueInstanceForEventEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Character_ActiveLeagueInstanceForEventEntry::IsInitialized() const {
  return true;
}

void Character_ActiveLeagueInstanceForEventEntry::InternalSwap(Character_ActiveLeagueInstanceForEventEntry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Character_ActiveLeagueInstanceForEventEntry, value_)
      + sizeof(Character_ActiveLeagueInstanceForEventEntry::value_)
      - PROTOBUF_FIELD_OFFSET(Character_ActiveLeagueInstanceForEventEntry, key_)>(
          reinterpret_cast<char*>(&key_),
          reinterpret_cast<char*>(&other->key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Character_ActiveLeagueInstanceForEventEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Character::InitAsDefaultInstance() {
  ::OakSave::_Character_default_instance_._instance.get_mutable()->player_class_data_ = const_cast< ::OakSave::PlayerClassSaveGameData*>(
      ::OakSave::PlayerClassSaveGameData::internal_default_instance());
  ::OakSave::_Character_default_instance_._instance.get_mutable()->ability_data_ = const_cast< ::OakSave::OakPlayerAbilitySaveGameData*>(
      ::OakSave::OakPlayerAbilitySaveGameData::internal_default_instance());
  ::OakSave::_Character_default_instance_._instance.get_mutable()->discovery_data_ = const_cast< ::OakSave::DiscoverySaveData*>(
      ::OakSave::DiscoverySaveData::internal_default_instance());
  ::OakSave::_Character_default_instance_._instance.get_mutable()->guardian_rank_ = const_cast< ::OakSave::GuardianRankSaveGameData*>(
      ::OakSave::GuardianRankSaveGameData::internal_default_instance());
  ::OakSave::_Character_default_instance_._instance.get_mutable()->crew_quarters_room_ = const_cast< ::OakSave::CrewQuartersSaveData*>(
      ::OakSave::CrewQuartersSaveData::internal_default_instance());
  ::OakSave::_Character_default_instance_._instance.get_mutable()->crew_quarters_gun_rack_ = const_cast< ::OakSave::CrewQuartersGunRackSaveData*>(
      ::OakSave::CrewQuartersGunRackSaveData::internal_default_instance());
  ::OakSave::_Character_default_instance_._instance.get_mutable()->last_traveled_map_id_ = const_cast< ::OakSave::MapIDData*>(
      ::OakSave::MapIDData::internal_default_instance());
  ::OakSave::_Character_default_instance_._instance.get_mutable()->challenge_category_completion_pcts_ = const_cast< ::OakSave::ChallengeCategoryProgressSaveData*>(
      ::OakSave::ChallengeCategoryProgressSaveData::internal_default_instance());
  ::OakSave::_Character_default_instance_._instance.get_mutable()->character_slot_save_game_data_ = const_cast< ::OakSave::OakPlayerCharacterSlotSaveGameData*>(
      ::OakSave::OakPlayerCharacterSlotSaveGameData::internal_default_instance());
  ::OakSave::_Character_default_instance_._instance.get_mutable()->ui_tracking_save_game_data_ = const_cast< ::OakSave::UITrackingSaveGameData*>(
      ::OakSave::UITrackingSaveGameData::internal_default_instance());
  ::OakSave::_Character_default_instance_._instance.get_mutable()->time_of_day_save_game_data_ = const_cast< ::OakSave::TimeOfDaySaveGameData*>(
      ::OakSave::TimeOfDaySaveGameData::internal_default_instance());
  ::OakSave::_Character_default_instance_._instance.get_mutable()->gbx_zone_map_fod_save_game_data_ = const_cast< ::OakSave::GbxZoneMapFODSaveGameData*>(
      ::OakSave::GbxZoneMapFODSaveGameData::internal_default_instance());
  ::OakSave::_Character_default_instance_._instance.get_mutable()->guardian_rank_character_data_ = const_cast< ::OakSave::GuardianRankCharacterSaveGameData*>(
      ::OakSave::GuardianRankCharacterSaveGameData::internal_default_instance());
}
class Character::_Internal {
 public:
  static const ::OakSave::PlayerClassSaveGameData& player_class_data(const Character* msg);
  static const ::OakSave::OakPlayerAbilitySaveGameData& ability_data(const Character* msg);
  static const ::OakSave::DiscoverySaveData& discovery_data(const Character* msg);
  static const ::OakSave::GuardianRankSaveGameData& guardian_rank(const Character* msg);
  static const ::OakSave::CrewQuartersSaveData& crew_quarters_room(const Character* msg);
  static const ::OakSave::CrewQuartersGunRackSaveData& crew_quarters_gun_rack(const Character* msg);
  static const ::OakSave::MapIDData& last_traveled_map_id(const Character* msg);
  static const ::OakSave::ChallengeCategoryProgressSaveData& challenge_category_completion_pcts(const Character* msg);
  static const ::OakSave::OakPlayerCharacterSlotSaveGameData& character_slot_save_game_data(const Character* msg);
  static const ::OakSave::UITrackingSaveGameData& ui_tracking_save_game_data(const Character* msg);
  static const ::OakSave::TimeOfDaySaveGameData& time_of_day_save_game_data(const Character* msg);
  static const ::OakSave::GbxZoneMapFODSaveGameData& gbx_zone_map_fod_save_game_data(const Character* msg);
  static const ::OakSave::GuardianRankCharacterSaveGameData& guardian_rank_character_data(const Character* msg);
};

const ::OakSave::PlayerClassSaveGameData&
Character::_Internal::player_class_data(const Character* msg) {
  return *msg->player_class_data_;
}
const ::OakSave::OakPlayerAbilitySaveGameData&
Character::_Internal::ability_data(const Character* msg) {
  return *msg->ability_data_;
}
const ::OakSave::DiscoverySaveData&
Character::_Internal::discovery_data(const Character* msg) {
  return *msg->discovery_data_;
}
const ::OakSave::GuardianRankSaveGameData&
Character::_Internal::guardian_rank(const Character* msg) {
  return *msg->guardian_rank_;
}
const ::OakSave::CrewQuartersSaveData&
Character::_Internal::crew_quarters_room(const Character* msg) {
  return *msg->crew_quarters_room_;
}
const ::OakSave::CrewQuartersGunRackSaveData&
Character::_Internal::crew_quarters_gun_rack(const Character* msg) {
  return *msg->crew_quarters_gun_rack_;
}
const ::OakSave::MapIDData&
Character::_Internal::last_traveled_map_id(const Character* msg) {
  return *msg->last_traveled_map_id_;
}
const ::OakSave::ChallengeCategoryProgressSaveData&
Character::_Internal::challenge_category_completion_pcts(const Character* msg) {
  return *msg->challenge_category_completion_pcts_;
}
const ::OakSave::OakPlayerCharacterSlotSaveGameData&
Character::_Internal::character_slot_save_game_data(const Character* msg) {
  return *msg->character_slot_save_game_data_;
}
const ::OakSave::UITrackingSaveGameData&
Character::_Internal::ui_tracking_save_game_data(const Character* msg) {
  return *msg->ui_tracking_save_game_data_;
}
const ::OakSave::TimeOfDaySaveGameData&
Character::_Internal::time_of_day_save_game_data(const Character* msg) {
  return *msg->time_of_day_save_game_data_;
}
const ::OakSave::GbxZoneMapFODSaveGameData&
Character::_Internal::gbx_zone_map_fod_save_game_data(const Character* msg) {
  return *msg->gbx_zone_map_fod_save_game_data_;
}
const ::OakSave::GuardianRankCharacterSaveGameData&
Character::_Internal::guardian_rank_character_data(const Character* msg) {
  return *msg->guardian_rank_character_data_;
}
void Character::clear_game_stats_data() {
  game_stats_data_.Clear();
}
void Character::clear_inventory_category_list() {
  inventory_category_list_.Clear();
}
void Character::clear_challenge_data() {
  challenge_data_.Clear();
}
void Character::clear_sdu_list() {
  sdu_list_.Clear();
}
void Character::clear_registered_downloadable_entitlements() {
  registered_downloadable_entitlements_.Clear();
}
Character::Character(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  resource_pools_(arena),
  saved_regions_(arena),
  game_stats_data_(arena),
  inventory_category_list_(arena),
  inventory_items_(arena),
  equipped_inventory_list_(arena),
  active_weapon_list_(arena),
  mission_playthroughs_data_(arena),
  active_travel_stations_(arena),
  vehicles_unlocked_data_(arena),
  vehicle_parts_unlocked_(arena),
  vehicle_loadouts_(arena),
  challenge_data_(arena),
  sdu_list_(arena),
  selected_customizations_(arena),
  equipped_emote_customizations_(arena),
  selected_color_customizations_(arena),
  unlocked_echo_logs_(arena),
  nickname_mappings_(arena),
  level_persistence_data_(arena),
  active_or_blacklisted_travel_stations_(arena),
  last_active_travel_station_for_playthrough_(arena),
  game_state_save_data_for_playthrough_(arena),
  registered_downloadable_entitlements_(arena),
  active_travel_stations_for_playthrough_(arena),
  active_league_instance_for_event_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.Character)
}
Character::Character(const Character& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      resource_pools_(from.resource_pools_),
      saved_regions_(from.saved_regions_),
      game_stats_data_(from.game_stats_data_),
      inventory_category_list_(from.inventory_category_list_),
      inventory_items_(from.inventory_items_),
      equipped_inventory_list_(from.equipped_inventory_list_),
      active_weapon_list_(from.active_weapon_list_),
      mission_playthroughs_data_(from.mission_playthroughs_data_),
      active_travel_stations_(from.active_travel_stations_),
      vehicles_unlocked_data_(from.vehicles_unlocked_data_),
      vehicle_parts_unlocked_(from.vehicle_parts_unlocked_),
      vehicle_loadouts_(from.vehicle_loadouts_),
      challenge_data_(from.challenge_data_),
      sdu_list_(from.sdu_list_),
      selected_customizations_(from.selected_customizations_),
      equipped_emote_customizations_(from.equipped_emote_customizations_),
      selected_color_customizations_(from.selected_color_customizations_),
      unlocked_echo_logs_(from.unlocked_echo_logs_),
      nickname_mappings_(from.nickname_mappings_),
      level_persistence_data_(from.level_persistence_data_),
      active_or_blacklisted_travel_stations_(from.active_or_blacklisted_travel_stations_),
      last_active_travel_station_for_playthrough_(from.last_active_travel_station_for_playthrough_),
      game_state_save_data_for_playthrough_(from.game_state_save_data_for_playthrough_),
      registered_downloadable_entitlements_(from.registered_downloadable_entitlements_),
      active_travel_stations_for_playthrough_(from.active_travel_stations_for_playthrough_),
      active_league_instance_for_event_(from.active_league_instance_for_event_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  last_active_travel_station_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_last_active_travel_station().empty()) {
    last_active_travel_station_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_last_active_travel_station(),
      GetArena());
  }
  preferred_character_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_preferred_character_name().empty()) {
    preferred_character_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_preferred_character_name(),
      GetArena());
  }
  save_game_guid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_save_game_guid().empty()) {
    save_game_guid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_save_game_guid(),
      GetArena());
  }
  if (from._internal_has_player_class_data()) {
    player_class_data_ = new ::OakSave::PlayerClassSaveGameData(*from.player_class_data_);
  } else {
    player_class_data_ = nullptr;
  }
  if (from._internal_has_ability_data()) {
    ability_data_ = new ::OakSave::OakPlayerAbilitySaveGameData(*from.ability_data_);
  } else {
    ability_data_ = nullptr;
  }
  if (from._internal_has_discovery_data()) {
    discovery_data_ = new ::OakSave::DiscoverySaveData(*from.discovery_data_);
  } else {
    discovery_data_ = nullptr;
  }
  if (from._internal_has_guardian_rank()) {
    guardian_rank_ = new ::OakSave::GuardianRankSaveGameData(*from.guardian_rank_);
  } else {
    guardian_rank_ = nullptr;
  }
  if (from._internal_has_crew_quarters_room()) {
    crew_quarters_room_ = new ::OakSave::CrewQuartersSaveData(*from.crew_quarters_room_);
  } else {
    crew_quarters_room_ = nullptr;
  }
  if (from._internal_has_crew_quarters_gun_rack()) {
    crew_quarters_gun_rack_ = new ::OakSave::CrewQuartersGunRackSaveData(*from.crew_quarters_gun_rack_);
  } else {
    crew_quarters_gun_rack_ = nullptr;
  }
  if (from._internal_has_last_traveled_map_id()) {
    last_traveled_map_id_ = new ::OakSave::MapIDData(*from.last_traveled_map_id_);
  } else {
    last_traveled_map_id_ = nullptr;
  }
  if (from._internal_has_challenge_category_completion_pcts()) {
    challenge_category_completion_pcts_ = new ::OakSave::ChallengeCategoryProgressSaveData(*from.challenge_category_completion_pcts_);
  } else {
    challenge_category_completion_pcts_ = nullptr;
  }
  if (from._internal_has_character_slot_save_game_data()) {
    character_slot_save_game_data_ = new ::OakSave::OakPlayerCharacterSlotSaveGameData(*from.character_slot_save_game_data_);
  } else {
    character_slot_save_game_data_ = nullptr;
  }
  if (from._internal_has_ui_tracking_save_game_data()) {
    ui_tracking_save_game_data_ = new ::OakSave::UITrackingSaveGameData(*from.ui_tracking_save_game_data_);
  } else {
    ui_tracking_save_game_data_ = nullptr;
  }
  if (from._internal_has_time_of_day_save_game_data()) {
    time_of_day_save_game_data_ = new ::OakSave::TimeOfDaySaveGameData(*from.time_of_day_save_game_data_);
  } else {
    time_of_day_save_game_data_ = nullptr;
  }
  if (from._internal_has_gbx_zone_map_fod_save_game_data()) {
    gbx_zone_map_fod_save_game_data_ = new ::OakSave::GbxZoneMapFODSaveGameData(*from.gbx_zone_map_fod_save_game_data_);
  } else {
    gbx_zone_map_fod_save_game_data_ = nullptr;
  }
  if (from._internal_has_guardian_rank_character_data()) {
    guardian_rank_character_data_ = new ::OakSave::GuardianRankCharacterSaveGameData(*from.guardian_rank_character_data_);
  } else {
    guardian_rank_character_data_ = nullptr;
  }
  ::memcpy(&last_save_timestamp_, &from.last_save_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&levelled_save_vehicle_part_rewards_fixup_applied_) -
    reinterpret_cast<char*>(&last_save_timestamp_)) + sizeof(levelled_save_vehicle_part_rewards_fixup_applied_));
  // @@protoc_insertion_point(copy_constructor:OakSave.Character)
}

void Character::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Character_OakSave_2eproto.base);
  last_active_travel_station_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  preferred_character_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  save_game_guid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_class_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&levelled_save_vehicle_part_rewards_fixup_applied_) -
      reinterpret_cast<char*>(&player_class_data_)) + sizeof(levelled_save_vehicle_part_rewards_fixup_applied_));
}

Character::~Character() {
  // @@protoc_insertion_point(destructor:OakSave.Character)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Character::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  last_active_travel_station_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  preferred_character_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  save_game_guid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_class_data_;
  if (this != internal_default_instance()) delete ability_data_;
  if (this != internal_default_instance()) delete discovery_data_;
  if (this != internal_default_instance()) delete guardian_rank_;
  if (this != internal_default_instance()) delete crew_quarters_room_;
  if (this != internal_default_instance()) delete crew_quarters_gun_rack_;
  if (this != internal_default_instance()) delete last_traveled_map_id_;
  if (this != internal_default_instance()) delete challenge_category_completion_pcts_;
  if (this != internal_default_instance()) delete character_slot_save_game_data_;
  if (this != internal_default_instance()) delete ui_tracking_save_game_data_;
  if (this != internal_default_instance()) delete time_of_day_save_game_data_;
  if (this != internal_default_instance()) delete gbx_zone_map_fod_save_game_data_;
  if (this != internal_default_instance()) delete guardian_rank_character_data_;
}

void Character::ArenaDtor(void* object) {
  Character* _this = reinterpret_cast< Character* >(object);
  (void)_this;
}
void Character::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Character::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Character& Character::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Character_OakSave_2eproto.base);
  return *internal_default_instance();
}


void Character::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.Character)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resource_pools_.Clear();
  saved_regions_.Clear();
  game_stats_data_.Clear();
  inventory_category_list_.Clear();
  inventory_items_.Clear();
  equipped_inventory_list_.Clear();
  active_weapon_list_.Clear();
  mission_playthroughs_data_.Clear();
  active_travel_stations_.Clear();
  vehicles_unlocked_data_.Clear();
  vehicle_parts_unlocked_.Clear();
  vehicle_loadouts_.Clear();
  challenge_data_.Clear();
  sdu_list_.Clear();
  selected_customizations_.Clear();
  equipped_emote_customizations_.Clear();
  selected_color_customizations_.Clear();
  unlocked_echo_logs_.Clear();
  nickname_mappings_.Clear();
  level_persistence_data_.Clear();
  active_or_blacklisted_travel_stations_.Clear();
  last_active_travel_station_for_playthrough_.Clear();
  game_state_save_data_for_playthrough_.Clear();
  registered_downloadable_entitlements_.Clear();
  active_travel_stations_for_playthrough_.Clear();
  active_league_instance_for_event_.Clear();
  last_active_travel_station_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  preferred_character_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  save_game_guid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && player_class_data_ != nullptr) {
    delete player_class_data_;
  }
  player_class_data_ = nullptr;
  if (GetArena() == nullptr && ability_data_ != nullptr) {
    delete ability_data_;
  }
  ability_data_ = nullptr;
  if (GetArena() == nullptr && discovery_data_ != nullptr) {
    delete discovery_data_;
  }
  discovery_data_ = nullptr;
  if (GetArena() == nullptr && guardian_rank_ != nullptr) {
    delete guardian_rank_;
  }
  guardian_rank_ = nullptr;
  if (GetArena() == nullptr && crew_quarters_room_ != nullptr) {
    delete crew_quarters_room_;
  }
  crew_quarters_room_ = nullptr;
  if (GetArena() == nullptr && crew_quarters_gun_rack_ != nullptr) {
    delete crew_quarters_gun_rack_;
  }
  crew_quarters_gun_rack_ = nullptr;
  if (GetArena() == nullptr && last_traveled_map_id_ != nullptr) {
    delete last_traveled_map_id_;
  }
  last_traveled_map_id_ = nullptr;
  if (GetArena() == nullptr && challenge_category_completion_pcts_ != nullptr) {
    delete challenge_category_completion_pcts_;
  }
  challenge_category_completion_pcts_ = nullptr;
  if (GetArena() == nullptr && character_slot_save_game_data_ != nullptr) {
    delete character_slot_save_game_data_;
  }
  character_slot_save_game_data_ = nullptr;
  if (GetArena() == nullptr && ui_tracking_save_game_data_ != nullptr) {
    delete ui_tracking_save_game_data_;
  }
  ui_tracking_save_game_data_ = nullptr;
  if (GetArena() == nullptr && time_of_day_save_game_data_ != nullptr) {
    delete time_of_day_save_game_data_;
  }
  time_of_day_save_game_data_ = nullptr;
  if (GetArena() == nullptr && gbx_zone_map_fod_save_game_data_ != nullptr) {
    delete gbx_zone_map_fod_save_game_data_;
  }
  gbx_zone_map_fod_save_game_data_ = nullptr;
  if (GetArena() == nullptr && guardian_rank_character_data_ != nullptr) {
    delete guardian_rank_character_data_;
  }
  guardian_rank_character_data_ = nullptr;
  ::memset(&last_save_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&levelled_save_vehicle_part_rewards_fixup_applied_) -
      reinterpret_cast<char*>(&last_save_timestamp_)) + sizeof(levelled_save_vehicle_part_rewards_fixup_applied_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Character::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 save_game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          save_game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 last_save_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          last_save_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 time_played_seconds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          time_played_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OakSave.PlayerClassSaveGameData player_class_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_class_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .OakSave.ResourcePoolSavegameData resource_pools = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_resource_pools(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .OakSave.RegionSaveGameData saved_regions = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_saved_regions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 experience_points = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          experience_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .OakSave.GameStatSaveGameData game_stats_data = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_game_stats_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .OakSave.InventoryCategorySaveData inventory_category_list = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inventory_category_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .OakSave.OakInventoryItemSaveGameData inventory_items = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inventory_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .OakSave.EquippedInventorySaveGameData equipped_inventory_list = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_equipped_inventory_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 active_weapon_list = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_active_weapon_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96) {
          _internal_add_active_weapon_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OakSave.OakPlayerAbilitySaveGameData ability_data = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_ability_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 last_play_through_index = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          last_play_through_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 playthroughs_completed = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          playthroughs_completed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool show_new_playthrough_notification = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          show_new_playthrough_notification_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .OakSave.MissionPlaythroughSaveGameData mission_playthroughs_data = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_mission_playthroughs_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string active_travel_stations = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_active_travel_stations();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.Character.active_travel_stations"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else goto handle_unusual;
        continue;
      // .OakSave.DiscoverySaveData discovery_data = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_discovery_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string last_active_travel_station = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_last_active_travel_station();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.Character.last_active_travel_station"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .OakSave.VehicleUnlockedSaveGameData vehicles_unlocked_data = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_vehicles_unlocked_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string vehicle_parts_unlocked = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_vehicle_parts_unlocked();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.Character.vehicle_parts_unlocked"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<202>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .OakSave.OakCARMenuVehicleConfigSaveData vehicle_loadouts = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_vehicle_loadouts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<210>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 vehicle_last_loadout_index = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          vehicle_last_loadout_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .OakSave.ChallengeSaveGameData challenge_data = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_challenge_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<226>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .OakSave.OakSDUSaveGameData sdu_list = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_sdu_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<234>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string selected_customizations = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_selected_customizations();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.Character.selected_customizations"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<242>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 equipped_emote_customizations = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_equipped_emote_customizations(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248) {
          _internal_add_equipped_emote_customizations(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .OakSave.CustomPlayerColorSaveGameData selected_color_customizations = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_selected_color_customizations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<258>(ptr));
        } else goto handle_unusual;
        continue;
      // .OakSave.GuardianRankSaveGameData guardian_rank = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_guardian_rank(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OakSave.CrewQuartersSaveData crew_quarters_room = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_crew_quarters_room(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OakSave.CrewQuartersGunRackSaveData crew_quarters_gun_rack = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_crew_quarters_gun_rack(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .OakSave.EchoLogSaveGameData unlocked_echo_logs = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_unlocked_echo_logs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<290>(ptr));
        } else goto handle_unusual;
        continue;
      // bool has_played_special_echo_log_insert_already = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          has_played_special_echo_log_insert_already_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .OakSave.Character.NicknameMappingsEntry nickname_mappings = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_nickname_mappings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<306>(ptr));
        } else goto handle_unusual;
        continue;
      // .OakSave.MapIDData last_traveled_map_id = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_traveled_map_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OakSave.ChallengeCategoryProgressSaveData challenge_category_completion_pcts = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_challenge_category_completion_pcts(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OakSave.OakPlayerCharacterSlotSaveGameData character_slot_save_game_data = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_character_slot_save_game_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OakSave.UITrackingSaveGameData ui_tracking_save_game_data = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_ui_tracking_save_game_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string preferred_character_name = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_preferred_character_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.Character.preferred_character_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 name_character_limit = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          name_character_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 preferred_group_mode = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          preferred_group_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OakSave.TimeOfDaySaveGameData time_of_day_save_game_data = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_of_day_save_game_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .OakSave.LevelPersistence_Level_SaveGameData level_persistence_data = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_level_persistence_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<378>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 accumulated_level_persistence_reset_timer_seconds = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          accumulated_level_persistence_reset_timer_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 mayhem_level = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          mayhem_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OakSave.GbxZoneMapFODSaveGameData gbx_zone_map_fod_save_game_data = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_gbx_zone_map_fod_save_game_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .OakSave.ActiveFastTravelSaveData active_or_blacklisted_travel_stations = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_active_or_blacklisted_travel_stations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<410>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string last_active_travel_station_for_playthrough = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_last_active_travel_station_for_playthrough();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.Character.last_active_travel_station_for_playthrough"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<418>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .OakSave.GameStateSaveData game_state_save_data_for_playthrough = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_game_state_save_data_for_playthrough(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<426>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .OakSave.RegisteredDownloadableEntitlements registered_downloadable_entitlements = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_registered_downloadable_entitlements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<434>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .OakSave.PlaythroughActiveFastTravelSaveData active_travel_stations_for_playthrough = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_active_travel_stations_for_playthrough(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<442>(ptr));
        } else goto handle_unusual;
        continue;
      // string save_game_guid = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          auto str = _internal_mutable_save_game_guid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.Character.save_game_guid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OakSave.GuardianRankCharacterSaveGameData guardian_rank_character_data = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_guardian_rank_character_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool optional_objective_reward_fixup_applied = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          optional_objective_reward_fixup_applied_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool vehicle_part_rewards_fixup_applied = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          vehicle_part_rewards_fixup_applied_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 last_active_league = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          last_active_league_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 last_active_league_instance = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          last_active_league_instance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .OakSave.Character.ActiveLeagueInstanceForEventEntry active_league_instance_for_event = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_active_league_instance_for_event(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<498>(ptr));
        } else goto handle_unusual;
        continue;
      // bool levelled_save_vehicle_part_rewards_fixup_applied = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          levelled_save_vehicle_part_rewards_fixup_applied_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Character::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.Character)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 save_game_id = 1;
  if (this->save_game_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_save_game_id(), target);
  }

  // int64 last_save_timestamp = 2;
  if (this->last_save_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_last_save_timestamp(), target);
  }

  // uint32 time_played_seconds = 3;
  if (this->time_played_seconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_time_played_seconds(), target);
  }

  // .OakSave.PlayerClassSaveGameData player_class_data = 4;
  if (this->has_player_class_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::player_class_data(this), target, stream);
  }

  // repeated .OakSave.ResourcePoolSavegameData resource_pools = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_resource_pools_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_resource_pools(i), target, stream);
  }

  // repeated .OakSave.RegionSaveGameData saved_regions = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_saved_regions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_saved_regions(i), target, stream);
  }

  // int32 experience_points = 7;
  if (this->experience_points() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_experience_points(), target);
  }

  // repeated .OakSave.GameStatSaveGameData game_stats_data = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_game_stats_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_game_stats_data(i), target, stream);
  }

  // repeated .OakSave.InventoryCategorySaveData inventory_category_list = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inventory_category_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_inventory_category_list(i), target, stream);
  }

  // repeated .OakSave.OakInventoryItemSaveGameData inventory_items = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inventory_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_inventory_items(i), target, stream);
  }

  // repeated .OakSave.EquippedInventorySaveGameData equipped_inventory_list = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_equipped_inventory_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_equipped_inventory_list(i), target, stream);
  }

  // repeated int32 active_weapon_list = 12;
  {
    int byte_size = _active_weapon_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          12, _internal_active_weapon_list(), byte_size, target);
    }
  }

  // .OakSave.OakPlayerAbilitySaveGameData ability_data = 13;
  if (this->has_ability_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::ability_data(this), target, stream);
  }

  // int32 last_play_through_index = 14;
  if (this->last_play_through_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_last_play_through_index(), target);
  }

  // int32 playthroughs_completed = 15;
  if (this->playthroughs_completed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_playthroughs_completed(), target);
  }

  // bool show_new_playthrough_notification = 16;
  if (this->show_new_playthrough_notification() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_show_new_playthrough_notification(), target);
  }

  // repeated .OakSave.MissionPlaythroughSaveGameData mission_playthroughs_data = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mission_playthroughs_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, this->_internal_mission_playthroughs_data(i), target, stream);
  }

  // repeated string active_travel_stations = 21;
  for (int i = 0, n = this->_internal_active_travel_stations_size(); i < n; i++) {
    const auto& s = this->_internal_active_travel_stations(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.Character.active_travel_stations");
    target = stream->WriteString(21, s, target);
  }

  // .OakSave.DiscoverySaveData discovery_data = 22;
  if (this->has_discovery_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::discovery_data(this), target, stream);
  }

  // string last_active_travel_station = 23;
  if (this->last_active_travel_station().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_active_travel_station().data(), static_cast<int>(this->_internal_last_active_travel_station().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.Character.last_active_travel_station");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_last_active_travel_station(), target);
  }

  // repeated .OakSave.VehicleUnlockedSaveGameData vehicles_unlocked_data = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vehicles_unlocked_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, this->_internal_vehicles_unlocked_data(i), target, stream);
  }

  // repeated string vehicle_parts_unlocked = 25;
  for (int i = 0, n = this->_internal_vehicle_parts_unlocked_size(); i < n; i++) {
    const auto& s = this->_internal_vehicle_parts_unlocked(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.Character.vehicle_parts_unlocked");
    target = stream->WriteString(25, s, target);
  }

  // repeated .OakSave.OakCARMenuVehicleConfigSaveData vehicle_loadouts = 26;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vehicle_loadouts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, this->_internal_vehicle_loadouts(i), target, stream);
  }

  // int32 vehicle_last_loadout_index = 27;
  if (this->vehicle_last_loadout_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(27, this->_internal_vehicle_last_loadout_index(), target);
  }

  // repeated .OakSave.ChallengeSaveGameData challenge_data = 28;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_challenge_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(28, this->_internal_challenge_data(i), target, stream);
  }

  // repeated .OakSave.OakSDUSaveGameData sdu_list = 29;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sdu_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(29, this->_internal_sdu_list(i), target, stream);
  }

  // repeated string selected_customizations = 30;
  for (int i = 0, n = this->_internal_selected_customizations_size(); i < n; i++) {
    const auto& s = this->_internal_selected_customizations(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.Character.selected_customizations");
    target = stream->WriteString(30, s, target);
  }

  // repeated int32 equipped_emote_customizations = 31;
  {
    int byte_size = _equipped_emote_customizations_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          31, _internal_equipped_emote_customizations(), byte_size, target);
    }
  }

  // repeated .OakSave.CustomPlayerColorSaveGameData selected_color_customizations = 32;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_selected_color_customizations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(32, this->_internal_selected_color_customizations(i), target, stream);
  }

  // .OakSave.GuardianRankSaveGameData guardian_rank = 33;
  if (this->has_guardian_rank()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        33, _Internal::guardian_rank(this), target, stream);
  }

  // .OakSave.CrewQuartersSaveData crew_quarters_room = 34;
  if (this->has_crew_quarters_room()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        34, _Internal::crew_quarters_room(this), target, stream);
  }

  // .OakSave.CrewQuartersGunRackSaveData crew_quarters_gun_rack = 35;
  if (this->has_crew_quarters_gun_rack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        35, _Internal::crew_quarters_gun_rack(this), target, stream);
  }

  // repeated .OakSave.EchoLogSaveGameData unlocked_echo_logs = 36;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_unlocked_echo_logs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(36, this->_internal_unlocked_echo_logs(i), target, stream);
  }

  // bool has_played_special_echo_log_insert_already = 37;
  if (this->has_played_special_echo_log_insert_already() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(37, this->_internal_has_played_special_echo_log_insert_already(), target);
  }

  // repeated .OakSave.Character.NicknameMappingsEntry nickname_mappings = 38;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nickname_mappings_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(38, this->_internal_nickname_mappings(i), target, stream);
  }

  // .OakSave.MapIDData last_traveled_map_id = 39;
  if (this->has_last_traveled_map_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        39, _Internal::last_traveled_map_id(this), target, stream);
  }

  // .OakSave.ChallengeCategoryProgressSaveData challenge_category_completion_pcts = 40;
  if (this->has_challenge_category_completion_pcts()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        40, _Internal::challenge_category_completion_pcts(this), target, stream);
  }

  // .OakSave.OakPlayerCharacterSlotSaveGameData character_slot_save_game_data = 41;
  if (this->has_character_slot_save_game_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        41, _Internal::character_slot_save_game_data(this), target, stream);
  }

  // .OakSave.UITrackingSaveGameData ui_tracking_save_game_data = 42;
  if (this->has_ui_tracking_save_game_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        42, _Internal::ui_tracking_save_game_data(this), target, stream);
  }

  // string preferred_character_name = 43;
  if (this->preferred_character_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_preferred_character_name().data(), static_cast<int>(this->_internal_preferred_character_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.Character.preferred_character_name");
    target = stream->WriteStringMaybeAliased(
        43, this->_internal_preferred_character_name(), target);
  }

  // int32 name_character_limit = 44;
  if (this->name_character_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(44, this->_internal_name_character_limit(), target);
  }

  // uint32 preferred_group_mode = 45;
  if (this->preferred_group_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(45, this->_internal_preferred_group_mode(), target);
  }

  // .OakSave.TimeOfDaySaveGameData time_of_day_save_game_data = 46;
  if (this->has_time_of_day_save_game_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        46, _Internal::time_of_day_save_game_data(this), target, stream);
  }

  // repeated .OakSave.LevelPersistence_Level_SaveGameData level_persistence_data = 47;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_level_persistence_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(47, this->_internal_level_persistence_data(i), target, stream);
  }

  // uint32 accumulated_level_persistence_reset_timer_seconds = 48;
  if (this->accumulated_level_persistence_reset_timer_seconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(48, this->_internal_accumulated_level_persistence_reset_timer_seconds(), target);
  }

  // uint32 mayhem_level = 49;
  if (this->mayhem_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(49, this->_internal_mayhem_level(), target);
  }

  // .OakSave.GbxZoneMapFODSaveGameData gbx_zone_map_fod_save_game_data = 50;
  if (this->has_gbx_zone_map_fod_save_game_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        50, _Internal::gbx_zone_map_fod_save_game_data(this), target, stream);
  }

  // repeated .OakSave.ActiveFastTravelSaveData active_or_blacklisted_travel_stations = 51;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_active_or_blacklisted_travel_stations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(51, this->_internal_active_or_blacklisted_travel_stations(i), target, stream);
  }

  // repeated string last_active_travel_station_for_playthrough = 52;
  for (int i = 0, n = this->_internal_last_active_travel_station_for_playthrough_size(); i < n; i++) {
    const auto& s = this->_internal_last_active_travel_station_for_playthrough(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.Character.last_active_travel_station_for_playthrough");
    target = stream->WriteString(52, s, target);
  }

  // repeated .OakSave.GameStateSaveData game_state_save_data_for_playthrough = 53;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_game_state_save_data_for_playthrough_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(53, this->_internal_game_state_save_data_for_playthrough(i), target, stream);
  }

  // repeated .OakSave.RegisteredDownloadableEntitlements registered_downloadable_entitlements = 54;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_registered_downloadable_entitlements_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(54, this->_internal_registered_downloadable_entitlements(i), target, stream);
  }

  // repeated .OakSave.PlaythroughActiveFastTravelSaveData active_travel_stations_for_playthrough = 55;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_active_travel_stations_for_playthrough_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(55, this->_internal_active_travel_stations_for_playthrough(i), target, stream);
  }

  // string save_game_guid = 56;
  if (this->save_game_guid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_save_game_guid().data(), static_cast<int>(this->_internal_save_game_guid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.Character.save_game_guid");
    target = stream->WriteStringMaybeAliased(
        56, this->_internal_save_game_guid(), target);
  }

  // .OakSave.GuardianRankCharacterSaveGameData guardian_rank_character_data = 57;
  if (this->has_guardian_rank_character_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        57, _Internal::guardian_rank_character_data(this), target, stream);
  }

  // bool optional_objective_reward_fixup_applied = 58;
  if (this->optional_objective_reward_fixup_applied() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(58, this->_internal_optional_objective_reward_fixup_applied(), target);
  }

  // bool vehicle_part_rewards_fixup_applied = 59;
  if (this->vehicle_part_rewards_fixup_applied() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(59, this->_internal_vehicle_part_rewards_fixup_applied(), target);
  }

  // uint32 last_active_league = 60;
  if (this->last_active_league() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(60, this->_internal_last_active_league(), target);
  }

  // uint32 last_active_league_instance = 61;
  if (this->last_active_league_instance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(61, this->_internal_last_active_league_instance(), target);
  }

  // repeated .OakSave.Character.ActiveLeagueInstanceForEventEntry active_league_instance_for_event = 62;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_active_league_instance_for_event_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(62, this->_internal_active_league_instance_for_event(i), target, stream);
  }

  // bool levelled_save_vehicle_part_rewards_fixup_applied = 63;
  if (this->levelled_save_vehicle_part_rewards_fixup_applied() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(63, this->_internal_levelled_save_vehicle_part_rewards_fixup_applied(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.Character)
  return target;
}

size_t Character::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.Character)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .OakSave.ResourcePoolSavegameData resource_pools = 5;
  total_size += 1UL * this->_internal_resource_pools_size();
  for (const auto& msg : this->resource_pools_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .OakSave.RegionSaveGameData saved_regions = 6;
  total_size += 1UL * this->_internal_saved_regions_size();
  for (const auto& msg : this->saved_regions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .OakSave.GameStatSaveGameData game_stats_data = 8;
  total_size += 1UL * this->_internal_game_stats_data_size();
  for (const auto& msg : this->game_stats_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .OakSave.InventoryCategorySaveData inventory_category_list = 9;
  total_size += 1UL * this->_internal_inventory_category_list_size();
  for (const auto& msg : this->inventory_category_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .OakSave.OakInventoryItemSaveGameData inventory_items = 10;
  total_size += 1UL * this->_internal_inventory_items_size();
  for (const auto& msg : this->inventory_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .OakSave.EquippedInventorySaveGameData equipped_inventory_list = 11;
  total_size += 1UL * this->_internal_equipped_inventory_list_size();
  for (const auto& msg : this->equipped_inventory_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 active_weapon_list = 12;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->active_weapon_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _active_weapon_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .OakSave.MissionPlaythroughSaveGameData mission_playthroughs_data = 17;
  total_size += 2UL * this->_internal_mission_playthroughs_data_size();
  for (const auto& msg : this->mission_playthroughs_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string active_travel_stations = 21;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(active_travel_stations_.size());
  for (int i = 0, n = active_travel_stations_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      active_travel_stations_.Get(i));
  }

  // repeated .OakSave.VehicleUnlockedSaveGameData vehicles_unlocked_data = 24;
  total_size += 2UL * this->_internal_vehicles_unlocked_data_size();
  for (const auto& msg : this->vehicles_unlocked_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string vehicle_parts_unlocked = 25;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(vehicle_parts_unlocked_.size());
  for (int i = 0, n = vehicle_parts_unlocked_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      vehicle_parts_unlocked_.Get(i));
  }

  // repeated .OakSave.OakCARMenuVehicleConfigSaveData vehicle_loadouts = 26;
  total_size += 2UL * this->_internal_vehicle_loadouts_size();
  for (const auto& msg : this->vehicle_loadouts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .OakSave.ChallengeSaveGameData challenge_data = 28;
  total_size += 2UL * this->_internal_challenge_data_size();
  for (const auto& msg : this->challenge_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .OakSave.OakSDUSaveGameData sdu_list = 29;
  total_size += 2UL * this->_internal_sdu_list_size();
  for (const auto& msg : this->sdu_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string selected_customizations = 30;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(selected_customizations_.size());
  for (int i = 0, n = selected_customizations_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      selected_customizations_.Get(i));
  }

  // repeated int32 equipped_emote_customizations = 31;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->equipped_emote_customizations_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _equipped_emote_customizations_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .OakSave.CustomPlayerColorSaveGameData selected_color_customizations = 32;
  total_size += 2UL * this->_internal_selected_color_customizations_size();
  for (const auto& msg : this->selected_color_customizations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .OakSave.EchoLogSaveGameData unlocked_echo_logs = 36;
  total_size += 2UL * this->_internal_unlocked_echo_logs_size();
  for (const auto& msg : this->unlocked_echo_logs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .OakSave.Character.NicknameMappingsEntry nickname_mappings = 38;
  total_size += 2UL * this->_internal_nickname_mappings_size();
  for (const auto& msg : this->nickname_mappings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .OakSave.LevelPersistence_Level_SaveGameData level_persistence_data = 47;
  total_size += 2UL * this->_internal_level_persistence_data_size();
  for (const auto& msg : this->level_persistence_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .OakSave.ActiveFastTravelSaveData active_or_blacklisted_travel_stations = 51;
  total_size += 2UL * this->_internal_active_or_blacklisted_travel_stations_size();
  for (const auto& msg : this->active_or_blacklisted_travel_stations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string last_active_travel_station_for_playthrough = 52;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(last_active_travel_station_for_playthrough_.size());
  for (int i = 0, n = last_active_travel_station_for_playthrough_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      last_active_travel_station_for_playthrough_.Get(i));
  }

  // repeated .OakSave.GameStateSaveData game_state_save_data_for_playthrough = 53;
  total_size += 2UL * this->_internal_game_state_save_data_for_playthrough_size();
  for (const auto& msg : this->game_state_save_data_for_playthrough_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .OakSave.RegisteredDownloadableEntitlements registered_downloadable_entitlements = 54;
  total_size += 2UL * this->_internal_registered_downloadable_entitlements_size();
  for (const auto& msg : this->registered_downloadable_entitlements_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .OakSave.PlaythroughActiveFastTravelSaveData active_travel_stations_for_playthrough = 55;
  total_size += 2UL * this->_internal_active_travel_stations_for_playthrough_size();
  for (const auto& msg : this->active_travel_stations_for_playthrough_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .OakSave.Character.ActiveLeagueInstanceForEventEntry active_league_instance_for_event = 62;
  total_size += 2UL * this->_internal_active_league_instance_for_event_size();
  for (const auto& msg : this->active_league_instance_for_event_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string last_active_travel_station = 23;
  if (this->last_active_travel_station().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_active_travel_station());
  }

  // string preferred_character_name = 43;
  if (this->preferred_character_name().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_preferred_character_name());
  }

  // string save_game_guid = 56;
  if (this->save_game_guid().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_save_game_guid());
  }

  // .OakSave.PlayerClassSaveGameData player_class_data = 4;
  if (this->has_player_class_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_class_data_);
  }

  // .OakSave.OakPlayerAbilitySaveGameData ability_data = 13;
  if (this->has_ability_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ability_data_);
  }

  // .OakSave.DiscoverySaveData discovery_data = 22;
  if (this->has_discovery_data()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *discovery_data_);
  }

  // .OakSave.GuardianRankSaveGameData guardian_rank = 33;
  if (this->has_guardian_rank()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *guardian_rank_);
  }

  // .OakSave.CrewQuartersSaveData crew_quarters_room = 34;
  if (this->has_crew_quarters_room()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *crew_quarters_room_);
  }

  // .OakSave.CrewQuartersGunRackSaveData crew_quarters_gun_rack = 35;
  if (this->has_crew_quarters_gun_rack()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *crew_quarters_gun_rack_);
  }

  // .OakSave.MapIDData last_traveled_map_id = 39;
  if (this->has_last_traveled_map_id()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *last_traveled_map_id_);
  }

  // .OakSave.ChallengeCategoryProgressSaveData challenge_category_completion_pcts = 40;
  if (this->has_challenge_category_completion_pcts()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *challenge_category_completion_pcts_);
  }

  // .OakSave.OakPlayerCharacterSlotSaveGameData character_slot_save_game_data = 41;
  if (this->has_character_slot_save_game_data()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *character_slot_save_game_data_);
  }

  // .OakSave.UITrackingSaveGameData ui_tracking_save_game_data = 42;
  if (this->has_ui_tracking_save_game_data()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ui_tracking_save_game_data_);
  }

  // .OakSave.TimeOfDaySaveGameData time_of_day_save_game_data = 46;
  if (this->has_time_of_day_save_game_data()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_of_day_save_game_data_);
  }

  // .OakSave.GbxZoneMapFODSaveGameData gbx_zone_map_fod_save_game_data = 50;
  if (this->has_gbx_zone_map_fod_save_game_data()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gbx_zone_map_fod_save_game_data_);
  }

  // .OakSave.GuardianRankCharacterSaveGameData guardian_rank_character_data = 57;
  if (this->has_guardian_rank_character_data()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *guardian_rank_character_data_);
  }

  // int64 last_save_timestamp = 2;
  if (this->last_save_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_last_save_timestamp());
  }

  // uint32 save_game_id = 1;
  if (this->save_game_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_save_game_id());
  }

  // uint32 time_played_seconds = 3;
  if (this->time_played_seconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_time_played_seconds());
  }

  // int32 experience_points = 7;
  if (this->experience_points() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_experience_points());
  }

  // int32 last_play_through_index = 14;
  if (this->last_play_through_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_last_play_through_index());
  }

  // int32 playthroughs_completed = 15;
  if (this->playthroughs_completed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_playthroughs_completed());
  }

  // int32 vehicle_last_loadout_index = 27;
  if (this->vehicle_last_loadout_index() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vehicle_last_loadout_index());
  }

  // bool show_new_playthrough_notification = 16;
  if (this->show_new_playthrough_notification() != 0) {
    total_size += 2 + 1;
  }

  // bool has_played_special_echo_log_insert_already = 37;
  if (this->has_played_special_echo_log_insert_already() != 0) {
    total_size += 2 + 1;
  }

  // bool optional_objective_reward_fixup_applied = 58;
  if (this->optional_objective_reward_fixup_applied() != 0) {
    total_size += 2 + 1;
  }

  // bool vehicle_part_rewards_fixup_applied = 59;
  if (this->vehicle_part_rewards_fixup_applied() != 0) {
    total_size += 2 + 1;
  }

  // int32 name_character_limit = 44;
  if (this->name_character_limit() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_name_character_limit());
  }

  // uint32 preferred_group_mode = 45;
  if (this->preferred_group_mode() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_preferred_group_mode());
  }

  // uint32 accumulated_level_persistence_reset_timer_seconds = 48;
  if (this->accumulated_level_persistence_reset_timer_seconds() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_accumulated_level_persistence_reset_timer_seconds());
  }

  // uint32 mayhem_level = 49;
  if (this->mayhem_level() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mayhem_level());
  }

  // uint32 last_active_league = 60;
  if (this->last_active_league() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_last_active_league());
  }

  // uint32 last_active_league_instance = 61;
  if (this->last_active_league_instance() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_last_active_league_instance());
  }

  // bool levelled_save_vehicle_part_rewards_fixup_applied = 63;
  if (this->levelled_save_vehicle_part_rewards_fixup_applied() != 0) {
    total_size += 2 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Character::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.Character)
  GOOGLE_DCHECK_NE(&from, this);
  const Character* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Character>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.Character)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.Character)
    MergeFrom(*source);
  }
}

void Character::MergeFrom(const Character& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.Character)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  resource_pools_.MergeFrom(from.resource_pools_);
  saved_regions_.MergeFrom(from.saved_regions_);
  game_stats_data_.MergeFrom(from.game_stats_data_);
  inventory_category_list_.MergeFrom(from.inventory_category_list_);
  inventory_items_.MergeFrom(from.inventory_items_);
  equipped_inventory_list_.MergeFrom(from.equipped_inventory_list_);
  active_weapon_list_.MergeFrom(from.active_weapon_list_);
  mission_playthroughs_data_.MergeFrom(from.mission_playthroughs_data_);
  active_travel_stations_.MergeFrom(from.active_travel_stations_);
  vehicles_unlocked_data_.MergeFrom(from.vehicles_unlocked_data_);
  vehicle_parts_unlocked_.MergeFrom(from.vehicle_parts_unlocked_);
  vehicle_loadouts_.MergeFrom(from.vehicle_loadouts_);
  challenge_data_.MergeFrom(from.challenge_data_);
  sdu_list_.MergeFrom(from.sdu_list_);
  selected_customizations_.MergeFrom(from.selected_customizations_);
  equipped_emote_customizations_.MergeFrom(from.equipped_emote_customizations_);
  selected_color_customizations_.MergeFrom(from.selected_color_customizations_);
  unlocked_echo_logs_.MergeFrom(from.unlocked_echo_logs_);
  nickname_mappings_.MergeFrom(from.nickname_mappings_);
  level_persistence_data_.MergeFrom(from.level_persistence_data_);
  active_or_blacklisted_travel_stations_.MergeFrom(from.active_or_blacklisted_travel_stations_);
  last_active_travel_station_for_playthrough_.MergeFrom(from.last_active_travel_station_for_playthrough_);
  game_state_save_data_for_playthrough_.MergeFrom(from.game_state_save_data_for_playthrough_);
  registered_downloadable_entitlements_.MergeFrom(from.registered_downloadable_entitlements_);
  active_travel_stations_for_playthrough_.MergeFrom(from.active_travel_stations_for_playthrough_);
  active_league_instance_for_event_.MergeFrom(from.active_league_instance_for_event_);
  if (from.last_active_travel_station().size() > 0) {
    _internal_set_last_active_travel_station(from._internal_last_active_travel_station());
  }
  if (from.preferred_character_name().size() > 0) {
    _internal_set_preferred_character_name(from._internal_preferred_character_name());
  }
  if (from.save_game_guid().size() > 0) {
    _internal_set_save_game_guid(from._internal_save_game_guid());
  }
  if (from.has_player_class_data()) {
    _internal_mutable_player_class_data()->::OakSave::PlayerClassSaveGameData::MergeFrom(from._internal_player_class_data());
  }
  if (from.has_ability_data()) {
    _internal_mutable_ability_data()->::OakSave::OakPlayerAbilitySaveGameData::MergeFrom(from._internal_ability_data());
  }
  if (from.has_discovery_data()) {
    _internal_mutable_discovery_data()->::OakSave::DiscoverySaveData::MergeFrom(from._internal_discovery_data());
  }
  if (from.has_guardian_rank()) {
    _internal_mutable_guardian_rank()->::OakSave::GuardianRankSaveGameData::MergeFrom(from._internal_guardian_rank());
  }
  if (from.has_crew_quarters_room()) {
    _internal_mutable_crew_quarters_room()->::OakSave::CrewQuartersSaveData::MergeFrom(from._internal_crew_quarters_room());
  }
  if (from.has_crew_quarters_gun_rack()) {
    _internal_mutable_crew_quarters_gun_rack()->::OakSave::CrewQuartersGunRackSaveData::MergeFrom(from._internal_crew_quarters_gun_rack());
  }
  if (from.has_last_traveled_map_id()) {
    _internal_mutable_last_traveled_map_id()->::OakSave::MapIDData::MergeFrom(from._internal_last_traveled_map_id());
  }
  if (from.has_challenge_category_completion_pcts()) {
    _internal_mutable_challenge_category_completion_pcts()->::OakSave::ChallengeCategoryProgressSaveData::MergeFrom(from._internal_challenge_category_completion_pcts());
  }
  if (from.has_character_slot_save_game_data()) {
    _internal_mutable_character_slot_save_game_data()->::OakSave::OakPlayerCharacterSlotSaveGameData::MergeFrom(from._internal_character_slot_save_game_data());
  }
  if (from.has_ui_tracking_save_game_data()) {
    _internal_mutable_ui_tracking_save_game_data()->::OakSave::UITrackingSaveGameData::MergeFrom(from._internal_ui_tracking_save_game_data());
  }
  if (from.has_time_of_day_save_game_data()) {
    _internal_mutable_time_of_day_save_game_data()->::OakSave::TimeOfDaySaveGameData::MergeFrom(from._internal_time_of_day_save_game_data());
  }
  if (from.has_gbx_zone_map_fod_save_game_data()) {
    _internal_mutable_gbx_zone_map_fod_save_game_data()->::OakSave::GbxZoneMapFODSaveGameData::MergeFrom(from._internal_gbx_zone_map_fod_save_game_data());
  }
  if (from.has_guardian_rank_character_data()) {
    _internal_mutable_guardian_rank_character_data()->::OakSave::GuardianRankCharacterSaveGameData::MergeFrom(from._internal_guardian_rank_character_data());
  }
  if (from.last_save_timestamp() != 0) {
    _internal_set_last_save_timestamp(from._internal_last_save_timestamp());
  }
  if (from.save_game_id() != 0) {
    _internal_set_save_game_id(from._internal_save_game_id());
  }
  if (from.time_played_seconds() != 0) {
    _internal_set_time_played_seconds(from._internal_time_played_seconds());
  }
  if (from.experience_points() != 0) {
    _internal_set_experience_points(from._internal_experience_points());
  }
  if (from.last_play_through_index() != 0) {
    _internal_set_last_play_through_index(from._internal_last_play_through_index());
  }
  if (from.playthroughs_completed() != 0) {
    _internal_set_playthroughs_completed(from._internal_playthroughs_completed());
  }
  if (from.vehicle_last_loadout_index() != 0) {
    _internal_set_vehicle_last_loadout_index(from._internal_vehicle_last_loadout_index());
  }
  if (from.show_new_playthrough_notification() != 0) {
    _internal_set_show_new_playthrough_notification(from._internal_show_new_playthrough_notification());
  }
  if (from.has_played_special_echo_log_insert_already() != 0) {
    _internal_set_has_played_special_echo_log_insert_already(from._internal_has_played_special_echo_log_insert_already());
  }
  if (from.optional_objective_reward_fixup_applied() != 0) {
    _internal_set_optional_objective_reward_fixup_applied(from._internal_optional_objective_reward_fixup_applied());
  }
  if (from.vehicle_part_rewards_fixup_applied() != 0) {
    _internal_set_vehicle_part_rewards_fixup_applied(from._internal_vehicle_part_rewards_fixup_applied());
  }
  if (from.name_character_limit() != 0) {
    _internal_set_name_character_limit(from._internal_name_character_limit());
  }
  if (from.preferred_group_mode() != 0) {
    _internal_set_preferred_group_mode(from._internal_preferred_group_mode());
  }
  if (from.accumulated_level_persistence_reset_timer_seconds() != 0) {
    _internal_set_accumulated_level_persistence_reset_timer_seconds(from._internal_accumulated_level_persistence_reset_timer_seconds());
  }
  if (from.mayhem_level() != 0) {
    _internal_set_mayhem_level(from._internal_mayhem_level());
  }
  if (from.last_active_league() != 0) {
    _internal_set_last_active_league(from._internal_last_active_league());
  }
  if (from.last_active_league_instance() != 0) {
    _internal_set_last_active_league_instance(from._internal_last_active_league_instance());
  }
  if (from.levelled_save_vehicle_part_rewards_fixup_applied() != 0) {
    _internal_set_levelled_save_vehicle_part_rewards_fixup_applied(from._internal_levelled_save_vehicle_part_rewards_fixup_applied());
  }
}

void Character::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.Character)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Character::CopyFrom(const Character& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.Character)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Character::IsInitialized() const {
  return true;
}

void Character::InternalSwap(Character* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  resource_pools_.InternalSwap(&other->resource_pools_);
  saved_regions_.InternalSwap(&other->saved_regions_);
  game_stats_data_.InternalSwap(&other->game_stats_data_);
  inventory_category_list_.InternalSwap(&other->inventory_category_list_);
  inventory_items_.InternalSwap(&other->inventory_items_);
  equipped_inventory_list_.InternalSwap(&other->equipped_inventory_list_);
  active_weapon_list_.InternalSwap(&other->active_weapon_list_);
  mission_playthroughs_data_.InternalSwap(&other->mission_playthroughs_data_);
  active_travel_stations_.InternalSwap(&other->active_travel_stations_);
  vehicles_unlocked_data_.InternalSwap(&other->vehicles_unlocked_data_);
  vehicle_parts_unlocked_.InternalSwap(&other->vehicle_parts_unlocked_);
  vehicle_loadouts_.InternalSwap(&other->vehicle_loadouts_);
  challenge_data_.InternalSwap(&other->challenge_data_);
  sdu_list_.InternalSwap(&other->sdu_list_);
  selected_customizations_.InternalSwap(&other->selected_customizations_);
  equipped_emote_customizations_.InternalSwap(&other->equipped_emote_customizations_);
  selected_color_customizations_.InternalSwap(&other->selected_color_customizations_);
  unlocked_echo_logs_.InternalSwap(&other->unlocked_echo_logs_);
  nickname_mappings_.InternalSwap(&other->nickname_mappings_);
  level_persistence_data_.InternalSwap(&other->level_persistence_data_);
  active_or_blacklisted_travel_stations_.InternalSwap(&other->active_or_blacklisted_travel_stations_);
  last_active_travel_station_for_playthrough_.InternalSwap(&other->last_active_travel_station_for_playthrough_);
  game_state_save_data_for_playthrough_.InternalSwap(&other->game_state_save_data_for_playthrough_);
  registered_downloadable_entitlements_.InternalSwap(&other->registered_downloadable_entitlements_);
  active_travel_stations_for_playthrough_.InternalSwap(&other->active_travel_stations_for_playthrough_);
  active_league_instance_for_event_.InternalSwap(&other->active_league_instance_for_event_);
  last_active_travel_station_.Swap(&other->last_active_travel_station_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  preferred_character_name_.Swap(&other->preferred_character_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  save_game_guid_.Swap(&other->save_game_guid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Character, levelled_save_vehicle_part_rewards_fixup_applied_)
      + sizeof(Character::levelled_save_vehicle_part_rewards_fixup_applied_)
      - PROTOBUF_FIELD_OFFSET(Character, player_class_data_)>(
          reinterpret_cast<char*>(&player_class_data_),
          reinterpret_cast<char*>(&other->player_class_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Character::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace OakSave
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::OakSave::PlayerClassSaveGameData* Arena::CreateMaybeMessage< ::OakSave::PlayerClassSaveGameData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::PlayerClassSaveGameData >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::ResourcePoolSavegameData* Arena::CreateMaybeMessage< ::OakSave::ResourcePoolSavegameData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::ResourcePoolSavegameData >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::RegionSaveGameData* Arena::CreateMaybeMessage< ::OakSave::RegionSaveGameData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::RegionSaveGameData >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::InventoryBalanceStateInitializationData* Arena::CreateMaybeMessage< ::OakSave::InventoryBalanceStateInitializationData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::InventoryBalanceStateInitializationData >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::OakInventoryItemSaveGameData* Arena::CreateMaybeMessage< ::OakSave::OakInventoryItemSaveGameData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::OakInventoryItemSaveGameData >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::EquippedInventorySaveGameData* Arena::CreateMaybeMessage< ::OakSave::EquippedInventorySaveGameData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::EquippedInventorySaveGameData >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::OakAbilityTreeItemSaveGameData* Arena::CreateMaybeMessage< ::OakSave::OakAbilityTreeItemSaveGameData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::OakAbilityTreeItemSaveGameData >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::OakAbilitySlotSaveGameData* Arena::CreateMaybeMessage< ::OakSave::OakAbilitySlotSaveGameData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::OakAbilitySlotSaveGameData >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::OakActionAbilityAugmentSaveGameData* Arena::CreateMaybeMessage< ::OakSave::OakActionAbilityAugmentSaveGameData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::OakActionAbilityAugmentSaveGameData >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::OakActionAbilityAugmentConfigurationSaveGameData* Arena::CreateMaybeMessage< ::OakSave::OakActionAbilityAugmentConfigurationSaveGameData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::OakActionAbilityAugmentConfigurationSaveGameData >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::OakPlayerAbilitySaveGameData* Arena::CreateMaybeMessage< ::OakSave::OakPlayerAbilitySaveGameData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::OakPlayerAbilitySaveGameData >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::MissionStatusPlayerSaveGameData* Arena::CreateMaybeMessage< ::OakSave::MissionStatusPlayerSaveGameData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::MissionStatusPlayerSaveGameData >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::MissionPlaythroughSaveGameData* Arena::CreateMaybeMessage< ::OakSave::MissionPlaythroughSaveGameData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::MissionPlaythroughSaveGameData >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::ActiveFastTravelSaveData* Arena::CreateMaybeMessage< ::OakSave::ActiveFastTravelSaveData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::ActiveFastTravelSaveData >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::PlaythroughActiveFastTravelSaveData* Arena::CreateMaybeMessage< ::OakSave::PlaythroughActiveFastTravelSaveData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::PlaythroughActiveFastTravelSaveData >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::DiscoveredAreaInfo* Arena::CreateMaybeMessage< ::OakSave::DiscoveredAreaInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::DiscoveredAreaInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::DiscoveredLevelInfo* Arena::CreateMaybeMessage< ::OakSave::DiscoveredLevelInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::DiscoveredLevelInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::DiscoveredPlanetInfo* Arena::CreateMaybeMessage< ::OakSave::DiscoveredPlanetInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::DiscoveredPlanetInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::DiscoverySaveData* Arena::CreateMaybeMessage< ::OakSave::DiscoverySaveData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::DiscoverySaveData >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::VehicleUnlockedSaveGameData* Arena::CreateMaybeMessage< ::OakSave::VehicleUnlockedSaveGameData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::VehicleUnlockedSaveGameData >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::OakCARMenuVehicleConfigSaveData* Arena::CreateMaybeMessage< ::OakSave::OakCARMenuVehicleConfigSaveData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::OakCARMenuVehicleConfigSaveData >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::CustomPlayerColorSaveGameData* Arena::CreateMaybeMessage< ::OakSave::CustomPlayerColorSaveGameData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::CustomPlayerColorSaveGameData >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::GuardianRankSaveGameData* Arena::CreateMaybeMessage< ::OakSave::GuardianRankSaveGameData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::GuardianRankSaveGameData >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::GuardianRankRewardCharacterSaveGameData* Arena::CreateMaybeMessage< ::OakSave::GuardianRankRewardCharacterSaveGameData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::GuardianRankRewardCharacterSaveGameData >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::GuardianRankPerkCharacterSaveGameData* Arena::CreateMaybeMessage< ::OakSave::GuardianRankPerkCharacterSaveGameData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::GuardianRankPerkCharacterSaveGameData >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::GuardianRankCharacterSaveGameData* Arena::CreateMaybeMessage< ::OakSave::GuardianRankCharacterSaveGameData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::GuardianRankCharacterSaveGameData >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::CrewQuartersDecorationSaveData* Arena::CreateMaybeMessage< ::OakSave::CrewQuartersDecorationSaveData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::CrewQuartersDecorationSaveData >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::CrewQuartersSaveData* Arena::CreateMaybeMessage< ::OakSave::CrewQuartersSaveData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::CrewQuartersSaveData >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::CrewQuartersGunRackItemSaveData* Arena::CreateMaybeMessage< ::OakSave::CrewQuartersGunRackItemSaveData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::CrewQuartersGunRackItemSaveData >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::CrewQuartersGunRackSaveData* Arena::CreateMaybeMessage< ::OakSave::CrewQuartersGunRackSaveData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::CrewQuartersGunRackSaveData >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::EchoLogSaveGameData* Arena::CreateMaybeMessage< ::OakSave::EchoLogSaveGameData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::EchoLogSaveGameData >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::MapIDData* Arena::CreateMaybeMessage< ::OakSave::MapIDData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::MapIDData >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::GameStateSaveData* Arena::CreateMaybeMessage< ::OakSave::GameStateSaveData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::GameStateSaveData >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::ChallengeCategoryProgressSaveData* Arena::CreateMaybeMessage< ::OakSave::ChallengeCategoryProgressSaveData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::ChallengeCategoryProgressSaveData >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::OakPlayerCharacterAugmentSaveGameData* Arena::CreateMaybeMessage< ::OakSave::OakPlayerCharacterAugmentSaveGameData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::OakPlayerCharacterAugmentSaveGameData >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::OakPlayerCharacterSlotSaveGameData* Arena::CreateMaybeMessage< ::OakSave::OakPlayerCharacterSlotSaveGameData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::OakPlayerCharacterSlotSaveGameData >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::UITrackingSaveGameData* Arena::CreateMaybeMessage< ::OakSave::UITrackingSaveGameData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::UITrackingSaveGameData >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::PlanetCycleInfo* Arena::CreateMaybeMessage< ::OakSave::PlanetCycleInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::PlanetCycleInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::TimeOfDaySaveGameData* Arena::CreateMaybeMessage< ::OakSave::TimeOfDaySaveGameData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::TimeOfDaySaveGameData >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::LevelPersistence_Actor_SaveGameData* Arena::CreateMaybeMessage< ::OakSave::LevelPersistence_Actor_SaveGameData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::LevelPersistence_Actor_SaveGameData >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::LevelPersistence_Level_SaveGameData* Arena::CreateMaybeMessage< ::OakSave::LevelPersistence_Level_SaveGameData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::LevelPersistence_Level_SaveGameData >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::GbxZoneMapFODSavedLevelData* Arena::CreateMaybeMessage< ::OakSave::GbxZoneMapFODSavedLevelData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::GbxZoneMapFODSavedLevelData >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::GbxZoneMapFODSaveGameData* Arena::CreateMaybeMessage< ::OakSave::GbxZoneMapFODSaveGameData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::GbxZoneMapFODSaveGameData >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::Character_NicknameMappingsEntry* Arena::CreateMaybeMessage< ::OakSave::Character_NicknameMappingsEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::Character_NicknameMappingsEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::Character_ActiveLeagueInstanceForEventEntry* Arena::CreateMaybeMessage< ::OakSave::Character_ActiveLeagueInstanceForEventEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::Character_ActiveLeagueInstanceForEventEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::Character* Arena::CreateMaybeMessage< ::OakSave::Character >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::Character >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
