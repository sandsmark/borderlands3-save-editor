// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OakProfile.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_OakProfile_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_OakProfile_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "OakShared.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_OakProfile_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_OakProfile_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[19]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_OakProfile_2eproto;
namespace OakSave {
class CrewQuartersDecorationItemSaveGameData;
class CrewQuartersDecorationItemSaveGameDataDefaultTypeInternal;
extern CrewQuartersDecorationItemSaveGameDataDefaultTypeInternal _CrewQuartersDecorationItemSaveGameData_default_instance_;
class CrewQuartersRoomItemSaveGameData;
class CrewQuartersRoomItemSaveGameDataDefaultTypeInternal;
extern CrewQuartersRoomItemSaveGameDataDefaultTypeInternal _CrewQuartersRoomItemSaveGameData_default_instance_;
class GearSoldByFriendData;
class GearSoldByFriendDataDefaultTypeInternal;
extern GearSoldByFriendDataDefaultTypeInternal _GearSoldByFriendData_default_instance_;
class GuardianRankProfileData;
class GuardianRankProfileDataDefaultTypeInternal;
extern GuardianRankProfileDataDefaultTypeInternal _GuardianRankProfileData_default_instance_;
class GuardianRankRewardSaveGameData;
class GuardianRankRewardSaveGameDataDefaultTypeInternal;
extern GuardianRankRewardSaveGameDataDefaultTypeInternal _GuardianRankRewardSaveGameData_default_instance_;
class OakCustomizationSaveGameData;
class OakCustomizationSaveGameDataDefaultTypeInternal;
extern OakCustomizationSaveGameDataDefaultTypeInternal _OakCustomizationSaveGameData_default_instance_;
class OakFriendEncounterData;
class OakFriendEncounterDataDefaultTypeInternal;
extern OakFriendEncounterDataDefaultTypeInternal _OakFriendEncounterData_default_instance_;
class OakInventoryCustomizationPartInfo;
class OakInventoryCustomizationPartInfoDefaultTypeInternal;
extern OakInventoryCustomizationPartInfoDefaultTypeInternal _OakInventoryCustomizationPartInfo_default_instance_;
class OakMailItem;
class OakMailItemDefaultTypeInternal;
extern OakMailItemDefaultTypeInternal _OakMailItem_default_instance_;
class OakProfileLastInventoryFilterInfo;
class OakProfileLastInventoryFilterInfoDefaultTypeInternal;
extern OakProfileLastInventoryFilterInfoDefaultTypeInternal _OakProfileLastInventoryFilterInfo_default_instance_;
class OakProfileMenuTutorialInfo;
class OakProfileMenuTutorialInfoDefaultTypeInternal;
extern OakProfileMenuTutorialInfoDefaultTypeInternal _OakProfileMenuTutorialInfo_default_instance_;
class PlayerInputBinding_Axis;
class PlayerInputBinding_AxisDefaultTypeInternal;
extern PlayerInputBinding_AxisDefaultTypeInternal _PlayerInputBinding_Axis_default_instance_;
class PlayerInputBinding_Axis_Key;
class PlayerInputBinding_Axis_KeyDefaultTypeInternal;
extern PlayerInputBinding_Axis_KeyDefaultTypeInternal _PlayerInputBinding_Axis_Key_default_instance_;
class PlayerInputBinding_Button;
class PlayerInputBinding_ButtonDefaultTypeInternal;
extern PlayerInputBinding_ButtonDefaultTypeInternal _PlayerInputBinding_Button_default_instance_;
class PlayerInputBinding_Category;
class PlayerInputBinding_CategoryDefaultTypeInternal;
extern PlayerInputBinding_CategoryDefaultTypeInternal _PlayerInputBinding_Category_default_instance_;
class PlayerInputBindings;
class PlayerInputBindingsDefaultTypeInternal;
extern PlayerInputBindingsDefaultTypeInternal _PlayerInputBindings_default_instance_;
class Profile;
class ProfileDefaultTypeInternal;
extern ProfileDefaultTypeInternal _Profile_default_instance_;
class Profile_FriendEncountersEntry;
class Profile_FriendEncountersEntryDefaultTypeInternal;
extern Profile_FriendEncountersEntryDefaultTypeInternal _Profile_FriendEncountersEntry_default_instance_;
class RecentlyMetPlayer;
class RecentlyMetPlayerDefaultTypeInternal;
extern RecentlyMetPlayerDefaultTypeInternal _RecentlyMetPlayer_default_instance_;
}  // namespace OakSave
PROTOBUF_NAMESPACE_OPEN
template<> ::OakSave::CrewQuartersDecorationItemSaveGameData* Arena::CreateMaybeMessage<::OakSave::CrewQuartersDecorationItemSaveGameData>(Arena*);
template<> ::OakSave::CrewQuartersRoomItemSaveGameData* Arena::CreateMaybeMessage<::OakSave::CrewQuartersRoomItemSaveGameData>(Arena*);
template<> ::OakSave::GearSoldByFriendData* Arena::CreateMaybeMessage<::OakSave::GearSoldByFriendData>(Arena*);
template<> ::OakSave::GuardianRankProfileData* Arena::CreateMaybeMessage<::OakSave::GuardianRankProfileData>(Arena*);
template<> ::OakSave::GuardianRankRewardSaveGameData* Arena::CreateMaybeMessage<::OakSave::GuardianRankRewardSaveGameData>(Arena*);
template<> ::OakSave::OakCustomizationSaveGameData* Arena::CreateMaybeMessage<::OakSave::OakCustomizationSaveGameData>(Arena*);
template<> ::OakSave::OakFriendEncounterData* Arena::CreateMaybeMessage<::OakSave::OakFriendEncounterData>(Arena*);
template<> ::OakSave::OakInventoryCustomizationPartInfo* Arena::CreateMaybeMessage<::OakSave::OakInventoryCustomizationPartInfo>(Arena*);
template<> ::OakSave::OakMailItem* Arena::CreateMaybeMessage<::OakSave::OakMailItem>(Arena*);
template<> ::OakSave::OakProfileLastInventoryFilterInfo* Arena::CreateMaybeMessage<::OakSave::OakProfileLastInventoryFilterInfo>(Arena*);
template<> ::OakSave::OakProfileMenuTutorialInfo* Arena::CreateMaybeMessage<::OakSave::OakProfileMenuTutorialInfo>(Arena*);
template<> ::OakSave::PlayerInputBinding_Axis* Arena::CreateMaybeMessage<::OakSave::PlayerInputBinding_Axis>(Arena*);
template<> ::OakSave::PlayerInputBinding_Axis_Key* Arena::CreateMaybeMessage<::OakSave::PlayerInputBinding_Axis_Key>(Arena*);
template<> ::OakSave::PlayerInputBinding_Button* Arena::CreateMaybeMessage<::OakSave::PlayerInputBinding_Button>(Arena*);
template<> ::OakSave::PlayerInputBinding_Category* Arena::CreateMaybeMessage<::OakSave::PlayerInputBinding_Category>(Arena*);
template<> ::OakSave::PlayerInputBindings* Arena::CreateMaybeMessage<::OakSave::PlayerInputBindings>(Arena*);
template<> ::OakSave::Profile* Arena::CreateMaybeMessage<::OakSave::Profile>(Arena*);
template<> ::OakSave::Profile_FriendEncountersEntry* Arena::CreateMaybeMessage<::OakSave::Profile_FriendEncountersEntry>(Arena*);
template<> ::OakSave::RecentlyMetPlayer* Arena::CreateMaybeMessage<::OakSave::RecentlyMetPlayer>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace OakSave {

// ===================================================================

class PlayerInputBinding_Button PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.PlayerInputBinding_Button) */ {
 public:
  inline PlayerInputBinding_Button() : PlayerInputBinding_Button(nullptr) {};
  virtual ~PlayerInputBinding_Button();

  PlayerInputBinding_Button(const PlayerInputBinding_Button& from);
  PlayerInputBinding_Button(PlayerInputBinding_Button&& from) noexcept
    : PlayerInputBinding_Button() {
    *this = ::std::move(from);
  }

  inline PlayerInputBinding_Button& operator=(const PlayerInputBinding_Button& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerInputBinding_Button& operator=(PlayerInputBinding_Button&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerInputBinding_Button& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerInputBinding_Button* internal_default_instance() {
    return reinterpret_cast<const PlayerInputBinding_Button*>(
               &_PlayerInputBinding_Button_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PlayerInputBinding_Button& a, PlayerInputBinding_Button& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerInputBinding_Button* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerInputBinding_Button* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerInputBinding_Button* New() const final {
    return CreateMaybeMessage<PlayerInputBinding_Button>(nullptr);
  }

  PlayerInputBinding_Button* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerInputBinding_Button>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerInputBinding_Button& from);
  void MergeFrom(const PlayerInputBinding_Button& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerInputBinding_Button* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.PlayerInputBinding_Button";
  }
  protected:
  explicit PlayerInputBinding_Button(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakProfile_2eproto);
    return ::descriptor_table_OakProfile_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyNamesFieldNumber = 2,
    kRebindDataPathFieldNumber = 1,
  };
  // repeated string key_names = 2;
  int key_names_size() const;
  private:
  int _internal_key_names_size() const;
  public:
  void clear_key_names();
  const std::string& key_names(int index) const;
  std::string* mutable_key_names(int index);
  void set_key_names(int index, const std::string& value);
  void set_key_names(int index, std::string&& value);
  void set_key_names(int index, const char* value);
  void set_key_names(int index, const char* value, size_t size);
  std::string* add_key_names();
  void add_key_names(const std::string& value);
  void add_key_names(std::string&& value);
  void add_key_names(const char* value);
  void add_key_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& key_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_key_names();
  private:
  const std::string& _internal_key_names(int index) const;
  std::string* _internal_add_key_names();
  public:

  // string rebind_data_path = 1;
  void clear_rebind_data_path();
  const std::string& rebind_data_path() const;
  void set_rebind_data_path(const std::string& value);
  void set_rebind_data_path(std::string&& value);
  void set_rebind_data_path(const char* value);
  void set_rebind_data_path(const char* value, size_t size);
  std::string* mutable_rebind_data_path();
  std::string* release_rebind_data_path();
  void set_allocated_rebind_data_path(std::string* rebind_data_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_rebind_data_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_rebind_data_path(
      std::string* rebind_data_path);
  private:
  const std::string& _internal_rebind_data_path() const;
  void _internal_set_rebind_data_path(const std::string& value);
  std::string* _internal_mutable_rebind_data_path();
  public:

  // @@protoc_insertion_point(class_scope:OakSave.PlayerInputBinding_Button)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> key_names_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rebind_data_path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakProfile_2eproto;
};
// -------------------------------------------------------------------

class PlayerInputBinding_Axis_Key PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.PlayerInputBinding_Axis_Key) */ {
 public:
  inline PlayerInputBinding_Axis_Key() : PlayerInputBinding_Axis_Key(nullptr) {};
  virtual ~PlayerInputBinding_Axis_Key();

  PlayerInputBinding_Axis_Key(const PlayerInputBinding_Axis_Key& from);
  PlayerInputBinding_Axis_Key(PlayerInputBinding_Axis_Key&& from) noexcept
    : PlayerInputBinding_Axis_Key() {
    *this = ::std::move(from);
  }

  inline PlayerInputBinding_Axis_Key& operator=(const PlayerInputBinding_Axis_Key& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerInputBinding_Axis_Key& operator=(PlayerInputBinding_Axis_Key&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerInputBinding_Axis_Key& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerInputBinding_Axis_Key* internal_default_instance() {
    return reinterpret_cast<const PlayerInputBinding_Axis_Key*>(
               &_PlayerInputBinding_Axis_Key_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PlayerInputBinding_Axis_Key& a, PlayerInputBinding_Axis_Key& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerInputBinding_Axis_Key* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerInputBinding_Axis_Key* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerInputBinding_Axis_Key* New() const final {
    return CreateMaybeMessage<PlayerInputBinding_Axis_Key>(nullptr);
  }

  PlayerInputBinding_Axis_Key* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerInputBinding_Axis_Key>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerInputBinding_Axis_Key& from);
  void MergeFrom(const PlayerInputBinding_Axis_Key& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerInputBinding_Axis_Key* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.PlayerInputBinding_Axis_Key";
  }
  protected:
  explicit PlayerInputBinding_Axis_Key(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakProfile_2eproto);
    return ::descriptor_table_OakProfile_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyNameFieldNumber = 1,
    kScale3DFieldNumber = 2,
  };
  // string key_name = 1;
  void clear_key_name();
  const std::string& key_name() const;
  void set_key_name(const std::string& value);
  void set_key_name(std::string&& value);
  void set_key_name(const char* value);
  void set_key_name(const char* value, size_t size);
  std::string* mutable_key_name();
  std::string* release_key_name();
  void set_allocated_key_name(std::string* key_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key_name(
      std::string* key_name);
  private:
  const std::string& _internal_key_name() const;
  void _internal_set_key_name(const std::string& value);
  std::string* _internal_mutable_key_name();
  public:

  // .OakSave.Vec3 scale_3d = 2;
  bool has_scale_3d() const;
  private:
  bool _internal_has_scale_3d() const;
  public:
  void clear_scale_3d();
  const ::OakSave::Vec3& scale_3d() const;
  ::OakSave::Vec3* release_scale_3d();
  ::OakSave::Vec3* mutable_scale_3d();
  void set_allocated_scale_3d(::OakSave::Vec3* scale_3d);
  private:
  const ::OakSave::Vec3& _internal_scale_3d() const;
  ::OakSave::Vec3* _internal_mutable_scale_3d();
  public:
  void unsafe_arena_set_allocated_scale_3d(
      ::OakSave::Vec3* scale_3d);
  ::OakSave::Vec3* unsafe_arena_release_scale_3d();

  // @@protoc_insertion_point(class_scope:OakSave.PlayerInputBinding_Axis_Key)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_name_;
  ::OakSave::Vec3* scale_3d_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakProfile_2eproto;
};
// -------------------------------------------------------------------

class PlayerInputBinding_Axis PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.PlayerInputBinding_Axis) */ {
 public:
  inline PlayerInputBinding_Axis() : PlayerInputBinding_Axis(nullptr) {};
  virtual ~PlayerInputBinding_Axis();

  PlayerInputBinding_Axis(const PlayerInputBinding_Axis& from);
  PlayerInputBinding_Axis(PlayerInputBinding_Axis&& from) noexcept
    : PlayerInputBinding_Axis() {
    *this = ::std::move(from);
  }

  inline PlayerInputBinding_Axis& operator=(const PlayerInputBinding_Axis& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerInputBinding_Axis& operator=(PlayerInputBinding_Axis&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerInputBinding_Axis& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerInputBinding_Axis* internal_default_instance() {
    return reinterpret_cast<const PlayerInputBinding_Axis*>(
               &_PlayerInputBinding_Axis_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PlayerInputBinding_Axis& a, PlayerInputBinding_Axis& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerInputBinding_Axis* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerInputBinding_Axis* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerInputBinding_Axis* New() const final {
    return CreateMaybeMessage<PlayerInputBinding_Axis>(nullptr);
  }

  PlayerInputBinding_Axis* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerInputBinding_Axis>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerInputBinding_Axis& from);
  void MergeFrom(const PlayerInputBinding_Axis& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerInputBinding_Axis* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.PlayerInputBinding_Axis";
  }
  protected:
  explicit PlayerInputBinding_Axis(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakProfile_2eproto);
    return ::descriptor_table_OakProfile_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 2,
    kRebindDataPathFieldNumber = 1,
  };
  // repeated .OakSave.PlayerInputBinding_Axis_Key keys = 2;
  int keys_size() const;
  private:
  int _internal_keys_size() const;
  public:
  void clear_keys();
  ::OakSave::PlayerInputBinding_Axis_Key* mutable_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::PlayerInputBinding_Axis_Key >*
      mutable_keys();
  private:
  const ::OakSave::PlayerInputBinding_Axis_Key& _internal_keys(int index) const;
  ::OakSave::PlayerInputBinding_Axis_Key* _internal_add_keys();
  public:
  const ::OakSave::PlayerInputBinding_Axis_Key& keys(int index) const;
  ::OakSave::PlayerInputBinding_Axis_Key* add_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::PlayerInputBinding_Axis_Key >&
      keys() const;

  // string rebind_data_path = 1;
  void clear_rebind_data_path();
  const std::string& rebind_data_path() const;
  void set_rebind_data_path(const std::string& value);
  void set_rebind_data_path(std::string&& value);
  void set_rebind_data_path(const char* value);
  void set_rebind_data_path(const char* value, size_t size);
  std::string* mutable_rebind_data_path();
  std::string* release_rebind_data_path();
  void set_allocated_rebind_data_path(std::string* rebind_data_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_rebind_data_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_rebind_data_path(
      std::string* rebind_data_path);
  private:
  const std::string& _internal_rebind_data_path() const;
  void _internal_set_rebind_data_path(const std::string& value);
  std::string* _internal_mutable_rebind_data_path();
  public:

  // @@protoc_insertion_point(class_scope:OakSave.PlayerInputBinding_Axis)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::PlayerInputBinding_Axis_Key > keys_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rebind_data_path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakProfile_2eproto;
};
// -------------------------------------------------------------------

class PlayerInputBinding_Category PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.PlayerInputBinding_Category) */ {
 public:
  inline PlayerInputBinding_Category() : PlayerInputBinding_Category(nullptr) {};
  virtual ~PlayerInputBinding_Category();

  PlayerInputBinding_Category(const PlayerInputBinding_Category& from);
  PlayerInputBinding_Category(PlayerInputBinding_Category&& from) noexcept
    : PlayerInputBinding_Category() {
    *this = ::std::move(from);
  }

  inline PlayerInputBinding_Category& operator=(const PlayerInputBinding_Category& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerInputBinding_Category& operator=(PlayerInputBinding_Category&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerInputBinding_Category& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerInputBinding_Category* internal_default_instance() {
    return reinterpret_cast<const PlayerInputBinding_Category*>(
               &_PlayerInputBinding_Category_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PlayerInputBinding_Category& a, PlayerInputBinding_Category& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerInputBinding_Category* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerInputBinding_Category* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerInputBinding_Category* New() const final {
    return CreateMaybeMessage<PlayerInputBinding_Category>(nullptr);
  }

  PlayerInputBinding_Category* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerInputBinding_Category>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerInputBinding_Category& from);
  void MergeFrom(const PlayerInputBinding_Category& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerInputBinding_Category* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.PlayerInputBinding_Category";
  }
  protected:
  explicit PlayerInputBinding_Category(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakProfile_2eproto);
    return ::descriptor_table_OakProfile_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kButtonBindingsFieldNumber = 3,
    kAxisBindingsFieldNumber = 4,
    kCategoryDataPathFieldNumber = 1,
    kContextDataPathFieldNumber = 2,
  };
  // repeated .OakSave.PlayerInputBinding_Button button_bindings = 3;
  int button_bindings_size() const;
  private:
  int _internal_button_bindings_size() const;
  public:
  void clear_button_bindings();
  ::OakSave::PlayerInputBinding_Button* mutable_button_bindings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::PlayerInputBinding_Button >*
      mutable_button_bindings();
  private:
  const ::OakSave::PlayerInputBinding_Button& _internal_button_bindings(int index) const;
  ::OakSave::PlayerInputBinding_Button* _internal_add_button_bindings();
  public:
  const ::OakSave::PlayerInputBinding_Button& button_bindings(int index) const;
  ::OakSave::PlayerInputBinding_Button* add_button_bindings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::PlayerInputBinding_Button >&
      button_bindings() const;

  // repeated .OakSave.PlayerInputBinding_Axis axis_bindings = 4;
  int axis_bindings_size() const;
  private:
  int _internal_axis_bindings_size() const;
  public:
  void clear_axis_bindings();
  ::OakSave::PlayerInputBinding_Axis* mutable_axis_bindings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::PlayerInputBinding_Axis >*
      mutable_axis_bindings();
  private:
  const ::OakSave::PlayerInputBinding_Axis& _internal_axis_bindings(int index) const;
  ::OakSave::PlayerInputBinding_Axis* _internal_add_axis_bindings();
  public:
  const ::OakSave::PlayerInputBinding_Axis& axis_bindings(int index) const;
  ::OakSave::PlayerInputBinding_Axis* add_axis_bindings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::PlayerInputBinding_Axis >&
      axis_bindings() const;

  // string category_data_path = 1;
  void clear_category_data_path();
  const std::string& category_data_path() const;
  void set_category_data_path(const std::string& value);
  void set_category_data_path(std::string&& value);
  void set_category_data_path(const char* value);
  void set_category_data_path(const char* value, size_t size);
  std::string* mutable_category_data_path();
  std::string* release_category_data_path();
  void set_allocated_category_data_path(std::string* category_data_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_category_data_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_category_data_path(
      std::string* category_data_path);
  private:
  const std::string& _internal_category_data_path() const;
  void _internal_set_category_data_path(const std::string& value);
  std::string* _internal_mutable_category_data_path();
  public:

  // string context_data_path = 2;
  void clear_context_data_path();
  const std::string& context_data_path() const;
  void set_context_data_path(const std::string& value);
  void set_context_data_path(std::string&& value);
  void set_context_data_path(const char* value);
  void set_context_data_path(const char* value, size_t size);
  std::string* mutable_context_data_path();
  std::string* release_context_data_path();
  void set_allocated_context_data_path(std::string* context_data_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_context_data_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_context_data_path(
      std::string* context_data_path);
  private:
  const std::string& _internal_context_data_path() const;
  void _internal_set_context_data_path(const std::string& value);
  std::string* _internal_mutable_context_data_path();
  public:

  // @@protoc_insertion_point(class_scope:OakSave.PlayerInputBinding_Category)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::PlayerInputBinding_Button > button_bindings_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::PlayerInputBinding_Axis > axis_bindings_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr category_data_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr context_data_path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakProfile_2eproto;
};
// -------------------------------------------------------------------

class PlayerInputBindings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.PlayerInputBindings) */ {
 public:
  inline PlayerInputBindings() : PlayerInputBindings(nullptr) {};
  virtual ~PlayerInputBindings();

  PlayerInputBindings(const PlayerInputBindings& from);
  PlayerInputBindings(PlayerInputBindings&& from) noexcept
    : PlayerInputBindings() {
    *this = ::std::move(from);
  }

  inline PlayerInputBindings& operator=(const PlayerInputBindings& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerInputBindings& operator=(PlayerInputBindings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerInputBindings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerInputBindings* internal_default_instance() {
    return reinterpret_cast<const PlayerInputBindings*>(
               &_PlayerInputBindings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PlayerInputBindings& a, PlayerInputBindings& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerInputBindings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerInputBindings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerInputBindings* New() const final {
    return CreateMaybeMessage<PlayerInputBindings>(nullptr);
  }

  PlayerInputBindings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerInputBindings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerInputBindings& from);
  void MergeFrom(const PlayerInputBindings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerInputBindings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.PlayerInputBindings";
  }
  protected:
  explicit PlayerInputBindings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakProfile_2eproto);
    return ::descriptor_table_OakProfile_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCategoriesFieldNumber = 1,
  };
  // repeated .OakSave.PlayerInputBinding_Category categories = 1;
  int categories_size() const;
  private:
  int _internal_categories_size() const;
  public:
  void clear_categories();
  ::OakSave::PlayerInputBinding_Category* mutable_categories(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::PlayerInputBinding_Category >*
      mutable_categories();
  private:
  const ::OakSave::PlayerInputBinding_Category& _internal_categories(int index) const;
  ::OakSave::PlayerInputBinding_Category* _internal_add_categories();
  public:
  const ::OakSave::PlayerInputBinding_Category& categories(int index) const;
  ::OakSave::PlayerInputBinding_Category* add_categories();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::PlayerInputBinding_Category >&
      categories() const;

  // @@protoc_insertion_point(class_scope:OakSave.PlayerInputBindings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::PlayerInputBinding_Category > categories_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakProfile_2eproto;
};
// -------------------------------------------------------------------

class OakProfileLastInventoryFilterInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.OakProfileLastInventoryFilterInfo) */ {
 public:
  inline OakProfileLastInventoryFilterInfo() : OakProfileLastInventoryFilterInfo(nullptr) {};
  virtual ~OakProfileLastInventoryFilterInfo();

  OakProfileLastInventoryFilterInfo(const OakProfileLastInventoryFilterInfo& from);
  OakProfileLastInventoryFilterInfo(OakProfileLastInventoryFilterInfo&& from) noexcept
    : OakProfileLastInventoryFilterInfo() {
    *this = ::std::move(from);
  }

  inline OakProfileLastInventoryFilterInfo& operator=(const OakProfileLastInventoryFilterInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline OakProfileLastInventoryFilterInfo& operator=(OakProfileLastInventoryFilterInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OakProfileLastInventoryFilterInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OakProfileLastInventoryFilterInfo* internal_default_instance() {
    return reinterpret_cast<const OakProfileLastInventoryFilterInfo*>(
               &_OakProfileLastInventoryFilterInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(OakProfileLastInventoryFilterInfo& a, OakProfileLastInventoryFilterInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(OakProfileLastInventoryFilterInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OakProfileLastInventoryFilterInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OakProfileLastInventoryFilterInfo* New() const final {
    return CreateMaybeMessage<OakProfileLastInventoryFilterInfo>(nullptr);
  }

  OakProfileLastInventoryFilterInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OakProfileLastInventoryFilterInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OakProfileLastInventoryFilterInfo& from);
  void MergeFrom(const OakProfileLastInventoryFilterInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OakProfileLastInventoryFilterInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.OakProfileLastInventoryFilterInfo";
  }
  protected:
  explicit OakProfileLastInventoryFilterInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakProfile_2eproto);
    return ::descriptor_table_OakProfile_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlotTypeIdFieldNumber = 1,
    kLastFilterIndexFieldNumber = 2,
  };
  // string slot_type_id = 1;
  void clear_slot_type_id();
  const std::string& slot_type_id() const;
  void set_slot_type_id(const std::string& value);
  void set_slot_type_id(std::string&& value);
  void set_slot_type_id(const char* value);
  void set_slot_type_id(const char* value, size_t size);
  std::string* mutable_slot_type_id();
  std::string* release_slot_type_id();
  void set_allocated_slot_type_id(std::string* slot_type_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_slot_type_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_slot_type_id(
      std::string* slot_type_id);
  private:
  const std::string& _internal_slot_type_id() const;
  void _internal_set_slot_type_id(const std::string& value);
  std::string* _internal_mutable_slot_type_id();
  public:

  // int32 last_filter_index = 2;
  void clear_last_filter_index();
  ::PROTOBUF_NAMESPACE_ID::int32 last_filter_index() const;
  void set_last_filter_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_last_filter_index() const;
  void _internal_set_last_filter_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:OakSave.OakProfileLastInventoryFilterInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr slot_type_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 last_filter_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakProfile_2eproto;
};
// -------------------------------------------------------------------

class OakProfileMenuTutorialInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.OakProfileMenuTutorialInfo) */ {
 public:
  inline OakProfileMenuTutorialInfo() : OakProfileMenuTutorialInfo(nullptr) {};
  virtual ~OakProfileMenuTutorialInfo();

  OakProfileMenuTutorialInfo(const OakProfileMenuTutorialInfo& from);
  OakProfileMenuTutorialInfo(OakProfileMenuTutorialInfo&& from) noexcept
    : OakProfileMenuTutorialInfo() {
    *this = ::std::move(from);
  }

  inline OakProfileMenuTutorialInfo& operator=(const OakProfileMenuTutorialInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline OakProfileMenuTutorialInfo& operator=(OakProfileMenuTutorialInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OakProfileMenuTutorialInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OakProfileMenuTutorialInfo* internal_default_instance() {
    return reinterpret_cast<const OakProfileMenuTutorialInfo*>(
               &_OakProfileMenuTutorialInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(OakProfileMenuTutorialInfo& a, OakProfileMenuTutorialInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(OakProfileMenuTutorialInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OakProfileMenuTutorialInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OakProfileMenuTutorialInfo* New() const final {
    return CreateMaybeMessage<OakProfileMenuTutorialInfo>(nullptr);
  }

  OakProfileMenuTutorialInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OakProfileMenuTutorialInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OakProfileMenuTutorialInfo& from);
  void MergeFrom(const OakProfileMenuTutorialInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OakProfileMenuTutorialInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.OakProfileMenuTutorialInfo";
  }
  protected:
  explicit OakProfileMenuTutorialInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakProfile_2eproto);
    return ::descriptor_table_OakProfile_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeenTutorialsFieldNumber = 1,
    kTutorialsDisabledFieldNumber = 2,
    kTutorialsAllowedInNonGameModesFieldNumber = 3,
  };
  // repeated string seen_tutorials = 1;
  int seen_tutorials_size() const;
  private:
  int _internal_seen_tutorials_size() const;
  public:
  void clear_seen_tutorials();
  const std::string& seen_tutorials(int index) const;
  std::string* mutable_seen_tutorials(int index);
  void set_seen_tutorials(int index, const std::string& value);
  void set_seen_tutorials(int index, std::string&& value);
  void set_seen_tutorials(int index, const char* value);
  void set_seen_tutorials(int index, const char* value, size_t size);
  std::string* add_seen_tutorials();
  void add_seen_tutorials(const std::string& value);
  void add_seen_tutorials(std::string&& value);
  void add_seen_tutorials(const char* value);
  void add_seen_tutorials(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& seen_tutorials() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_seen_tutorials();
  private:
  const std::string& _internal_seen_tutorials(int index) const;
  std::string* _internal_add_seen_tutorials();
  public:

  // bool tutorials_disabled = 2;
  void clear_tutorials_disabled();
  bool tutorials_disabled() const;
  void set_tutorials_disabled(bool value);
  private:
  bool _internal_tutorials_disabled() const;
  void _internal_set_tutorials_disabled(bool value);
  public:

  // bool tutorials_allowed_in_non_game_modes = 3;
  void clear_tutorials_allowed_in_non_game_modes();
  bool tutorials_allowed_in_non_game_modes() const;
  void set_tutorials_allowed_in_non_game_modes(bool value);
  private:
  bool _internal_tutorials_allowed_in_non_game_modes() const;
  void _internal_set_tutorials_allowed_in_non_game_modes(bool value);
  public:

  // @@protoc_insertion_point(class_scope:OakSave.OakProfileMenuTutorialInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> seen_tutorials_;
  bool tutorials_disabled_;
  bool tutorials_allowed_in_non_game_modes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakProfile_2eproto;
};
// -------------------------------------------------------------------

class OakFriendEncounterData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.OakFriendEncounterData) */ {
 public:
  inline OakFriendEncounterData() : OakFriendEncounterData(nullptr) {};
  virtual ~OakFriendEncounterData();

  OakFriendEncounterData(const OakFriendEncounterData& from);
  OakFriendEncounterData(OakFriendEncounterData&& from) noexcept
    : OakFriendEncounterData() {
    *this = ::std::move(from);
  }

  inline OakFriendEncounterData& operator=(const OakFriendEncounterData& from) {
    CopyFrom(from);
    return *this;
  }
  inline OakFriendEncounterData& operator=(OakFriendEncounterData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OakFriendEncounterData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OakFriendEncounterData* internal_default_instance() {
    return reinterpret_cast<const OakFriendEncounterData*>(
               &_OakFriendEncounterData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(OakFriendEncounterData& a, OakFriendEncounterData& b) {
    a.Swap(&b);
  }
  inline void Swap(OakFriendEncounterData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OakFriendEncounterData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OakFriendEncounterData* New() const final {
    return CreateMaybeMessage<OakFriendEncounterData>(nullptr);
  }

  OakFriendEncounterData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OakFriendEncounterData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OakFriendEncounterData& from);
  void MergeFrom(const OakFriendEncounterData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OakFriendEncounterData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.OakFriendEncounterData";
  }
  protected:
  explicit OakFriendEncounterData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakProfile_2eproto);
    return ::descriptor_table_OakProfile_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeLastEncounterFieldNumber = 2,
    kNumEncountersFieldNumber = 1,
  };
  // int64 time_last_encounter = 2;
  void clear_time_last_encounter();
  ::PROTOBUF_NAMESPACE_ID::int64 time_last_encounter() const;
  void set_time_last_encounter(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time_last_encounter() const;
  void _internal_set_time_last_encounter(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 num_encounters = 1;
  void clear_num_encounters();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_encounters() const;
  void set_num_encounters(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_encounters() const;
  void _internal_set_num_encounters(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:OakSave.OakFriendEncounterData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_last_encounter_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_encounters_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakProfile_2eproto;
};
// -------------------------------------------------------------------

class OakMailItem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.OakMailItem) */ {
 public:
  inline OakMailItem() : OakMailItem(nullptr) {};
  virtual ~OakMailItem();

  OakMailItem(const OakMailItem& from);
  OakMailItem(OakMailItem&& from) noexcept
    : OakMailItem() {
    *this = ::std::move(from);
  }

  inline OakMailItem& operator=(const OakMailItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline OakMailItem& operator=(OakMailItem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OakMailItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OakMailItem* internal_default_instance() {
    return reinterpret_cast<const OakMailItem*>(
               &_OakMailItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(OakMailItem& a, OakMailItem& b) {
    a.Swap(&b);
  }
  inline void Swap(OakMailItem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OakMailItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OakMailItem* New() const final {
    return CreateMaybeMessage<OakMailItem>(nullptr);
  }

  OakMailItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OakMailItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OakMailItem& from);
  void MergeFrom(const OakMailItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OakMailItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.OakMailItem";
  }
  protected:
  explicit OakMailItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakProfile_2eproto);
    return ::descriptor_table_OakProfile_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSenderDisplayNameFieldNumber = 2,
    kSubjectFieldNumber = 3,
    kBodyFieldNumber = 4,
    kGearSerialNumberFieldNumber = 5,
    kMailGuidFieldNumber = 6,
    kFromPlayerIdFieldNumber = 9,
    kMailItemTypeFieldNumber = 1,
    kHasBeenReadFieldNumber = 10,
    kDateSentFieldNumber = 7,
    kExpirationDateFieldNumber = 8,
  };
  // string sender_display_name = 2;
  void clear_sender_display_name();
  const std::string& sender_display_name() const;
  void set_sender_display_name(const std::string& value);
  void set_sender_display_name(std::string&& value);
  void set_sender_display_name(const char* value);
  void set_sender_display_name(const char* value, size_t size);
  std::string* mutable_sender_display_name();
  std::string* release_sender_display_name();
  void set_allocated_sender_display_name(std::string* sender_display_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sender_display_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sender_display_name(
      std::string* sender_display_name);
  private:
  const std::string& _internal_sender_display_name() const;
  void _internal_set_sender_display_name(const std::string& value);
  std::string* _internal_mutable_sender_display_name();
  public:

  // string subject = 3;
  void clear_subject();
  const std::string& subject() const;
  void set_subject(const std::string& value);
  void set_subject(std::string&& value);
  void set_subject(const char* value);
  void set_subject(const char* value, size_t size);
  std::string* mutable_subject();
  std::string* release_subject();
  void set_allocated_subject(std::string* subject);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_subject();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subject(
      std::string* subject);
  private:
  const std::string& _internal_subject() const;
  void _internal_set_subject(const std::string& value);
  std::string* _internal_mutable_subject();
  public:

  // string body = 4;
  void clear_body();
  const std::string& body() const;
  void set_body(const std::string& value);
  void set_body(std::string&& value);
  void set_body(const char* value);
  void set_body(const char* value, size_t size);
  std::string* mutable_body();
  std::string* release_body();
  void set_allocated_body(std::string* body);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_body();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_body(
      std::string* body);
  private:
  const std::string& _internal_body() const;
  void _internal_set_body(const std::string& value);
  std::string* _internal_mutable_body();
  public:

  // string gear_serial_number = 5;
  void clear_gear_serial_number();
  const std::string& gear_serial_number() const;
  void set_gear_serial_number(const std::string& value);
  void set_gear_serial_number(std::string&& value);
  void set_gear_serial_number(const char* value);
  void set_gear_serial_number(const char* value, size_t size);
  std::string* mutable_gear_serial_number();
  std::string* release_gear_serial_number();
  void set_allocated_gear_serial_number(std::string* gear_serial_number);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_gear_serial_number();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_gear_serial_number(
      std::string* gear_serial_number);
  private:
  const std::string& _internal_gear_serial_number() const;
  void _internal_set_gear_serial_number(const std::string& value);
  std::string* _internal_mutable_gear_serial_number();
  public:

  // string mail_guid = 6;
  void clear_mail_guid();
  const std::string& mail_guid() const;
  void set_mail_guid(const std::string& value);
  void set_mail_guid(std::string&& value);
  void set_mail_guid(const char* value);
  void set_mail_guid(const char* value, size_t size);
  std::string* mutable_mail_guid();
  std::string* release_mail_guid();
  void set_allocated_mail_guid(std::string* mail_guid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mail_guid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mail_guid(
      std::string* mail_guid);
  private:
  const std::string& _internal_mail_guid() const;
  void _internal_set_mail_guid(const std::string& value);
  std::string* _internal_mutable_mail_guid();
  public:

  // string from_player_id = 9;
  void clear_from_player_id();
  const std::string& from_player_id() const;
  void set_from_player_id(const std::string& value);
  void set_from_player_id(std::string&& value);
  void set_from_player_id(const char* value);
  void set_from_player_id(const char* value, size_t size);
  std::string* mutable_from_player_id();
  std::string* release_from_player_id();
  void set_allocated_from_player_id(std::string* from_player_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_from_player_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_from_player_id(
      std::string* from_player_id);
  private:
  const std::string& _internal_from_player_id() const;
  void _internal_set_from_player_id(const std::string& value);
  std::string* _internal_mutable_from_player_id();
  public:

  // uint32 mail_item_type = 1;
  void clear_mail_item_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 mail_item_type() const;
  void set_mail_item_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mail_item_type() const;
  void _internal_set_mail_item_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool has_been_read = 10;
  void clear_has_been_read();
  bool has_been_read() const;
  void set_has_been_read(bool value);
  private:
  bool _internal_has_been_read() const;
  void _internal_set_has_been_read(bool value);
  public:

  // int64 date_sent = 7;
  void clear_date_sent();
  ::PROTOBUF_NAMESPACE_ID::int64 date_sent() const;
  void set_date_sent(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_date_sent() const;
  void _internal_set_date_sent(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 expiration_date = 8;
  void clear_expiration_date();
  ::PROTOBUF_NAMESPACE_ID::int64 expiration_date() const;
  void set_expiration_date(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_expiration_date() const;
  void _internal_set_expiration_date(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:OakSave.OakMailItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_display_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subject_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gear_serial_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mail_guid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_player_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mail_item_type_;
  bool has_been_read_;
  ::PROTOBUF_NAMESPACE_ID::int64 date_sent_;
  ::PROTOBUF_NAMESPACE_ID::int64 expiration_date_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakProfile_2eproto;
};
// -------------------------------------------------------------------

class GearSoldByFriendData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.GearSoldByFriendData) */ {
 public:
  inline GearSoldByFriendData() : GearSoldByFriendData(nullptr) {};
  virtual ~GearSoldByFriendData();

  GearSoldByFriendData(const GearSoldByFriendData& from);
  GearSoldByFriendData(GearSoldByFriendData&& from) noexcept
    : GearSoldByFriendData() {
    *this = ::std::move(from);
  }

  inline GearSoldByFriendData& operator=(const GearSoldByFriendData& from) {
    CopyFrom(from);
    return *this;
  }
  inline GearSoldByFriendData& operator=(GearSoldByFriendData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GearSoldByFriendData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GearSoldByFriendData* internal_default_instance() {
    return reinterpret_cast<const GearSoldByFriendData*>(
               &_GearSoldByFriendData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GearSoldByFriendData& a, GearSoldByFriendData& b) {
    a.Swap(&b);
  }
  inline void Swap(GearSoldByFriendData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GearSoldByFriendData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GearSoldByFriendData* New() const final {
    return CreateMaybeMessage<GearSoldByFriendData>(nullptr);
  }

  GearSoldByFriendData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GearSoldByFriendData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GearSoldByFriendData& from);
  void MergeFrom(const GearSoldByFriendData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GearSoldByFriendData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.GearSoldByFriendData";
  }
  protected:
  explicit GearSoldByFriendData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakProfile_2eproto);
    return ::descriptor_table_OakProfile_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGearSerialNumberFieldNumber = 1,
    kFriendNetIdFieldNumber = 3,
    kPlayerClassIdentifierHashFieldNumber = 2,
  };
  // string gear_serial_number = 1;
  void clear_gear_serial_number();
  const std::string& gear_serial_number() const;
  void set_gear_serial_number(const std::string& value);
  void set_gear_serial_number(std::string&& value);
  void set_gear_serial_number(const char* value);
  void set_gear_serial_number(const char* value, size_t size);
  std::string* mutable_gear_serial_number();
  std::string* release_gear_serial_number();
  void set_allocated_gear_serial_number(std::string* gear_serial_number);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_gear_serial_number();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_gear_serial_number(
      std::string* gear_serial_number);
  private:
  const std::string& _internal_gear_serial_number() const;
  void _internal_set_gear_serial_number(const std::string& value);
  std::string* _internal_mutable_gear_serial_number();
  public:

  // string friend_net_id = 3;
  void clear_friend_net_id();
  const std::string& friend_net_id() const;
  void set_friend_net_id(const std::string& value);
  void set_friend_net_id(std::string&& value);
  void set_friend_net_id(const char* value);
  void set_friend_net_id(const char* value, size_t size);
  std::string* mutable_friend_net_id();
  std::string* release_friend_net_id();
  void set_allocated_friend_net_id(std::string* friend_net_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_friend_net_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_friend_net_id(
      std::string* friend_net_id);
  private:
  const std::string& _internal_friend_net_id() const;
  void _internal_set_friend_net_id(const std::string& value);
  std::string* _internal_mutable_friend_net_id();
  public:

  // int32 player_class_identifier_hash = 2;
  void clear_player_class_identifier_hash();
  ::PROTOBUF_NAMESPACE_ID::int32 player_class_identifier_hash() const;
  void set_player_class_identifier_hash(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_player_class_identifier_hash() const;
  void _internal_set_player_class_identifier_hash(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:OakSave.GearSoldByFriendData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gear_serial_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr friend_net_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 player_class_identifier_hash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakProfile_2eproto;
};
// -------------------------------------------------------------------

class OakCustomizationSaveGameData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.OakCustomizationSaveGameData) */ {
 public:
  inline OakCustomizationSaveGameData() : OakCustomizationSaveGameData(nullptr) {};
  virtual ~OakCustomizationSaveGameData();

  OakCustomizationSaveGameData(const OakCustomizationSaveGameData& from);
  OakCustomizationSaveGameData(OakCustomizationSaveGameData&& from) noexcept
    : OakCustomizationSaveGameData() {
    *this = ::std::move(from);
  }

  inline OakCustomizationSaveGameData& operator=(const OakCustomizationSaveGameData& from) {
    CopyFrom(from);
    return *this;
  }
  inline OakCustomizationSaveGameData& operator=(OakCustomizationSaveGameData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OakCustomizationSaveGameData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OakCustomizationSaveGameData* internal_default_instance() {
    return reinterpret_cast<const OakCustomizationSaveGameData*>(
               &_OakCustomizationSaveGameData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(OakCustomizationSaveGameData& a, OakCustomizationSaveGameData& b) {
    a.Swap(&b);
  }
  inline void Swap(OakCustomizationSaveGameData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OakCustomizationSaveGameData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OakCustomizationSaveGameData* New() const final {
    return CreateMaybeMessage<OakCustomizationSaveGameData>(nullptr);
  }

  OakCustomizationSaveGameData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OakCustomizationSaveGameData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OakCustomizationSaveGameData& from);
  void MergeFrom(const OakCustomizationSaveGameData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OakCustomizationSaveGameData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.OakCustomizationSaveGameData";
  }
  protected:
  explicit OakCustomizationSaveGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakProfile_2eproto);
    return ::descriptor_table_OakProfile_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomizationAssetPathFieldNumber = 2,
    kIsNewFieldNumber = 1,
  };
  // string customization_asset_path = 2;
  void clear_customization_asset_path();
  const std::string& customization_asset_path() const;
  void set_customization_asset_path(const std::string& value);
  void set_customization_asset_path(std::string&& value);
  void set_customization_asset_path(const char* value);
  void set_customization_asset_path(const char* value, size_t size);
  std::string* mutable_customization_asset_path();
  std::string* release_customization_asset_path();
  void set_allocated_customization_asset_path(std::string* customization_asset_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_customization_asset_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_customization_asset_path(
      std::string* customization_asset_path);
  private:
  const std::string& _internal_customization_asset_path() const;
  void _internal_set_customization_asset_path(const std::string& value);
  std::string* _internal_mutable_customization_asset_path();
  public:

  // bool is_new = 1;
  void clear_is_new();
  bool is_new() const;
  void set_is_new(bool value);
  private:
  bool _internal_is_new() const;
  void _internal_set_is_new(bool value);
  public:

  // @@protoc_insertion_point(class_scope:OakSave.OakCustomizationSaveGameData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customization_asset_path_;
  bool is_new_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakProfile_2eproto;
};
// -------------------------------------------------------------------

class OakInventoryCustomizationPartInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.OakInventoryCustomizationPartInfo) */ {
 public:
  inline OakInventoryCustomizationPartInfo() : OakInventoryCustomizationPartInfo(nullptr) {};
  virtual ~OakInventoryCustomizationPartInfo();

  OakInventoryCustomizationPartInfo(const OakInventoryCustomizationPartInfo& from);
  OakInventoryCustomizationPartInfo(OakInventoryCustomizationPartInfo&& from) noexcept
    : OakInventoryCustomizationPartInfo() {
    *this = ::std::move(from);
  }

  inline OakInventoryCustomizationPartInfo& operator=(const OakInventoryCustomizationPartInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline OakInventoryCustomizationPartInfo& operator=(OakInventoryCustomizationPartInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OakInventoryCustomizationPartInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OakInventoryCustomizationPartInfo* internal_default_instance() {
    return reinterpret_cast<const OakInventoryCustomizationPartInfo*>(
               &_OakInventoryCustomizationPartInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(OakInventoryCustomizationPartInfo& a, OakInventoryCustomizationPartInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(OakInventoryCustomizationPartInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OakInventoryCustomizationPartInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OakInventoryCustomizationPartInfo* New() const final {
    return CreateMaybeMessage<OakInventoryCustomizationPartInfo>(nullptr);
  }

  OakInventoryCustomizationPartInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OakInventoryCustomizationPartInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OakInventoryCustomizationPartInfo& from);
  void MergeFrom(const OakInventoryCustomizationPartInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OakInventoryCustomizationPartInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.OakInventoryCustomizationPartInfo";
  }
  protected:
  explicit OakInventoryCustomizationPartInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakProfile_2eproto);
    return ::descriptor_table_OakProfile_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomizationPartHashFieldNumber = 1,
    kIsNewFieldNumber = 2,
  };
  // uint32 customization_part_hash = 1;
  void clear_customization_part_hash();
  ::PROTOBUF_NAMESPACE_ID::uint32 customization_part_hash() const;
  void set_customization_part_hash(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_customization_part_hash() const;
  void _internal_set_customization_part_hash(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool is_new = 2;
  void clear_is_new();
  bool is_new() const;
  void set_is_new(bool value);
  private:
  bool _internal_is_new() const;
  void _internal_set_is_new(bool value);
  public:

  // @@protoc_insertion_point(class_scope:OakSave.OakInventoryCustomizationPartInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 customization_part_hash_;
  bool is_new_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakProfile_2eproto;
};
// -------------------------------------------------------------------

class GuardianRankRewardSaveGameData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.GuardianRankRewardSaveGameData) */ {
 public:
  inline GuardianRankRewardSaveGameData() : GuardianRankRewardSaveGameData(nullptr) {};
  virtual ~GuardianRankRewardSaveGameData();

  GuardianRankRewardSaveGameData(const GuardianRankRewardSaveGameData& from);
  GuardianRankRewardSaveGameData(GuardianRankRewardSaveGameData&& from) noexcept
    : GuardianRankRewardSaveGameData() {
    *this = ::std::move(from);
  }

  inline GuardianRankRewardSaveGameData& operator=(const GuardianRankRewardSaveGameData& from) {
    CopyFrom(from);
    return *this;
  }
  inline GuardianRankRewardSaveGameData& operator=(GuardianRankRewardSaveGameData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GuardianRankRewardSaveGameData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GuardianRankRewardSaveGameData* internal_default_instance() {
    return reinterpret_cast<const GuardianRankRewardSaveGameData*>(
               &_GuardianRankRewardSaveGameData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GuardianRankRewardSaveGameData& a, GuardianRankRewardSaveGameData& b) {
    a.Swap(&b);
  }
  inline void Swap(GuardianRankRewardSaveGameData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GuardianRankRewardSaveGameData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GuardianRankRewardSaveGameData* New() const final {
    return CreateMaybeMessage<GuardianRankRewardSaveGameData>(nullptr);
  }

  GuardianRankRewardSaveGameData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GuardianRankRewardSaveGameData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GuardianRankRewardSaveGameData& from);
  void MergeFrom(const GuardianRankRewardSaveGameData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GuardianRankRewardSaveGameData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.GuardianRankRewardSaveGameData";
  }
  protected:
  explicit GuardianRankRewardSaveGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakProfile_2eproto);
    return ::descriptor_table_OakProfile_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRewardDataPathFieldNumber = 2,
    kNumTokensFieldNumber = 1,
  };
  // string reward_data_path = 2;
  void clear_reward_data_path();
  const std::string& reward_data_path() const;
  void set_reward_data_path(const std::string& value);
  void set_reward_data_path(std::string&& value);
  void set_reward_data_path(const char* value);
  void set_reward_data_path(const char* value, size_t size);
  std::string* mutable_reward_data_path();
  std::string* release_reward_data_path();
  void set_allocated_reward_data_path(std::string* reward_data_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_reward_data_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_reward_data_path(
      std::string* reward_data_path);
  private:
  const std::string& _internal_reward_data_path() const;
  void _internal_set_reward_data_path(const std::string& value);
  std::string* _internal_mutable_reward_data_path();
  public:

  // int32 num_tokens = 1;
  void clear_num_tokens();
  ::PROTOBUF_NAMESPACE_ID::int32 num_tokens() const;
  void set_num_tokens(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_tokens() const;
  void _internal_set_num_tokens(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:OakSave.GuardianRankRewardSaveGameData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reward_data_path_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_tokens_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakProfile_2eproto;
};
// -------------------------------------------------------------------

class GuardianRankProfileData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.GuardianRankProfileData) */ {
 public:
  inline GuardianRankProfileData() : GuardianRankProfileData(nullptr) {};
  virtual ~GuardianRankProfileData();

  GuardianRankProfileData(const GuardianRankProfileData& from);
  GuardianRankProfileData(GuardianRankProfileData&& from) noexcept
    : GuardianRankProfileData() {
    *this = ::std::move(from);
  }

  inline GuardianRankProfileData& operator=(const GuardianRankProfileData& from) {
    CopyFrom(from);
    return *this;
  }
  inline GuardianRankProfileData& operator=(GuardianRankProfileData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GuardianRankProfileData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GuardianRankProfileData* internal_default_instance() {
    return reinterpret_cast<const GuardianRankProfileData*>(
               &_GuardianRankProfileData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GuardianRankProfileData& a, GuardianRankProfileData& b) {
    a.Swap(&b);
  }
  inline void Swap(GuardianRankProfileData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GuardianRankProfileData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GuardianRankProfileData* New() const final {
    return CreateMaybeMessage<GuardianRankProfileData>(nullptr);
  }

  GuardianRankProfileData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GuardianRankProfileData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GuardianRankProfileData& from);
  void MergeFrom(const GuardianRankProfileData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GuardianRankProfileData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.GuardianRankProfileData";
  }
  protected:
  explicit GuardianRankProfileData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakProfile_2eproto);
    return ::descriptor_table_OakProfile_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRankRewardsFieldNumber = 2,
    kAvailableTokensFieldNumber = 1,
    kGuardianRankFieldNumber = 3,
    kGuardianExperienceFieldNumber = 4,
    kGuardianRewardRandomSeedFieldNumber = 5,
    kNewGuardianExperienceFieldNumber = 6,
  };
  // repeated .OakSave.GuardianRankRewardSaveGameData rank_rewards = 2;
  int rank_rewards_size() const;
  private:
  int _internal_rank_rewards_size() const;
  public:
  void clear_rank_rewards();
  ::OakSave::GuardianRankRewardSaveGameData* mutable_rank_rewards(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::GuardianRankRewardSaveGameData >*
      mutable_rank_rewards();
  private:
  const ::OakSave::GuardianRankRewardSaveGameData& _internal_rank_rewards(int index) const;
  ::OakSave::GuardianRankRewardSaveGameData* _internal_add_rank_rewards();
  public:
  const ::OakSave::GuardianRankRewardSaveGameData& rank_rewards(int index) const;
  ::OakSave::GuardianRankRewardSaveGameData* add_rank_rewards();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::GuardianRankRewardSaveGameData >&
      rank_rewards() const;

  // int32 available_tokens = 1;
  void clear_available_tokens();
  ::PROTOBUF_NAMESPACE_ID::int32 available_tokens() const;
  void set_available_tokens(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_available_tokens() const;
  void _internal_set_available_tokens(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 guardian_rank = 3;
  void clear_guardian_rank();
  ::PROTOBUF_NAMESPACE_ID::int32 guardian_rank() const;
  void set_guardian_rank(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_guardian_rank() const;
  void _internal_set_guardian_rank(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 guardian_experience = 4;
  void clear_guardian_experience();
  ::PROTOBUF_NAMESPACE_ID::int32 guardian_experience() const;
  void set_guardian_experience(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_guardian_experience() const;
  void _internal_set_guardian_experience(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 guardian_reward_random_seed = 5;
  void clear_guardian_reward_random_seed();
  ::PROTOBUF_NAMESPACE_ID::int32 guardian_reward_random_seed() const;
  void set_guardian_reward_random_seed(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_guardian_reward_random_seed() const;
  void _internal_set_guardian_reward_random_seed(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 new_guardian_experience = 6;
  void clear_new_guardian_experience();
  ::PROTOBUF_NAMESPACE_ID::int64 new_guardian_experience() const;
  void set_new_guardian_experience(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_new_guardian_experience() const;
  void _internal_set_new_guardian_experience(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:OakSave.GuardianRankProfileData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::GuardianRankRewardSaveGameData > rank_rewards_;
  ::PROTOBUF_NAMESPACE_ID::int32 available_tokens_;
  ::PROTOBUF_NAMESPACE_ID::int32 guardian_rank_;
  ::PROTOBUF_NAMESPACE_ID::int32 guardian_experience_;
  ::PROTOBUF_NAMESPACE_ID::int32 guardian_reward_random_seed_;
  ::PROTOBUF_NAMESPACE_ID::int64 new_guardian_experience_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakProfile_2eproto;
};
// -------------------------------------------------------------------

class CrewQuartersDecorationItemSaveGameData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.CrewQuartersDecorationItemSaveGameData) */ {
 public:
  inline CrewQuartersDecorationItemSaveGameData() : CrewQuartersDecorationItemSaveGameData(nullptr) {};
  virtual ~CrewQuartersDecorationItemSaveGameData();

  CrewQuartersDecorationItemSaveGameData(const CrewQuartersDecorationItemSaveGameData& from);
  CrewQuartersDecorationItemSaveGameData(CrewQuartersDecorationItemSaveGameData&& from) noexcept
    : CrewQuartersDecorationItemSaveGameData() {
    *this = ::std::move(from);
  }

  inline CrewQuartersDecorationItemSaveGameData& operator=(const CrewQuartersDecorationItemSaveGameData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CrewQuartersDecorationItemSaveGameData& operator=(CrewQuartersDecorationItemSaveGameData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CrewQuartersDecorationItemSaveGameData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CrewQuartersDecorationItemSaveGameData* internal_default_instance() {
    return reinterpret_cast<const CrewQuartersDecorationItemSaveGameData*>(
               &_CrewQuartersDecorationItemSaveGameData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CrewQuartersDecorationItemSaveGameData& a, CrewQuartersDecorationItemSaveGameData& b) {
    a.Swap(&b);
  }
  inline void Swap(CrewQuartersDecorationItemSaveGameData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CrewQuartersDecorationItemSaveGameData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CrewQuartersDecorationItemSaveGameData* New() const final {
    return CreateMaybeMessage<CrewQuartersDecorationItemSaveGameData>(nullptr);
  }

  CrewQuartersDecorationItemSaveGameData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CrewQuartersDecorationItemSaveGameData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CrewQuartersDecorationItemSaveGameData& from);
  void MergeFrom(const CrewQuartersDecorationItemSaveGameData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CrewQuartersDecorationItemSaveGameData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.CrewQuartersDecorationItemSaveGameData";
  }
  protected:
  explicit CrewQuartersDecorationItemSaveGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakProfile_2eproto);
    return ::descriptor_table_OakProfile_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDecorationItemAssetPathFieldNumber = 2,
    kIsNewFieldNumber = 1,
  };
  // string decoration_item_asset_path = 2;
  void clear_decoration_item_asset_path();
  const std::string& decoration_item_asset_path() const;
  void set_decoration_item_asset_path(const std::string& value);
  void set_decoration_item_asset_path(std::string&& value);
  void set_decoration_item_asset_path(const char* value);
  void set_decoration_item_asset_path(const char* value, size_t size);
  std::string* mutable_decoration_item_asset_path();
  std::string* release_decoration_item_asset_path();
  void set_allocated_decoration_item_asset_path(std::string* decoration_item_asset_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_decoration_item_asset_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_decoration_item_asset_path(
      std::string* decoration_item_asset_path);
  private:
  const std::string& _internal_decoration_item_asset_path() const;
  void _internal_set_decoration_item_asset_path(const std::string& value);
  std::string* _internal_mutable_decoration_item_asset_path();
  public:

  // bool is_new = 1;
  void clear_is_new();
  bool is_new() const;
  void set_is_new(bool value);
  private:
  bool _internal_is_new() const;
  void _internal_set_is_new(bool value);
  public:

  // @@protoc_insertion_point(class_scope:OakSave.CrewQuartersDecorationItemSaveGameData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr decoration_item_asset_path_;
  bool is_new_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakProfile_2eproto;
};
// -------------------------------------------------------------------

class CrewQuartersRoomItemSaveGameData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.CrewQuartersRoomItemSaveGameData) */ {
 public:
  inline CrewQuartersRoomItemSaveGameData() : CrewQuartersRoomItemSaveGameData(nullptr) {};
  virtual ~CrewQuartersRoomItemSaveGameData();

  CrewQuartersRoomItemSaveGameData(const CrewQuartersRoomItemSaveGameData& from);
  CrewQuartersRoomItemSaveGameData(CrewQuartersRoomItemSaveGameData&& from) noexcept
    : CrewQuartersRoomItemSaveGameData() {
    *this = ::std::move(from);
  }

  inline CrewQuartersRoomItemSaveGameData& operator=(const CrewQuartersRoomItemSaveGameData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CrewQuartersRoomItemSaveGameData& operator=(CrewQuartersRoomItemSaveGameData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CrewQuartersRoomItemSaveGameData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CrewQuartersRoomItemSaveGameData* internal_default_instance() {
    return reinterpret_cast<const CrewQuartersRoomItemSaveGameData*>(
               &_CrewQuartersRoomItemSaveGameData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CrewQuartersRoomItemSaveGameData& a, CrewQuartersRoomItemSaveGameData& b) {
    a.Swap(&b);
  }
  inline void Swap(CrewQuartersRoomItemSaveGameData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CrewQuartersRoomItemSaveGameData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CrewQuartersRoomItemSaveGameData* New() const final {
    return CreateMaybeMessage<CrewQuartersRoomItemSaveGameData>(nullptr);
  }

  CrewQuartersRoomItemSaveGameData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CrewQuartersRoomItemSaveGameData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CrewQuartersRoomItemSaveGameData& from);
  void MergeFrom(const CrewQuartersRoomItemSaveGameData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CrewQuartersRoomItemSaveGameData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.CrewQuartersRoomItemSaveGameData";
  }
  protected:
  explicit CrewQuartersRoomItemSaveGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakProfile_2eproto);
    return ::descriptor_table_OakProfile_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomItemAssetPathFieldNumber = 2,
    kIsNewFieldNumber = 1,
  };
  // string room_item_asset_path = 2;
  void clear_room_item_asset_path();
  const std::string& room_item_asset_path() const;
  void set_room_item_asset_path(const std::string& value);
  void set_room_item_asset_path(std::string&& value);
  void set_room_item_asset_path(const char* value);
  void set_room_item_asset_path(const char* value, size_t size);
  std::string* mutable_room_item_asset_path();
  std::string* release_room_item_asset_path();
  void set_allocated_room_item_asset_path(std::string* room_item_asset_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_room_item_asset_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_room_item_asset_path(
      std::string* room_item_asset_path);
  private:
  const std::string& _internal_room_item_asset_path() const;
  void _internal_set_room_item_asset_path(const std::string& value);
  std::string* _internal_mutable_room_item_asset_path();
  public:

  // bool is_new = 1;
  void clear_is_new();
  bool is_new() const;
  void set_is_new(bool value);
  private:
  bool _internal_is_new() const;
  void _internal_set_is_new(bool value);
  public:

  // @@protoc_insertion_point(class_scope:OakSave.CrewQuartersRoomItemSaveGameData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_item_asset_path_;
  bool is_new_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakProfile_2eproto;
};
// -------------------------------------------------------------------

class RecentlyMetPlayer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.RecentlyMetPlayer) */ {
 public:
  inline RecentlyMetPlayer() : RecentlyMetPlayer(nullptr) {};
  virtual ~RecentlyMetPlayer();

  RecentlyMetPlayer(const RecentlyMetPlayer& from);
  RecentlyMetPlayer(RecentlyMetPlayer&& from) noexcept
    : RecentlyMetPlayer() {
    *this = ::std::move(from);
  }

  inline RecentlyMetPlayer& operator=(const RecentlyMetPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecentlyMetPlayer& operator=(RecentlyMetPlayer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RecentlyMetPlayer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecentlyMetPlayer* internal_default_instance() {
    return reinterpret_cast<const RecentlyMetPlayer*>(
               &_RecentlyMetPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(RecentlyMetPlayer& a, RecentlyMetPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(RecentlyMetPlayer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecentlyMetPlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecentlyMetPlayer* New() const final {
    return CreateMaybeMessage<RecentlyMetPlayer>(nullptr);
  }

  RecentlyMetPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecentlyMetPlayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RecentlyMetPlayer& from);
  void MergeFrom(const RecentlyMetPlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecentlyMetPlayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.RecentlyMetPlayer";
  }
  protected:
  explicit RecentlyMetPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakProfile_2eproto);
    return ::descriptor_table_OakProfile_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShiftPlayerIdFieldNumber = 1,
    kFirstPartyPlayerIdFieldNumber = 2,
    kShowShiftPlayerEntryFieldNumber = 3,
  };
  // string shift_player_id = 1;
  void clear_shift_player_id();
  const std::string& shift_player_id() const;
  void set_shift_player_id(const std::string& value);
  void set_shift_player_id(std::string&& value);
  void set_shift_player_id(const char* value);
  void set_shift_player_id(const char* value, size_t size);
  std::string* mutable_shift_player_id();
  std::string* release_shift_player_id();
  void set_allocated_shift_player_id(std::string* shift_player_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_shift_player_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_shift_player_id(
      std::string* shift_player_id);
  private:
  const std::string& _internal_shift_player_id() const;
  void _internal_set_shift_player_id(const std::string& value);
  std::string* _internal_mutable_shift_player_id();
  public:

  // string first_party_player_id = 2;
  void clear_first_party_player_id();
  const std::string& first_party_player_id() const;
  void set_first_party_player_id(const std::string& value);
  void set_first_party_player_id(std::string&& value);
  void set_first_party_player_id(const char* value);
  void set_first_party_player_id(const char* value, size_t size);
  std::string* mutable_first_party_player_id();
  std::string* release_first_party_player_id();
  void set_allocated_first_party_player_id(std::string* first_party_player_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_first_party_player_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_first_party_player_id(
      std::string* first_party_player_id);
  private:
  const std::string& _internal_first_party_player_id() const;
  void _internal_set_first_party_player_id(const std::string& value);
  std::string* _internal_mutable_first_party_player_id();
  public:

  // bool show_shift_player_entry = 3;
  void clear_show_shift_player_entry();
  bool show_shift_player_entry() const;
  void set_show_shift_player_entry(bool value);
  private:
  bool _internal_show_shift_player_entry() const;
  void _internal_set_show_shift_player_entry(bool value);
  public:

  // @@protoc_insertion_point(class_scope:OakSave.RecentlyMetPlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shift_player_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr first_party_player_id_;
  bool show_shift_player_entry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakProfile_2eproto;
};
// -------------------------------------------------------------------

class Profile_FriendEncountersEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.Profile.FriendEncountersEntry) */ {
 public:
  inline Profile_FriendEncountersEntry() : Profile_FriendEncountersEntry(nullptr) {};
  virtual ~Profile_FriendEncountersEntry();

  Profile_FriendEncountersEntry(const Profile_FriendEncountersEntry& from);
  Profile_FriendEncountersEntry(Profile_FriendEncountersEntry&& from) noexcept
    : Profile_FriendEncountersEntry() {
    *this = ::std::move(from);
  }

  inline Profile_FriendEncountersEntry& operator=(const Profile_FriendEncountersEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline Profile_FriendEncountersEntry& operator=(Profile_FriendEncountersEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Profile_FriendEncountersEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Profile_FriendEncountersEntry* internal_default_instance() {
    return reinterpret_cast<const Profile_FriendEncountersEntry*>(
               &_Profile_FriendEncountersEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(Profile_FriendEncountersEntry& a, Profile_FriendEncountersEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(Profile_FriendEncountersEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Profile_FriendEncountersEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Profile_FriendEncountersEntry* New() const final {
    return CreateMaybeMessage<Profile_FriendEncountersEntry>(nullptr);
  }

  Profile_FriendEncountersEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Profile_FriendEncountersEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Profile_FriendEncountersEntry& from);
  void MergeFrom(const Profile_FriendEncountersEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Profile_FriendEncountersEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.Profile.FriendEncountersEntry";
  }
  protected:
  explicit Profile_FriendEncountersEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakProfile_2eproto);
    return ::descriptor_table_OakProfile_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // .OakSave.OakFriendEncounterData value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::OakSave::OakFriendEncounterData& value() const;
  ::OakSave::OakFriendEncounterData* release_value();
  ::OakSave::OakFriendEncounterData* mutable_value();
  void set_allocated_value(::OakSave::OakFriendEncounterData* value);
  private:
  const ::OakSave::OakFriendEncounterData& _internal_value() const;
  ::OakSave::OakFriendEncounterData* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::OakSave::OakFriendEncounterData* value);
  ::OakSave::OakFriendEncounterData* unsafe_arena_release_value();

  // @@protoc_insertion_point(class_scope:OakSave.Profile.FriendEncountersEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::OakSave::OakFriendEncounterData* value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakProfile_2eproto;
};
// -------------------------------------------------------------------

class Profile PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OakSave.Profile) */ {
 public:
  inline Profile() : Profile(nullptr) {};
  virtual ~Profile();

  Profile(const Profile& from);
  Profile(Profile&& from) noexcept
    : Profile() {
    *this = ::std::move(from);
  }

  inline Profile& operator=(const Profile& from) {
    CopyFrom(from);
    return *this;
  }
  inline Profile& operator=(Profile&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Profile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Profile* internal_default_instance() {
    return reinterpret_cast<const Profile*>(
               &_Profile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(Profile& a, Profile& b) {
    a.Swap(&b);
  }
  inline void Swap(Profile* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Profile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Profile* New() const final {
    return CreateMaybeMessage<Profile>(nullptr);
  }

  Profile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Profile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Profile& from);
  void MergeFrom(const Profile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Profile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OakSave.Profile";
  }
  protected:
  explicit Profile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OakProfile_2eproto);
    return ::descriptor_table_OakProfile_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Profile_FriendEncountersEntry FriendEncountersEntry;

  // accessors -------------------------------------------------------

  enum : int {
    kNewsHashesFieldNumber = 36,
    kInventoryScreenLastFilterFieldNumber = 101,
    kFriendEventsFieldNumber = 109,
    kFriendStatusesFieldNumber = 110,
    kFriendEncountersFieldNumber = 133,
    kProfileStatsDataFieldNumber = 135,
    kBankInventoryCategoryListFieldNumber = 136,
    kBankInventoryListFieldNumber = 137,
    kLostLootInventoryListFieldNumber = 138,
    kNpcMailItemsFieldNumber = 139,
    kMailGuidsFieldNumber = 140,
    kUnreadMailGuidsFieldNumber = 141,
    kGearSoldByFriendsFieldNumber = 142,
    kProfileSduListFieldNumber = 143,
    kUnlockedCustomizationsFieldNumber = 144,
    kUnlockedInventoryCustomizationPartsFieldNumber = 145,
    kUnlockedCrewQuartersDecorationsFieldNumber = 147,
    kUnlockedCrewQuartersRoomsFieldNumber = 148,
    kRegisteredDownloadableEntitlementsFieldNumber = 195,
    kSeenNewsItemsFieldNumber = 196,
    kChallengeDataFieldNumber = 208,
    kCitizenScienceLevelProgressionFieldNumber = 209,
    kRecentlyMetPlayersFieldNumber = 214,
    kLastStatusMenuPageFieldNumber = 100,
    kMatchmakingRegionFieldNumber = 105,
    kPlayerInputBindingsFieldNumber = 35,
    kTutorialInfoFieldNumber = 102,
    kGuardianRankFieldNumber = 146,
    kEnableAimAssistFieldNumber = 1,
    kGamepadInvertLookFieldNumber = 2,
    kGamepadInvertTurnFieldNumber = 3,
    kGamepadInvertMoveFieldNumber = 4,
    kGamepadInvertStrafeFieldNumber = 5,
    kEnableVibrationFieldNumber = 6,
    kInvertMousePitchFieldNumber = 7,
    kEnableMouseSmoothingFieldNumber = 8,
    kMouseScaleFieldNumber = 9,
    kShowDamageNumbersFieldNumber = 10,
    kShowDamageNumberIconsFieldNumber = 11,
    kEnableTrainingMessagesFieldNumber = 12,
    kShowTextChatFieldNumber = 13,
    kCenterCrosshairFieldNumber = 14,
    kToggleSprintFieldNumber = 15,
    kToggleCrouchFieldNumber = 16,
    kCensorContentFieldNumber = 17,
    kMusicVolumeFieldNumber = 18,
    kSoundEffectsVolumeFieldNumber = 19,
    kVoVolumeFieldNumber = 20,
    kVoiceVolumeFieldNumber = 21,
    kEnableOptionalVoFieldNumber = 22,
    kPushToTalkFieldNumber = 23,
    kEnableControllerAudioFieldNumber = 24,
    kMuteAudioOnFocusLossFieldNumber = 29,
    kSpeakerAngleFrontFieldNumber = 25,
    kSpeakerAngleSideFieldNumber = 26,
    kSpeakerAngleBackFieldNumber = 27,
    kSpeakerSetupFieldNumber = 28,
    kLastUsedSavegameIdFieldNumber = 37,
    kGamepadHipSensitivityLevelFieldNumber = 38,
    kGamepadZoomedSensitivityLevelFieldNumber = 39,
    kGamepadVehicleSensitivityLevelFieldNumber = 40,
    kGamepadMovementDeadZoneXFieldNumber = 41,
    kGamepadMovementDeadZoneYFieldNumber = 42,
    kGamepadLookDeadZoneInnerXFieldNumber = 43,
    kGamepadLookDeadZoneOuterXFieldNumber = 44,
    kGamepadLookDeadZoneInnerYFieldNumber = 45,
    kGamepadLookDeadZoneOuterYFieldNumber = 46,
    kGamepadVehicleMovementDeadZoneXFieldNumber = 47,
    kGamepadVehicleMovementDeadZoneYFieldNumber = 48,
    kGamepadVehicleLookDeadZoneInnerXFieldNumber = 49,
    kGamepadVehicleLookDeadZoneOuterXFieldNumber = 50,
    kGamepadVehicleLookDeadZoneInnerYFieldNumber = 51,
    kGamepadVehicleLookDeadZoneOuterYFieldNumber = 52,
    kGamepadLeftDeadZoneInnerFieldNumber = 53,
    kHideStrictNatHelpDialogFieldNumber = 34,
    kGamepadUseAdvancedHipAimSettingsFieldNumber = 59,
    kGamepadUseAdvancedZoomedAimSettingsFieldNumber = 60,
    kGamepadUseAdvancedVehicleAimSettingsFieldNumber = 61,
    kGamepadLeftDeadZoneOuterFieldNumber = 54,
    kGamepadRightDeadZoneInnerFieldNumber = 55,
    kGamepadRightDeadZoneOuterFieldNumber = 56,
    kGamepadLookAxialDeadZoneScaleFieldNumber = 57,
    kGamepadMoveAxialDeadZoneScaleFieldNumber = 58,
    kGamepadHipYawRateFieldNumber = 62,
    kGamepadHipPitchRateFieldNumber = 63,
    kGamepadHipExtraYawFieldNumber = 64,
    kGamepadHipExtraPitchFieldNumber = 65,
    kGamepadHipRampUpTimeFieldNumber = 66,
    kGamepadHipRampUpDelayFieldNumber = 67,
    kGamepadZoomedYawRateFieldNumber = 68,
    kGamepadZoomedPitchRateFieldNumber = 69,
    kGamepadZoomedExtraYawFieldNumber = 70,
    kGamepadZoomedExtraPitchFieldNumber = 71,
    kGamepadZoomedRampUpTimeFieldNumber = 72,
    kGamepadZoomedRampUpDelayFieldNumber = 73,
    kGamepadVehicleYawRateFieldNumber = 74,
    kGamepadVehiclePitchRateFieldNumber = 75,
    kGamepadVehicleExtraYawFieldNumber = 76,
    kGamepadVehicleExtraPitchFieldNumber = 77,
    kGamepadVehicleRampUpTimeFieldNumber = 78,
    kGamepadVehicleRampUpDelayFieldNumber = 79,
    kWalkingJoystickSchemeFieldNumber = 81,
    kDrivingJoystickSchemeFieldNumber = 82,
    kMouseAdsScaleFieldNumber = 83,
    kMouseVehicleScaleFieldNumber = 84,
    kIronsightAimAssistFieldNumber = 80,
    kMouseIronsightAimAssistFieldNumber = 85,
    kWeaponAimToggleFieldNumber = 87,
    kMantleRequiresButtonFieldNumber = 88,
    kVehicleInputModeFieldNumber = 86,
    kFixedMinimapRotationFieldNumber = 89,
    kMapInvertPitchFieldNumber = 90,
    kMapInvertYawFieldNumber = 91,
    kSwapDualWieldControlsFieldNumber = 93,
    kDifficultyFieldNumber = 92,
    kBaseFovFieldNumber = 94,
    kCrosshairNeutralColorFrameFieldNumber = 95,
    kCrosshairEnemyColorFrameFieldNumber = 96,
    kCrosshairAllyColorFrameFieldNumber = 97,
    kDefaultNetworkTypeFieldNumber = 103,
    kDefaultInviteTypeFieldNumber = 104,
    kStreamingServiceFieldNumber = 106,
    kMaxCachedFriendEventsFieldNumber = 107,
    kMaxCachedFriendStatusesFieldNumber = 108,
    kLastWhisperFetchEventsTimeFieldNumber = 111,
    kLastWhisperFetchStatusesTimeFieldNumber = 112,
    kDesiredCrossplayStateFieldNumber = 113,
    kEnableSubtitlesFieldNumber = 98,
    kEnableClosedCaptionsFieldNumber = 99,
    kEnableMouseAccelerationFieldNumber = 150,
    kEnableGamepadInputFieldNumber = 151,
    kMaxFriendEncounterSizeFieldNumber = 134,
    kMasterVolumeFieldNumber = 153,
    kMonitorDisplayTypeFieldNumber = 154,
    kGraphicsModeFieldNumber = 155,
    kFrameRateLimitFieldNumber = 156,
    kBaseVehicleFovFieldNumber = 157,
    kGraphicsQualityFieldNumber = 158,
    kAnisotropicFilteringFieldNumber = 159,
    kShadowQualityFieldNumber = 160,
    kDisplayPerformanceStatsFieldNumber = 161,
    kTextureDetailFieldNumber = 162,
    kDrawDistanceFieldNumber = 163,
    kClutterFieldNumber = 164,
    kTessellationFieldNumber = 165,
    kUseClassicGamepadInputFieldNumber = 152,
    kFoliageShadowsFieldNumber = 167,
    kPlanarReflectionsFieldNumber = 168,
    kObjectMotionBlurFieldNumber = 174,
    kFoliageFieldNumber = 166,
    kVolumetricFogFieldNumber = 169,
    kScreenSpaceReflectionsFieldNumber = 170,
    kCharacterTextureDetailFieldNumber = 171,
    kCharacterDetailFieldNumber = 172,
    kAmbientOcclusionQualityFieldNumber = 173,
    kLensFlareFieldNumber = 175,
    kCombatNumberLongFormatFieldNumber = 176,
    kShowMinimapLegendariesFieldNumber = 177,
    kUsePlayerCalloutsFieldNumber = 178,
    kFriendEventNotificationLifetimeFieldNumber = 179,
    kFriendEventNotificationFrequencyFieldNumber = 180,
    kTradeRequestReceptionTypeFieldNumber = 181,
    kHeadBobScaleFieldNumber = 182,
    kSubsCcSizeFieldNumber = 189,
    kCcSubsBackgroundOpacityFieldNumber = 190,
    kWalkingButtonSchemeFieldNumber = 191,
    kDrivingButtonSchemeFieldNumber = 192,
    kGlyphModeFieldNumber = 193,
    kHasSeenFirstBootFieldNumber = 184,
    kUseMPHFieldNumber = 194,
    kAutoCenteringEnabledFieldNumber = 197,
    kIncreasedChanceForSubscribersFieldNumber = 198,
    kBCitizenScienceHasSeenIntroVideoFieldNumber = 227,
    kBCitizenScienceTutorialDoneFieldNumber = 228,
    kFixedInitialZonemapRotationFieldNumber = 230,
    kRareChestEventEnabledFieldNumber = 199,
    kBadassEventEnabledFieldNumber = 200,
    kPinataEventEnabledFieldNumber = 201,
    kDisableSpatialAudioFieldNumber = 204,
    kMinTimeBetweenBadassEventsFieldNumber = 202,
    kHudScaleMultiplierFieldNumber = 203,
    kTotalPlaytimeSecondsFieldNumber = 205,
    kMoxxisDrinkEventBitsProductIdFieldNumber = 207,
    kMoxxisDrinkEventEnabledFieldNumber = 206,
    kDefaultDeadZoneInnerUpdatedFieldNumber = 210,
    kDisableEventContentFieldNumber = 211,
    kNeedsShiftFirstBootFieldNumber = 213,
    kDesiredFriendSyncStateFieldNumber = 212,
    kCitizenScienceActiveBoosterIndexFieldNumber = 215,
    kCitizenScienceActiveBoosterRemainingTimeFieldNumber = 216,
    kCitizenScienceActiveBoosterTotalTimeFieldNumber = 217,
    kStreamerPrimaryActiveBoosterIndexFieldNumber = 218,
    kStreamerPrimaryActiveBoosterRemainingTimeFieldNumber = 219,
    kStreamerPrimaryActiveBoosterTotalTimeFieldNumber = 220,
    kStreamerSecondaryActiveBoosterIndexFieldNumber = 221,
    kStreamerSecondaryActiveBoosterRemainingTimeFieldNumber = 222,
    kStreamerSecondaryActiveBoosterTotalTimeFieldNumber = 223,
    kStreamerBoosterTierFieldNumber = 224,
    kCitizenScienceCSBucksAmountFieldNumber = 226,
  };
  // repeated uint32 news_hashes = 36;
  int news_hashes_size() const;
  private:
  int _internal_news_hashes_size() const;
  public:
  void clear_news_hashes();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_news_hashes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_news_hashes() const;
  void _internal_add_news_hashes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_news_hashes();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 news_hashes(int index) const;
  void set_news_hashes(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_news_hashes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      news_hashes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_news_hashes();

  // repeated .OakSave.OakProfileLastInventoryFilterInfo inventory_screen_last_filter = 101;
  int inventory_screen_last_filter_size() const;
  private:
  int _internal_inventory_screen_last_filter_size() const;
  public:
  void clear_inventory_screen_last_filter();
  ::OakSave::OakProfileLastInventoryFilterInfo* mutable_inventory_screen_last_filter(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::OakProfileLastInventoryFilterInfo >*
      mutable_inventory_screen_last_filter();
  private:
  const ::OakSave::OakProfileLastInventoryFilterInfo& _internal_inventory_screen_last_filter(int index) const;
  ::OakSave::OakProfileLastInventoryFilterInfo* _internal_add_inventory_screen_last_filter();
  public:
  const ::OakSave::OakProfileLastInventoryFilterInfo& inventory_screen_last_filter(int index) const;
  ::OakSave::OakProfileLastInventoryFilterInfo* add_inventory_screen_last_filter();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::OakProfileLastInventoryFilterInfo >&
      inventory_screen_last_filter() const;

  // repeated string friend_events = 109;
  int friend_events_size() const;
  private:
  int _internal_friend_events_size() const;
  public:
  void clear_friend_events();
  const std::string& friend_events(int index) const;
  std::string* mutable_friend_events(int index);
  void set_friend_events(int index, const std::string& value);
  void set_friend_events(int index, std::string&& value);
  void set_friend_events(int index, const char* value);
  void set_friend_events(int index, const char* value, size_t size);
  std::string* add_friend_events();
  void add_friend_events(const std::string& value);
  void add_friend_events(std::string&& value);
  void add_friend_events(const char* value);
  void add_friend_events(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& friend_events() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_friend_events();
  private:
  const std::string& _internal_friend_events(int index) const;
  std::string* _internal_add_friend_events();
  public:

  // repeated string friend_statuses = 110;
  int friend_statuses_size() const;
  private:
  int _internal_friend_statuses_size() const;
  public:
  void clear_friend_statuses();
  const std::string& friend_statuses(int index) const;
  std::string* mutable_friend_statuses(int index);
  void set_friend_statuses(int index, const std::string& value);
  void set_friend_statuses(int index, std::string&& value);
  void set_friend_statuses(int index, const char* value);
  void set_friend_statuses(int index, const char* value, size_t size);
  std::string* add_friend_statuses();
  void add_friend_statuses(const std::string& value);
  void add_friend_statuses(std::string&& value);
  void add_friend_statuses(const char* value);
  void add_friend_statuses(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& friend_statuses() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_friend_statuses();
  private:
  const std::string& _internal_friend_statuses(int index) const;
  std::string* _internal_add_friend_statuses();
  public:

  // repeated .OakSave.Profile.FriendEncountersEntry friend_encounters = 133;
  int friend_encounters_size() const;
  private:
  int _internal_friend_encounters_size() const;
  public:
  void clear_friend_encounters();
  ::OakSave::Profile_FriendEncountersEntry* mutable_friend_encounters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::Profile_FriendEncountersEntry >*
      mutable_friend_encounters();
  private:
  const ::OakSave::Profile_FriendEncountersEntry& _internal_friend_encounters(int index) const;
  ::OakSave::Profile_FriendEncountersEntry* _internal_add_friend_encounters();
  public:
  const ::OakSave::Profile_FriendEncountersEntry& friend_encounters(int index) const;
  ::OakSave::Profile_FriendEncountersEntry* add_friend_encounters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::Profile_FriendEncountersEntry >&
      friend_encounters() const;

  // repeated .OakSave.GameStatSaveGameData profile_stats_data = 135;
  int profile_stats_data_size() const;
  private:
  int _internal_profile_stats_data_size() const;
  public:
  void clear_profile_stats_data();
  ::OakSave::GameStatSaveGameData* mutable_profile_stats_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::GameStatSaveGameData >*
      mutable_profile_stats_data();
  private:
  const ::OakSave::GameStatSaveGameData& _internal_profile_stats_data(int index) const;
  ::OakSave::GameStatSaveGameData* _internal_add_profile_stats_data();
  public:
  const ::OakSave::GameStatSaveGameData& profile_stats_data(int index) const;
  ::OakSave::GameStatSaveGameData* add_profile_stats_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::GameStatSaveGameData >&
      profile_stats_data() const;

  // repeated .OakSave.InventoryCategorySaveData bank_inventory_category_list = 136;
  int bank_inventory_category_list_size() const;
  private:
  int _internal_bank_inventory_category_list_size() const;
  public:
  void clear_bank_inventory_category_list();
  ::OakSave::InventoryCategorySaveData* mutable_bank_inventory_category_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::InventoryCategorySaveData >*
      mutable_bank_inventory_category_list();
  private:
  const ::OakSave::InventoryCategorySaveData& _internal_bank_inventory_category_list(int index) const;
  ::OakSave::InventoryCategorySaveData* _internal_add_bank_inventory_category_list();
  public:
  const ::OakSave::InventoryCategorySaveData& bank_inventory_category_list(int index) const;
  ::OakSave::InventoryCategorySaveData* add_bank_inventory_category_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::InventoryCategorySaveData >&
      bank_inventory_category_list() const;

  // repeated bytes bank_inventory_list = 137;
  int bank_inventory_list_size() const;
  private:
  int _internal_bank_inventory_list_size() const;
  public:
  void clear_bank_inventory_list();
  const std::string& bank_inventory_list(int index) const;
  std::string* mutable_bank_inventory_list(int index);
  void set_bank_inventory_list(int index, const std::string& value);
  void set_bank_inventory_list(int index, std::string&& value);
  void set_bank_inventory_list(int index, const char* value);
  void set_bank_inventory_list(int index, const void* value, size_t size);
  std::string* add_bank_inventory_list();
  void add_bank_inventory_list(const std::string& value);
  void add_bank_inventory_list(std::string&& value);
  void add_bank_inventory_list(const char* value);
  void add_bank_inventory_list(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& bank_inventory_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_bank_inventory_list();
  private:
  const std::string& _internal_bank_inventory_list(int index) const;
  std::string* _internal_add_bank_inventory_list();
  public:

  // repeated bytes lost_loot_inventory_list = 138;
  int lost_loot_inventory_list_size() const;
  private:
  int _internal_lost_loot_inventory_list_size() const;
  public:
  void clear_lost_loot_inventory_list();
  const std::string& lost_loot_inventory_list(int index) const;
  std::string* mutable_lost_loot_inventory_list(int index);
  void set_lost_loot_inventory_list(int index, const std::string& value);
  void set_lost_loot_inventory_list(int index, std::string&& value);
  void set_lost_loot_inventory_list(int index, const char* value);
  void set_lost_loot_inventory_list(int index, const void* value, size_t size);
  std::string* add_lost_loot_inventory_list();
  void add_lost_loot_inventory_list(const std::string& value);
  void add_lost_loot_inventory_list(std::string&& value);
  void add_lost_loot_inventory_list(const char* value);
  void add_lost_loot_inventory_list(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& lost_loot_inventory_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_lost_loot_inventory_list();
  private:
  const std::string& _internal_lost_loot_inventory_list(int index) const;
  std::string* _internal_add_lost_loot_inventory_list();
  public:

  // repeated .OakSave.OakMailItem npc_mail_items = 139;
  int npc_mail_items_size() const;
  private:
  int _internal_npc_mail_items_size() const;
  public:
  void clear_npc_mail_items();
  ::OakSave::OakMailItem* mutable_npc_mail_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::OakMailItem >*
      mutable_npc_mail_items();
  private:
  const ::OakSave::OakMailItem& _internal_npc_mail_items(int index) const;
  ::OakSave::OakMailItem* _internal_add_npc_mail_items();
  public:
  const ::OakSave::OakMailItem& npc_mail_items(int index) const;
  ::OakSave::OakMailItem* add_npc_mail_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::OakMailItem >&
      npc_mail_items() const;

  // repeated string mail_guids = 140;
  int mail_guids_size() const;
  private:
  int _internal_mail_guids_size() const;
  public:
  void clear_mail_guids();
  const std::string& mail_guids(int index) const;
  std::string* mutable_mail_guids(int index);
  void set_mail_guids(int index, const std::string& value);
  void set_mail_guids(int index, std::string&& value);
  void set_mail_guids(int index, const char* value);
  void set_mail_guids(int index, const char* value, size_t size);
  std::string* add_mail_guids();
  void add_mail_guids(const std::string& value);
  void add_mail_guids(std::string&& value);
  void add_mail_guids(const char* value);
  void add_mail_guids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& mail_guids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_mail_guids();
  private:
  const std::string& _internal_mail_guids(int index) const;
  std::string* _internal_add_mail_guids();
  public:

  // repeated string unread_mail_guids = 141;
  int unread_mail_guids_size() const;
  private:
  int _internal_unread_mail_guids_size() const;
  public:
  void clear_unread_mail_guids();
  const std::string& unread_mail_guids(int index) const;
  std::string* mutable_unread_mail_guids(int index);
  void set_unread_mail_guids(int index, const std::string& value);
  void set_unread_mail_guids(int index, std::string&& value);
  void set_unread_mail_guids(int index, const char* value);
  void set_unread_mail_guids(int index, const char* value, size_t size);
  std::string* add_unread_mail_guids();
  void add_unread_mail_guids(const std::string& value);
  void add_unread_mail_guids(std::string&& value);
  void add_unread_mail_guids(const char* value);
  void add_unread_mail_guids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& unread_mail_guids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_unread_mail_guids();
  private:
  const std::string& _internal_unread_mail_guids(int index) const;
  std::string* _internal_add_unread_mail_guids();
  public:

  // repeated .OakSave.GearSoldByFriendData gear_sold_by_friends = 142;
  int gear_sold_by_friends_size() const;
  private:
  int _internal_gear_sold_by_friends_size() const;
  public:
  void clear_gear_sold_by_friends();
  ::OakSave::GearSoldByFriendData* mutable_gear_sold_by_friends(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::GearSoldByFriendData >*
      mutable_gear_sold_by_friends();
  private:
  const ::OakSave::GearSoldByFriendData& _internal_gear_sold_by_friends(int index) const;
  ::OakSave::GearSoldByFriendData* _internal_add_gear_sold_by_friends();
  public:
  const ::OakSave::GearSoldByFriendData& gear_sold_by_friends(int index) const;
  ::OakSave::GearSoldByFriendData* add_gear_sold_by_friends();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::GearSoldByFriendData >&
      gear_sold_by_friends() const;

  // repeated .OakSave.OakSDUSaveGameData profile_sdu_list = 143;
  int profile_sdu_list_size() const;
  private:
  int _internal_profile_sdu_list_size() const;
  public:
  void clear_profile_sdu_list();
  ::OakSave::OakSDUSaveGameData* mutable_profile_sdu_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::OakSDUSaveGameData >*
      mutable_profile_sdu_list();
  private:
  const ::OakSave::OakSDUSaveGameData& _internal_profile_sdu_list(int index) const;
  ::OakSave::OakSDUSaveGameData* _internal_add_profile_sdu_list();
  public:
  const ::OakSave::OakSDUSaveGameData& profile_sdu_list(int index) const;
  ::OakSave::OakSDUSaveGameData* add_profile_sdu_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::OakSDUSaveGameData >&
      profile_sdu_list() const;

  // repeated .OakSave.OakCustomizationSaveGameData unlocked_customizations = 144;
  int unlocked_customizations_size() const;
  private:
  int _internal_unlocked_customizations_size() const;
  public:
  void clear_unlocked_customizations();
  ::OakSave::OakCustomizationSaveGameData* mutable_unlocked_customizations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::OakCustomizationSaveGameData >*
      mutable_unlocked_customizations();
  private:
  const ::OakSave::OakCustomizationSaveGameData& _internal_unlocked_customizations(int index) const;
  ::OakSave::OakCustomizationSaveGameData* _internal_add_unlocked_customizations();
  public:
  const ::OakSave::OakCustomizationSaveGameData& unlocked_customizations(int index) const;
  ::OakSave::OakCustomizationSaveGameData* add_unlocked_customizations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::OakCustomizationSaveGameData >&
      unlocked_customizations() const;

  // repeated .OakSave.OakInventoryCustomizationPartInfo unlocked_inventory_customization_parts = 145;
  int unlocked_inventory_customization_parts_size() const;
  private:
  int _internal_unlocked_inventory_customization_parts_size() const;
  public:
  void clear_unlocked_inventory_customization_parts();
  ::OakSave::OakInventoryCustomizationPartInfo* mutable_unlocked_inventory_customization_parts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::OakInventoryCustomizationPartInfo >*
      mutable_unlocked_inventory_customization_parts();
  private:
  const ::OakSave::OakInventoryCustomizationPartInfo& _internal_unlocked_inventory_customization_parts(int index) const;
  ::OakSave::OakInventoryCustomizationPartInfo* _internal_add_unlocked_inventory_customization_parts();
  public:
  const ::OakSave::OakInventoryCustomizationPartInfo& unlocked_inventory_customization_parts(int index) const;
  ::OakSave::OakInventoryCustomizationPartInfo* add_unlocked_inventory_customization_parts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::OakInventoryCustomizationPartInfo >&
      unlocked_inventory_customization_parts() const;

  // repeated .OakSave.CrewQuartersDecorationItemSaveGameData unlocked_crew_quarters_decorations = 147;
  int unlocked_crew_quarters_decorations_size() const;
  private:
  int _internal_unlocked_crew_quarters_decorations_size() const;
  public:
  void clear_unlocked_crew_quarters_decorations();
  ::OakSave::CrewQuartersDecorationItemSaveGameData* mutable_unlocked_crew_quarters_decorations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::CrewQuartersDecorationItemSaveGameData >*
      mutable_unlocked_crew_quarters_decorations();
  private:
  const ::OakSave::CrewQuartersDecorationItemSaveGameData& _internal_unlocked_crew_quarters_decorations(int index) const;
  ::OakSave::CrewQuartersDecorationItemSaveGameData* _internal_add_unlocked_crew_quarters_decorations();
  public:
  const ::OakSave::CrewQuartersDecorationItemSaveGameData& unlocked_crew_quarters_decorations(int index) const;
  ::OakSave::CrewQuartersDecorationItemSaveGameData* add_unlocked_crew_quarters_decorations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::CrewQuartersDecorationItemSaveGameData >&
      unlocked_crew_quarters_decorations() const;

  // repeated .OakSave.CrewQuartersRoomItemSaveGameData unlocked_crew_quarters_rooms = 148;
  int unlocked_crew_quarters_rooms_size() const;
  private:
  int _internal_unlocked_crew_quarters_rooms_size() const;
  public:
  void clear_unlocked_crew_quarters_rooms();
  ::OakSave::CrewQuartersRoomItemSaveGameData* mutable_unlocked_crew_quarters_rooms(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::CrewQuartersRoomItemSaveGameData >*
      mutable_unlocked_crew_quarters_rooms();
  private:
  const ::OakSave::CrewQuartersRoomItemSaveGameData& _internal_unlocked_crew_quarters_rooms(int index) const;
  ::OakSave::CrewQuartersRoomItemSaveGameData* _internal_add_unlocked_crew_quarters_rooms();
  public:
  const ::OakSave::CrewQuartersRoomItemSaveGameData& unlocked_crew_quarters_rooms(int index) const;
  ::OakSave::CrewQuartersRoomItemSaveGameData* add_unlocked_crew_quarters_rooms();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::CrewQuartersRoomItemSaveGameData >&
      unlocked_crew_quarters_rooms() const;

  // repeated .OakSave.RegisteredDownloadableEntitlements registered_downloadable_entitlements = 195;
  int registered_downloadable_entitlements_size() const;
  private:
  int _internal_registered_downloadable_entitlements_size() const;
  public:
  void clear_registered_downloadable_entitlements();
  ::OakSave::RegisteredDownloadableEntitlements* mutable_registered_downloadable_entitlements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::RegisteredDownloadableEntitlements >*
      mutable_registered_downloadable_entitlements();
  private:
  const ::OakSave::RegisteredDownloadableEntitlements& _internal_registered_downloadable_entitlements(int index) const;
  ::OakSave::RegisteredDownloadableEntitlements* _internal_add_registered_downloadable_entitlements();
  public:
  const ::OakSave::RegisteredDownloadableEntitlements& registered_downloadable_entitlements(int index) const;
  ::OakSave::RegisteredDownloadableEntitlements* add_registered_downloadable_entitlements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::RegisteredDownloadableEntitlements >&
      registered_downloadable_entitlements() const;

  // repeated string seen_news_items = 196;
  int seen_news_items_size() const;
  private:
  int _internal_seen_news_items_size() const;
  public:
  void clear_seen_news_items();
  const std::string& seen_news_items(int index) const;
  std::string* mutable_seen_news_items(int index);
  void set_seen_news_items(int index, const std::string& value);
  void set_seen_news_items(int index, std::string&& value);
  void set_seen_news_items(int index, const char* value);
  void set_seen_news_items(int index, const char* value, size_t size);
  std::string* add_seen_news_items();
  void add_seen_news_items(const std::string& value);
  void add_seen_news_items(std::string&& value);
  void add_seen_news_items(const char* value);
  void add_seen_news_items(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& seen_news_items() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_seen_news_items();
  private:
  const std::string& _internal_seen_news_items(int index) const;
  std::string* _internal_add_seen_news_items();
  public:

  // repeated .OakSave.ChallengeSaveGameData challenge_data = 208;
  int challenge_data_size() const;
  private:
  int _internal_challenge_data_size() const;
  public:
  void clear_challenge_data();
  ::OakSave::ChallengeSaveGameData* mutable_challenge_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::ChallengeSaveGameData >*
      mutable_challenge_data();
  private:
  const ::OakSave::ChallengeSaveGameData& _internal_challenge_data(int index) const;
  ::OakSave::ChallengeSaveGameData* _internal_add_challenge_data();
  public:
  const ::OakSave::ChallengeSaveGameData& challenge_data(int index) const;
  ::OakSave::ChallengeSaveGameData* add_challenge_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::ChallengeSaveGameData >&
      challenge_data() const;

  // repeated int32 CitizenScienceLevelProgression = 209;
  int citizensciencelevelprogression_size() const;
  private:
  int _internal_citizensciencelevelprogression_size() const;
  public:
  void clear_citizensciencelevelprogression();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_citizensciencelevelprogression(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_citizensciencelevelprogression() const;
  void _internal_add_citizensciencelevelprogression(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_citizensciencelevelprogression();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 citizensciencelevelprogression(int index) const;
  void set_citizensciencelevelprogression(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_citizensciencelevelprogression(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      citizensciencelevelprogression() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_citizensciencelevelprogression();

  // repeated .OakSave.RecentlyMetPlayer recently_met_players = 214;
  int recently_met_players_size() const;
  private:
  int _internal_recently_met_players_size() const;
  public:
  void clear_recently_met_players();
  ::OakSave::RecentlyMetPlayer* mutable_recently_met_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::RecentlyMetPlayer >*
      mutable_recently_met_players();
  private:
  const ::OakSave::RecentlyMetPlayer& _internal_recently_met_players(int index) const;
  ::OakSave::RecentlyMetPlayer* _internal_add_recently_met_players();
  public:
  const ::OakSave::RecentlyMetPlayer& recently_met_players(int index) const;
  ::OakSave::RecentlyMetPlayer* add_recently_met_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::RecentlyMetPlayer >&
      recently_met_players() const;

  // string last_status_menu_page = 100;
  void clear_last_status_menu_page();
  const std::string& last_status_menu_page() const;
  void set_last_status_menu_page(const std::string& value);
  void set_last_status_menu_page(std::string&& value);
  void set_last_status_menu_page(const char* value);
  void set_last_status_menu_page(const char* value, size_t size);
  std::string* mutable_last_status_menu_page();
  std::string* release_last_status_menu_page();
  void set_allocated_last_status_menu_page(std::string* last_status_menu_page);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_last_status_menu_page();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_last_status_menu_page(
      std::string* last_status_menu_page);
  private:
  const std::string& _internal_last_status_menu_page() const;
  void _internal_set_last_status_menu_page(const std::string& value);
  std::string* _internal_mutable_last_status_menu_page();
  public:

  // string matchmaking_region = 105;
  void clear_matchmaking_region();
  const std::string& matchmaking_region() const;
  void set_matchmaking_region(const std::string& value);
  void set_matchmaking_region(std::string&& value);
  void set_matchmaking_region(const char* value);
  void set_matchmaking_region(const char* value, size_t size);
  std::string* mutable_matchmaking_region();
  std::string* release_matchmaking_region();
  void set_allocated_matchmaking_region(std::string* matchmaking_region);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_matchmaking_region();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_matchmaking_region(
      std::string* matchmaking_region);
  private:
  const std::string& _internal_matchmaking_region() const;
  void _internal_set_matchmaking_region(const std::string& value);
  std::string* _internal_mutable_matchmaking_region();
  public:

  // .OakSave.PlayerInputBindings player_input_bindings = 35;
  bool has_player_input_bindings() const;
  private:
  bool _internal_has_player_input_bindings() const;
  public:
  void clear_player_input_bindings();
  const ::OakSave::PlayerInputBindings& player_input_bindings() const;
  ::OakSave::PlayerInputBindings* release_player_input_bindings();
  ::OakSave::PlayerInputBindings* mutable_player_input_bindings();
  void set_allocated_player_input_bindings(::OakSave::PlayerInputBindings* player_input_bindings);
  private:
  const ::OakSave::PlayerInputBindings& _internal_player_input_bindings() const;
  ::OakSave::PlayerInputBindings* _internal_mutable_player_input_bindings();
  public:
  void unsafe_arena_set_allocated_player_input_bindings(
      ::OakSave::PlayerInputBindings* player_input_bindings);
  ::OakSave::PlayerInputBindings* unsafe_arena_release_player_input_bindings();

  // .OakSave.OakProfileMenuTutorialInfo tutorial_info = 102;
  bool has_tutorial_info() const;
  private:
  bool _internal_has_tutorial_info() const;
  public:
  void clear_tutorial_info();
  const ::OakSave::OakProfileMenuTutorialInfo& tutorial_info() const;
  ::OakSave::OakProfileMenuTutorialInfo* release_tutorial_info();
  ::OakSave::OakProfileMenuTutorialInfo* mutable_tutorial_info();
  void set_allocated_tutorial_info(::OakSave::OakProfileMenuTutorialInfo* tutorial_info);
  private:
  const ::OakSave::OakProfileMenuTutorialInfo& _internal_tutorial_info() const;
  ::OakSave::OakProfileMenuTutorialInfo* _internal_mutable_tutorial_info();
  public:
  void unsafe_arena_set_allocated_tutorial_info(
      ::OakSave::OakProfileMenuTutorialInfo* tutorial_info);
  ::OakSave::OakProfileMenuTutorialInfo* unsafe_arena_release_tutorial_info();

  // .OakSave.GuardianRankProfileData guardian_rank = 146;
  bool has_guardian_rank() const;
  private:
  bool _internal_has_guardian_rank() const;
  public:
  void clear_guardian_rank();
  const ::OakSave::GuardianRankProfileData& guardian_rank() const;
  ::OakSave::GuardianRankProfileData* release_guardian_rank();
  ::OakSave::GuardianRankProfileData* mutable_guardian_rank();
  void set_allocated_guardian_rank(::OakSave::GuardianRankProfileData* guardian_rank);
  private:
  const ::OakSave::GuardianRankProfileData& _internal_guardian_rank() const;
  ::OakSave::GuardianRankProfileData* _internal_mutable_guardian_rank();
  public:
  void unsafe_arena_set_allocated_guardian_rank(
      ::OakSave::GuardianRankProfileData* guardian_rank);
  ::OakSave::GuardianRankProfileData* unsafe_arena_release_guardian_rank();

  // bool enable_aim_assist = 1;
  void clear_enable_aim_assist();
  bool enable_aim_assist() const;
  void set_enable_aim_assist(bool value);
  private:
  bool _internal_enable_aim_assist() const;
  void _internal_set_enable_aim_assist(bool value);
  public:

  // bool gamepad_invert_look = 2;
  void clear_gamepad_invert_look();
  bool gamepad_invert_look() const;
  void set_gamepad_invert_look(bool value);
  private:
  bool _internal_gamepad_invert_look() const;
  void _internal_set_gamepad_invert_look(bool value);
  public:

  // bool gamepad_invert_turn = 3;
  void clear_gamepad_invert_turn();
  bool gamepad_invert_turn() const;
  void set_gamepad_invert_turn(bool value);
  private:
  bool _internal_gamepad_invert_turn() const;
  void _internal_set_gamepad_invert_turn(bool value);
  public:

  // bool gamepad_invert_move = 4;
  void clear_gamepad_invert_move();
  bool gamepad_invert_move() const;
  void set_gamepad_invert_move(bool value);
  private:
  bool _internal_gamepad_invert_move() const;
  void _internal_set_gamepad_invert_move(bool value);
  public:

  // bool gamepad_invert_strafe = 5;
  void clear_gamepad_invert_strafe();
  bool gamepad_invert_strafe() const;
  void set_gamepad_invert_strafe(bool value);
  private:
  bool _internal_gamepad_invert_strafe() const;
  void _internal_set_gamepad_invert_strafe(bool value);
  public:

  // bool enable_vibration = 6;
  void clear_enable_vibration();
  bool enable_vibration() const;
  void set_enable_vibration(bool value);
  private:
  bool _internal_enable_vibration() const;
  void _internal_set_enable_vibration(bool value);
  public:

  // bool invert_mouse_pitch = 7;
  void clear_invert_mouse_pitch();
  bool invert_mouse_pitch() const;
  void set_invert_mouse_pitch(bool value);
  private:
  bool _internal_invert_mouse_pitch() const;
  void _internal_set_invert_mouse_pitch(bool value);
  public:

  // bool enable_mouse_smoothing = 8;
  void clear_enable_mouse_smoothing();
  bool enable_mouse_smoothing() const;
  void set_enable_mouse_smoothing(bool value);
  private:
  bool _internal_enable_mouse_smoothing() const;
  void _internal_set_enable_mouse_smoothing(bool value);
  public:

  // float mouse_scale = 9;
  void clear_mouse_scale();
  float mouse_scale() const;
  void set_mouse_scale(float value);
  private:
  float _internal_mouse_scale() const;
  void _internal_set_mouse_scale(float value);
  public:

  // bool show_damage_numbers = 10;
  void clear_show_damage_numbers();
  bool show_damage_numbers() const;
  void set_show_damage_numbers(bool value);
  private:
  bool _internal_show_damage_numbers() const;
  void _internal_set_show_damage_numbers(bool value);
  public:

  // bool show_damage_number_icons = 11;
  void clear_show_damage_number_icons();
  bool show_damage_number_icons() const;
  void set_show_damage_number_icons(bool value);
  private:
  bool _internal_show_damage_number_icons() const;
  void _internal_set_show_damage_number_icons(bool value);
  public:

  // bool enable_training_messages = 12;
  void clear_enable_training_messages();
  bool enable_training_messages() const;
  void set_enable_training_messages(bool value);
  private:
  bool _internal_enable_training_messages() const;
  void _internal_set_enable_training_messages(bool value);
  public:

  // bool show_text_chat = 13;
  void clear_show_text_chat();
  bool show_text_chat() const;
  void set_show_text_chat(bool value);
  private:
  bool _internal_show_text_chat() const;
  void _internal_set_show_text_chat(bool value);
  public:

  // bool center_crosshair = 14;
  void clear_center_crosshair();
  bool center_crosshair() const;
  void set_center_crosshair(bool value);
  private:
  bool _internal_center_crosshair() const;
  void _internal_set_center_crosshair(bool value);
  public:

  // bool toggle_sprint = 15;
  void clear_toggle_sprint();
  bool toggle_sprint() const;
  void set_toggle_sprint(bool value);
  private:
  bool _internal_toggle_sprint() const;
  void _internal_set_toggle_sprint(bool value);
  public:

  // bool toggle_crouch = 16;
  void clear_toggle_crouch();
  bool toggle_crouch() const;
  void set_toggle_crouch(bool value);
  private:
  bool _internal_toggle_crouch() const;
  void _internal_set_toggle_crouch(bool value);
  public:

  // bool censor_content = 17;
  void clear_censor_content();
  bool censor_content() const;
  void set_censor_content(bool value);
  private:
  bool _internal_censor_content() const;
  void _internal_set_censor_content(bool value);
  public:

  // float music_volume = 18;
  void clear_music_volume();
  float music_volume() const;
  void set_music_volume(float value);
  private:
  float _internal_music_volume() const;
  void _internal_set_music_volume(float value);
  public:

  // float sound_effects_volume = 19;
  void clear_sound_effects_volume();
  float sound_effects_volume() const;
  void set_sound_effects_volume(float value);
  private:
  float _internal_sound_effects_volume() const;
  void _internal_set_sound_effects_volume(float value);
  public:

  // float vo_volume = 20;
  void clear_vo_volume();
  float vo_volume() const;
  void set_vo_volume(float value);
  private:
  float _internal_vo_volume() const;
  void _internal_set_vo_volume(float value);
  public:

  // float voice_volume = 21;
  void clear_voice_volume();
  float voice_volume() const;
  void set_voice_volume(float value);
  private:
  float _internal_voice_volume() const;
  void _internal_set_voice_volume(float value);
  public:

  // bool enable_optional_vo = 22;
  void clear_enable_optional_vo();
  bool enable_optional_vo() const;
  void set_enable_optional_vo(bool value);
  private:
  bool _internal_enable_optional_vo() const;
  void _internal_set_enable_optional_vo(bool value);
  public:

  // bool push_to_talk = 23;
  void clear_push_to_talk();
  bool push_to_talk() const;
  void set_push_to_talk(bool value);
  private:
  bool _internal_push_to_talk() const;
  void _internal_set_push_to_talk(bool value);
  public:

  // bool enable_controller_audio = 24;
  void clear_enable_controller_audio();
  bool enable_controller_audio() const;
  void set_enable_controller_audio(bool value);
  private:
  bool _internal_enable_controller_audio() const;
  void _internal_set_enable_controller_audio(bool value);
  public:

  // bool mute_audio_on_focus_loss = 29;
  void clear_mute_audio_on_focus_loss();
  bool mute_audio_on_focus_loss() const;
  void set_mute_audio_on_focus_loss(bool value);
  private:
  bool _internal_mute_audio_on_focus_loss() const;
  void _internal_set_mute_audio_on_focus_loss(bool value);
  public:

  // float speaker_angle_front = 25;
  void clear_speaker_angle_front();
  float speaker_angle_front() const;
  void set_speaker_angle_front(float value);
  private:
  float _internal_speaker_angle_front() const;
  void _internal_set_speaker_angle_front(float value);
  public:

  // float speaker_angle_side = 26;
  void clear_speaker_angle_side();
  float speaker_angle_side() const;
  void set_speaker_angle_side(float value);
  private:
  float _internal_speaker_angle_side() const;
  void _internal_set_speaker_angle_side(float value);
  public:

  // float speaker_angle_back = 27;
  void clear_speaker_angle_back();
  float speaker_angle_back() const;
  void set_speaker_angle_back(float value);
  private:
  float _internal_speaker_angle_back() const;
  void _internal_set_speaker_angle_back(float value);
  public:

  // uint32 speaker_setup = 28;
  void clear_speaker_setup();
  ::PROTOBUF_NAMESPACE_ID::uint32 speaker_setup() const;
  void set_speaker_setup(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_speaker_setup() const;
  void _internal_set_speaker_setup(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 last_used_savegame_id = 37;
  void clear_last_used_savegame_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 last_used_savegame_id() const;
  void set_last_used_savegame_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_last_used_savegame_id() const;
  void _internal_set_last_used_savegame_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 gamepad_hip_sensitivity_level = 38;
  void clear_gamepad_hip_sensitivity_level();
  ::PROTOBUF_NAMESPACE_ID::int32 gamepad_hip_sensitivity_level() const;
  void set_gamepad_hip_sensitivity_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gamepad_hip_sensitivity_level() const;
  void _internal_set_gamepad_hip_sensitivity_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 gamepad_zoomed_sensitivity_level = 39;
  void clear_gamepad_zoomed_sensitivity_level();
  ::PROTOBUF_NAMESPACE_ID::int32 gamepad_zoomed_sensitivity_level() const;
  void set_gamepad_zoomed_sensitivity_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gamepad_zoomed_sensitivity_level() const;
  void _internal_set_gamepad_zoomed_sensitivity_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 gamepad_vehicle_sensitivity_level = 40;
  void clear_gamepad_vehicle_sensitivity_level();
  ::PROTOBUF_NAMESPACE_ID::int32 gamepad_vehicle_sensitivity_level() const;
  void set_gamepad_vehicle_sensitivity_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gamepad_vehicle_sensitivity_level() const;
  void _internal_set_gamepad_vehicle_sensitivity_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float gamepad_movement_dead_zone_x = 41;
  void clear_gamepad_movement_dead_zone_x();
  float gamepad_movement_dead_zone_x() const;
  void set_gamepad_movement_dead_zone_x(float value);
  private:
  float _internal_gamepad_movement_dead_zone_x() const;
  void _internal_set_gamepad_movement_dead_zone_x(float value);
  public:

  // float gamepad_movement_dead_zone_y = 42;
  void clear_gamepad_movement_dead_zone_y();
  float gamepad_movement_dead_zone_y() const;
  void set_gamepad_movement_dead_zone_y(float value);
  private:
  float _internal_gamepad_movement_dead_zone_y() const;
  void _internal_set_gamepad_movement_dead_zone_y(float value);
  public:

  // float gamepad_look_dead_zone_inner_x = 43;
  void clear_gamepad_look_dead_zone_inner_x();
  float gamepad_look_dead_zone_inner_x() const;
  void set_gamepad_look_dead_zone_inner_x(float value);
  private:
  float _internal_gamepad_look_dead_zone_inner_x() const;
  void _internal_set_gamepad_look_dead_zone_inner_x(float value);
  public:

  // float gamepad_look_dead_zone_outer_x = 44;
  void clear_gamepad_look_dead_zone_outer_x();
  float gamepad_look_dead_zone_outer_x() const;
  void set_gamepad_look_dead_zone_outer_x(float value);
  private:
  float _internal_gamepad_look_dead_zone_outer_x() const;
  void _internal_set_gamepad_look_dead_zone_outer_x(float value);
  public:

  // float gamepad_look_dead_zone_inner_y = 45;
  void clear_gamepad_look_dead_zone_inner_y();
  float gamepad_look_dead_zone_inner_y() const;
  void set_gamepad_look_dead_zone_inner_y(float value);
  private:
  float _internal_gamepad_look_dead_zone_inner_y() const;
  void _internal_set_gamepad_look_dead_zone_inner_y(float value);
  public:

  // float gamepad_look_dead_zone_outer_y = 46;
  void clear_gamepad_look_dead_zone_outer_y();
  float gamepad_look_dead_zone_outer_y() const;
  void set_gamepad_look_dead_zone_outer_y(float value);
  private:
  float _internal_gamepad_look_dead_zone_outer_y() const;
  void _internal_set_gamepad_look_dead_zone_outer_y(float value);
  public:

  // float gamepad_vehicle_movement_dead_zone_x = 47;
  void clear_gamepad_vehicle_movement_dead_zone_x();
  float gamepad_vehicle_movement_dead_zone_x() const;
  void set_gamepad_vehicle_movement_dead_zone_x(float value);
  private:
  float _internal_gamepad_vehicle_movement_dead_zone_x() const;
  void _internal_set_gamepad_vehicle_movement_dead_zone_x(float value);
  public:

  // float gamepad_vehicle_movement_dead_zone_y = 48;
  void clear_gamepad_vehicle_movement_dead_zone_y();
  float gamepad_vehicle_movement_dead_zone_y() const;
  void set_gamepad_vehicle_movement_dead_zone_y(float value);
  private:
  float _internal_gamepad_vehicle_movement_dead_zone_y() const;
  void _internal_set_gamepad_vehicle_movement_dead_zone_y(float value);
  public:

  // float gamepad_vehicle_look_dead_zone_inner_x = 49;
  void clear_gamepad_vehicle_look_dead_zone_inner_x();
  float gamepad_vehicle_look_dead_zone_inner_x() const;
  void set_gamepad_vehicle_look_dead_zone_inner_x(float value);
  private:
  float _internal_gamepad_vehicle_look_dead_zone_inner_x() const;
  void _internal_set_gamepad_vehicle_look_dead_zone_inner_x(float value);
  public:

  // float gamepad_vehicle_look_dead_zone_outer_x = 50;
  void clear_gamepad_vehicle_look_dead_zone_outer_x();
  float gamepad_vehicle_look_dead_zone_outer_x() const;
  void set_gamepad_vehicle_look_dead_zone_outer_x(float value);
  private:
  float _internal_gamepad_vehicle_look_dead_zone_outer_x() const;
  void _internal_set_gamepad_vehicle_look_dead_zone_outer_x(float value);
  public:

  // float gamepad_vehicle_look_dead_zone_inner_y = 51;
  void clear_gamepad_vehicle_look_dead_zone_inner_y();
  float gamepad_vehicle_look_dead_zone_inner_y() const;
  void set_gamepad_vehicle_look_dead_zone_inner_y(float value);
  private:
  float _internal_gamepad_vehicle_look_dead_zone_inner_y() const;
  void _internal_set_gamepad_vehicle_look_dead_zone_inner_y(float value);
  public:

  // float gamepad_vehicle_look_dead_zone_outer_y = 52;
  void clear_gamepad_vehicle_look_dead_zone_outer_y();
  float gamepad_vehicle_look_dead_zone_outer_y() const;
  void set_gamepad_vehicle_look_dead_zone_outer_y(float value);
  private:
  float _internal_gamepad_vehicle_look_dead_zone_outer_y() const;
  void _internal_set_gamepad_vehicle_look_dead_zone_outer_y(float value);
  public:

  // float gamepad_left_dead_zone_inner = 53;
  void clear_gamepad_left_dead_zone_inner();
  float gamepad_left_dead_zone_inner() const;
  void set_gamepad_left_dead_zone_inner(float value);
  private:
  float _internal_gamepad_left_dead_zone_inner() const;
  void _internal_set_gamepad_left_dead_zone_inner(float value);
  public:

  // bool hide_strict_nat_help_dialog = 34;
  void clear_hide_strict_nat_help_dialog();
  bool hide_strict_nat_help_dialog() const;
  void set_hide_strict_nat_help_dialog(bool value);
  private:
  bool _internal_hide_strict_nat_help_dialog() const;
  void _internal_set_hide_strict_nat_help_dialog(bool value);
  public:

  // bool gamepad_use_advanced_hip_aim_settings = 59;
  void clear_gamepad_use_advanced_hip_aim_settings();
  bool gamepad_use_advanced_hip_aim_settings() const;
  void set_gamepad_use_advanced_hip_aim_settings(bool value);
  private:
  bool _internal_gamepad_use_advanced_hip_aim_settings() const;
  void _internal_set_gamepad_use_advanced_hip_aim_settings(bool value);
  public:

  // bool gamepad_use_advanced_zoomed_aim_settings = 60;
  void clear_gamepad_use_advanced_zoomed_aim_settings();
  bool gamepad_use_advanced_zoomed_aim_settings() const;
  void set_gamepad_use_advanced_zoomed_aim_settings(bool value);
  private:
  bool _internal_gamepad_use_advanced_zoomed_aim_settings() const;
  void _internal_set_gamepad_use_advanced_zoomed_aim_settings(bool value);
  public:

  // bool gamepad_use_advanced_vehicle_aim_settings = 61;
  void clear_gamepad_use_advanced_vehicle_aim_settings();
  bool gamepad_use_advanced_vehicle_aim_settings() const;
  void set_gamepad_use_advanced_vehicle_aim_settings(bool value);
  private:
  bool _internal_gamepad_use_advanced_vehicle_aim_settings() const;
  void _internal_set_gamepad_use_advanced_vehicle_aim_settings(bool value);
  public:

  // float gamepad_left_dead_zone_outer = 54;
  void clear_gamepad_left_dead_zone_outer();
  float gamepad_left_dead_zone_outer() const;
  void set_gamepad_left_dead_zone_outer(float value);
  private:
  float _internal_gamepad_left_dead_zone_outer() const;
  void _internal_set_gamepad_left_dead_zone_outer(float value);
  public:

  // float gamepad_right_dead_zone_inner = 55;
  void clear_gamepad_right_dead_zone_inner();
  float gamepad_right_dead_zone_inner() const;
  void set_gamepad_right_dead_zone_inner(float value);
  private:
  float _internal_gamepad_right_dead_zone_inner() const;
  void _internal_set_gamepad_right_dead_zone_inner(float value);
  public:

  // float gamepad_right_dead_zone_outer = 56;
  void clear_gamepad_right_dead_zone_outer();
  float gamepad_right_dead_zone_outer() const;
  void set_gamepad_right_dead_zone_outer(float value);
  private:
  float _internal_gamepad_right_dead_zone_outer() const;
  void _internal_set_gamepad_right_dead_zone_outer(float value);
  public:

  // float gamepad_look_axial_dead_zone_scale = 57;
  void clear_gamepad_look_axial_dead_zone_scale();
  float gamepad_look_axial_dead_zone_scale() const;
  void set_gamepad_look_axial_dead_zone_scale(float value);
  private:
  float _internal_gamepad_look_axial_dead_zone_scale() const;
  void _internal_set_gamepad_look_axial_dead_zone_scale(float value);
  public:

  // float gamepad_move_axial_dead_zone_scale = 58;
  void clear_gamepad_move_axial_dead_zone_scale();
  float gamepad_move_axial_dead_zone_scale() const;
  void set_gamepad_move_axial_dead_zone_scale(float value);
  private:
  float _internal_gamepad_move_axial_dead_zone_scale() const;
  void _internal_set_gamepad_move_axial_dead_zone_scale(float value);
  public:

  // float gamepad_hip_yaw_rate = 62;
  void clear_gamepad_hip_yaw_rate();
  float gamepad_hip_yaw_rate() const;
  void set_gamepad_hip_yaw_rate(float value);
  private:
  float _internal_gamepad_hip_yaw_rate() const;
  void _internal_set_gamepad_hip_yaw_rate(float value);
  public:

  // float gamepad_hip_pitch_rate = 63;
  void clear_gamepad_hip_pitch_rate();
  float gamepad_hip_pitch_rate() const;
  void set_gamepad_hip_pitch_rate(float value);
  private:
  float _internal_gamepad_hip_pitch_rate() const;
  void _internal_set_gamepad_hip_pitch_rate(float value);
  public:

  // float gamepad_hip_extra_yaw = 64;
  void clear_gamepad_hip_extra_yaw();
  float gamepad_hip_extra_yaw() const;
  void set_gamepad_hip_extra_yaw(float value);
  private:
  float _internal_gamepad_hip_extra_yaw() const;
  void _internal_set_gamepad_hip_extra_yaw(float value);
  public:

  // float gamepad_hip_extra_pitch = 65;
  void clear_gamepad_hip_extra_pitch();
  float gamepad_hip_extra_pitch() const;
  void set_gamepad_hip_extra_pitch(float value);
  private:
  float _internal_gamepad_hip_extra_pitch() const;
  void _internal_set_gamepad_hip_extra_pitch(float value);
  public:

  // float gamepad_hip_ramp_up_time = 66;
  void clear_gamepad_hip_ramp_up_time();
  float gamepad_hip_ramp_up_time() const;
  void set_gamepad_hip_ramp_up_time(float value);
  private:
  float _internal_gamepad_hip_ramp_up_time() const;
  void _internal_set_gamepad_hip_ramp_up_time(float value);
  public:

  // float gamepad_hip_ramp_up_delay = 67;
  void clear_gamepad_hip_ramp_up_delay();
  float gamepad_hip_ramp_up_delay() const;
  void set_gamepad_hip_ramp_up_delay(float value);
  private:
  float _internal_gamepad_hip_ramp_up_delay() const;
  void _internal_set_gamepad_hip_ramp_up_delay(float value);
  public:

  // float gamepad_zoomed_yaw_rate = 68;
  void clear_gamepad_zoomed_yaw_rate();
  float gamepad_zoomed_yaw_rate() const;
  void set_gamepad_zoomed_yaw_rate(float value);
  private:
  float _internal_gamepad_zoomed_yaw_rate() const;
  void _internal_set_gamepad_zoomed_yaw_rate(float value);
  public:

  // float gamepad_zoomed_pitch_rate = 69;
  void clear_gamepad_zoomed_pitch_rate();
  float gamepad_zoomed_pitch_rate() const;
  void set_gamepad_zoomed_pitch_rate(float value);
  private:
  float _internal_gamepad_zoomed_pitch_rate() const;
  void _internal_set_gamepad_zoomed_pitch_rate(float value);
  public:

  // float gamepad_zoomed_extra_yaw = 70;
  void clear_gamepad_zoomed_extra_yaw();
  float gamepad_zoomed_extra_yaw() const;
  void set_gamepad_zoomed_extra_yaw(float value);
  private:
  float _internal_gamepad_zoomed_extra_yaw() const;
  void _internal_set_gamepad_zoomed_extra_yaw(float value);
  public:

  // float gamepad_zoomed_extra_pitch = 71;
  void clear_gamepad_zoomed_extra_pitch();
  float gamepad_zoomed_extra_pitch() const;
  void set_gamepad_zoomed_extra_pitch(float value);
  private:
  float _internal_gamepad_zoomed_extra_pitch() const;
  void _internal_set_gamepad_zoomed_extra_pitch(float value);
  public:

  // float gamepad_zoomed_ramp_up_time = 72;
  void clear_gamepad_zoomed_ramp_up_time();
  float gamepad_zoomed_ramp_up_time() const;
  void set_gamepad_zoomed_ramp_up_time(float value);
  private:
  float _internal_gamepad_zoomed_ramp_up_time() const;
  void _internal_set_gamepad_zoomed_ramp_up_time(float value);
  public:

  // float gamepad_zoomed_ramp_up_delay = 73;
  void clear_gamepad_zoomed_ramp_up_delay();
  float gamepad_zoomed_ramp_up_delay() const;
  void set_gamepad_zoomed_ramp_up_delay(float value);
  private:
  float _internal_gamepad_zoomed_ramp_up_delay() const;
  void _internal_set_gamepad_zoomed_ramp_up_delay(float value);
  public:

  // float gamepad_vehicle_yaw_rate = 74;
  void clear_gamepad_vehicle_yaw_rate();
  float gamepad_vehicle_yaw_rate() const;
  void set_gamepad_vehicle_yaw_rate(float value);
  private:
  float _internal_gamepad_vehicle_yaw_rate() const;
  void _internal_set_gamepad_vehicle_yaw_rate(float value);
  public:

  // float gamepad_vehicle_pitch_rate = 75;
  void clear_gamepad_vehicle_pitch_rate();
  float gamepad_vehicle_pitch_rate() const;
  void set_gamepad_vehicle_pitch_rate(float value);
  private:
  float _internal_gamepad_vehicle_pitch_rate() const;
  void _internal_set_gamepad_vehicle_pitch_rate(float value);
  public:

  // float gamepad_vehicle_extra_yaw = 76;
  void clear_gamepad_vehicle_extra_yaw();
  float gamepad_vehicle_extra_yaw() const;
  void set_gamepad_vehicle_extra_yaw(float value);
  private:
  float _internal_gamepad_vehicle_extra_yaw() const;
  void _internal_set_gamepad_vehicle_extra_yaw(float value);
  public:

  // float gamepad_vehicle_extra_pitch = 77;
  void clear_gamepad_vehicle_extra_pitch();
  float gamepad_vehicle_extra_pitch() const;
  void set_gamepad_vehicle_extra_pitch(float value);
  private:
  float _internal_gamepad_vehicle_extra_pitch() const;
  void _internal_set_gamepad_vehicle_extra_pitch(float value);
  public:

  // float gamepad_vehicle_ramp_up_time = 78;
  void clear_gamepad_vehicle_ramp_up_time();
  float gamepad_vehicle_ramp_up_time() const;
  void set_gamepad_vehicle_ramp_up_time(float value);
  private:
  float _internal_gamepad_vehicle_ramp_up_time() const;
  void _internal_set_gamepad_vehicle_ramp_up_time(float value);
  public:

  // float gamepad_vehicle_ramp_up_delay = 79;
  void clear_gamepad_vehicle_ramp_up_delay();
  float gamepad_vehicle_ramp_up_delay() const;
  void set_gamepad_vehicle_ramp_up_delay(float value);
  private:
  float _internal_gamepad_vehicle_ramp_up_delay() const;
  void _internal_set_gamepad_vehicle_ramp_up_delay(float value);
  public:

  // uint32 walking_joystick_scheme = 81;
  void clear_walking_joystick_scheme();
  ::PROTOBUF_NAMESPACE_ID::uint32 walking_joystick_scheme() const;
  void set_walking_joystick_scheme(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_walking_joystick_scheme() const;
  void _internal_set_walking_joystick_scheme(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 driving_joystick_scheme = 82;
  void clear_driving_joystick_scheme();
  ::PROTOBUF_NAMESPACE_ID::uint32 driving_joystick_scheme() const;
  void set_driving_joystick_scheme(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_driving_joystick_scheme() const;
  void _internal_set_driving_joystick_scheme(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float mouse_ads_scale = 83;
  void clear_mouse_ads_scale();
  float mouse_ads_scale() const;
  void set_mouse_ads_scale(float value);
  private:
  float _internal_mouse_ads_scale() const;
  void _internal_set_mouse_ads_scale(float value);
  public:

  // float mouse_vehicle_scale = 84;
  void clear_mouse_vehicle_scale();
  float mouse_vehicle_scale() const;
  void set_mouse_vehicle_scale(float value);
  private:
  float _internal_mouse_vehicle_scale() const;
  void _internal_set_mouse_vehicle_scale(float value);
  public:

  // bool ironsight_aim_assist = 80;
  void clear_ironsight_aim_assist();
  bool ironsight_aim_assist() const;
  void set_ironsight_aim_assist(bool value);
  private:
  bool _internal_ironsight_aim_assist() const;
  void _internal_set_ironsight_aim_assist(bool value);
  public:

  // bool mouse_ironsight_aim_assist = 85;
  void clear_mouse_ironsight_aim_assist();
  bool mouse_ironsight_aim_assist() const;
  void set_mouse_ironsight_aim_assist(bool value);
  private:
  bool _internal_mouse_ironsight_aim_assist() const;
  void _internal_set_mouse_ironsight_aim_assist(bool value);
  public:

  // bool weapon_aim_toggle = 87;
  void clear_weapon_aim_toggle();
  bool weapon_aim_toggle() const;
  void set_weapon_aim_toggle(bool value);
  private:
  bool _internal_weapon_aim_toggle() const;
  void _internal_set_weapon_aim_toggle(bool value);
  public:

  // bool mantle_requires_button = 88;
  void clear_mantle_requires_button();
  bool mantle_requires_button() const;
  void set_mantle_requires_button(bool value);
  private:
  bool _internal_mantle_requires_button() const;
  void _internal_set_mantle_requires_button(bool value);
  public:

  // uint32 vehicle_input_mode = 86;
  void clear_vehicle_input_mode();
  ::PROTOBUF_NAMESPACE_ID::uint32 vehicle_input_mode() const;
  void set_vehicle_input_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_vehicle_input_mode() const;
  void _internal_set_vehicle_input_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool fixed_minimap_rotation = 89;
  void clear_fixed_minimap_rotation();
  bool fixed_minimap_rotation() const;
  void set_fixed_minimap_rotation(bool value);
  private:
  bool _internal_fixed_minimap_rotation() const;
  void _internal_set_fixed_minimap_rotation(bool value);
  public:

  // bool map_invert_pitch = 90;
  void clear_map_invert_pitch();
  bool map_invert_pitch() const;
  void set_map_invert_pitch(bool value);
  private:
  bool _internal_map_invert_pitch() const;
  void _internal_set_map_invert_pitch(bool value);
  public:

  // bool map_invert_yaw = 91;
  void clear_map_invert_yaw();
  bool map_invert_yaw() const;
  void set_map_invert_yaw(bool value);
  private:
  bool _internal_map_invert_yaw() const;
  void _internal_set_map_invert_yaw(bool value);
  public:

  // bool swap_dual_wield_controls = 93;
  void clear_swap_dual_wield_controls();
  bool swap_dual_wield_controls() const;
  void set_swap_dual_wield_controls(bool value);
  private:
  bool _internal_swap_dual_wield_controls() const;
  void _internal_set_swap_dual_wield_controls(bool value);
  public:

  // uint32 difficulty = 92;
  void clear_difficulty();
  ::PROTOBUF_NAMESPACE_ID::uint32 difficulty() const;
  void set_difficulty(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_difficulty() const;
  void _internal_set_difficulty(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float base_fov = 94;
  void clear_base_fov();
  float base_fov() const;
  void set_base_fov(float value);
  private:
  float _internal_base_fov() const;
  void _internal_set_base_fov(float value);
  public:

  // uint32 crosshair_neutral_color_frame = 95;
  void clear_crosshair_neutral_color_frame();
  ::PROTOBUF_NAMESPACE_ID::uint32 crosshair_neutral_color_frame() const;
  void set_crosshair_neutral_color_frame(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_crosshair_neutral_color_frame() const;
  void _internal_set_crosshair_neutral_color_frame(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 crosshair_enemy_color_frame = 96;
  void clear_crosshair_enemy_color_frame();
  ::PROTOBUF_NAMESPACE_ID::uint32 crosshair_enemy_color_frame() const;
  void set_crosshair_enemy_color_frame(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_crosshair_enemy_color_frame() const;
  void _internal_set_crosshair_enemy_color_frame(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 crosshair_ally_color_frame = 97;
  void clear_crosshair_ally_color_frame();
  ::PROTOBUF_NAMESPACE_ID::uint32 crosshair_ally_color_frame() const;
  void set_crosshair_ally_color_frame(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_crosshair_ally_color_frame() const;
  void _internal_set_crosshair_ally_color_frame(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 default_network_type = 103;
  void clear_default_network_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 default_network_type() const;
  void set_default_network_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_default_network_type() const;
  void _internal_set_default_network_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 default_invite_type = 104;
  void clear_default_invite_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 default_invite_type() const;
  void set_default_invite_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_default_invite_type() const;
  void _internal_set_default_invite_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 streaming_service = 106;
  void clear_streaming_service();
  ::PROTOBUF_NAMESPACE_ID::uint32 streaming_service() const;
  void set_streaming_service(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_streaming_service() const;
  void _internal_set_streaming_service(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 max_cached_friend_events = 107;
  void clear_max_cached_friend_events();
  ::PROTOBUF_NAMESPACE_ID::int32 max_cached_friend_events() const;
  void set_max_cached_friend_events(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_cached_friend_events() const;
  void _internal_set_max_cached_friend_events(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 max_cached_friend_statuses = 108;
  void clear_max_cached_friend_statuses();
  ::PROTOBUF_NAMESPACE_ID::int32 max_cached_friend_statuses() const;
  void set_max_cached_friend_statuses(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_cached_friend_statuses() const;
  void _internal_set_max_cached_friend_statuses(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 last_whisper_fetch_events_time = 111;
  void clear_last_whisper_fetch_events_time();
  ::PROTOBUF_NAMESPACE_ID::int64 last_whisper_fetch_events_time() const;
  void set_last_whisper_fetch_events_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_last_whisper_fetch_events_time() const;
  void _internal_set_last_whisper_fetch_events_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 last_whisper_fetch_statuses_time = 112;
  void clear_last_whisper_fetch_statuses_time();
  ::PROTOBUF_NAMESPACE_ID::int64 last_whisper_fetch_statuses_time() const;
  void set_last_whisper_fetch_statuses_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_last_whisper_fetch_statuses_time() const;
  void _internal_set_last_whisper_fetch_statuses_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 desired_crossplay_state = 113;
  void clear_desired_crossplay_state();
  ::PROTOBUF_NAMESPACE_ID::uint32 desired_crossplay_state() const;
  void set_desired_crossplay_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_desired_crossplay_state() const;
  void _internal_set_desired_crossplay_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool enable_subtitles = 98;
  void clear_enable_subtitles();
  bool enable_subtitles() const;
  void set_enable_subtitles(bool value);
  private:
  bool _internal_enable_subtitles() const;
  void _internal_set_enable_subtitles(bool value);
  public:

  // bool enable_closed_captions = 99;
  void clear_enable_closed_captions();
  bool enable_closed_captions() const;
  void set_enable_closed_captions(bool value);
  private:
  bool _internal_enable_closed_captions() const;
  void _internal_set_enable_closed_captions(bool value);
  public:

  // bool enable_mouse_acceleration = 150;
  void clear_enable_mouse_acceleration();
  bool enable_mouse_acceleration() const;
  void set_enable_mouse_acceleration(bool value);
  private:
  bool _internal_enable_mouse_acceleration() const;
  void _internal_set_enable_mouse_acceleration(bool value);
  public:

  // bool enable_gamepad_input = 151;
  void clear_enable_gamepad_input();
  bool enable_gamepad_input() const;
  void set_enable_gamepad_input(bool value);
  private:
  bool _internal_enable_gamepad_input() const;
  void _internal_set_enable_gamepad_input(bool value);
  public:

  // int32 max_friend_encounter_size = 134;
  void clear_max_friend_encounter_size();
  ::PROTOBUF_NAMESPACE_ID::int32 max_friend_encounter_size() const;
  void set_max_friend_encounter_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_friend_encounter_size() const;
  void _internal_set_max_friend_encounter_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float master_volume = 153;
  void clear_master_volume();
  float master_volume() const;
  void set_master_volume(float value);
  private:
  float _internal_master_volume() const;
  void _internal_set_master_volume(float value);
  public:

  // uint32 monitor_display_type = 154;
  void clear_monitor_display_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 monitor_display_type() const;
  void set_monitor_display_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_monitor_display_type() const;
  void _internal_set_monitor_display_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 graphics_mode = 155;
  void clear_graphics_mode();
  ::PROTOBUF_NAMESPACE_ID::uint32 graphics_mode() const;
  void set_graphics_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_graphics_mode() const;
  void _internal_set_graphics_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 frame_rate_limit = 156;
  void clear_frame_rate_limit();
  ::PROTOBUF_NAMESPACE_ID::uint32 frame_rate_limit() const;
  void set_frame_rate_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_frame_rate_limit() const;
  void _internal_set_frame_rate_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float base_vehicle_fov = 157;
  void clear_base_vehicle_fov();
  float base_vehicle_fov() const;
  void set_base_vehicle_fov(float value);
  private:
  float _internal_base_vehicle_fov() const;
  void _internal_set_base_vehicle_fov(float value);
  public:

  // uint32 graphics_quality = 158;
  void clear_graphics_quality();
  ::PROTOBUF_NAMESPACE_ID::uint32 graphics_quality() const;
  void set_graphics_quality(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_graphics_quality() const;
  void _internal_set_graphics_quality(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 anisotropic_filtering = 159;
  void clear_anisotropic_filtering();
  ::PROTOBUF_NAMESPACE_ID::uint32 anisotropic_filtering() const;
  void set_anisotropic_filtering(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_anisotropic_filtering() const;
  void _internal_set_anisotropic_filtering(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 shadow_quality = 160;
  void clear_shadow_quality();
  ::PROTOBUF_NAMESPACE_ID::uint32 shadow_quality() const;
  void set_shadow_quality(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_shadow_quality() const;
  void _internal_set_shadow_quality(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 display_performance_stats = 161;
  void clear_display_performance_stats();
  ::PROTOBUF_NAMESPACE_ID::uint32 display_performance_stats() const;
  void set_display_performance_stats(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_display_performance_stats() const;
  void _internal_set_display_performance_stats(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 texture_detail = 162;
  void clear_texture_detail();
  ::PROTOBUF_NAMESPACE_ID::uint32 texture_detail() const;
  void set_texture_detail(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_texture_detail() const;
  void _internal_set_texture_detail(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 draw_distance = 163;
  void clear_draw_distance();
  ::PROTOBUF_NAMESPACE_ID::uint32 draw_distance() const;
  void set_draw_distance(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_draw_distance() const;
  void _internal_set_draw_distance(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 clutter = 164;
  void clear_clutter();
  ::PROTOBUF_NAMESPACE_ID::uint32 clutter() const;
  void set_clutter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_clutter() const;
  void _internal_set_clutter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 tessellation = 165;
  void clear_tessellation();
  ::PROTOBUF_NAMESPACE_ID::uint32 tessellation() const;
  void set_tessellation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tessellation() const;
  void _internal_set_tessellation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool use_classic_gamepad_input = 152;
  void clear_use_classic_gamepad_input();
  bool use_classic_gamepad_input() const;
  void set_use_classic_gamepad_input(bool value);
  private:
  bool _internal_use_classic_gamepad_input() const;
  void _internal_set_use_classic_gamepad_input(bool value);
  public:

  // bool foliage_shadows = 167;
  void clear_foliage_shadows();
  bool foliage_shadows() const;
  void set_foliage_shadows(bool value);
  private:
  bool _internal_foliage_shadows() const;
  void _internal_set_foliage_shadows(bool value);
  public:

  // bool planar_reflections = 168;
  void clear_planar_reflections();
  bool planar_reflections() const;
  void set_planar_reflections(bool value);
  private:
  bool _internal_planar_reflections() const;
  void _internal_set_planar_reflections(bool value);
  public:

  // bool object_motion_blur = 174;
  void clear_object_motion_blur();
  bool object_motion_blur() const;
  void set_object_motion_blur(bool value);
  private:
  bool _internal_object_motion_blur() const;
  void _internal_set_object_motion_blur(bool value);
  public:

  // uint32 foliage = 166;
  void clear_foliage();
  ::PROTOBUF_NAMESPACE_ID::uint32 foliage() const;
  void set_foliage(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_foliage() const;
  void _internal_set_foliage(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 volumetric_fog = 169;
  void clear_volumetric_fog();
  ::PROTOBUF_NAMESPACE_ID::uint32 volumetric_fog() const;
  void set_volumetric_fog(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_volumetric_fog() const;
  void _internal_set_volumetric_fog(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 screen_space_reflections = 170;
  void clear_screen_space_reflections();
  ::PROTOBUF_NAMESPACE_ID::uint32 screen_space_reflections() const;
  void set_screen_space_reflections(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_screen_space_reflections() const;
  void _internal_set_screen_space_reflections(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 character_texture_detail = 171;
  void clear_character_texture_detail();
  ::PROTOBUF_NAMESPACE_ID::uint32 character_texture_detail() const;
  void set_character_texture_detail(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_character_texture_detail() const;
  void _internal_set_character_texture_detail(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 character_detail = 172;
  void clear_character_detail();
  ::PROTOBUF_NAMESPACE_ID::uint32 character_detail() const;
  void set_character_detail(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_character_detail() const;
  void _internal_set_character_detail(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 ambient_occlusion_quality = 173;
  void clear_ambient_occlusion_quality();
  ::PROTOBUF_NAMESPACE_ID::uint32 ambient_occlusion_quality() const;
  void set_ambient_occlusion_quality(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ambient_occlusion_quality() const;
  void _internal_set_ambient_occlusion_quality(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool lens_flare = 175;
  void clear_lens_flare();
  bool lens_flare() const;
  void set_lens_flare(bool value);
  private:
  bool _internal_lens_flare() const;
  void _internal_set_lens_flare(bool value);
  public:

  // bool combat_number_long_format = 176;
  void clear_combat_number_long_format();
  bool combat_number_long_format() const;
  void set_combat_number_long_format(bool value);
  private:
  bool _internal_combat_number_long_format() const;
  void _internal_set_combat_number_long_format(bool value);
  public:

  // bool show_minimap_legendaries = 177;
  void clear_show_minimap_legendaries();
  bool show_minimap_legendaries() const;
  void set_show_minimap_legendaries(bool value);
  private:
  bool _internal_show_minimap_legendaries() const;
  void _internal_set_show_minimap_legendaries(bool value);
  public:

  // bool use_player_callouts = 178;
  void clear_use_player_callouts();
  bool use_player_callouts() const;
  void set_use_player_callouts(bool value);
  private:
  bool _internal_use_player_callouts() const;
  void _internal_set_use_player_callouts(bool value);
  public:

  // uint32 friend_event_notification_lifetime = 179;
  void clear_friend_event_notification_lifetime();
  ::PROTOBUF_NAMESPACE_ID::uint32 friend_event_notification_lifetime() const;
  void set_friend_event_notification_lifetime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_friend_event_notification_lifetime() const;
  void _internal_set_friend_event_notification_lifetime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 friend_event_notification_frequency = 180;
  void clear_friend_event_notification_frequency();
  ::PROTOBUF_NAMESPACE_ID::uint32 friend_event_notification_frequency() const;
  void set_friend_event_notification_frequency(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_friend_event_notification_frequency() const;
  void _internal_set_friend_event_notification_frequency(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 trade_request_reception_type = 181;
  void clear_trade_request_reception_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 trade_request_reception_type() const;
  void set_trade_request_reception_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_trade_request_reception_type() const;
  void _internal_set_trade_request_reception_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float head_bob_scale = 182;
  void clear_head_bob_scale();
  float head_bob_scale() const;
  void set_head_bob_scale(float value);
  private:
  float _internal_head_bob_scale() const;
  void _internal_set_head_bob_scale(float value);
  public:

  // float subs_cc_size = 189;
  void clear_subs_cc_size();
  float subs_cc_size() const;
  void set_subs_cc_size(float value);
  private:
  float _internal_subs_cc_size() const;
  void _internal_set_subs_cc_size(float value);
  public:

  // float cc_subs_background_opacity = 190;
  void clear_cc_subs_background_opacity();
  float cc_subs_background_opacity() const;
  void set_cc_subs_background_opacity(float value);
  private:
  float _internal_cc_subs_background_opacity() const;
  void _internal_set_cc_subs_background_opacity(float value);
  public:

  // uint32 walking_button_scheme = 191;
  void clear_walking_button_scheme();
  ::PROTOBUF_NAMESPACE_ID::uint32 walking_button_scheme() const;
  void set_walking_button_scheme(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_walking_button_scheme() const;
  void _internal_set_walking_button_scheme(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 driving_button_scheme = 192;
  void clear_driving_button_scheme();
  ::PROTOBUF_NAMESPACE_ID::uint32 driving_button_scheme() const;
  void set_driving_button_scheme(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_driving_button_scheme() const;
  void _internal_set_driving_button_scheme(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 glyph_mode = 193;
  void clear_glyph_mode();
  ::PROTOBUF_NAMESPACE_ID::uint32 glyph_mode() const;
  void set_glyph_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_glyph_mode() const;
  void _internal_set_glyph_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool has_seen_first_boot = 184;
  void clear_has_seen_first_boot();
  bool has_seen_first_boot() const;
  void set_has_seen_first_boot(bool value);
  private:
  bool _internal_has_seen_first_boot() const;
  void _internal_set_has_seen_first_boot(bool value);
  public:

  // bool use_MPH = 194;
  void clear_use_mph();
  bool use_mph() const;
  void set_use_mph(bool value);
  private:
  bool _internal_use_mph() const;
  void _internal_set_use_mph(bool value);
  public:

  // bool auto_centering_enabled = 197;
  void clear_auto_centering_enabled();
  bool auto_centering_enabled() const;
  void set_auto_centering_enabled(bool value);
  private:
  bool _internal_auto_centering_enabled() const;
  void _internal_set_auto_centering_enabled(bool value);
  public:

  // bool increased_chance_for_subscribers = 198;
  void clear_increased_chance_for_subscribers();
  bool increased_chance_for_subscribers() const;
  void set_increased_chance_for_subscribers(bool value);
  private:
  bool _internal_increased_chance_for_subscribers() const;
  void _internal_set_increased_chance_for_subscribers(bool value);
  public:

  // bool bCitizenScienceHasSeenIntroVideo = 227;
  void clear_bcitizensciencehasseenintrovideo();
  bool bcitizensciencehasseenintrovideo() const;
  void set_bcitizensciencehasseenintrovideo(bool value);
  private:
  bool _internal_bcitizensciencehasseenintrovideo() const;
  void _internal_set_bcitizensciencehasseenintrovideo(bool value);
  public:

  // bool bCitizenScienceTutorialDone = 228;
  void clear_bcitizensciencetutorialdone();
  bool bcitizensciencetutorialdone() const;
  void set_bcitizensciencetutorialdone(bool value);
  private:
  bool _internal_bcitizensciencetutorialdone() const;
  void _internal_set_bcitizensciencetutorialdone(bool value);
  public:

  // bool fixed_initial_zonemap_rotation = 230;
  void clear_fixed_initial_zonemap_rotation();
  bool fixed_initial_zonemap_rotation() const;
  void set_fixed_initial_zonemap_rotation(bool value);
  private:
  bool _internal_fixed_initial_zonemap_rotation() const;
  void _internal_set_fixed_initial_zonemap_rotation(bool value);
  public:

  // bool rare_chest_event_enabled = 199;
  void clear_rare_chest_event_enabled();
  bool rare_chest_event_enabled() const;
  void set_rare_chest_event_enabled(bool value);
  private:
  bool _internal_rare_chest_event_enabled() const;
  void _internal_set_rare_chest_event_enabled(bool value);
  public:

  // bool badass_event_enabled = 200;
  void clear_badass_event_enabled();
  bool badass_event_enabled() const;
  void set_badass_event_enabled(bool value);
  private:
  bool _internal_badass_event_enabled() const;
  void _internal_set_badass_event_enabled(bool value);
  public:

  // bool pinata_event_enabled = 201;
  void clear_pinata_event_enabled();
  bool pinata_event_enabled() const;
  void set_pinata_event_enabled(bool value);
  private:
  bool _internal_pinata_event_enabled() const;
  void _internal_set_pinata_event_enabled(bool value);
  public:

  // bool disable_spatial_audio = 204;
  void clear_disable_spatial_audio();
  bool disable_spatial_audio() const;
  void set_disable_spatial_audio(bool value);
  private:
  bool _internal_disable_spatial_audio() const;
  void _internal_set_disable_spatial_audio(bool value);
  public:

  // int32 min_time_between_badass_events = 202;
  void clear_min_time_between_badass_events();
  ::PROTOBUF_NAMESPACE_ID::int32 min_time_between_badass_events() const;
  void set_min_time_between_badass_events(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_min_time_between_badass_events() const;
  void _internal_set_min_time_between_badass_events(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float hud_scale_multiplier = 203;
  void clear_hud_scale_multiplier();
  float hud_scale_multiplier() const;
  void set_hud_scale_multiplier(float value);
  private:
  float _internal_hud_scale_multiplier() const;
  void _internal_set_hud_scale_multiplier(float value);
  public:

  // int32 total_playtime_seconds = 205;
  void clear_total_playtime_seconds();
  ::PROTOBUF_NAMESPACE_ID::int32 total_playtime_seconds() const;
  void set_total_playtime_seconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_playtime_seconds() const;
  void _internal_set_total_playtime_seconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 moxxis_drink_event_bits_product_id = 207;
  void clear_moxxis_drink_event_bits_product_id();
  ::PROTOBUF_NAMESPACE_ID::int32 moxxis_drink_event_bits_product_id() const;
  void set_moxxis_drink_event_bits_product_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_moxxis_drink_event_bits_product_id() const;
  void _internal_set_moxxis_drink_event_bits_product_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool moxxis_drink_event_enabled = 206;
  void clear_moxxis_drink_event_enabled();
  bool moxxis_drink_event_enabled() const;
  void set_moxxis_drink_event_enabled(bool value);
  private:
  bool _internal_moxxis_drink_event_enabled() const;
  void _internal_set_moxxis_drink_event_enabled(bool value);
  public:

  // bool default_dead_zone_inner_updated = 210;
  void clear_default_dead_zone_inner_updated();
  bool default_dead_zone_inner_updated() const;
  void set_default_dead_zone_inner_updated(bool value);
  private:
  bool _internal_default_dead_zone_inner_updated() const;
  void _internal_set_default_dead_zone_inner_updated(bool value);
  public:

  // bool disable_event_content = 211;
  void clear_disable_event_content();
  bool disable_event_content() const;
  void set_disable_event_content(bool value);
  private:
  bool _internal_disable_event_content() const;
  void _internal_set_disable_event_content(bool value);
  public:

  // bool needs_shift_first_boot = 213;
  void clear_needs_shift_first_boot();
  bool needs_shift_first_boot() const;
  void set_needs_shift_first_boot(bool value);
  private:
  bool _internal_needs_shift_first_boot() const;
  void _internal_set_needs_shift_first_boot(bool value);
  public:

  // uint32 desired_friend_sync_state = 212;
  void clear_desired_friend_sync_state();
  ::PROTOBUF_NAMESPACE_ID::uint32 desired_friend_sync_state() const;
  void set_desired_friend_sync_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_desired_friend_sync_state() const;
  void _internal_set_desired_friend_sync_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 CitizenScienceActiveBoosterIndex = 215;
  void clear_citizenscienceactiveboosterindex();
  ::PROTOBUF_NAMESPACE_ID::int32 citizenscienceactiveboosterindex() const;
  void set_citizenscienceactiveboosterindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_citizenscienceactiveboosterindex() const;
  void _internal_set_citizenscienceactiveboosterindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float CitizenScienceActiveBoosterRemainingTime = 216;
  void clear_citizenscienceactiveboosterremainingtime();
  float citizenscienceactiveboosterremainingtime() const;
  void set_citizenscienceactiveboosterremainingtime(float value);
  private:
  float _internal_citizenscienceactiveboosterremainingtime() const;
  void _internal_set_citizenscienceactiveboosterremainingtime(float value);
  public:

  // float CitizenScienceActiveBoosterTotalTime = 217;
  void clear_citizenscienceactiveboostertotaltime();
  float citizenscienceactiveboostertotaltime() const;
  void set_citizenscienceactiveboostertotaltime(float value);
  private:
  float _internal_citizenscienceactiveboostertotaltime() const;
  void _internal_set_citizenscienceactiveboostertotaltime(float value);
  public:

  // int32 StreamerPrimaryActiveBoosterIndex = 218;
  void clear_streamerprimaryactiveboosterindex();
  ::PROTOBUF_NAMESPACE_ID::int32 streamerprimaryactiveboosterindex() const;
  void set_streamerprimaryactiveboosterindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_streamerprimaryactiveboosterindex() const;
  void _internal_set_streamerprimaryactiveboosterindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float StreamerPrimaryActiveBoosterRemainingTime = 219;
  void clear_streamerprimaryactiveboosterremainingtime();
  float streamerprimaryactiveboosterremainingtime() const;
  void set_streamerprimaryactiveboosterremainingtime(float value);
  private:
  float _internal_streamerprimaryactiveboosterremainingtime() const;
  void _internal_set_streamerprimaryactiveboosterremainingtime(float value);
  public:

  // float StreamerPrimaryActiveBoosterTotalTime = 220;
  void clear_streamerprimaryactiveboostertotaltime();
  float streamerprimaryactiveboostertotaltime() const;
  void set_streamerprimaryactiveboostertotaltime(float value);
  private:
  float _internal_streamerprimaryactiveboostertotaltime() const;
  void _internal_set_streamerprimaryactiveboostertotaltime(float value);
  public:

  // int32 StreamerSecondaryActiveBoosterIndex = 221;
  void clear_streamersecondaryactiveboosterindex();
  ::PROTOBUF_NAMESPACE_ID::int32 streamersecondaryactiveboosterindex() const;
  void set_streamersecondaryactiveboosterindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_streamersecondaryactiveboosterindex() const;
  void _internal_set_streamersecondaryactiveboosterindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float StreamerSecondaryActiveBoosterRemainingTime = 222;
  void clear_streamersecondaryactiveboosterremainingtime();
  float streamersecondaryactiveboosterremainingtime() const;
  void set_streamersecondaryactiveboosterremainingtime(float value);
  private:
  float _internal_streamersecondaryactiveboosterremainingtime() const;
  void _internal_set_streamersecondaryactiveboosterremainingtime(float value);
  public:

  // float StreamerSecondaryActiveBoosterTotalTime = 223;
  void clear_streamersecondaryactiveboostertotaltime();
  float streamersecondaryactiveboostertotaltime() const;
  void set_streamersecondaryactiveboostertotaltime(float value);
  private:
  float _internal_streamersecondaryactiveboostertotaltime() const;
  void _internal_set_streamersecondaryactiveboostertotaltime(float value);
  public:

  // int32 StreamerBoosterTier = 224;
  void clear_streamerboostertier();
  ::PROTOBUF_NAMESPACE_ID::int32 streamerboostertier() const;
  void set_streamerboostertier(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_streamerboostertier() const;
  void _internal_set_streamerboostertier(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 CitizenScienceCSBucksAmount = 226;
  void clear_citizensciencecsbucksamount();
  ::PROTOBUF_NAMESPACE_ID::int32 citizensciencecsbucksamount() const;
  void set_citizensciencecsbucksamount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_citizensciencecsbucksamount() const;
  void _internal_set_citizensciencecsbucksamount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:OakSave.Profile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > news_hashes_;
  mutable std::atomic<int> _news_hashes_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::OakProfileLastInventoryFilterInfo > inventory_screen_last_filter_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> friend_events_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> friend_statuses_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::Profile_FriendEncountersEntry > friend_encounters_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::GameStatSaveGameData > profile_stats_data_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::InventoryCategorySaveData > bank_inventory_category_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> bank_inventory_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> lost_loot_inventory_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::OakMailItem > npc_mail_items_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> mail_guids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> unread_mail_guids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::GearSoldByFriendData > gear_sold_by_friends_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::OakSDUSaveGameData > profile_sdu_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::OakCustomizationSaveGameData > unlocked_customizations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::OakInventoryCustomizationPartInfo > unlocked_inventory_customization_parts_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::CrewQuartersDecorationItemSaveGameData > unlocked_crew_quarters_decorations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::CrewQuartersRoomItemSaveGameData > unlocked_crew_quarters_rooms_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::RegisteredDownloadableEntitlements > registered_downloadable_entitlements_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> seen_news_items_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::ChallengeSaveGameData > challenge_data_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > citizensciencelevelprogression_;
  mutable std::atomic<int> _citizensciencelevelprogression_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::RecentlyMetPlayer > recently_met_players_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_status_menu_page_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr matchmaking_region_;
  ::OakSave::PlayerInputBindings* player_input_bindings_;
  ::OakSave::OakProfileMenuTutorialInfo* tutorial_info_;
  ::OakSave::GuardianRankProfileData* guardian_rank_;
  bool enable_aim_assist_;
  bool gamepad_invert_look_;
  bool gamepad_invert_turn_;
  bool gamepad_invert_move_;
  bool gamepad_invert_strafe_;
  bool enable_vibration_;
  bool invert_mouse_pitch_;
  bool enable_mouse_smoothing_;
  float mouse_scale_;
  bool show_damage_numbers_;
  bool show_damage_number_icons_;
  bool enable_training_messages_;
  bool show_text_chat_;
  bool center_crosshair_;
  bool toggle_sprint_;
  bool toggle_crouch_;
  bool censor_content_;
  float music_volume_;
  float sound_effects_volume_;
  float vo_volume_;
  float voice_volume_;
  bool enable_optional_vo_;
  bool push_to_talk_;
  bool enable_controller_audio_;
  bool mute_audio_on_focus_loss_;
  float speaker_angle_front_;
  float speaker_angle_side_;
  float speaker_angle_back_;
  ::PROTOBUF_NAMESPACE_ID::uint32 speaker_setup_;
  ::PROTOBUF_NAMESPACE_ID::uint32 last_used_savegame_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 gamepad_hip_sensitivity_level_;
  ::PROTOBUF_NAMESPACE_ID::int32 gamepad_zoomed_sensitivity_level_;
  ::PROTOBUF_NAMESPACE_ID::int32 gamepad_vehicle_sensitivity_level_;
  float gamepad_movement_dead_zone_x_;
  float gamepad_movement_dead_zone_y_;
  float gamepad_look_dead_zone_inner_x_;
  float gamepad_look_dead_zone_outer_x_;
  float gamepad_look_dead_zone_inner_y_;
  float gamepad_look_dead_zone_outer_y_;
  float gamepad_vehicle_movement_dead_zone_x_;
  float gamepad_vehicle_movement_dead_zone_y_;
  float gamepad_vehicle_look_dead_zone_inner_x_;
  float gamepad_vehicle_look_dead_zone_outer_x_;
  float gamepad_vehicle_look_dead_zone_inner_y_;
  float gamepad_vehicle_look_dead_zone_outer_y_;
  float gamepad_left_dead_zone_inner_;
  bool hide_strict_nat_help_dialog_;
  bool gamepad_use_advanced_hip_aim_settings_;
  bool gamepad_use_advanced_zoomed_aim_settings_;
  bool gamepad_use_advanced_vehicle_aim_settings_;
  float gamepad_left_dead_zone_outer_;
  float gamepad_right_dead_zone_inner_;
  float gamepad_right_dead_zone_outer_;
  float gamepad_look_axial_dead_zone_scale_;
  float gamepad_move_axial_dead_zone_scale_;
  float gamepad_hip_yaw_rate_;
  float gamepad_hip_pitch_rate_;
  float gamepad_hip_extra_yaw_;
  float gamepad_hip_extra_pitch_;
  float gamepad_hip_ramp_up_time_;
  float gamepad_hip_ramp_up_delay_;
  float gamepad_zoomed_yaw_rate_;
  float gamepad_zoomed_pitch_rate_;
  float gamepad_zoomed_extra_yaw_;
  float gamepad_zoomed_extra_pitch_;
  float gamepad_zoomed_ramp_up_time_;
  float gamepad_zoomed_ramp_up_delay_;
  float gamepad_vehicle_yaw_rate_;
  float gamepad_vehicle_pitch_rate_;
  float gamepad_vehicle_extra_yaw_;
  float gamepad_vehicle_extra_pitch_;
  float gamepad_vehicle_ramp_up_time_;
  float gamepad_vehicle_ramp_up_delay_;
  ::PROTOBUF_NAMESPACE_ID::uint32 walking_joystick_scheme_;
  ::PROTOBUF_NAMESPACE_ID::uint32 driving_joystick_scheme_;
  float mouse_ads_scale_;
  float mouse_vehicle_scale_;
  bool ironsight_aim_assist_;
  bool mouse_ironsight_aim_assist_;
  bool weapon_aim_toggle_;
  bool mantle_requires_button_;
  ::PROTOBUF_NAMESPACE_ID::uint32 vehicle_input_mode_;
  bool fixed_minimap_rotation_;
  bool map_invert_pitch_;
  bool map_invert_yaw_;
  bool swap_dual_wield_controls_;
  ::PROTOBUF_NAMESPACE_ID::uint32 difficulty_;
  float base_fov_;
  ::PROTOBUF_NAMESPACE_ID::uint32 crosshair_neutral_color_frame_;
  ::PROTOBUF_NAMESPACE_ID::uint32 crosshair_enemy_color_frame_;
  ::PROTOBUF_NAMESPACE_ID::uint32 crosshair_ally_color_frame_;
  ::PROTOBUF_NAMESPACE_ID::uint32 default_network_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 default_invite_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 streaming_service_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_cached_friend_events_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_cached_friend_statuses_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_whisper_fetch_events_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_whisper_fetch_statuses_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 desired_crossplay_state_;
  bool enable_subtitles_;
  bool enable_closed_captions_;
  bool enable_mouse_acceleration_;
  bool enable_gamepad_input_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_friend_encounter_size_;
  float master_volume_;
  ::PROTOBUF_NAMESPACE_ID::uint32 monitor_display_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 graphics_mode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 frame_rate_limit_;
  float base_vehicle_fov_;
  ::PROTOBUF_NAMESPACE_ID::uint32 graphics_quality_;
  ::PROTOBUF_NAMESPACE_ID::uint32 anisotropic_filtering_;
  ::PROTOBUF_NAMESPACE_ID::uint32 shadow_quality_;
  ::PROTOBUF_NAMESPACE_ID::uint32 display_performance_stats_;
  ::PROTOBUF_NAMESPACE_ID::uint32 texture_detail_;
  ::PROTOBUF_NAMESPACE_ID::uint32 draw_distance_;
  ::PROTOBUF_NAMESPACE_ID::uint32 clutter_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tessellation_;
  bool use_classic_gamepad_input_;
  bool foliage_shadows_;
  bool planar_reflections_;
  bool object_motion_blur_;
  ::PROTOBUF_NAMESPACE_ID::uint32 foliage_;
  ::PROTOBUF_NAMESPACE_ID::uint32 volumetric_fog_;
  ::PROTOBUF_NAMESPACE_ID::uint32 screen_space_reflections_;
  ::PROTOBUF_NAMESPACE_ID::uint32 character_texture_detail_;
  ::PROTOBUF_NAMESPACE_ID::uint32 character_detail_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ambient_occlusion_quality_;
  bool lens_flare_;
  bool combat_number_long_format_;
  bool show_minimap_legendaries_;
  bool use_player_callouts_;
  ::PROTOBUF_NAMESPACE_ID::uint32 friend_event_notification_lifetime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 friend_event_notification_frequency_;
  ::PROTOBUF_NAMESPACE_ID::uint32 trade_request_reception_type_;
  float head_bob_scale_;
  float subs_cc_size_;
  float cc_subs_background_opacity_;
  ::PROTOBUF_NAMESPACE_ID::uint32 walking_button_scheme_;
  ::PROTOBUF_NAMESPACE_ID::uint32 driving_button_scheme_;
  ::PROTOBUF_NAMESPACE_ID::uint32 glyph_mode_;
  bool has_seen_first_boot_;
  bool use_mph_;
  bool auto_centering_enabled_;
  bool increased_chance_for_subscribers_;
  bool bcitizensciencehasseenintrovideo_;
  bool bcitizensciencetutorialdone_;
  bool fixed_initial_zonemap_rotation_;
  bool rare_chest_event_enabled_;
  bool badass_event_enabled_;
  bool pinata_event_enabled_;
  bool disable_spatial_audio_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_time_between_badass_events_;
  float hud_scale_multiplier_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_playtime_seconds_;
  ::PROTOBUF_NAMESPACE_ID::int32 moxxis_drink_event_bits_product_id_;
  bool moxxis_drink_event_enabled_;
  bool default_dead_zone_inner_updated_;
  bool disable_event_content_;
  bool needs_shift_first_boot_;
  ::PROTOBUF_NAMESPACE_ID::uint32 desired_friend_sync_state_;
  ::PROTOBUF_NAMESPACE_ID::int32 citizenscienceactiveboosterindex_;
  float citizenscienceactiveboosterremainingtime_;
  float citizenscienceactiveboostertotaltime_;
  ::PROTOBUF_NAMESPACE_ID::int32 streamerprimaryactiveboosterindex_;
  float streamerprimaryactiveboosterremainingtime_;
  float streamerprimaryactiveboostertotaltime_;
  ::PROTOBUF_NAMESPACE_ID::int32 streamersecondaryactiveboosterindex_;
  float streamersecondaryactiveboosterremainingtime_;
  float streamersecondaryactiveboostertotaltime_;
  ::PROTOBUF_NAMESPACE_ID::int32 streamerboostertier_;
  ::PROTOBUF_NAMESPACE_ID::int32 citizensciencecsbucksamount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OakProfile_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PlayerInputBinding_Button

// string rebind_data_path = 1;
inline void PlayerInputBinding_Button::clear_rebind_data_path() {
  rebind_data_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PlayerInputBinding_Button::rebind_data_path() const {
  // @@protoc_insertion_point(field_get:OakSave.PlayerInputBinding_Button.rebind_data_path)
  return _internal_rebind_data_path();
}
inline void PlayerInputBinding_Button::set_rebind_data_path(const std::string& value) {
  _internal_set_rebind_data_path(value);
  // @@protoc_insertion_point(field_set:OakSave.PlayerInputBinding_Button.rebind_data_path)
}
inline std::string* PlayerInputBinding_Button::mutable_rebind_data_path() {
  // @@protoc_insertion_point(field_mutable:OakSave.PlayerInputBinding_Button.rebind_data_path)
  return _internal_mutable_rebind_data_path();
}
inline const std::string& PlayerInputBinding_Button::_internal_rebind_data_path() const {
  return rebind_data_path_.Get();
}
inline void PlayerInputBinding_Button::_internal_set_rebind_data_path(const std::string& value) {
  
  rebind_data_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PlayerInputBinding_Button::set_rebind_data_path(std::string&& value) {
  
  rebind_data_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.PlayerInputBinding_Button.rebind_data_path)
}
inline void PlayerInputBinding_Button::set_rebind_data_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rebind_data_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.PlayerInputBinding_Button.rebind_data_path)
}
inline void PlayerInputBinding_Button::set_rebind_data_path(const char* value,
    size_t size) {
  
  rebind_data_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.PlayerInputBinding_Button.rebind_data_path)
}
inline std::string* PlayerInputBinding_Button::_internal_mutable_rebind_data_path() {
  
  return rebind_data_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PlayerInputBinding_Button::release_rebind_data_path() {
  // @@protoc_insertion_point(field_release:OakSave.PlayerInputBinding_Button.rebind_data_path)
  return rebind_data_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlayerInputBinding_Button::set_allocated_rebind_data_path(std::string* rebind_data_path) {
  if (rebind_data_path != nullptr) {
    
  } else {
    
  }
  rebind_data_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rebind_data_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.PlayerInputBinding_Button.rebind_data_path)
}
inline std::string* PlayerInputBinding_Button::unsafe_arena_release_rebind_data_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.PlayerInputBinding_Button.rebind_data_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return rebind_data_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PlayerInputBinding_Button::unsafe_arena_set_allocated_rebind_data_path(
    std::string* rebind_data_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (rebind_data_path != nullptr) {
    
  } else {
    
  }
  rebind_data_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      rebind_data_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.PlayerInputBinding_Button.rebind_data_path)
}

// repeated string key_names = 2;
inline int PlayerInputBinding_Button::_internal_key_names_size() const {
  return key_names_.size();
}
inline int PlayerInputBinding_Button::key_names_size() const {
  return _internal_key_names_size();
}
inline void PlayerInputBinding_Button::clear_key_names() {
  key_names_.Clear();
}
inline std::string* PlayerInputBinding_Button::add_key_names() {
  // @@protoc_insertion_point(field_add_mutable:OakSave.PlayerInputBinding_Button.key_names)
  return _internal_add_key_names();
}
inline const std::string& PlayerInputBinding_Button::_internal_key_names(int index) const {
  return key_names_.Get(index);
}
inline const std::string& PlayerInputBinding_Button::key_names(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.PlayerInputBinding_Button.key_names)
  return _internal_key_names(index);
}
inline std::string* PlayerInputBinding_Button::mutable_key_names(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.PlayerInputBinding_Button.key_names)
  return key_names_.Mutable(index);
}
inline void PlayerInputBinding_Button::set_key_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:OakSave.PlayerInputBinding_Button.key_names)
  key_names_.Mutable(index)->assign(value);
}
inline void PlayerInputBinding_Button::set_key_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:OakSave.PlayerInputBinding_Button.key_names)
  key_names_.Mutable(index)->assign(std::move(value));
}
inline void PlayerInputBinding_Button::set_key_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  key_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:OakSave.PlayerInputBinding_Button.key_names)
}
inline void PlayerInputBinding_Button::set_key_names(int index, const char* value, size_t size) {
  key_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:OakSave.PlayerInputBinding_Button.key_names)
}
inline std::string* PlayerInputBinding_Button::_internal_add_key_names() {
  return key_names_.Add();
}
inline void PlayerInputBinding_Button::add_key_names(const std::string& value) {
  key_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:OakSave.PlayerInputBinding_Button.key_names)
}
inline void PlayerInputBinding_Button::add_key_names(std::string&& value) {
  key_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:OakSave.PlayerInputBinding_Button.key_names)
}
inline void PlayerInputBinding_Button::add_key_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  key_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:OakSave.PlayerInputBinding_Button.key_names)
}
inline void PlayerInputBinding_Button::add_key_names(const char* value, size_t size) {
  key_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:OakSave.PlayerInputBinding_Button.key_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PlayerInputBinding_Button::key_names() const {
  // @@protoc_insertion_point(field_list:OakSave.PlayerInputBinding_Button.key_names)
  return key_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PlayerInputBinding_Button::mutable_key_names() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.PlayerInputBinding_Button.key_names)
  return &key_names_;
}

// -------------------------------------------------------------------

// PlayerInputBinding_Axis_Key

// string key_name = 1;
inline void PlayerInputBinding_Axis_Key::clear_key_name() {
  key_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PlayerInputBinding_Axis_Key::key_name() const {
  // @@protoc_insertion_point(field_get:OakSave.PlayerInputBinding_Axis_Key.key_name)
  return _internal_key_name();
}
inline void PlayerInputBinding_Axis_Key::set_key_name(const std::string& value) {
  _internal_set_key_name(value);
  // @@protoc_insertion_point(field_set:OakSave.PlayerInputBinding_Axis_Key.key_name)
}
inline std::string* PlayerInputBinding_Axis_Key::mutable_key_name() {
  // @@protoc_insertion_point(field_mutable:OakSave.PlayerInputBinding_Axis_Key.key_name)
  return _internal_mutable_key_name();
}
inline const std::string& PlayerInputBinding_Axis_Key::_internal_key_name() const {
  return key_name_.Get();
}
inline void PlayerInputBinding_Axis_Key::_internal_set_key_name(const std::string& value) {
  
  key_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PlayerInputBinding_Axis_Key::set_key_name(std::string&& value) {
  
  key_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.PlayerInputBinding_Axis_Key.key_name)
}
inline void PlayerInputBinding_Axis_Key::set_key_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.PlayerInputBinding_Axis_Key.key_name)
}
inline void PlayerInputBinding_Axis_Key::set_key_name(const char* value,
    size_t size) {
  
  key_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.PlayerInputBinding_Axis_Key.key_name)
}
inline std::string* PlayerInputBinding_Axis_Key::_internal_mutable_key_name() {
  
  return key_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PlayerInputBinding_Axis_Key::release_key_name() {
  // @@protoc_insertion_point(field_release:OakSave.PlayerInputBinding_Axis_Key.key_name)
  return key_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlayerInputBinding_Axis_Key::set_allocated_key_name(std::string* key_name) {
  if (key_name != nullptr) {
    
  } else {
    
  }
  key_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.PlayerInputBinding_Axis_Key.key_name)
}
inline std::string* PlayerInputBinding_Axis_Key::unsafe_arena_release_key_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.PlayerInputBinding_Axis_Key.key_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PlayerInputBinding_Axis_Key::unsafe_arena_set_allocated_key_name(
    std::string* key_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key_name != nullptr) {
    
  } else {
    
  }
  key_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.PlayerInputBinding_Axis_Key.key_name)
}

// .OakSave.Vec3 scale_3d = 2;
inline bool PlayerInputBinding_Axis_Key::_internal_has_scale_3d() const {
  return this != internal_default_instance() && scale_3d_ != nullptr;
}
inline bool PlayerInputBinding_Axis_Key::has_scale_3d() const {
  return _internal_has_scale_3d();
}
inline const ::OakSave::Vec3& PlayerInputBinding_Axis_Key::_internal_scale_3d() const {
  const ::OakSave::Vec3* p = scale_3d_;
  return p != nullptr ? *p : *reinterpret_cast<const ::OakSave::Vec3*>(
      &::OakSave::_Vec3_default_instance_);
}
inline const ::OakSave::Vec3& PlayerInputBinding_Axis_Key::scale_3d() const {
  // @@protoc_insertion_point(field_get:OakSave.PlayerInputBinding_Axis_Key.scale_3d)
  return _internal_scale_3d();
}
inline void PlayerInputBinding_Axis_Key::unsafe_arena_set_allocated_scale_3d(
    ::OakSave::Vec3* scale_3d) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scale_3d_);
  }
  scale_3d_ = scale_3d;
  if (scale_3d) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.PlayerInputBinding_Axis_Key.scale_3d)
}
inline ::OakSave::Vec3* PlayerInputBinding_Axis_Key::release_scale_3d() {
  auto temp = unsafe_arena_release_scale_3d();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::OakSave::Vec3* PlayerInputBinding_Axis_Key::unsafe_arena_release_scale_3d() {
  // @@protoc_insertion_point(field_release:OakSave.PlayerInputBinding_Axis_Key.scale_3d)
  
  ::OakSave::Vec3* temp = scale_3d_;
  scale_3d_ = nullptr;
  return temp;
}
inline ::OakSave::Vec3* PlayerInputBinding_Axis_Key::_internal_mutable_scale_3d() {
  
  if (scale_3d_ == nullptr) {
    auto* p = CreateMaybeMessage<::OakSave::Vec3>(GetArena());
    scale_3d_ = p;
  }
  return scale_3d_;
}
inline ::OakSave::Vec3* PlayerInputBinding_Axis_Key::mutable_scale_3d() {
  // @@protoc_insertion_point(field_mutable:OakSave.PlayerInputBinding_Axis_Key.scale_3d)
  return _internal_mutable_scale_3d();
}
inline void PlayerInputBinding_Axis_Key::set_allocated_scale_3d(::OakSave::Vec3* scale_3d) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(scale_3d_);
  }
  if (scale_3d) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scale_3d)->GetArena();
    if (message_arena != submessage_arena) {
      scale_3d = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scale_3d, submessage_arena);
    }
    
  } else {
    
  }
  scale_3d_ = scale_3d;
  // @@protoc_insertion_point(field_set_allocated:OakSave.PlayerInputBinding_Axis_Key.scale_3d)
}

// -------------------------------------------------------------------

// PlayerInputBinding_Axis

// string rebind_data_path = 1;
inline void PlayerInputBinding_Axis::clear_rebind_data_path() {
  rebind_data_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PlayerInputBinding_Axis::rebind_data_path() const {
  // @@protoc_insertion_point(field_get:OakSave.PlayerInputBinding_Axis.rebind_data_path)
  return _internal_rebind_data_path();
}
inline void PlayerInputBinding_Axis::set_rebind_data_path(const std::string& value) {
  _internal_set_rebind_data_path(value);
  // @@protoc_insertion_point(field_set:OakSave.PlayerInputBinding_Axis.rebind_data_path)
}
inline std::string* PlayerInputBinding_Axis::mutable_rebind_data_path() {
  // @@protoc_insertion_point(field_mutable:OakSave.PlayerInputBinding_Axis.rebind_data_path)
  return _internal_mutable_rebind_data_path();
}
inline const std::string& PlayerInputBinding_Axis::_internal_rebind_data_path() const {
  return rebind_data_path_.Get();
}
inline void PlayerInputBinding_Axis::_internal_set_rebind_data_path(const std::string& value) {
  
  rebind_data_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PlayerInputBinding_Axis::set_rebind_data_path(std::string&& value) {
  
  rebind_data_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.PlayerInputBinding_Axis.rebind_data_path)
}
inline void PlayerInputBinding_Axis::set_rebind_data_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rebind_data_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.PlayerInputBinding_Axis.rebind_data_path)
}
inline void PlayerInputBinding_Axis::set_rebind_data_path(const char* value,
    size_t size) {
  
  rebind_data_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.PlayerInputBinding_Axis.rebind_data_path)
}
inline std::string* PlayerInputBinding_Axis::_internal_mutable_rebind_data_path() {
  
  return rebind_data_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PlayerInputBinding_Axis::release_rebind_data_path() {
  // @@protoc_insertion_point(field_release:OakSave.PlayerInputBinding_Axis.rebind_data_path)
  return rebind_data_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlayerInputBinding_Axis::set_allocated_rebind_data_path(std::string* rebind_data_path) {
  if (rebind_data_path != nullptr) {
    
  } else {
    
  }
  rebind_data_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rebind_data_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.PlayerInputBinding_Axis.rebind_data_path)
}
inline std::string* PlayerInputBinding_Axis::unsafe_arena_release_rebind_data_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.PlayerInputBinding_Axis.rebind_data_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return rebind_data_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PlayerInputBinding_Axis::unsafe_arena_set_allocated_rebind_data_path(
    std::string* rebind_data_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (rebind_data_path != nullptr) {
    
  } else {
    
  }
  rebind_data_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      rebind_data_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.PlayerInputBinding_Axis.rebind_data_path)
}

// repeated .OakSave.PlayerInputBinding_Axis_Key keys = 2;
inline int PlayerInputBinding_Axis::_internal_keys_size() const {
  return keys_.size();
}
inline int PlayerInputBinding_Axis::keys_size() const {
  return _internal_keys_size();
}
inline void PlayerInputBinding_Axis::clear_keys() {
  keys_.Clear();
}
inline ::OakSave::PlayerInputBinding_Axis_Key* PlayerInputBinding_Axis::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.PlayerInputBinding_Axis.keys)
  return keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::PlayerInputBinding_Axis_Key >*
PlayerInputBinding_Axis::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.PlayerInputBinding_Axis.keys)
  return &keys_;
}
inline const ::OakSave::PlayerInputBinding_Axis_Key& PlayerInputBinding_Axis::_internal_keys(int index) const {
  return keys_.Get(index);
}
inline const ::OakSave::PlayerInputBinding_Axis_Key& PlayerInputBinding_Axis::keys(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.PlayerInputBinding_Axis.keys)
  return _internal_keys(index);
}
inline ::OakSave::PlayerInputBinding_Axis_Key* PlayerInputBinding_Axis::_internal_add_keys() {
  return keys_.Add();
}
inline ::OakSave::PlayerInputBinding_Axis_Key* PlayerInputBinding_Axis::add_keys() {
  // @@protoc_insertion_point(field_add:OakSave.PlayerInputBinding_Axis.keys)
  return _internal_add_keys();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::PlayerInputBinding_Axis_Key >&
PlayerInputBinding_Axis::keys() const {
  // @@protoc_insertion_point(field_list:OakSave.PlayerInputBinding_Axis.keys)
  return keys_;
}

// -------------------------------------------------------------------

// PlayerInputBinding_Category

// string category_data_path = 1;
inline void PlayerInputBinding_Category::clear_category_data_path() {
  category_data_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PlayerInputBinding_Category::category_data_path() const {
  // @@protoc_insertion_point(field_get:OakSave.PlayerInputBinding_Category.category_data_path)
  return _internal_category_data_path();
}
inline void PlayerInputBinding_Category::set_category_data_path(const std::string& value) {
  _internal_set_category_data_path(value);
  // @@protoc_insertion_point(field_set:OakSave.PlayerInputBinding_Category.category_data_path)
}
inline std::string* PlayerInputBinding_Category::mutable_category_data_path() {
  // @@protoc_insertion_point(field_mutable:OakSave.PlayerInputBinding_Category.category_data_path)
  return _internal_mutable_category_data_path();
}
inline const std::string& PlayerInputBinding_Category::_internal_category_data_path() const {
  return category_data_path_.Get();
}
inline void PlayerInputBinding_Category::_internal_set_category_data_path(const std::string& value) {
  
  category_data_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PlayerInputBinding_Category::set_category_data_path(std::string&& value) {
  
  category_data_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.PlayerInputBinding_Category.category_data_path)
}
inline void PlayerInputBinding_Category::set_category_data_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  category_data_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.PlayerInputBinding_Category.category_data_path)
}
inline void PlayerInputBinding_Category::set_category_data_path(const char* value,
    size_t size) {
  
  category_data_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.PlayerInputBinding_Category.category_data_path)
}
inline std::string* PlayerInputBinding_Category::_internal_mutable_category_data_path() {
  
  return category_data_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PlayerInputBinding_Category::release_category_data_path() {
  // @@protoc_insertion_point(field_release:OakSave.PlayerInputBinding_Category.category_data_path)
  return category_data_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlayerInputBinding_Category::set_allocated_category_data_path(std::string* category_data_path) {
  if (category_data_path != nullptr) {
    
  } else {
    
  }
  category_data_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), category_data_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.PlayerInputBinding_Category.category_data_path)
}
inline std::string* PlayerInputBinding_Category::unsafe_arena_release_category_data_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.PlayerInputBinding_Category.category_data_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return category_data_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PlayerInputBinding_Category::unsafe_arena_set_allocated_category_data_path(
    std::string* category_data_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (category_data_path != nullptr) {
    
  } else {
    
  }
  category_data_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      category_data_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.PlayerInputBinding_Category.category_data_path)
}

// string context_data_path = 2;
inline void PlayerInputBinding_Category::clear_context_data_path() {
  context_data_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PlayerInputBinding_Category::context_data_path() const {
  // @@protoc_insertion_point(field_get:OakSave.PlayerInputBinding_Category.context_data_path)
  return _internal_context_data_path();
}
inline void PlayerInputBinding_Category::set_context_data_path(const std::string& value) {
  _internal_set_context_data_path(value);
  // @@protoc_insertion_point(field_set:OakSave.PlayerInputBinding_Category.context_data_path)
}
inline std::string* PlayerInputBinding_Category::mutable_context_data_path() {
  // @@protoc_insertion_point(field_mutable:OakSave.PlayerInputBinding_Category.context_data_path)
  return _internal_mutable_context_data_path();
}
inline const std::string& PlayerInputBinding_Category::_internal_context_data_path() const {
  return context_data_path_.Get();
}
inline void PlayerInputBinding_Category::_internal_set_context_data_path(const std::string& value) {
  
  context_data_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PlayerInputBinding_Category::set_context_data_path(std::string&& value) {
  
  context_data_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.PlayerInputBinding_Category.context_data_path)
}
inline void PlayerInputBinding_Category::set_context_data_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  context_data_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.PlayerInputBinding_Category.context_data_path)
}
inline void PlayerInputBinding_Category::set_context_data_path(const char* value,
    size_t size) {
  
  context_data_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.PlayerInputBinding_Category.context_data_path)
}
inline std::string* PlayerInputBinding_Category::_internal_mutable_context_data_path() {
  
  return context_data_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PlayerInputBinding_Category::release_context_data_path() {
  // @@protoc_insertion_point(field_release:OakSave.PlayerInputBinding_Category.context_data_path)
  return context_data_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlayerInputBinding_Category::set_allocated_context_data_path(std::string* context_data_path) {
  if (context_data_path != nullptr) {
    
  } else {
    
  }
  context_data_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), context_data_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.PlayerInputBinding_Category.context_data_path)
}
inline std::string* PlayerInputBinding_Category::unsafe_arena_release_context_data_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.PlayerInputBinding_Category.context_data_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return context_data_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PlayerInputBinding_Category::unsafe_arena_set_allocated_context_data_path(
    std::string* context_data_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (context_data_path != nullptr) {
    
  } else {
    
  }
  context_data_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      context_data_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.PlayerInputBinding_Category.context_data_path)
}

// repeated .OakSave.PlayerInputBinding_Button button_bindings = 3;
inline int PlayerInputBinding_Category::_internal_button_bindings_size() const {
  return button_bindings_.size();
}
inline int PlayerInputBinding_Category::button_bindings_size() const {
  return _internal_button_bindings_size();
}
inline void PlayerInputBinding_Category::clear_button_bindings() {
  button_bindings_.Clear();
}
inline ::OakSave::PlayerInputBinding_Button* PlayerInputBinding_Category::mutable_button_bindings(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.PlayerInputBinding_Category.button_bindings)
  return button_bindings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::PlayerInputBinding_Button >*
PlayerInputBinding_Category::mutable_button_bindings() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.PlayerInputBinding_Category.button_bindings)
  return &button_bindings_;
}
inline const ::OakSave::PlayerInputBinding_Button& PlayerInputBinding_Category::_internal_button_bindings(int index) const {
  return button_bindings_.Get(index);
}
inline const ::OakSave::PlayerInputBinding_Button& PlayerInputBinding_Category::button_bindings(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.PlayerInputBinding_Category.button_bindings)
  return _internal_button_bindings(index);
}
inline ::OakSave::PlayerInputBinding_Button* PlayerInputBinding_Category::_internal_add_button_bindings() {
  return button_bindings_.Add();
}
inline ::OakSave::PlayerInputBinding_Button* PlayerInputBinding_Category::add_button_bindings() {
  // @@protoc_insertion_point(field_add:OakSave.PlayerInputBinding_Category.button_bindings)
  return _internal_add_button_bindings();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::PlayerInputBinding_Button >&
PlayerInputBinding_Category::button_bindings() const {
  // @@protoc_insertion_point(field_list:OakSave.PlayerInputBinding_Category.button_bindings)
  return button_bindings_;
}

// repeated .OakSave.PlayerInputBinding_Axis axis_bindings = 4;
inline int PlayerInputBinding_Category::_internal_axis_bindings_size() const {
  return axis_bindings_.size();
}
inline int PlayerInputBinding_Category::axis_bindings_size() const {
  return _internal_axis_bindings_size();
}
inline void PlayerInputBinding_Category::clear_axis_bindings() {
  axis_bindings_.Clear();
}
inline ::OakSave::PlayerInputBinding_Axis* PlayerInputBinding_Category::mutable_axis_bindings(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.PlayerInputBinding_Category.axis_bindings)
  return axis_bindings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::PlayerInputBinding_Axis >*
PlayerInputBinding_Category::mutable_axis_bindings() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.PlayerInputBinding_Category.axis_bindings)
  return &axis_bindings_;
}
inline const ::OakSave::PlayerInputBinding_Axis& PlayerInputBinding_Category::_internal_axis_bindings(int index) const {
  return axis_bindings_.Get(index);
}
inline const ::OakSave::PlayerInputBinding_Axis& PlayerInputBinding_Category::axis_bindings(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.PlayerInputBinding_Category.axis_bindings)
  return _internal_axis_bindings(index);
}
inline ::OakSave::PlayerInputBinding_Axis* PlayerInputBinding_Category::_internal_add_axis_bindings() {
  return axis_bindings_.Add();
}
inline ::OakSave::PlayerInputBinding_Axis* PlayerInputBinding_Category::add_axis_bindings() {
  // @@protoc_insertion_point(field_add:OakSave.PlayerInputBinding_Category.axis_bindings)
  return _internal_add_axis_bindings();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::PlayerInputBinding_Axis >&
PlayerInputBinding_Category::axis_bindings() const {
  // @@protoc_insertion_point(field_list:OakSave.PlayerInputBinding_Category.axis_bindings)
  return axis_bindings_;
}

// -------------------------------------------------------------------

// PlayerInputBindings

// repeated .OakSave.PlayerInputBinding_Category categories = 1;
inline int PlayerInputBindings::_internal_categories_size() const {
  return categories_.size();
}
inline int PlayerInputBindings::categories_size() const {
  return _internal_categories_size();
}
inline void PlayerInputBindings::clear_categories() {
  categories_.Clear();
}
inline ::OakSave::PlayerInputBinding_Category* PlayerInputBindings::mutable_categories(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.PlayerInputBindings.categories)
  return categories_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::PlayerInputBinding_Category >*
PlayerInputBindings::mutable_categories() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.PlayerInputBindings.categories)
  return &categories_;
}
inline const ::OakSave::PlayerInputBinding_Category& PlayerInputBindings::_internal_categories(int index) const {
  return categories_.Get(index);
}
inline const ::OakSave::PlayerInputBinding_Category& PlayerInputBindings::categories(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.PlayerInputBindings.categories)
  return _internal_categories(index);
}
inline ::OakSave::PlayerInputBinding_Category* PlayerInputBindings::_internal_add_categories() {
  return categories_.Add();
}
inline ::OakSave::PlayerInputBinding_Category* PlayerInputBindings::add_categories() {
  // @@protoc_insertion_point(field_add:OakSave.PlayerInputBindings.categories)
  return _internal_add_categories();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::PlayerInputBinding_Category >&
PlayerInputBindings::categories() const {
  // @@protoc_insertion_point(field_list:OakSave.PlayerInputBindings.categories)
  return categories_;
}

// -------------------------------------------------------------------

// OakProfileLastInventoryFilterInfo

// string slot_type_id = 1;
inline void OakProfileLastInventoryFilterInfo::clear_slot_type_id() {
  slot_type_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OakProfileLastInventoryFilterInfo::slot_type_id() const {
  // @@protoc_insertion_point(field_get:OakSave.OakProfileLastInventoryFilterInfo.slot_type_id)
  return _internal_slot_type_id();
}
inline void OakProfileLastInventoryFilterInfo::set_slot_type_id(const std::string& value) {
  _internal_set_slot_type_id(value);
  // @@protoc_insertion_point(field_set:OakSave.OakProfileLastInventoryFilterInfo.slot_type_id)
}
inline std::string* OakProfileLastInventoryFilterInfo::mutable_slot_type_id() {
  // @@protoc_insertion_point(field_mutable:OakSave.OakProfileLastInventoryFilterInfo.slot_type_id)
  return _internal_mutable_slot_type_id();
}
inline const std::string& OakProfileLastInventoryFilterInfo::_internal_slot_type_id() const {
  return slot_type_id_.Get();
}
inline void OakProfileLastInventoryFilterInfo::_internal_set_slot_type_id(const std::string& value) {
  
  slot_type_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OakProfileLastInventoryFilterInfo::set_slot_type_id(std::string&& value) {
  
  slot_type_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.OakProfileLastInventoryFilterInfo.slot_type_id)
}
inline void OakProfileLastInventoryFilterInfo::set_slot_type_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  slot_type_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.OakProfileLastInventoryFilterInfo.slot_type_id)
}
inline void OakProfileLastInventoryFilterInfo::set_slot_type_id(const char* value,
    size_t size) {
  
  slot_type_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.OakProfileLastInventoryFilterInfo.slot_type_id)
}
inline std::string* OakProfileLastInventoryFilterInfo::_internal_mutable_slot_type_id() {
  
  return slot_type_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OakProfileLastInventoryFilterInfo::release_slot_type_id() {
  // @@protoc_insertion_point(field_release:OakSave.OakProfileLastInventoryFilterInfo.slot_type_id)
  return slot_type_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OakProfileLastInventoryFilterInfo::set_allocated_slot_type_id(std::string* slot_type_id) {
  if (slot_type_id != nullptr) {
    
  } else {
    
  }
  slot_type_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), slot_type_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.OakProfileLastInventoryFilterInfo.slot_type_id)
}
inline std::string* OakProfileLastInventoryFilterInfo::unsafe_arena_release_slot_type_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.OakProfileLastInventoryFilterInfo.slot_type_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return slot_type_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OakProfileLastInventoryFilterInfo::unsafe_arena_set_allocated_slot_type_id(
    std::string* slot_type_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (slot_type_id != nullptr) {
    
  } else {
    
  }
  slot_type_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      slot_type_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.OakProfileLastInventoryFilterInfo.slot_type_id)
}

// int32 last_filter_index = 2;
inline void OakProfileLastInventoryFilterInfo::clear_last_filter_index() {
  last_filter_index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OakProfileLastInventoryFilterInfo::_internal_last_filter_index() const {
  return last_filter_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OakProfileLastInventoryFilterInfo::last_filter_index() const {
  // @@protoc_insertion_point(field_get:OakSave.OakProfileLastInventoryFilterInfo.last_filter_index)
  return _internal_last_filter_index();
}
inline void OakProfileLastInventoryFilterInfo::_internal_set_last_filter_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  last_filter_index_ = value;
}
inline void OakProfileLastInventoryFilterInfo::set_last_filter_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_last_filter_index(value);
  // @@protoc_insertion_point(field_set:OakSave.OakProfileLastInventoryFilterInfo.last_filter_index)
}

// -------------------------------------------------------------------

// OakProfileMenuTutorialInfo

// repeated string seen_tutorials = 1;
inline int OakProfileMenuTutorialInfo::_internal_seen_tutorials_size() const {
  return seen_tutorials_.size();
}
inline int OakProfileMenuTutorialInfo::seen_tutorials_size() const {
  return _internal_seen_tutorials_size();
}
inline void OakProfileMenuTutorialInfo::clear_seen_tutorials() {
  seen_tutorials_.Clear();
}
inline std::string* OakProfileMenuTutorialInfo::add_seen_tutorials() {
  // @@protoc_insertion_point(field_add_mutable:OakSave.OakProfileMenuTutorialInfo.seen_tutorials)
  return _internal_add_seen_tutorials();
}
inline const std::string& OakProfileMenuTutorialInfo::_internal_seen_tutorials(int index) const {
  return seen_tutorials_.Get(index);
}
inline const std::string& OakProfileMenuTutorialInfo::seen_tutorials(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.OakProfileMenuTutorialInfo.seen_tutorials)
  return _internal_seen_tutorials(index);
}
inline std::string* OakProfileMenuTutorialInfo::mutable_seen_tutorials(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.OakProfileMenuTutorialInfo.seen_tutorials)
  return seen_tutorials_.Mutable(index);
}
inline void OakProfileMenuTutorialInfo::set_seen_tutorials(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:OakSave.OakProfileMenuTutorialInfo.seen_tutorials)
  seen_tutorials_.Mutable(index)->assign(value);
}
inline void OakProfileMenuTutorialInfo::set_seen_tutorials(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:OakSave.OakProfileMenuTutorialInfo.seen_tutorials)
  seen_tutorials_.Mutable(index)->assign(std::move(value));
}
inline void OakProfileMenuTutorialInfo::set_seen_tutorials(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  seen_tutorials_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:OakSave.OakProfileMenuTutorialInfo.seen_tutorials)
}
inline void OakProfileMenuTutorialInfo::set_seen_tutorials(int index, const char* value, size_t size) {
  seen_tutorials_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:OakSave.OakProfileMenuTutorialInfo.seen_tutorials)
}
inline std::string* OakProfileMenuTutorialInfo::_internal_add_seen_tutorials() {
  return seen_tutorials_.Add();
}
inline void OakProfileMenuTutorialInfo::add_seen_tutorials(const std::string& value) {
  seen_tutorials_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:OakSave.OakProfileMenuTutorialInfo.seen_tutorials)
}
inline void OakProfileMenuTutorialInfo::add_seen_tutorials(std::string&& value) {
  seen_tutorials_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:OakSave.OakProfileMenuTutorialInfo.seen_tutorials)
}
inline void OakProfileMenuTutorialInfo::add_seen_tutorials(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  seen_tutorials_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:OakSave.OakProfileMenuTutorialInfo.seen_tutorials)
}
inline void OakProfileMenuTutorialInfo::add_seen_tutorials(const char* value, size_t size) {
  seen_tutorials_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:OakSave.OakProfileMenuTutorialInfo.seen_tutorials)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
OakProfileMenuTutorialInfo::seen_tutorials() const {
  // @@protoc_insertion_point(field_list:OakSave.OakProfileMenuTutorialInfo.seen_tutorials)
  return seen_tutorials_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
OakProfileMenuTutorialInfo::mutable_seen_tutorials() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.OakProfileMenuTutorialInfo.seen_tutorials)
  return &seen_tutorials_;
}

// bool tutorials_disabled = 2;
inline void OakProfileMenuTutorialInfo::clear_tutorials_disabled() {
  tutorials_disabled_ = false;
}
inline bool OakProfileMenuTutorialInfo::_internal_tutorials_disabled() const {
  return tutorials_disabled_;
}
inline bool OakProfileMenuTutorialInfo::tutorials_disabled() const {
  // @@protoc_insertion_point(field_get:OakSave.OakProfileMenuTutorialInfo.tutorials_disabled)
  return _internal_tutorials_disabled();
}
inline void OakProfileMenuTutorialInfo::_internal_set_tutorials_disabled(bool value) {
  
  tutorials_disabled_ = value;
}
inline void OakProfileMenuTutorialInfo::set_tutorials_disabled(bool value) {
  _internal_set_tutorials_disabled(value);
  // @@protoc_insertion_point(field_set:OakSave.OakProfileMenuTutorialInfo.tutorials_disabled)
}

// bool tutorials_allowed_in_non_game_modes = 3;
inline void OakProfileMenuTutorialInfo::clear_tutorials_allowed_in_non_game_modes() {
  tutorials_allowed_in_non_game_modes_ = false;
}
inline bool OakProfileMenuTutorialInfo::_internal_tutorials_allowed_in_non_game_modes() const {
  return tutorials_allowed_in_non_game_modes_;
}
inline bool OakProfileMenuTutorialInfo::tutorials_allowed_in_non_game_modes() const {
  // @@protoc_insertion_point(field_get:OakSave.OakProfileMenuTutorialInfo.tutorials_allowed_in_non_game_modes)
  return _internal_tutorials_allowed_in_non_game_modes();
}
inline void OakProfileMenuTutorialInfo::_internal_set_tutorials_allowed_in_non_game_modes(bool value) {
  
  tutorials_allowed_in_non_game_modes_ = value;
}
inline void OakProfileMenuTutorialInfo::set_tutorials_allowed_in_non_game_modes(bool value) {
  _internal_set_tutorials_allowed_in_non_game_modes(value);
  // @@protoc_insertion_point(field_set:OakSave.OakProfileMenuTutorialInfo.tutorials_allowed_in_non_game_modes)
}

// -------------------------------------------------------------------

// OakFriendEncounterData

// uint32 num_encounters = 1;
inline void OakFriendEncounterData::clear_num_encounters() {
  num_encounters_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OakFriendEncounterData::_internal_num_encounters() const {
  return num_encounters_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OakFriendEncounterData::num_encounters() const {
  // @@protoc_insertion_point(field_get:OakSave.OakFriendEncounterData.num_encounters)
  return _internal_num_encounters();
}
inline void OakFriendEncounterData::_internal_set_num_encounters(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_encounters_ = value;
}
inline void OakFriendEncounterData::set_num_encounters(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_encounters(value);
  // @@protoc_insertion_point(field_set:OakSave.OakFriendEncounterData.num_encounters)
}

// int64 time_last_encounter = 2;
inline void OakFriendEncounterData::clear_time_last_encounter() {
  time_last_encounter_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OakFriendEncounterData::_internal_time_last_encounter() const {
  return time_last_encounter_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OakFriendEncounterData::time_last_encounter() const {
  // @@protoc_insertion_point(field_get:OakSave.OakFriendEncounterData.time_last_encounter)
  return _internal_time_last_encounter();
}
inline void OakFriendEncounterData::_internal_set_time_last_encounter(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_last_encounter_ = value;
}
inline void OakFriendEncounterData::set_time_last_encounter(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time_last_encounter(value);
  // @@protoc_insertion_point(field_set:OakSave.OakFriendEncounterData.time_last_encounter)
}

// -------------------------------------------------------------------

// OakMailItem

// uint32 mail_item_type = 1;
inline void OakMailItem::clear_mail_item_type() {
  mail_item_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OakMailItem::_internal_mail_item_type() const {
  return mail_item_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OakMailItem::mail_item_type() const {
  // @@protoc_insertion_point(field_get:OakSave.OakMailItem.mail_item_type)
  return _internal_mail_item_type();
}
inline void OakMailItem::_internal_set_mail_item_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  mail_item_type_ = value;
}
inline void OakMailItem::set_mail_item_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mail_item_type(value);
  // @@protoc_insertion_point(field_set:OakSave.OakMailItem.mail_item_type)
}

// string sender_display_name = 2;
inline void OakMailItem::clear_sender_display_name() {
  sender_display_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OakMailItem::sender_display_name() const {
  // @@protoc_insertion_point(field_get:OakSave.OakMailItem.sender_display_name)
  return _internal_sender_display_name();
}
inline void OakMailItem::set_sender_display_name(const std::string& value) {
  _internal_set_sender_display_name(value);
  // @@protoc_insertion_point(field_set:OakSave.OakMailItem.sender_display_name)
}
inline std::string* OakMailItem::mutable_sender_display_name() {
  // @@protoc_insertion_point(field_mutable:OakSave.OakMailItem.sender_display_name)
  return _internal_mutable_sender_display_name();
}
inline const std::string& OakMailItem::_internal_sender_display_name() const {
  return sender_display_name_.Get();
}
inline void OakMailItem::_internal_set_sender_display_name(const std::string& value) {
  
  sender_display_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OakMailItem::set_sender_display_name(std::string&& value) {
  
  sender_display_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.OakMailItem.sender_display_name)
}
inline void OakMailItem::set_sender_display_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sender_display_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.OakMailItem.sender_display_name)
}
inline void OakMailItem::set_sender_display_name(const char* value,
    size_t size) {
  
  sender_display_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.OakMailItem.sender_display_name)
}
inline std::string* OakMailItem::_internal_mutable_sender_display_name() {
  
  return sender_display_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OakMailItem::release_sender_display_name() {
  // @@protoc_insertion_point(field_release:OakSave.OakMailItem.sender_display_name)
  return sender_display_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OakMailItem::set_allocated_sender_display_name(std::string* sender_display_name) {
  if (sender_display_name != nullptr) {
    
  } else {
    
  }
  sender_display_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender_display_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.OakMailItem.sender_display_name)
}
inline std::string* OakMailItem::unsafe_arena_release_sender_display_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.OakMailItem.sender_display_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return sender_display_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OakMailItem::unsafe_arena_set_allocated_sender_display_name(
    std::string* sender_display_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (sender_display_name != nullptr) {
    
  } else {
    
  }
  sender_display_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sender_display_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.OakMailItem.sender_display_name)
}

// string subject = 3;
inline void OakMailItem::clear_subject() {
  subject_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OakMailItem::subject() const {
  // @@protoc_insertion_point(field_get:OakSave.OakMailItem.subject)
  return _internal_subject();
}
inline void OakMailItem::set_subject(const std::string& value) {
  _internal_set_subject(value);
  // @@protoc_insertion_point(field_set:OakSave.OakMailItem.subject)
}
inline std::string* OakMailItem::mutable_subject() {
  // @@protoc_insertion_point(field_mutable:OakSave.OakMailItem.subject)
  return _internal_mutable_subject();
}
inline const std::string& OakMailItem::_internal_subject() const {
  return subject_.Get();
}
inline void OakMailItem::_internal_set_subject(const std::string& value) {
  
  subject_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OakMailItem::set_subject(std::string&& value) {
  
  subject_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.OakMailItem.subject)
}
inline void OakMailItem::set_subject(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subject_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.OakMailItem.subject)
}
inline void OakMailItem::set_subject(const char* value,
    size_t size) {
  
  subject_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.OakMailItem.subject)
}
inline std::string* OakMailItem::_internal_mutable_subject() {
  
  return subject_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OakMailItem::release_subject() {
  // @@protoc_insertion_point(field_release:OakSave.OakMailItem.subject)
  return subject_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OakMailItem::set_allocated_subject(std::string* subject) {
  if (subject != nullptr) {
    
  } else {
    
  }
  subject_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subject,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.OakMailItem.subject)
}
inline std::string* OakMailItem::unsafe_arena_release_subject() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.OakMailItem.subject)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return subject_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OakMailItem::unsafe_arena_set_allocated_subject(
    std::string* subject) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (subject != nullptr) {
    
  } else {
    
  }
  subject_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      subject, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.OakMailItem.subject)
}

// string body = 4;
inline void OakMailItem::clear_body() {
  body_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OakMailItem::body() const {
  // @@protoc_insertion_point(field_get:OakSave.OakMailItem.body)
  return _internal_body();
}
inline void OakMailItem::set_body(const std::string& value) {
  _internal_set_body(value);
  // @@protoc_insertion_point(field_set:OakSave.OakMailItem.body)
}
inline std::string* OakMailItem::mutable_body() {
  // @@protoc_insertion_point(field_mutable:OakSave.OakMailItem.body)
  return _internal_mutable_body();
}
inline const std::string& OakMailItem::_internal_body() const {
  return body_.Get();
}
inline void OakMailItem::_internal_set_body(const std::string& value) {
  
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OakMailItem::set_body(std::string&& value) {
  
  body_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.OakMailItem.body)
}
inline void OakMailItem::set_body(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.OakMailItem.body)
}
inline void OakMailItem::set_body(const char* value,
    size_t size) {
  
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.OakMailItem.body)
}
inline std::string* OakMailItem::_internal_mutable_body() {
  
  return body_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OakMailItem::release_body() {
  // @@protoc_insertion_point(field_release:OakSave.OakMailItem.body)
  return body_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OakMailItem::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    
  } else {
    
  }
  body_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), body,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.OakMailItem.body)
}
inline std::string* OakMailItem::unsafe_arena_release_body() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.OakMailItem.body)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return body_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OakMailItem::unsafe_arena_set_allocated_body(
    std::string* body) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (body != nullptr) {
    
  } else {
    
  }
  body_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      body, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.OakMailItem.body)
}

// string gear_serial_number = 5;
inline void OakMailItem::clear_gear_serial_number() {
  gear_serial_number_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OakMailItem::gear_serial_number() const {
  // @@protoc_insertion_point(field_get:OakSave.OakMailItem.gear_serial_number)
  return _internal_gear_serial_number();
}
inline void OakMailItem::set_gear_serial_number(const std::string& value) {
  _internal_set_gear_serial_number(value);
  // @@protoc_insertion_point(field_set:OakSave.OakMailItem.gear_serial_number)
}
inline std::string* OakMailItem::mutable_gear_serial_number() {
  // @@protoc_insertion_point(field_mutable:OakSave.OakMailItem.gear_serial_number)
  return _internal_mutable_gear_serial_number();
}
inline const std::string& OakMailItem::_internal_gear_serial_number() const {
  return gear_serial_number_.Get();
}
inline void OakMailItem::_internal_set_gear_serial_number(const std::string& value) {
  
  gear_serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OakMailItem::set_gear_serial_number(std::string&& value) {
  
  gear_serial_number_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.OakMailItem.gear_serial_number)
}
inline void OakMailItem::set_gear_serial_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gear_serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.OakMailItem.gear_serial_number)
}
inline void OakMailItem::set_gear_serial_number(const char* value,
    size_t size) {
  
  gear_serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.OakMailItem.gear_serial_number)
}
inline std::string* OakMailItem::_internal_mutable_gear_serial_number() {
  
  return gear_serial_number_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OakMailItem::release_gear_serial_number() {
  // @@protoc_insertion_point(field_release:OakSave.OakMailItem.gear_serial_number)
  return gear_serial_number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OakMailItem::set_allocated_gear_serial_number(std::string* gear_serial_number) {
  if (gear_serial_number != nullptr) {
    
  } else {
    
  }
  gear_serial_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gear_serial_number,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.OakMailItem.gear_serial_number)
}
inline std::string* OakMailItem::unsafe_arena_release_gear_serial_number() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.OakMailItem.gear_serial_number)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return gear_serial_number_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OakMailItem::unsafe_arena_set_allocated_gear_serial_number(
    std::string* gear_serial_number) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (gear_serial_number != nullptr) {
    
  } else {
    
  }
  gear_serial_number_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      gear_serial_number, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.OakMailItem.gear_serial_number)
}

// string mail_guid = 6;
inline void OakMailItem::clear_mail_guid() {
  mail_guid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OakMailItem::mail_guid() const {
  // @@protoc_insertion_point(field_get:OakSave.OakMailItem.mail_guid)
  return _internal_mail_guid();
}
inline void OakMailItem::set_mail_guid(const std::string& value) {
  _internal_set_mail_guid(value);
  // @@protoc_insertion_point(field_set:OakSave.OakMailItem.mail_guid)
}
inline std::string* OakMailItem::mutable_mail_guid() {
  // @@protoc_insertion_point(field_mutable:OakSave.OakMailItem.mail_guid)
  return _internal_mutable_mail_guid();
}
inline const std::string& OakMailItem::_internal_mail_guid() const {
  return mail_guid_.Get();
}
inline void OakMailItem::_internal_set_mail_guid(const std::string& value) {
  
  mail_guid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OakMailItem::set_mail_guid(std::string&& value) {
  
  mail_guid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.OakMailItem.mail_guid)
}
inline void OakMailItem::set_mail_guid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mail_guid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.OakMailItem.mail_guid)
}
inline void OakMailItem::set_mail_guid(const char* value,
    size_t size) {
  
  mail_guid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.OakMailItem.mail_guid)
}
inline std::string* OakMailItem::_internal_mutable_mail_guid() {
  
  return mail_guid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OakMailItem::release_mail_guid() {
  // @@protoc_insertion_point(field_release:OakSave.OakMailItem.mail_guid)
  return mail_guid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OakMailItem::set_allocated_mail_guid(std::string* mail_guid) {
  if (mail_guid != nullptr) {
    
  } else {
    
  }
  mail_guid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mail_guid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.OakMailItem.mail_guid)
}
inline std::string* OakMailItem::unsafe_arena_release_mail_guid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.OakMailItem.mail_guid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return mail_guid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OakMailItem::unsafe_arena_set_allocated_mail_guid(
    std::string* mail_guid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mail_guid != nullptr) {
    
  } else {
    
  }
  mail_guid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mail_guid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.OakMailItem.mail_guid)
}

// int64 date_sent = 7;
inline void OakMailItem::clear_date_sent() {
  date_sent_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OakMailItem::_internal_date_sent() const {
  return date_sent_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OakMailItem::date_sent() const {
  // @@protoc_insertion_point(field_get:OakSave.OakMailItem.date_sent)
  return _internal_date_sent();
}
inline void OakMailItem::_internal_set_date_sent(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  date_sent_ = value;
}
inline void OakMailItem::set_date_sent(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_date_sent(value);
  // @@protoc_insertion_point(field_set:OakSave.OakMailItem.date_sent)
}

// int64 expiration_date = 8;
inline void OakMailItem::clear_expiration_date() {
  expiration_date_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OakMailItem::_internal_expiration_date() const {
  return expiration_date_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OakMailItem::expiration_date() const {
  // @@protoc_insertion_point(field_get:OakSave.OakMailItem.expiration_date)
  return _internal_expiration_date();
}
inline void OakMailItem::_internal_set_expiration_date(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  expiration_date_ = value;
}
inline void OakMailItem::set_expiration_date(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_expiration_date(value);
  // @@protoc_insertion_point(field_set:OakSave.OakMailItem.expiration_date)
}

// string from_player_id = 9;
inline void OakMailItem::clear_from_player_id() {
  from_player_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OakMailItem::from_player_id() const {
  // @@protoc_insertion_point(field_get:OakSave.OakMailItem.from_player_id)
  return _internal_from_player_id();
}
inline void OakMailItem::set_from_player_id(const std::string& value) {
  _internal_set_from_player_id(value);
  // @@protoc_insertion_point(field_set:OakSave.OakMailItem.from_player_id)
}
inline std::string* OakMailItem::mutable_from_player_id() {
  // @@protoc_insertion_point(field_mutable:OakSave.OakMailItem.from_player_id)
  return _internal_mutable_from_player_id();
}
inline const std::string& OakMailItem::_internal_from_player_id() const {
  return from_player_id_.Get();
}
inline void OakMailItem::_internal_set_from_player_id(const std::string& value) {
  
  from_player_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OakMailItem::set_from_player_id(std::string&& value) {
  
  from_player_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.OakMailItem.from_player_id)
}
inline void OakMailItem::set_from_player_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  from_player_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.OakMailItem.from_player_id)
}
inline void OakMailItem::set_from_player_id(const char* value,
    size_t size) {
  
  from_player_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.OakMailItem.from_player_id)
}
inline std::string* OakMailItem::_internal_mutable_from_player_id() {
  
  return from_player_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OakMailItem::release_from_player_id() {
  // @@protoc_insertion_point(field_release:OakSave.OakMailItem.from_player_id)
  return from_player_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OakMailItem::set_allocated_from_player_id(std::string* from_player_id) {
  if (from_player_id != nullptr) {
    
  } else {
    
  }
  from_player_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from_player_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.OakMailItem.from_player_id)
}
inline std::string* OakMailItem::unsafe_arena_release_from_player_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.OakMailItem.from_player_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return from_player_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OakMailItem::unsafe_arena_set_allocated_from_player_id(
    std::string* from_player_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (from_player_id != nullptr) {
    
  } else {
    
  }
  from_player_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      from_player_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.OakMailItem.from_player_id)
}

// bool has_been_read = 10;
inline void OakMailItem::clear_has_been_read() {
  has_been_read_ = false;
}
inline bool OakMailItem::_internal_has_been_read() const {
  return has_been_read_;
}
inline bool OakMailItem::has_been_read() const {
  // @@protoc_insertion_point(field_get:OakSave.OakMailItem.has_been_read)
  return _internal_has_been_read();
}
inline void OakMailItem::_internal_set_has_been_read(bool value) {
  
  has_been_read_ = value;
}
inline void OakMailItem::set_has_been_read(bool value) {
  _internal_set_has_been_read(value);
  // @@protoc_insertion_point(field_set:OakSave.OakMailItem.has_been_read)
}

// -------------------------------------------------------------------

// GearSoldByFriendData

// string gear_serial_number = 1;
inline void GearSoldByFriendData::clear_gear_serial_number() {
  gear_serial_number_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GearSoldByFriendData::gear_serial_number() const {
  // @@protoc_insertion_point(field_get:OakSave.GearSoldByFriendData.gear_serial_number)
  return _internal_gear_serial_number();
}
inline void GearSoldByFriendData::set_gear_serial_number(const std::string& value) {
  _internal_set_gear_serial_number(value);
  // @@protoc_insertion_point(field_set:OakSave.GearSoldByFriendData.gear_serial_number)
}
inline std::string* GearSoldByFriendData::mutable_gear_serial_number() {
  // @@protoc_insertion_point(field_mutable:OakSave.GearSoldByFriendData.gear_serial_number)
  return _internal_mutable_gear_serial_number();
}
inline const std::string& GearSoldByFriendData::_internal_gear_serial_number() const {
  return gear_serial_number_.Get();
}
inline void GearSoldByFriendData::_internal_set_gear_serial_number(const std::string& value) {
  
  gear_serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GearSoldByFriendData::set_gear_serial_number(std::string&& value) {
  
  gear_serial_number_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.GearSoldByFriendData.gear_serial_number)
}
inline void GearSoldByFriendData::set_gear_serial_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gear_serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.GearSoldByFriendData.gear_serial_number)
}
inline void GearSoldByFriendData::set_gear_serial_number(const char* value,
    size_t size) {
  
  gear_serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.GearSoldByFriendData.gear_serial_number)
}
inline std::string* GearSoldByFriendData::_internal_mutable_gear_serial_number() {
  
  return gear_serial_number_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GearSoldByFriendData::release_gear_serial_number() {
  // @@protoc_insertion_point(field_release:OakSave.GearSoldByFriendData.gear_serial_number)
  return gear_serial_number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GearSoldByFriendData::set_allocated_gear_serial_number(std::string* gear_serial_number) {
  if (gear_serial_number != nullptr) {
    
  } else {
    
  }
  gear_serial_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gear_serial_number,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.GearSoldByFriendData.gear_serial_number)
}
inline std::string* GearSoldByFriendData::unsafe_arena_release_gear_serial_number() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.GearSoldByFriendData.gear_serial_number)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return gear_serial_number_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GearSoldByFriendData::unsafe_arena_set_allocated_gear_serial_number(
    std::string* gear_serial_number) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (gear_serial_number != nullptr) {
    
  } else {
    
  }
  gear_serial_number_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      gear_serial_number, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.GearSoldByFriendData.gear_serial_number)
}

// int32 player_class_identifier_hash = 2;
inline void GearSoldByFriendData::clear_player_class_identifier_hash() {
  player_class_identifier_hash_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GearSoldByFriendData::_internal_player_class_identifier_hash() const {
  return player_class_identifier_hash_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GearSoldByFriendData::player_class_identifier_hash() const {
  // @@protoc_insertion_point(field_get:OakSave.GearSoldByFriendData.player_class_identifier_hash)
  return _internal_player_class_identifier_hash();
}
inline void GearSoldByFriendData::_internal_set_player_class_identifier_hash(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  player_class_identifier_hash_ = value;
}
inline void GearSoldByFriendData::set_player_class_identifier_hash(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_player_class_identifier_hash(value);
  // @@protoc_insertion_point(field_set:OakSave.GearSoldByFriendData.player_class_identifier_hash)
}

// string friend_net_id = 3;
inline void GearSoldByFriendData::clear_friend_net_id() {
  friend_net_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GearSoldByFriendData::friend_net_id() const {
  // @@protoc_insertion_point(field_get:OakSave.GearSoldByFriendData.friend_net_id)
  return _internal_friend_net_id();
}
inline void GearSoldByFriendData::set_friend_net_id(const std::string& value) {
  _internal_set_friend_net_id(value);
  // @@protoc_insertion_point(field_set:OakSave.GearSoldByFriendData.friend_net_id)
}
inline std::string* GearSoldByFriendData::mutable_friend_net_id() {
  // @@protoc_insertion_point(field_mutable:OakSave.GearSoldByFriendData.friend_net_id)
  return _internal_mutable_friend_net_id();
}
inline const std::string& GearSoldByFriendData::_internal_friend_net_id() const {
  return friend_net_id_.Get();
}
inline void GearSoldByFriendData::_internal_set_friend_net_id(const std::string& value) {
  
  friend_net_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GearSoldByFriendData::set_friend_net_id(std::string&& value) {
  
  friend_net_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.GearSoldByFriendData.friend_net_id)
}
inline void GearSoldByFriendData::set_friend_net_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  friend_net_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.GearSoldByFriendData.friend_net_id)
}
inline void GearSoldByFriendData::set_friend_net_id(const char* value,
    size_t size) {
  
  friend_net_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.GearSoldByFriendData.friend_net_id)
}
inline std::string* GearSoldByFriendData::_internal_mutable_friend_net_id() {
  
  return friend_net_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GearSoldByFriendData::release_friend_net_id() {
  // @@protoc_insertion_point(field_release:OakSave.GearSoldByFriendData.friend_net_id)
  return friend_net_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GearSoldByFriendData::set_allocated_friend_net_id(std::string* friend_net_id) {
  if (friend_net_id != nullptr) {
    
  } else {
    
  }
  friend_net_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), friend_net_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.GearSoldByFriendData.friend_net_id)
}
inline std::string* GearSoldByFriendData::unsafe_arena_release_friend_net_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.GearSoldByFriendData.friend_net_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return friend_net_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GearSoldByFriendData::unsafe_arena_set_allocated_friend_net_id(
    std::string* friend_net_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (friend_net_id != nullptr) {
    
  } else {
    
  }
  friend_net_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      friend_net_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.GearSoldByFriendData.friend_net_id)
}

// -------------------------------------------------------------------

// OakCustomizationSaveGameData

// bool is_new = 1;
inline void OakCustomizationSaveGameData::clear_is_new() {
  is_new_ = false;
}
inline bool OakCustomizationSaveGameData::_internal_is_new() const {
  return is_new_;
}
inline bool OakCustomizationSaveGameData::is_new() const {
  // @@protoc_insertion_point(field_get:OakSave.OakCustomizationSaveGameData.is_new)
  return _internal_is_new();
}
inline void OakCustomizationSaveGameData::_internal_set_is_new(bool value) {
  
  is_new_ = value;
}
inline void OakCustomizationSaveGameData::set_is_new(bool value) {
  _internal_set_is_new(value);
  // @@protoc_insertion_point(field_set:OakSave.OakCustomizationSaveGameData.is_new)
}

// string customization_asset_path = 2;
inline void OakCustomizationSaveGameData::clear_customization_asset_path() {
  customization_asset_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OakCustomizationSaveGameData::customization_asset_path() const {
  // @@protoc_insertion_point(field_get:OakSave.OakCustomizationSaveGameData.customization_asset_path)
  return _internal_customization_asset_path();
}
inline void OakCustomizationSaveGameData::set_customization_asset_path(const std::string& value) {
  _internal_set_customization_asset_path(value);
  // @@protoc_insertion_point(field_set:OakSave.OakCustomizationSaveGameData.customization_asset_path)
}
inline std::string* OakCustomizationSaveGameData::mutable_customization_asset_path() {
  // @@protoc_insertion_point(field_mutable:OakSave.OakCustomizationSaveGameData.customization_asset_path)
  return _internal_mutable_customization_asset_path();
}
inline const std::string& OakCustomizationSaveGameData::_internal_customization_asset_path() const {
  return customization_asset_path_.Get();
}
inline void OakCustomizationSaveGameData::_internal_set_customization_asset_path(const std::string& value) {
  
  customization_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OakCustomizationSaveGameData::set_customization_asset_path(std::string&& value) {
  
  customization_asset_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.OakCustomizationSaveGameData.customization_asset_path)
}
inline void OakCustomizationSaveGameData::set_customization_asset_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  customization_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.OakCustomizationSaveGameData.customization_asset_path)
}
inline void OakCustomizationSaveGameData::set_customization_asset_path(const char* value,
    size_t size) {
  
  customization_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.OakCustomizationSaveGameData.customization_asset_path)
}
inline std::string* OakCustomizationSaveGameData::_internal_mutable_customization_asset_path() {
  
  return customization_asset_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OakCustomizationSaveGameData::release_customization_asset_path() {
  // @@protoc_insertion_point(field_release:OakSave.OakCustomizationSaveGameData.customization_asset_path)
  return customization_asset_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OakCustomizationSaveGameData::set_allocated_customization_asset_path(std::string* customization_asset_path) {
  if (customization_asset_path != nullptr) {
    
  } else {
    
  }
  customization_asset_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), customization_asset_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.OakCustomizationSaveGameData.customization_asset_path)
}
inline std::string* OakCustomizationSaveGameData::unsafe_arena_release_customization_asset_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.OakCustomizationSaveGameData.customization_asset_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return customization_asset_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OakCustomizationSaveGameData::unsafe_arena_set_allocated_customization_asset_path(
    std::string* customization_asset_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (customization_asset_path != nullptr) {
    
  } else {
    
  }
  customization_asset_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      customization_asset_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.OakCustomizationSaveGameData.customization_asset_path)
}

// -------------------------------------------------------------------

// OakInventoryCustomizationPartInfo

// uint32 customization_part_hash = 1;
inline void OakInventoryCustomizationPartInfo::clear_customization_part_hash() {
  customization_part_hash_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OakInventoryCustomizationPartInfo::_internal_customization_part_hash() const {
  return customization_part_hash_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OakInventoryCustomizationPartInfo::customization_part_hash() const {
  // @@protoc_insertion_point(field_get:OakSave.OakInventoryCustomizationPartInfo.customization_part_hash)
  return _internal_customization_part_hash();
}
inline void OakInventoryCustomizationPartInfo::_internal_set_customization_part_hash(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  customization_part_hash_ = value;
}
inline void OakInventoryCustomizationPartInfo::set_customization_part_hash(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_customization_part_hash(value);
  // @@protoc_insertion_point(field_set:OakSave.OakInventoryCustomizationPartInfo.customization_part_hash)
}

// bool is_new = 2;
inline void OakInventoryCustomizationPartInfo::clear_is_new() {
  is_new_ = false;
}
inline bool OakInventoryCustomizationPartInfo::_internal_is_new() const {
  return is_new_;
}
inline bool OakInventoryCustomizationPartInfo::is_new() const {
  // @@protoc_insertion_point(field_get:OakSave.OakInventoryCustomizationPartInfo.is_new)
  return _internal_is_new();
}
inline void OakInventoryCustomizationPartInfo::_internal_set_is_new(bool value) {
  
  is_new_ = value;
}
inline void OakInventoryCustomizationPartInfo::set_is_new(bool value) {
  _internal_set_is_new(value);
  // @@protoc_insertion_point(field_set:OakSave.OakInventoryCustomizationPartInfo.is_new)
}

// -------------------------------------------------------------------

// GuardianRankRewardSaveGameData

// int32 num_tokens = 1;
inline void GuardianRankRewardSaveGameData::clear_num_tokens() {
  num_tokens_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GuardianRankRewardSaveGameData::_internal_num_tokens() const {
  return num_tokens_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GuardianRankRewardSaveGameData::num_tokens() const {
  // @@protoc_insertion_point(field_get:OakSave.GuardianRankRewardSaveGameData.num_tokens)
  return _internal_num_tokens();
}
inline void GuardianRankRewardSaveGameData::_internal_set_num_tokens(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_tokens_ = value;
}
inline void GuardianRankRewardSaveGameData::set_num_tokens(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_tokens(value);
  // @@protoc_insertion_point(field_set:OakSave.GuardianRankRewardSaveGameData.num_tokens)
}

// string reward_data_path = 2;
inline void GuardianRankRewardSaveGameData::clear_reward_data_path() {
  reward_data_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GuardianRankRewardSaveGameData::reward_data_path() const {
  // @@protoc_insertion_point(field_get:OakSave.GuardianRankRewardSaveGameData.reward_data_path)
  return _internal_reward_data_path();
}
inline void GuardianRankRewardSaveGameData::set_reward_data_path(const std::string& value) {
  _internal_set_reward_data_path(value);
  // @@protoc_insertion_point(field_set:OakSave.GuardianRankRewardSaveGameData.reward_data_path)
}
inline std::string* GuardianRankRewardSaveGameData::mutable_reward_data_path() {
  // @@protoc_insertion_point(field_mutable:OakSave.GuardianRankRewardSaveGameData.reward_data_path)
  return _internal_mutable_reward_data_path();
}
inline const std::string& GuardianRankRewardSaveGameData::_internal_reward_data_path() const {
  return reward_data_path_.Get();
}
inline void GuardianRankRewardSaveGameData::_internal_set_reward_data_path(const std::string& value) {
  
  reward_data_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GuardianRankRewardSaveGameData::set_reward_data_path(std::string&& value) {
  
  reward_data_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.GuardianRankRewardSaveGameData.reward_data_path)
}
inline void GuardianRankRewardSaveGameData::set_reward_data_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reward_data_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.GuardianRankRewardSaveGameData.reward_data_path)
}
inline void GuardianRankRewardSaveGameData::set_reward_data_path(const char* value,
    size_t size) {
  
  reward_data_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.GuardianRankRewardSaveGameData.reward_data_path)
}
inline std::string* GuardianRankRewardSaveGameData::_internal_mutable_reward_data_path() {
  
  return reward_data_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GuardianRankRewardSaveGameData::release_reward_data_path() {
  // @@protoc_insertion_point(field_release:OakSave.GuardianRankRewardSaveGameData.reward_data_path)
  return reward_data_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GuardianRankRewardSaveGameData::set_allocated_reward_data_path(std::string* reward_data_path) {
  if (reward_data_path != nullptr) {
    
  } else {
    
  }
  reward_data_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reward_data_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.GuardianRankRewardSaveGameData.reward_data_path)
}
inline std::string* GuardianRankRewardSaveGameData::unsafe_arena_release_reward_data_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.GuardianRankRewardSaveGameData.reward_data_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return reward_data_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GuardianRankRewardSaveGameData::unsafe_arena_set_allocated_reward_data_path(
    std::string* reward_data_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (reward_data_path != nullptr) {
    
  } else {
    
  }
  reward_data_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      reward_data_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.GuardianRankRewardSaveGameData.reward_data_path)
}

// -------------------------------------------------------------------

// GuardianRankProfileData

// int32 available_tokens = 1;
inline void GuardianRankProfileData::clear_available_tokens() {
  available_tokens_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GuardianRankProfileData::_internal_available_tokens() const {
  return available_tokens_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GuardianRankProfileData::available_tokens() const {
  // @@protoc_insertion_point(field_get:OakSave.GuardianRankProfileData.available_tokens)
  return _internal_available_tokens();
}
inline void GuardianRankProfileData::_internal_set_available_tokens(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  available_tokens_ = value;
}
inline void GuardianRankProfileData::set_available_tokens(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_available_tokens(value);
  // @@protoc_insertion_point(field_set:OakSave.GuardianRankProfileData.available_tokens)
}

// repeated .OakSave.GuardianRankRewardSaveGameData rank_rewards = 2;
inline int GuardianRankProfileData::_internal_rank_rewards_size() const {
  return rank_rewards_.size();
}
inline int GuardianRankProfileData::rank_rewards_size() const {
  return _internal_rank_rewards_size();
}
inline void GuardianRankProfileData::clear_rank_rewards() {
  rank_rewards_.Clear();
}
inline ::OakSave::GuardianRankRewardSaveGameData* GuardianRankProfileData::mutable_rank_rewards(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.GuardianRankProfileData.rank_rewards)
  return rank_rewards_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::GuardianRankRewardSaveGameData >*
GuardianRankProfileData::mutable_rank_rewards() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.GuardianRankProfileData.rank_rewards)
  return &rank_rewards_;
}
inline const ::OakSave::GuardianRankRewardSaveGameData& GuardianRankProfileData::_internal_rank_rewards(int index) const {
  return rank_rewards_.Get(index);
}
inline const ::OakSave::GuardianRankRewardSaveGameData& GuardianRankProfileData::rank_rewards(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.GuardianRankProfileData.rank_rewards)
  return _internal_rank_rewards(index);
}
inline ::OakSave::GuardianRankRewardSaveGameData* GuardianRankProfileData::_internal_add_rank_rewards() {
  return rank_rewards_.Add();
}
inline ::OakSave::GuardianRankRewardSaveGameData* GuardianRankProfileData::add_rank_rewards() {
  // @@protoc_insertion_point(field_add:OakSave.GuardianRankProfileData.rank_rewards)
  return _internal_add_rank_rewards();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::GuardianRankRewardSaveGameData >&
GuardianRankProfileData::rank_rewards() const {
  // @@protoc_insertion_point(field_list:OakSave.GuardianRankProfileData.rank_rewards)
  return rank_rewards_;
}

// int32 guardian_rank = 3;
inline void GuardianRankProfileData::clear_guardian_rank() {
  guardian_rank_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GuardianRankProfileData::_internal_guardian_rank() const {
  return guardian_rank_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GuardianRankProfileData::guardian_rank() const {
  // @@protoc_insertion_point(field_get:OakSave.GuardianRankProfileData.guardian_rank)
  return _internal_guardian_rank();
}
inline void GuardianRankProfileData::_internal_set_guardian_rank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  guardian_rank_ = value;
}
inline void GuardianRankProfileData::set_guardian_rank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_guardian_rank(value);
  // @@protoc_insertion_point(field_set:OakSave.GuardianRankProfileData.guardian_rank)
}

// int32 guardian_experience = 4;
inline void GuardianRankProfileData::clear_guardian_experience() {
  guardian_experience_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GuardianRankProfileData::_internal_guardian_experience() const {
  return guardian_experience_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GuardianRankProfileData::guardian_experience() const {
  // @@protoc_insertion_point(field_get:OakSave.GuardianRankProfileData.guardian_experience)
  return _internal_guardian_experience();
}
inline void GuardianRankProfileData::_internal_set_guardian_experience(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  guardian_experience_ = value;
}
inline void GuardianRankProfileData::set_guardian_experience(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_guardian_experience(value);
  // @@protoc_insertion_point(field_set:OakSave.GuardianRankProfileData.guardian_experience)
}

// int32 guardian_reward_random_seed = 5;
inline void GuardianRankProfileData::clear_guardian_reward_random_seed() {
  guardian_reward_random_seed_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GuardianRankProfileData::_internal_guardian_reward_random_seed() const {
  return guardian_reward_random_seed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GuardianRankProfileData::guardian_reward_random_seed() const {
  // @@protoc_insertion_point(field_get:OakSave.GuardianRankProfileData.guardian_reward_random_seed)
  return _internal_guardian_reward_random_seed();
}
inline void GuardianRankProfileData::_internal_set_guardian_reward_random_seed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  guardian_reward_random_seed_ = value;
}
inline void GuardianRankProfileData::set_guardian_reward_random_seed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_guardian_reward_random_seed(value);
  // @@protoc_insertion_point(field_set:OakSave.GuardianRankProfileData.guardian_reward_random_seed)
}

// int64 new_guardian_experience = 6;
inline void GuardianRankProfileData::clear_new_guardian_experience() {
  new_guardian_experience_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GuardianRankProfileData::_internal_new_guardian_experience() const {
  return new_guardian_experience_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GuardianRankProfileData::new_guardian_experience() const {
  // @@protoc_insertion_point(field_get:OakSave.GuardianRankProfileData.new_guardian_experience)
  return _internal_new_guardian_experience();
}
inline void GuardianRankProfileData::_internal_set_new_guardian_experience(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  new_guardian_experience_ = value;
}
inline void GuardianRankProfileData::set_new_guardian_experience(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_new_guardian_experience(value);
  // @@protoc_insertion_point(field_set:OakSave.GuardianRankProfileData.new_guardian_experience)
}

// -------------------------------------------------------------------

// CrewQuartersDecorationItemSaveGameData

// bool is_new = 1;
inline void CrewQuartersDecorationItemSaveGameData::clear_is_new() {
  is_new_ = false;
}
inline bool CrewQuartersDecorationItemSaveGameData::_internal_is_new() const {
  return is_new_;
}
inline bool CrewQuartersDecorationItemSaveGameData::is_new() const {
  // @@protoc_insertion_point(field_get:OakSave.CrewQuartersDecorationItemSaveGameData.is_new)
  return _internal_is_new();
}
inline void CrewQuartersDecorationItemSaveGameData::_internal_set_is_new(bool value) {
  
  is_new_ = value;
}
inline void CrewQuartersDecorationItemSaveGameData::set_is_new(bool value) {
  _internal_set_is_new(value);
  // @@protoc_insertion_point(field_set:OakSave.CrewQuartersDecorationItemSaveGameData.is_new)
}

// string decoration_item_asset_path = 2;
inline void CrewQuartersDecorationItemSaveGameData::clear_decoration_item_asset_path() {
  decoration_item_asset_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CrewQuartersDecorationItemSaveGameData::decoration_item_asset_path() const {
  // @@protoc_insertion_point(field_get:OakSave.CrewQuartersDecorationItemSaveGameData.decoration_item_asset_path)
  return _internal_decoration_item_asset_path();
}
inline void CrewQuartersDecorationItemSaveGameData::set_decoration_item_asset_path(const std::string& value) {
  _internal_set_decoration_item_asset_path(value);
  // @@protoc_insertion_point(field_set:OakSave.CrewQuartersDecorationItemSaveGameData.decoration_item_asset_path)
}
inline std::string* CrewQuartersDecorationItemSaveGameData::mutable_decoration_item_asset_path() {
  // @@protoc_insertion_point(field_mutable:OakSave.CrewQuartersDecorationItemSaveGameData.decoration_item_asset_path)
  return _internal_mutable_decoration_item_asset_path();
}
inline const std::string& CrewQuartersDecorationItemSaveGameData::_internal_decoration_item_asset_path() const {
  return decoration_item_asset_path_.Get();
}
inline void CrewQuartersDecorationItemSaveGameData::_internal_set_decoration_item_asset_path(const std::string& value) {
  
  decoration_item_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CrewQuartersDecorationItemSaveGameData::set_decoration_item_asset_path(std::string&& value) {
  
  decoration_item_asset_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.CrewQuartersDecorationItemSaveGameData.decoration_item_asset_path)
}
inline void CrewQuartersDecorationItemSaveGameData::set_decoration_item_asset_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  decoration_item_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.CrewQuartersDecorationItemSaveGameData.decoration_item_asset_path)
}
inline void CrewQuartersDecorationItemSaveGameData::set_decoration_item_asset_path(const char* value,
    size_t size) {
  
  decoration_item_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.CrewQuartersDecorationItemSaveGameData.decoration_item_asset_path)
}
inline std::string* CrewQuartersDecorationItemSaveGameData::_internal_mutable_decoration_item_asset_path() {
  
  return decoration_item_asset_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CrewQuartersDecorationItemSaveGameData::release_decoration_item_asset_path() {
  // @@protoc_insertion_point(field_release:OakSave.CrewQuartersDecorationItemSaveGameData.decoration_item_asset_path)
  return decoration_item_asset_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CrewQuartersDecorationItemSaveGameData::set_allocated_decoration_item_asset_path(std::string* decoration_item_asset_path) {
  if (decoration_item_asset_path != nullptr) {
    
  } else {
    
  }
  decoration_item_asset_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), decoration_item_asset_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.CrewQuartersDecorationItemSaveGameData.decoration_item_asset_path)
}
inline std::string* CrewQuartersDecorationItemSaveGameData::unsafe_arena_release_decoration_item_asset_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.CrewQuartersDecorationItemSaveGameData.decoration_item_asset_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return decoration_item_asset_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CrewQuartersDecorationItemSaveGameData::unsafe_arena_set_allocated_decoration_item_asset_path(
    std::string* decoration_item_asset_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (decoration_item_asset_path != nullptr) {
    
  } else {
    
  }
  decoration_item_asset_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      decoration_item_asset_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.CrewQuartersDecorationItemSaveGameData.decoration_item_asset_path)
}

// -------------------------------------------------------------------

// CrewQuartersRoomItemSaveGameData

// bool is_new = 1;
inline void CrewQuartersRoomItemSaveGameData::clear_is_new() {
  is_new_ = false;
}
inline bool CrewQuartersRoomItemSaveGameData::_internal_is_new() const {
  return is_new_;
}
inline bool CrewQuartersRoomItemSaveGameData::is_new() const {
  // @@protoc_insertion_point(field_get:OakSave.CrewQuartersRoomItemSaveGameData.is_new)
  return _internal_is_new();
}
inline void CrewQuartersRoomItemSaveGameData::_internal_set_is_new(bool value) {
  
  is_new_ = value;
}
inline void CrewQuartersRoomItemSaveGameData::set_is_new(bool value) {
  _internal_set_is_new(value);
  // @@protoc_insertion_point(field_set:OakSave.CrewQuartersRoomItemSaveGameData.is_new)
}

// string room_item_asset_path = 2;
inline void CrewQuartersRoomItemSaveGameData::clear_room_item_asset_path() {
  room_item_asset_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CrewQuartersRoomItemSaveGameData::room_item_asset_path() const {
  // @@protoc_insertion_point(field_get:OakSave.CrewQuartersRoomItemSaveGameData.room_item_asset_path)
  return _internal_room_item_asset_path();
}
inline void CrewQuartersRoomItemSaveGameData::set_room_item_asset_path(const std::string& value) {
  _internal_set_room_item_asset_path(value);
  // @@protoc_insertion_point(field_set:OakSave.CrewQuartersRoomItemSaveGameData.room_item_asset_path)
}
inline std::string* CrewQuartersRoomItemSaveGameData::mutable_room_item_asset_path() {
  // @@protoc_insertion_point(field_mutable:OakSave.CrewQuartersRoomItemSaveGameData.room_item_asset_path)
  return _internal_mutable_room_item_asset_path();
}
inline const std::string& CrewQuartersRoomItemSaveGameData::_internal_room_item_asset_path() const {
  return room_item_asset_path_.Get();
}
inline void CrewQuartersRoomItemSaveGameData::_internal_set_room_item_asset_path(const std::string& value) {
  
  room_item_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CrewQuartersRoomItemSaveGameData::set_room_item_asset_path(std::string&& value) {
  
  room_item_asset_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.CrewQuartersRoomItemSaveGameData.room_item_asset_path)
}
inline void CrewQuartersRoomItemSaveGameData::set_room_item_asset_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  room_item_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.CrewQuartersRoomItemSaveGameData.room_item_asset_path)
}
inline void CrewQuartersRoomItemSaveGameData::set_room_item_asset_path(const char* value,
    size_t size) {
  
  room_item_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.CrewQuartersRoomItemSaveGameData.room_item_asset_path)
}
inline std::string* CrewQuartersRoomItemSaveGameData::_internal_mutable_room_item_asset_path() {
  
  return room_item_asset_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CrewQuartersRoomItemSaveGameData::release_room_item_asset_path() {
  // @@protoc_insertion_point(field_release:OakSave.CrewQuartersRoomItemSaveGameData.room_item_asset_path)
  return room_item_asset_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CrewQuartersRoomItemSaveGameData::set_allocated_room_item_asset_path(std::string* room_item_asset_path) {
  if (room_item_asset_path != nullptr) {
    
  } else {
    
  }
  room_item_asset_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), room_item_asset_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.CrewQuartersRoomItemSaveGameData.room_item_asset_path)
}
inline std::string* CrewQuartersRoomItemSaveGameData::unsafe_arena_release_room_item_asset_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.CrewQuartersRoomItemSaveGameData.room_item_asset_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return room_item_asset_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CrewQuartersRoomItemSaveGameData::unsafe_arena_set_allocated_room_item_asset_path(
    std::string* room_item_asset_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (room_item_asset_path != nullptr) {
    
  } else {
    
  }
  room_item_asset_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      room_item_asset_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.CrewQuartersRoomItemSaveGameData.room_item_asset_path)
}

// -------------------------------------------------------------------

// RecentlyMetPlayer

// string shift_player_id = 1;
inline void RecentlyMetPlayer::clear_shift_player_id() {
  shift_player_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RecentlyMetPlayer::shift_player_id() const {
  // @@protoc_insertion_point(field_get:OakSave.RecentlyMetPlayer.shift_player_id)
  return _internal_shift_player_id();
}
inline void RecentlyMetPlayer::set_shift_player_id(const std::string& value) {
  _internal_set_shift_player_id(value);
  // @@protoc_insertion_point(field_set:OakSave.RecentlyMetPlayer.shift_player_id)
}
inline std::string* RecentlyMetPlayer::mutable_shift_player_id() {
  // @@protoc_insertion_point(field_mutable:OakSave.RecentlyMetPlayer.shift_player_id)
  return _internal_mutable_shift_player_id();
}
inline const std::string& RecentlyMetPlayer::_internal_shift_player_id() const {
  return shift_player_id_.Get();
}
inline void RecentlyMetPlayer::_internal_set_shift_player_id(const std::string& value) {
  
  shift_player_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RecentlyMetPlayer::set_shift_player_id(std::string&& value) {
  
  shift_player_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.RecentlyMetPlayer.shift_player_id)
}
inline void RecentlyMetPlayer::set_shift_player_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  shift_player_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.RecentlyMetPlayer.shift_player_id)
}
inline void RecentlyMetPlayer::set_shift_player_id(const char* value,
    size_t size) {
  
  shift_player_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.RecentlyMetPlayer.shift_player_id)
}
inline std::string* RecentlyMetPlayer::_internal_mutable_shift_player_id() {
  
  return shift_player_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RecentlyMetPlayer::release_shift_player_id() {
  // @@protoc_insertion_point(field_release:OakSave.RecentlyMetPlayer.shift_player_id)
  return shift_player_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RecentlyMetPlayer::set_allocated_shift_player_id(std::string* shift_player_id) {
  if (shift_player_id != nullptr) {
    
  } else {
    
  }
  shift_player_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), shift_player_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.RecentlyMetPlayer.shift_player_id)
}
inline std::string* RecentlyMetPlayer::unsafe_arena_release_shift_player_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.RecentlyMetPlayer.shift_player_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return shift_player_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RecentlyMetPlayer::unsafe_arena_set_allocated_shift_player_id(
    std::string* shift_player_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (shift_player_id != nullptr) {
    
  } else {
    
  }
  shift_player_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      shift_player_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.RecentlyMetPlayer.shift_player_id)
}

// string first_party_player_id = 2;
inline void RecentlyMetPlayer::clear_first_party_player_id() {
  first_party_player_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RecentlyMetPlayer::first_party_player_id() const {
  // @@protoc_insertion_point(field_get:OakSave.RecentlyMetPlayer.first_party_player_id)
  return _internal_first_party_player_id();
}
inline void RecentlyMetPlayer::set_first_party_player_id(const std::string& value) {
  _internal_set_first_party_player_id(value);
  // @@protoc_insertion_point(field_set:OakSave.RecentlyMetPlayer.first_party_player_id)
}
inline std::string* RecentlyMetPlayer::mutable_first_party_player_id() {
  // @@protoc_insertion_point(field_mutable:OakSave.RecentlyMetPlayer.first_party_player_id)
  return _internal_mutable_first_party_player_id();
}
inline const std::string& RecentlyMetPlayer::_internal_first_party_player_id() const {
  return first_party_player_id_.Get();
}
inline void RecentlyMetPlayer::_internal_set_first_party_player_id(const std::string& value) {
  
  first_party_player_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RecentlyMetPlayer::set_first_party_player_id(std::string&& value) {
  
  first_party_player_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.RecentlyMetPlayer.first_party_player_id)
}
inline void RecentlyMetPlayer::set_first_party_player_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  first_party_player_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.RecentlyMetPlayer.first_party_player_id)
}
inline void RecentlyMetPlayer::set_first_party_player_id(const char* value,
    size_t size) {
  
  first_party_player_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.RecentlyMetPlayer.first_party_player_id)
}
inline std::string* RecentlyMetPlayer::_internal_mutable_first_party_player_id() {
  
  return first_party_player_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RecentlyMetPlayer::release_first_party_player_id() {
  // @@protoc_insertion_point(field_release:OakSave.RecentlyMetPlayer.first_party_player_id)
  return first_party_player_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RecentlyMetPlayer::set_allocated_first_party_player_id(std::string* first_party_player_id) {
  if (first_party_player_id != nullptr) {
    
  } else {
    
  }
  first_party_player_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), first_party_player_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.RecentlyMetPlayer.first_party_player_id)
}
inline std::string* RecentlyMetPlayer::unsafe_arena_release_first_party_player_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.RecentlyMetPlayer.first_party_player_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return first_party_player_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RecentlyMetPlayer::unsafe_arena_set_allocated_first_party_player_id(
    std::string* first_party_player_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (first_party_player_id != nullptr) {
    
  } else {
    
  }
  first_party_player_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      first_party_player_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.RecentlyMetPlayer.first_party_player_id)
}

// bool show_shift_player_entry = 3;
inline void RecentlyMetPlayer::clear_show_shift_player_entry() {
  show_shift_player_entry_ = false;
}
inline bool RecentlyMetPlayer::_internal_show_shift_player_entry() const {
  return show_shift_player_entry_;
}
inline bool RecentlyMetPlayer::show_shift_player_entry() const {
  // @@protoc_insertion_point(field_get:OakSave.RecentlyMetPlayer.show_shift_player_entry)
  return _internal_show_shift_player_entry();
}
inline void RecentlyMetPlayer::_internal_set_show_shift_player_entry(bool value) {
  
  show_shift_player_entry_ = value;
}
inline void RecentlyMetPlayer::set_show_shift_player_entry(bool value) {
  _internal_set_show_shift_player_entry(value);
  // @@protoc_insertion_point(field_set:OakSave.RecentlyMetPlayer.show_shift_player_entry)
}

// -------------------------------------------------------------------

// Profile_FriendEncountersEntry

// string key = 1;
inline void Profile_FriendEncountersEntry::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Profile_FriendEncountersEntry::key() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.FriendEncountersEntry.key)
  return _internal_key();
}
inline void Profile_FriendEncountersEntry::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.FriendEncountersEntry.key)
}
inline std::string* Profile_FriendEncountersEntry::mutable_key() {
  // @@protoc_insertion_point(field_mutable:OakSave.Profile.FriendEncountersEntry.key)
  return _internal_mutable_key();
}
inline const std::string& Profile_FriendEncountersEntry::_internal_key() const {
  return key_.Get();
}
inline void Profile_FriendEncountersEntry::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Profile_FriendEncountersEntry::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.Profile.FriendEncountersEntry.key)
}
inline void Profile_FriendEncountersEntry::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.Profile.FriendEncountersEntry.key)
}
inline void Profile_FriendEncountersEntry::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.Profile.FriendEncountersEntry.key)
}
inline std::string* Profile_FriendEncountersEntry::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Profile_FriendEncountersEntry::release_key() {
  // @@protoc_insertion_point(field_release:OakSave.Profile.FriendEncountersEntry.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Profile_FriendEncountersEntry::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.Profile.FriendEncountersEntry.key)
}
inline std::string* Profile_FriendEncountersEntry::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.Profile.FriendEncountersEntry.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Profile_FriendEncountersEntry::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.Profile.FriendEncountersEntry.key)
}

// .OakSave.OakFriendEncounterData value = 2;
inline bool Profile_FriendEncountersEntry::_internal_has_value() const {
  return this != internal_default_instance() && value_ != nullptr;
}
inline bool Profile_FriendEncountersEntry::has_value() const {
  return _internal_has_value();
}
inline void Profile_FriendEncountersEntry::clear_value() {
  if (GetArena() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
}
inline const ::OakSave::OakFriendEncounterData& Profile_FriendEncountersEntry::_internal_value() const {
  const ::OakSave::OakFriendEncounterData* p = value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::OakSave::OakFriendEncounterData*>(
      &::OakSave::_OakFriendEncounterData_default_instance_);
}
inline const ::OakSave::OakFriendEncounterData& Profile_FriendEncountersEntry::value() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.FriendEncountersEntry.value)
  return _internal_value();
}
inline void Profile_FriendEncountersEntry::unsafe_arena_set_allocated_value(
    ::OakSave::OakFriendEncounterData* value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.Profile.FriendEncountersEntry.value)
}
inline ::OakSave::OakFriendEncounterData* Profile_FriendEncountersEntry::release_value() {
  auto temp = unsafe_arena_release_value();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::OakSave::OakFriendEncounterData* Profile_FriendEncountersEntry::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:OakSave.Profile.FriendEncountersEntry.value)
  
  ::OakSave::OakFriendEncounterData* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::OakSave::OakFriendEncounterData* Profile_FriendEncountersEntry::_internal_mutable_value() {
  
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::OakSave::OakFriendEncounterData>(GetArena());
    value_ = p;
  }
  return value_;
}
inline ::OakSave::OakFriendEncounterData* Profile_FriendEncountersEntry::mutable_value() {
  // @@protoc_insertion_point(field_mutable:OakSave.Profile.FriendEncountersEntry.value)
  return _internal_mutable_value();
}
inline void Profile_FriendEncountersEntry::set_allocated_value(::OakSave::OakFriendEncounterData* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:OakSave.Profile.FriendEncountersEntry.value)
}

// -------------------------------------------------------------------

// Profile

// bool enable_aim_assist = 1;
inline void Profile::clear_enable_aim_assist() {
  enable_aim_assist_ = false;
}
inline bool Profile::_internal_enable_aim_assist() const {
  return enable_aim_assist_;
}
inline bool Profile::enable_aim_assist() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.enable_aim_assist)
  return _internal_enable_aim_assist();
}
inline void Profile::_internal_set_enable_aim_assist(bool value) {
  
  enable_aim_assist_ = value;
}
inline void Profile::set_enable_aim_assist(bool value) {
  _internal_set_enable_aim_assist(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.enable_aim_assist)
}

// bool gamepad_invert_look = 2;
inline void Profile::clear_gamepad_invert_look() {
  gamepad_invert_look_ = false;
}
inline bool Profile::_internal_gamepad_invert_look() const {
  return gamepad_invert_look_;
}
inline bool Profile::gamepad_invert_look() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.gamepad_invert_look)
  return _internal_gamepad_invert_look();
}
inline void Profile::_internal_set_gamepad_invert_look(bool value) {
  
  gamepad_invert_look_ = value;
}
inline void Profile::set_gamepad_invert_look(bool value) {
  _internal_set_gamepad_invert_look(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.gamepad_invert_look)
}

// bool gamepad_invert_turn = 3;
inline void Profile::clear_gamepad_invert_turn() {
  gamepad_invert_turn_ = false;
}
inline bool Profile::_internal_gamepad_invert_turn() const {
  return gamepad_invert_turn_;
}
inline bool Profile::gamepad_invert_turn() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.gamepad_invert_turn)
  return _internal_gamepad_invert_turn();
}
inline void Profile::_internal_set_gamepad_invert_turn(bool value) {
  
  gamepad_invert_turn_ = value;
}
inline void Profile::set_gamepad_invert_turn(bool value) {
  _internal_set_gamepad_invert_turn(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.gamepad_invert_turn)
}

// bool gamepad_invert_move = 4;
inline void Profile::clear_gamepad_invert_move() {
  gamepad_invert_move_ = false;
}
inline bool Profile::_internal_gamepad_invert_move() const {
  return gamepad_invert_move_;
}
inline bool Profile::gamepad_invert_move() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.gamepad_invert_move)
  return _internal_gamepad_invert_move();
}
inline void Profile::_internal_set_gamepad_invert_move(bool value) {
  
  gamepad_invert_move_ = value;
}
inline void Profile::set_gamepad_invert_move(bool value) {
  _internal_set_gamepad_invert_move(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.gamepad_invert_move)
}

// bool gamepad_invert_strafe = 5;
inline void Profile::clear_gamepad_invert_strafe() {
  gamepad_invert_strafe_ = false;
}
inline bool Profile::_internal_gamepad_invert_strafe() const {
  return gamepad_invert_strafe_;
}
inline bool Profile::gamepad_invert_strafe() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.gamepad_invert_strafe)
  return _internal_gamepad_invert_strafe();
}
inline void Profile::_internal_set_gamepad_invert_strafe(bool value) {
  
  gamepad_invert_strafe_ = value;
}
inline void Profile::set_gamepad_invert_strafe(bool value) {
  _internal_set_gamepad_invert_strafe(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.gamepad_invert_strafe)
}

// bool enable_vibration = 6;
inline void Profile::clear_enable_vibration() {
  enable_vibration_ = false;
}
inline bool Profile::_internal_enable_vibration() const {
  return enable_vibration_;
}
inline bool Profile::enable_vibration() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.enable_vibration)
  return _internal_enable_vibration();
}
inline void Profile::_internal_set_enable_vibration(bool value) {
  
  enable_vibration_ = value;
}
inline void Profile::set_enable_vibration(bool value) {
  _internal_set_enable_vibration(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.enable_vibration)
}

// bool invert_mouse_pitch = 7;
inline void Profile::clear_invert_mouse_pitch() {
  invert_mouse_pitch_ = false;
}
inline bool Profile::_internal_invert_mouse_pitch() const {
  return invert_mouse_pitch_;
}
inline bool Profile::invert_mouse_pitch() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.invert_mouse_pitch)
  return _internal_invert_mouse_pitch();
}
inline void Profile::_internal_set_invert_mouse_pitch(bool value) {
  
  invert_mouse_pitch_ = value;
}
inline void Profile::set_invert_mouse_pitch(bool value) {
  _internal_set_invert_mouse_pitch(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.invert_mouse_pitch)
}

// bool enable_mouse_smoothing = 8;
inline void Profile::clear_enable_mouse_smoothing() {
  enable_mouse_smoothing_ = false;
}
inline bool Profile::_internal_enable_mouse_smoothing() const {
  return enable_mouse_smoothing_;
}
inline bool Profile::enable_mouse_smoothing() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.enable_mouse_smoothing)
  return _internal_enable_mouse_smoothing();
}
inline void Profile::_internal_set_enable_mouse_smoothing(bool value) {
  
  enable_mouse_smoothing_ = value;
}
inline void Profile::set_enable_mouse_smoothing(bool value) {
  _internal_set_enable_mouse_smoothing(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.enable_mouse_smoothing)
}

// float mouse_scale = 9;
inline void Profile::clear_mouse_scale() {
  mouse_scale_ = 0;
}
inline float Profile::_internal_mouse_scale() const {
  return mouse_scale_;
}
inline float Profile::mouse_scale() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.mouse_scale)
  return _internal_mouse_scale();
}
inline void Profile::_internal_set_mouse_scale(float value) {
  
  mouse_scale_ = value;
}
inline void Profile::set_mouse_scale(float value) {
  _internal_set_mouse_scale(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.mouse_scale)
}

// bool show_damage_numbers = 10;
inline void Profile::clear_show_damage_numbers() {
  show_damage_numbers_ = false;
}
inline bool Profile::_internal_show_damage_numbers() const {
  return show_damage_numbers_;
}
inline bool Profile::show_damage_numbers() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.show_damage_numbers)
  return _internal_show_damage_numbers();
}
inline void Profile::_internal_set_show_damage_numbers(bool value) {
  
  show_damage_numbers_ = value;
}
inline void Profile::set_show_damage_numbers(bool value) {
  _internal_set_show_damage_numbers(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.show_damage_numbers)
}

// bool show_damage_number_icons = 11;
inline void Profile::clear_show_damage_number_icons() {
  show_damage_number_icons_ = false;
}
inline bool Profile::_internal_show_damage_number_icons() const {
  return show_damage_number_icons_;
}
inline bool Profile::show_damage_number_icons() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.show_damage_number_icons)
  return _internal_show_damage_number_icons();
}
inline void Profile::_internal_set_show_damage_number_icons(bool value) {
  
  show_damage_number_icons_ = value;
}
inline void Profile::set_show_damage_number_icons(bool value) {
  _internal_set_show_damage_number_icons(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.show_damage_number_icons)
}

// bool enable_training_messages = 12;
inline void Profile::clear_enable_training_messages() {
  enable_training_messages_ = false;
}
inline bool Profile::_internal_enable_training_messages() const {
  return enable_training_messages_;
}
inline bool Profile::enable_training_messages() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.enable_training_messages)
  return _internal_enable_training_messages();
}
inline void Profile::_internal_set_enable_training_messages(bool value) {
  
  enable_training_messages_ = value;
}
inline void Profile::set_enable_training_messages(bool value) {
  _internal_set_enable_training_messages(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.enable_training_messages)
}

// bool show_text_chat = 13;
inline void Profile::clear_show_text_chat() {
  show_text_chat_ = false;
}
inline bool Profile::_internal_show_text_chat() const {
  return show_text_chat_;
}
inline bool Profile::show_text_chat() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.show_text_chat)
  return _internal_show_text_chat();
}
inline void Profile::_internal_set_show_text_chat(bool value) {
  
  show_text_chat_ = value;
}
inline void Profile::set_show_text_chat(bool value) {
  _internal_set_show_text_chat(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.show_text_chat)
}

// bool center_crosshair = 14;
inline void Profile::clear_center_crosshair() {
  center_crosshair_ = false;
}
inline bool Profile::_internal_center_crosshair() const {
  return center_crosshair_;
}
inline bool Profile::center_crosshair() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.center_crosshair)
  return _internal_center_crosshair();
}
inline void Profile::_internal_set_center_crosshair(bool value) {
  
  center_crosshair_ = value;
}
inline void Profile::set_center_crosshair(bool value) {
  _internal_set_center_crosshair(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.center_crosshair)
}

// bool toggle_sprint = 15;
inline void Profile::clear_toggle_sprint() {
  toggle_sprint_ = false;
}
inline bool Profile::_internal_toggle_sprint() const {
  return toggle_sprint_;
}
inline bool Profile::toggle_sprint() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.toggle_sprint)
  return _internal_toggle_sprint();
}
inline void Profile::_internal_set_toggle_sprint(bool value) {
  
  toggle_sprint_ = value;
}
inline void Profile::set_toggle_sprint(bool value) {
  _internal_set_toggle_sprint(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.toggle_sprint)
}

// bool toggle_crouch = 16;
inline void Profile::clear_toggle_crouch() {
  toggle_crouch_ = false;
}
inline bool Profile::_internal_toggle_crouch() const {
  return toggle_crouch_;
}
inline bool Profile::toggle_crouch() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.toggle_crouch)
  return _internal_toggle_crouch();
}
inline void Profile::_internal_set_toggle_crouch(bool value) {
  
  toggle_crouch_ = value;
}
inline void Profile::set_toggle_crouch(bool value) {
  _internal_set_toggle_crouch(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.toggle_crouch)
}

// bool censor_content = 17;
inline void Profile::clear_censor_content() {
  censor_content_ = false;
}
inline bool Profile::_internal_censor_content() const {
  return censor_content_;
}
inline bool Profile::censor_content() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.censor_content)
  return _internal_censor_content();
}
inline void Profile::_internal_set_censor_content(bool value) {
  
  censor_content_ = value;
}
inline void Profile::set_censor_content(bool value) {
  _internal_set_censor_content(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.censor_content)
}

// float music_volume = 18;
inline void Profile::clear_music_volume() {
  music_volume_ = 0;
}
inline float Profile::_internal_music_volume() const {
  return music_volume_;
}
inline float Profile::music_volume() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.music_volume)
  return _internal_music_volume();
}
inline void Profile::_internal_set_music_volume(float value) {
  
  music_volume_ = value;
}
inline void Profile::set_music_volume(float value) {
  _internal_set_music_volume(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.music_volume)
}

// float sound_effects_volume = 19;
inline void Profile::clear_sound_effects_volume() {
  sound_effects_volume_ = 0;
}
inline float Profile::_internal_sound_effects_volume() const {
  return sound_effects_volume_;
}
inline float Profile::sound_effects_volume() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.sound_effects_volume)
  return _internal_sound_effects_volume();
}
inline void Profile::_internal_set_sound_effects_volume(float value) {
  
  sound_effects_volume_ = value;
}
inline void Profile::set_sound_effects_volume(float value) {
  _internal_set_sound_effects_volume(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.sound_effects_volume)
}

// float vo_volume = 20;
inline void Profile::clear_vo_volume() {
  vo_volume_ = 0;
}
inline float Profile::_internal_vo_volume() const {
  return vo_volume_;
}
inline float Profile::vo_volume() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.vo_volume)
  return _internal_vo_volume();
}
inline void Profile::_internal_set_vo_volume(float value) {
  
  vo_volume_ = value;
}
inline void Profile::set_vo_volume(float value) {
  _internal_set_vo_volume(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.vo_volume)
}

// float voice_volume = 21;
inline void Profile::clear_voice_volume() {
  voice_volume_ = 0;
}
inline float Profile::_internal_voice_volume() const {
  return voice_volume_;
}
inline float Profile::voice_volume() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.voice_volume)
  return _internal_voice_volume();
}
inline void Profile::_internal_set_voice_volume(float value) {
  
  voice_volume_ = value;
}
inline void Profile::set_voice_volume(float value) {
  _internal_set_voice_volume(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.voice_volume)
}

// bool enable_optional_vo = 22;
inline void Profile::clear_enable_optional_vo() {
  enable_optional_vo_ = false;
}
inline bool Profile::_internal_enable_optional_vo() const {
  return enable_optional_vo_;
}
inline bool Profile::enable_optional_vo() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.enable_optional_vo)
  return _internal_enable_optional_vo();
}
inline void Profile::_internal_set_enable_optional_vo(bool value) {
  
  enable_optional_vo_ = value;
}
inline void Profile::set_enable_optional_vo(bool value) {
  _internal_set_enable_optional_vo(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.enable_optional_vo)
}

// bool push_to_talk = 23;
inline void Profile::clear_push_to_talk() {
  push_to_talk_ = false;
}
inline bool Profile::_internal_push_to_talk() const {
  return push_to_talk_;
}
inline bool Profile::push_to_talk() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.push_to_talk)
  return _internal_push_to_talk();
}
inline void Profile::_internal_set_push_to_talk(bool value) {
  
  push_to_talk_ = value;
}
inline void Profile::set_push_to_talk(bool value) {
  _internal_set_push_to_talk(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.push_to_talk)
}

// bool enable_controller_audio = 24;
inline void Profile::clear_enable_controller_audio() {
  enable_controller_audio_ = false;
}
inline bool Profile::_internal_enable_controller_audio() const {
  return enable_controller_audio_;
}
inline bool Profile::enable_controller_audio() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.enable_controller_audio)
  return _internal_enable_controller_audio();
}
inline void Profile::_internal_set_enable_controller_audio(bool value) {
  
  enable_controller_audio_ = value;
}
inline void Profile::set_enable_controller_audio(bool value) {
  _internal_set_enable_controller_audio(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.enable_controller_audio)
}

// float speaker_angle_front = 25;
inline void Profile::clear_speaker_angle_front() {
  speaker_angle_front_ = 0;
}
inline float Profile::_internal_speaker_angle_front() const {
  return speaker_angle_front_;
}
inline float Profile::speaker_angle_front() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.speaker_angle_front)
  return _internal_speaker_angle_front();
}
inline void Profile::_internal_set_speaker_angle_front(float value) {
  
  speaker_angle_front_ = value;
}
inline void Profile::set_speaker_angle_front(float value) {
  _internal_set_speaker_angle_front(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.speaker_angle_front)
}

// float speaker_angle_side = 26;
inline void Profile::clear_speaker_angle_side() {
  speaker_angle_side_ = 0;
}
inline float Profile::_internal_speaker_angle_side() const {
  return speaker_angle_side_;
}
inline float Profile::speaker_angle_side() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.speaker_angle_side)
  return _internal_speaker_angle_side();
}
inline void Profile::_internal_set_speaker_angle_side(float value) {
  
  speaker_angle_side_ = value;
}
inline void Profile::set_speaker_angle_side(float value) {
  _internal_set_speaker_angle_side(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.speaker_angle_side)
}

// float speaker_angle_back = 27;
inline void Profile::clear_speaker_angle_back() {
  speaker_angle_back_ = 0;
}
inline float Profile::_internal_speaker_angle_back() const {
  return speaker_angle_back_;
}
inline float Profile::speaker_angle_back() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.speaker_angle_back)
  return _internal_speaker_angle_back();
}
inline void Profile::_internal_set_speaker_angle_back(float value) {
  
  speaker_angle_back_ = value;
}
inline void Profile::set_speaker_angle_back(float value) {
  _internal_set_speaker_angle_back(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.speaker_angle_back)
}

// uint32 speaker_setup = 28;
inline void Profile::clear_speaker_setup() {
  speaker_setup_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::_internal_speaker_setup() const {
  return speaker_setup_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::speaker_setup() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.speaker_setup)
  return _internal_speaker_setup();
}
inline void Profile::_internal_set_speaker_setup(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  speaker_setup_ = value;
}
inline void Profile::set_speaker_setup(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_speaker_setup(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.speaker_setup)
}

// bool mute_audio_on_focus_loss = 29;
inline void Profile::clear_mute_audio_on_focus_loss() {
  mute_audio_on_focus_loss_ = false;
}
inline bool Profile::_internal_mute_audio_on_focus_loss() const {
  return mute_audio_on_focus_loss_;
}
inline bool Profile::mute_audio_on_focus_loss() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.mute_audio_on_focus_loss)
  return _internal_mute_audio_on_focus_loss();
}
inline void Profile::_internal_set_mute_audio_on_focus_loss(bool value) {
  
  mute_audio_on_focus_loss_ = value;
}
inline void Profile::set_mute_audio_on_focus_loss(bool value) {
  _internal_set_mute_audio_on_focus_loss(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.mute_audio_on_focus_loss)
}

// bool hide_strict_nat_help_dialog = 34;
inline void Profile::clear_hide_strict_nat_help_dialog() {
  hide_strict_nat_help_dialog_ = false;
}
inline bool Profile::_internal_hide_strict_nat_help_dialog() const {
  return hide_strict_nat_help_dialog_;
}
inline bool Profile::hide_strict_nat_help_dialog() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.hide_strict_nat_help_dialog)
  return _internal_hide_strict_nat_help_dialog();
}
inline void Profile::_internal_set_hide_strict_nat_help_dialog(bool value) {
  
  hide_strict_nat_help_dialog_ = value;
}
inline void Profile::set_hide_strict_nat_help_dialog(bool value) {
  _internal_set_hide_strict_nat_help_dialog(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.hide_strict_nat_help_dialog)
}

// .OakSave.PlayerInputBindings player_input_bindings = 35;
inline bool Profile::_internal_has_player_input_bindings() const {
  return this != internal_default_instance() && player_input_bindings_ != nullptr;
}
inline bool Profile::has_player_input_bindings() const {
  return _internal_has_player_input_bindings();
}
inline void Profile::clear_player_input_bindings() {
  if (GetArena() == nullptr && player_input_bindings_ != nullptr) {
    delete player_input_bindings_;
  }
  player_input_bindings_ = nullptr;
}
inline const ::OakSave::PlayerInputBindings& Profile::_internal_player_input_bindings() const {
  const ::OakSave::PlayerInputBindings* p = player_input_bindings_;
  return p != nullptr ? *p : *reinterpret_cast<const ::OakSave::PlayerInputBindings*>(
      &::OakSave::_PlayerInputBindings_default_instance_);
}
inline const ::OakSave::PlayerInputBindings& Profile::player_input_bindings() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.player_input_bindings)
  return _internal_player_input_bindings();
}
inline void Profile::unsafe_arena_set_allocated_player_input_bindings(
    ::OakSave::PlayerInputBindings* player_input_bindings) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_input_bindings_);
  }
  player_input_bindings_ = player_input_bindings;
  if (player_input_bindings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.Profile.player_input_bindings)
}
inline ::OakSave::PlayerInputBindings* Profile::release_player_input_bindings() {
  auto temp = unsafe_arena_release_player_input_bindings();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::OakSave::PlayerInputBindings* Profile::unsafe_arena_release_player_input_bindings() {
  // @@protoc_insertion_point(field_release:OakSave.Profile.player_input_bindings)
  
  ::OakSave::PlayerInputBindings* temp = player_input_bindings_;
  player_input_bindings_ = nullptr;
  return temp;
}
inline ::OakSave::PlayerInputBindings* Profile::_internal_mutable_player_input_bindings() {
  
  if (player_input_bindings_ == nullptr) {
    auto* p = CreateMaybeMessage<::OakSave::PlayerInputBindings>(GetArena());
    player_input_bindings_ = p;
  }
  return player_input_bindings_;
}
inline ::OakSave::PlayerInputBindings* Profile::mutable_player_input_bindings() {
  // @@protoc_insertion_point(field_mutable:OakSave.Profile.player_input_bindings)
  return _internal_mutable_player_input_bindings();
}
inline void Profile::set_allocated_player_input_bindings(::OakSave::PlayerInputBindings* player_input_bindings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete player_input_bindings_;
  }
  if (player_input_bindings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(player_input_bindings);
    if (message_arena != submessage_arena) {
      player_input_bindings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_input_bindings, submessage_arena);
    }
    
  } else {
    
  }
  player_input_bindings_ = player_input_bindings;
  // @@protoc_insertion_point(field_set_allocated:OakSave.Profile.player_input_bindings)
}

// repeated uint32 news_hashes = 36;
inline int Profile::_internal_news_hashes_size() const {
  return news_hashes_.size();
}
inline int Profile::news_hashes_size() const {
  return _internal_news_hashes_size();
}
inline void Profile::clear_news_hashes() {
  news_hashes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::_internal_news_hashes(int index) const {
  return news_hashes_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::news_hashes(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.news_hashes)
  return _internal_news_hashes(index);
}
inline void Profile::set_news_hashes(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  news_hashes_.Set(index, value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.news_hashes)
}
inline void Profile::_internal_add_news_hashes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  news_hashes_.Add(value);
}
inline void Profile::add_news_hashes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_news_hashes(value);
  // @@protoc_insertion_point(field_add:OakSave.Profile.news_hashes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Profile::_internal_news_hashes() const {
  return news_hashes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Profile::news_hashes() const {
  // @@protoc_insertion_point(field_list:OakSave.Profile.news_hashes)
  return _internal_news_hashes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Profile::_internal_mutable_news_hashes() {
  return &news_hashes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Profile::mutable_news_hashes() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.Profile.news_hashes)
  return _internal_mutable_news_hashes();
}

// uint32 last_used_savegame_id = 37;
inline void Profile::clear_last_used_savegame_id() {
  last_used_savegame_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::_internal_last_used_savegame_id() const {
  return last_used_savegame_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::last_used_savegame_id() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.last_used_savegame_id)
  return _internal_last_used_savegame_id();
}
inline void Profile::_internal_set_last_used_savegame_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  last_used_savegame_id_ = value;
}
inline void Profile::set_last_used_savegame_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_last_used_savegame_id(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.last_used_savegame_id)
}

// int32 gamepad_hip_sensitivity_level = 38;
inline void Profile::clear_gamepad_hip_sensitivity_level() {
  gamepad_hip_sensitivity_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Profile::_internal_gamepad_hip_sensitivity_level() const {
  return gamepad_hip_sensitivity_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Profile::gamepad_hip_sensitivity_level() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.gamepad_hip_sensitivity_level)
  return _internal_gamepad_hip_sensitivity_level();
}
inline void Profile::_internal_set_gamepad_hip_sensitivity_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gamepad_hip_sensitivity_level_ = value;
}
inline void Profile::set_gamepad_hip_sensitivity_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gamepad_hip_sensitivity_level(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.gamepad_hip_sensitivity_level)
}

// int32 gamepad_zoomed_sensitivity_level = 39;
inline void Profile::clear_gamepad_zoomed_sensitivity_level() {
  gamepad_zoomed_sensitivity_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Profile::_internal_gamepad_zoomed_sensitivity_level() const {
  return gamepad_zoomed_sensitivity_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Profile::gamepad_zoomed_sensitivity_level() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.gamepad_zoomed_sensitivity_level)
  return _internal_gamepad_zoomed_sensitivity_level();
}
inline void Profile::_internal_set_gamepad_zoomed_sensitivity_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gamepad_zoomed_sensitivity_level_ = value;
}
inline void Profile::set_gamepad_zoomed_sensitivity_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gamepad_zoomed_sensitivity_level(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.gamepad_zoomed_sensitivity_level)
}

// int32 gamepad_vehicle_sensitivity_level = 40;
inline void Profile::clear_gamepad_vehicle_sensitivity_level() {
  gamepad_vehicle_sensitivity_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Profile::_internal_gamepad_vehicle_sensitivity_level() const {
  return gamepad_vehicle_sensitivity_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Profile::gamepad_vehicle_sensitivity_level() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.gamepad_vehicle_sensitivity_level)
  return _internal_gamepad_vehicle_sensitivity_level();
}
inline void Profile::_internal_set_gamepad_vehicle_sensitivity_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gamepad_vehicle_sensitivity_level_ = value;
}
inline void Profile::set_gamepad_vehicle_sensitivity_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gamepad_vehicle_sensitivity_level(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.gamepad_vehicle_sensitivity_level)
}

// float gamepad_movement_dead_zone_x = 41;
inline void Profile::clear_gamepad_movement_dead_zone_x() {
  gamepad_movement_dead_zone_x_ = 0;
}
inline float Profile::_internal_gamepad_movement_dead_zone_x() const {
  return gamepad_movement_dead_zone_x_;
}
inline float Profile::gamepad_movement_dead_zone_x() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.gamepad_movement_dead_zone_x)
  return _internal_gamepad_movement_dead_zone_x();
}
inline void Profile::_internal_set_gamepad_movement_dead_zone_x(float value) {
  
  gamepad_movement_dead_zone_x_ = value;
}
inline void Profile::set_gamepad_movement_dead_zone_x(float value) {
  _internal_set_gamepad_movement_dead_zone_x(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.gamepad_movement_dead_zone_x)
}

// float gamepad_movement_dead_zone_y = 42;
inline void Profile::clear_gamepad_movement_dead_zone_y() {
  gamepad_movement_dead_zone_y_ = 0;
}
inline float Profile::_internal_gamepad_movement_dead_zone_y() const {
  return gamepad_movement_dead_zone_y_;
}
inline float Profile::gamepad_movement_dead_zone_y() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.gamepad_movement_dead_zone_y)
  return _internal_gamepad_movement_dead_zone_y();
}
inline void Profile::_internal_set_gamepad_movement_dead_zone_y(float value) {
  
  gamepad_movement_dead_zone_y_ = value;
}
inline void Profile::set_gamepad_movement_dead_zone_y(float value) {
  _internal_set_gamepad_movement_dead_zone_y(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.gamepad_movement_dead_zone_y)
}

// float gamepad_look_dead_zone_inner_x = 43;
inline void Profile::clear_gamepad_look_dead_zone_inner_x() {
  gamepad_look_dead_zone_inner_x_ = 0;
}
inline float Profile::_internal_gamepad_look_dead_zone_inner_x() const {
  return gamepad_look_dead_zone_inner_x_;
}
inline float Profile::gamepad_look_dead_zone_inner_x() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.gamepad_look_dead_zone_inner_x)
  return _internal_gamepad_look_dead_zone_inner_x();
}
inline void Profile::_internal_set_gamepad_look_dead_zone_inner_x(float value) {
  
  gamepad_look_dead_zone_inner_x_ = value;
}
inline void Profile::set_gamepad_look_dead_zone_inner_x(float value) {
  _internal_set_gamepad_look_dead_zone_inner_x(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.gamepad_look_dead_zone_inner_x)
}

// float gamepad_look_dead_zone_outer_x = 44;
inline void Profile::clear_gamepad_look_dead_zone_outer_x() {
  gamepad_look_dead_zone_outer_x_ = 0;
}
inline float Profile::_internal_gamepad_look_dead_zone_outer_x() const {
  return gamepad_look_dead_zone_outer_x_;
}
inline float Profile::gamepad_look_dead_zone_outer_x() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.gamepad_look_dead_zone_outer_x)
  return _internal_gamepad_look_dead_zone_outer_x();
}
inline void Profile::_internal_set_gamepad_look_dead_zone_outer_x(float value) {
  
  gamepad_look_dead_zone_outer_x_ = value;
}
inline void Profile::set_gamepad_look_dead_zone_outer_x(float value) {
  _internal_set_gamepad_look_dead_zone_outer_x(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.gamepad_look_dead_zone_outer_x)
}

// float gamepad_look_dead_zone_inner_y = 45;
inline void Profile::clear_gamepad_look_dead_zone_inner_y() {
  gamepad_look_dead_zone_inner_y_ = 0;
}
inline float Profile::_internal_gamepad_look_dead_zone_inner_y() const {
  return gamepad_look_dead_zone_inner_y_;
}
inline float Profile::gamepad_look_dead_zone_inner_y() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.gamepad_look_dead_zone_inner_y)
  return _internal_gamepad_look_dead_zone_inner_y();
}
inline void Profile::_internal_set_gamepad_look_dead_zone_inner_y(float value) {
  
  gamepad_look_dead_zone_inner_y_ = value;
}
inline void Profile::set_gamepad_look_dead_zone_inner_y(float value) {
  _internal_set_gamepad_look_dead_zone_inner_y(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.gamepad_look_dead_zone_inner_y)
}

// float gamepad_look_dead_zone_outer_y = 46;
inline void Profile::clear_gamepad_look_dead_zone_outer_y() {
  gamepad_look_dead_zone_outer_y_ = 0;
}
inline float Profile::_internal_gamepad_look_dead_zone_outer_y() const {
  return gamepad_look_dead_zone_outer_y_;
}
inline float Profile::gamepad_look_dead_zone_outer_y() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.gamepad_look_dead_zone_outer_y)
  return _internal_gamepad_look_dead_zone_outer_y();
}
inline void Profile::_internal_set_gamepad_look_dead_zone_outer_y(float value) {
  
  gamepad_look_dead_zone_outer_y_ = value;
}
inline void Profile::set_gamepad_look_dead_zone_outer_y(float value) {
  _internal_set_gamepad_look_dead_zone_outer_y(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.gamepad_look_dead_zone_outer_y)
}

// float gamepad_vehicle_movement_dead_zone_x = 47;
inline void Profile::clear_gamepad_vehicle_movement_dead_zone_x() {
  gamepad_vehicle_movement_dead_zone_x_ = 0;
}
inline float Profile::_internal_gamepad_vehicle_movement_dead_zone_x() const {
  return gamepad_vehicle_movement_dead_zone_x_;
}
inline float Profile::gamepad_vehicle_movement_dead_zone_x() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.gamepad_vehicle_movement_dead_zone_x)
  return _internal_gamepad_vehicle_movement_dead_zone_x();
}
inline void Profile::_internal_set_gamepad_vehicle_movement_dead_zone_x(float value) {
  
  gamepad_vehicle_movement_dead_zone_x_ = value;
}
inline void Profile::set_gamepad_vehicle_movement_dead_zone_x(float value) {
  _internal_set_gamepad_vehicle_movement_dead_zone_x(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.gamepad_vehicle_movement_dead_zone_x)
}

// float gamepad_vehicle_movement_dead_zone_y = 48;
inline void Profile::clear_gamepad_vehicle_movement_dead_zone_y() {
  gamepad_vehicle_movement_dead_zone_y_ = 0;
}
inline float Profile::_internal_gamepad_vehicle_movement_dead_zone_y() const {
  return gamepad_vehicle_movement_dead_zone_y_;
}
inline float Profile::gamepad_vehicle_movement_dead_zone_y() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.gamepad_vehicle_movement_dead_zone_y)
  return _internal_gamepad_vehicle_movement_dead_zone_y();
}
inline void Profile::_internal_set_gamepad_vehicle_movement_dead_zone_y(float value) {
  
  gamepad_vehicle_movement_dead_zone_y_ = value;
}
inline void Profile::set_gamepad_vehicle_movement_dead_zone_y(float value) {
  _internal_set_gamepad_vehicle_movement_dead_zone_y(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.gamepad_vehicle_movement_dead_zone_y)
}

// float gamepad_vehicle_look_dead_zone_inner_x = 49;
inline void Profile::clear_gamepad_vehicle_look_dead_zone_inner_x() {
  gamepad_vehicle_look_dead_zone_inner_x_ = 0;
}
inline float Profile::_internal_gamepad_vehicle_look_dead_zone_inner_x() const {
  return gamepad_vehicle_look_dead_zone_inner_x_;
}
inline float Profile::gamepad_vehicle_look_dead_zone_inner_x() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.gamepad_vehicle_look_dead_zone_inner_x)
  return _internal_gamepad_vehicle_look_dead_zone_inner_x();
}
inline void Profile::_internal_set_gamepad_vehicle_look_dead_zone_inner_x(float value) {
  
  gamepad_vehicle_look_dead_zone_inner_x_ = value;
}
inline void Profile::set_gamepad_vehicle_look_dead_zone_inner_x(float value) {
  _internal_set_gamepad_vehicle_look_dead_zone_inner_x(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.gamepad_vehicle_look_dead_zone_inner_x)
}

// float gamepad_vehicle_look_dead_zone_outer_x = 50;
inline void Profile::clear_gamepad_vehicle_look_dead_zone_outer_x() {
  gamepad_vehicle_look_dead_zone_outer_x_ = 0;
}
inline float Profile::_internal_gamepad_vehicle_look_dead_zone_outer_x() const {
  return gamepad_vehicle_look_dead_zone_outer_x_;
}
inline float Profile::gamepad_vehicle_look_dead_zone_outer_x() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.gamepad_vehicle_look_dead_zone_outer_x)
  return _internal_gamepad_vehicle_look_dead_zone_outer_x();
}
inline void Profile::_internal_set_gamepad_vehicle_look_dead_zone_outer_x(float value) {
  
  gamepad_vehicle_look_dead_zone_outer_x_ = value;
}
inline void Profile::set_gamepad_vehicle_look_dead_zone_outer_x(float value) {
  _internal_set_gamepad_vehicle_look_dead_zone_outer_x(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.gamepad_vehicle_look_dead_zone_outer_x)
}

// float gamepad_vehicle_look_dead_zone_inner_y = 51;
inline void Profile::clear_gamepad_vehicle_look_dead_zone_inner_y() {
  gamepad_vehicle_look_dead_zone_inner_y_ = 0;
}
inline float Profile::_internal_gamepad_vehicle_look_dead_zone_inner_y() const {
  return gamepad_vehicle_look_dead_zone_inner_y_;
}
inline float Profile::gamepad_vehicle_look_dead_zone_inner_y() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.gamepad_vehicle_look_dead_zone_inner_y)
  return _internal_gamepad_vehicle_look_dead_zone_inner_y();
}
inline void Profile::_internal_set_gamepad_vehicle_look_dead_zone_inner_y(float value) {
  
  gamepad_vehicle_look_dead_zone_inner_y_ = value;
}
inline void Profile::set_gamepad_vehicle_look_dead_zone_inner_y(float value) {
  _internal_set_gamepad_vehicle_look_dead_zone_inner_y(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.gamepad_vehicle_look_dead_zone_inner_y)
}

// float gamepad_vehicle_look_dead_zone_outer_y = 52;
inline void Profile::clear_gamepad_vehicle_look_dead_zone_outer_y() {
  gamepad_vehicle_look_dead_zone_outer_y_ = 0;
}
inline float Profile::_internal_gamepad_vehicle_look_dead_zone_outer_y() const {
  return gamepad_vehicle_look_dead_zone_outer_y_;
}
inline float Profile::gamepad_vehicle_look_dead_zone_outer_y() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.gamepad_vehicle_look_dead_zone_outer_y)
  return _internal_gamepad_vehicle_look_dead_zone_outer_y();
}
inline void Profile::_internal_set_gamepad_vehicle_look_dead_zone_outer_y(float value) {
  
  gamepad_vehicle_look_dead_zone_outer_y_ = value;
}
inline void Profile::set_gamepad_vehicle_look_dead_zone_outer_y(float value) {
  _internal_set_gamepad_vehicle_look_dead_zone_outer_y(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.gamepad_vehicle_look_dead_zone_outer_y)
}

// float gamepad_left_dead_zone_inner = 53;
inline void Profile::clear_gamepad_left_dead_zone_inner() {
  gamepad_left_dead_zone_inner_ = 0;
}
inline float Profile::_internal_gamepad_left_dead_zone_inner() const {
  return gamepad_left_dead_zone_inner_;
}
inline float Profile::gamepad_left_dead_zone_inner() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.gamepad_left_dead_zone_inner)
  return _internal_gamepad_left_dead_zone_inner();
}
inline void Profile::_internal_set_gamepad_left_dead_zone_inner(float value) {
  
  gamepad_left_dead_zone_inner_ = value;
}
inline void Profile::set_gamepad_left_dead_zone_inner(float value) {
  _internal_set_gamepad_left_dead_zone_inner(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.gamepad_left_dead_zone_inner)
}

// float gamepad_left_dead_zone_outer = 54;
inline void Profile::clear_gamepad_left_dead_zone_outer() {
  gamepad_left_dead_zone_outer_ = 0;
}
inline float Profile::_internal_gamepad_left_dead_zone_outer() const {
  return gamepad_left_dead_zone_outer_;
}
inline float Profile::gamepad_left_dead_zone_outer() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.gamepad_left_dead_zone_outer)
  return _internal_gamepad_left_dead_zone_outer();
}
inline void Profile::_internal_set_gamepad_left_dead_zone_outer(float value) {
  
  gamepad_left_dead_zone_outer_ = value;
}
inline void Profile::set_gamepad_left_dead_zone_outer(float value) {
  _internal_set_gamepad_left_dead_zone_outer(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.gamepad_left_dead_zone_outer)
}

// float gamepad_right_dead_zone_inner = 55;
inline void Profile::clear_gamepad_right_dead_zone_inner() {
  gamepad_right_dead_zone_inner_ = 0;
}
inline float Profile::_internal_gamepad_right_dead_zone_inner() const {
  return gamepad_right_dead_zone_inner_;
}
inline float Profile::gamepad_right_dead_zone_inner() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.gamepad_right_dead_zone_inner)
  return _internal_gamepad_right_dead_zone_inner();
}
inline void Profile::_internal_set_gamepad_right_dead_zone_inner(float value) {
  
  gamepad_right_dead_zone_inner_ = value;
}
inline void Profile::set_gamepad_right_dead_zone_inner(float value) {
  _internal_set_gamepad_right_dead_zone_inner(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.gamepad_right_dead_zone_inner)
}

// float gamepad_right_dead_zone_outer = 56;
inline void Profile::clear_gamepad_right_dead_zone_outer() {
  gamepad_right_dead_zone_outer_ = 0;
}
inline float Profile::_internal_gamepad_right_dead_zone_outer() const {
  return gamepad_right_dead_zone_outer_;
}
inline float Profile::gamepad_right_dead_zone_outer() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.gamepad_right_dead_zone_outer)
  return _internal_gamepad_right_dead_zone_outer();
}
inline void Profile::_internal_set_gamepad_right_dead_zone_outer(float value) {
  
  gamepad_right_dead_zone_outer_ = value;
}
inline void Profile::set_gamepad_right_dead_zone_outer(float value) {
  _internal_set_gamepad_right_dead_zone_outer(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.gamepad_right_dead_zone_outer)
}

// float gamepad_look_axial_dead_zone_scale = 57;
inline void Profile::clear_gamepad_look_axial_dead_zone_scale() {
  gamepad_look_axial_dead_zone_scale_ = 0;
}
inline float Profile::_internal_gamepad_look_axial_dead_zone_scale() const {
  return gamepad_look_axial_dead_zone_scale_;
}
inline float Profile::gamepad_look_axial_dead_zone_scale() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.gamepad_look_axial_dead_zone_scale)
  return _internal_gamepad_look_axial_dead_zone_scale();
}
inline void Profile::_internal_set_gamepad_look_axial_dead_zone_scale(float value) {
  
  gamepad_look_axial_dead_zone_scale_ = value;
}
inline void Profile::set_gamepad_look_axial_dead_zone_scale(float value) {
  _internal_set_gamepad_look_axial_dead_zone_scale(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.gamepad_look_axial_dead_zone_scale)
}

// float gamepad_move_axial_dead_zone_scale = 58;
inline void Profile::clear_gamepad_move_axial_dead_zone_scale() {
  gamepad_move_axial_dead_zone_scale_ = 0;
}
inline float Profile::_internal_gamepad_move_axial_dead_zone_scale() const {
  return gamepad_move_axial_dead_zone_scale_;
}
inline float Profile::gamepad_move_axial_dead_zone_scale() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.gamepad_move_axial_dead_zone_scale)
  return _internal_gamepad_move_axial_dead_zone_scale();
}
inline void Profile::_internal_set_gamepad_move_axial_dead_zone_scale(float value) {
  
  gamepad_move_axial_dead_zone_scale_ = value;
}
inline void Profile::set_gamepad_move_axial_dead_zone_scale(float value) {
  _internal_set_gamepad_move_axial_dead_zone_scale(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.gamepad_move_axial_dead_zone_scale)
}

// bool gamepad_use_advanced_hip_aim_settings = 59;
inline void Profile::clear_gamepad_use_advanced_hip_aim_settings() {
  gamepad_use_advanced_hip_aim_settings_ = false;
}
inline bool Profile::_internal_gamepad_use_advanced_hip_aim_settings() const {
  return gamepad_use_advanced_hip_aim_settings_;
}
inline bool Profile::gamepad_use_advanced_hip_aim_settings() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.gamepad_use_advanced_hip_aim_settings)
  return _internal_gamepad_use_advanced_hip_aim_settings();
}
inline void Profile::_internal_set_gamepad_use_advanced_hip_aim_settings(bool value) {
  
  gamepad_use_advanced_hip_aim_settings_ = value;
}
inline void Profile::set_gamepad_use_advanced_hip_aim_settings(bool value) {
  _internal_set_gamepad_use_advanced_hip_aim_settings(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.gamepad_use_advanced_hip_aim_settings)
}

// bool gamepad_use_advanced_zoomed_aim_settings = 60;
inline void Profile::clear_gamepad_use_advanced_zoomed_aim_settings() {
  gamepad_use_advanced_zoomed_aim_settings_ = false;
}
inline bool Profile::_internal_gamepad_use_advanced_zoomed_aim_settings() const {
  return gamepad_use_advanced_zoomed_aim_settings_;
}
inline bool Profile::gamepad_use_advanced_zoomed_aim_settings() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.gamepad_use_advanced_zoomed_aim_settings)
  return _internal_gamepad_use_advanced_zoomed_aim_settings();
}
inline void Profile::_internal_set_gamepad_use_advanced_zoomed_aim_settings(bool value) {
  
  gamepad_use_advanced_zoomed_aim_settings_ = value;
}
inline void Profile::set_gamepad_use_advanced_zoomed_aim_settings(bool value) {
  _internal_set_gamepad_use_advanced_zoomed_aim_settings(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.gamepad_use_advanced_zoomed_aim_settings)
}

// bool gamepad_use_advanced_vehicle_aim_settings = 61;
inline void Profile::clear_gamepad_use_advanced_vehicle_aim_settings() {
  gamepad_use_advanced_vehicle_aim_settings_ = false;
}
inline bool Profile::_internal_gamepad_use_advanced_vehicle_aim_settings() const {
  return gamepad_use_advanced_vehicle_aim_settings_;
}
inline bool Profile::gamepad_use_advanced_vehicle_aim_settings() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.gamepad_use_advanced_vehicle_aim_settings)
  return _internal_gamepad_use_advanced_vehicle_aim_settings();
}
inline void Profile::_internal_set_gamepad_use_advanced_vehicle_aim_settings(bool value) {
  
  gamepad_use_advanced_vehicle_aim_settings_ = value;
}
inline void Profile::set_gamepad_use_advanced_vehicle_aim_settings(bool value) {
  _internal_set_gamepad_use_advanced_vehicle_aim_settings(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.gamepad_use_advanced_vehicle_aim_settings)
}

// float gamepad_hip_yaw_rate = 62;
inline void Profile::clear_gamepad_hip_yaw_rate() {
  gamepad_hip_yaw_rate_ = 0;
}
inline float Profile::_internal_gamepad_hip_yaw_rate() const {
  return gamepad_hip_yaw_rate_;
}
inline float Profile::gamepad_hip_yaw_rate() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.gamepad_hip_yaw_rate)
  return _internal_gamepad_hip_yaw_rate();
}
inline void Profile::_internal_set_gamepad_hip_yaw_rate(float value) {
  
  gamepad_hip_yaw_rate_ = value;
}
inline void Profile::set_gamepad_hip_yaw_rate(float value) {
  _internal_set_gamepad_hip_yaw_rate(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.gamepad_hip_yaw_rate)
}

// float gamepad_hip_pitch_rate = 63;
inline void Profile::clear_gamepad_hip_pitch_rate() {
  gamepad_hip_pitch_rate_ = 0;
}
inline float Profile::_internal_gamepad_hip_pitch_rate() const {
  return gamepad_hip_pitch_rate_;
}
inline float Profile::gamepad_hip_pitch_rate() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.gamepad_hip_pitch_rate)
  return _internal_gamepad_hip_pitch_rate();
}
inline void Profile::_internal_set_gamepad_hip_pitch_rate(float value) {
  
  gamepad_hip_pitch_rate_ = value;
}
inline void Profile::set_gamepad_hip_pitch_rate(float value) {
  _internal_set_gamepad_hip_pitch_rate(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.gamepad_hip_pitch_rate)
}

// float gamepad_hip_extra_yaw = 64;
inline void Profile::clear_gamepad_hip_extra_yaw() {
  gamepad_hip_extra_yaw_ = 0;
}
inline float Profile::_internal_gamepad_hip_extra_yaw() const {
  return gamepad_hip_extra_yaw_;
}
inline float Profile::gamepad_hip_extra_yaw() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.gamepad_hip_extra_yaw)
  return _internal_gamepad_hip_extra_yaw();
}
inline void Profile::_internal_set_gamepad_hip_extra_yaw(float value) {
  
  gamepad_hip_extra_yaw_ = value;
}
inline void Profile::set_gamepad_hip_extra_yaw(float value) {
  _internal_set_gamepad_hip_extra_yaw(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.gamepad_hip_extra_yaw)
}

// float gamepad_hip_extra_pitch = 65;
inline void Profile::clear_gamepad_hip_extra_pitch() {
  gamepad_hip_extra_pitch_ = 0;
}
inline float Profile::_internal_gamepad_hip_extra_pitch() const {
  return gamepad_hip_extra_pitch_;
}
inline float Profile::gamepad_hip_extra_pitch() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.gamepad_hip_extra_pitch)
  return _internal_gamepad_hip_extra_pitch();
}
inline void Profile::_internal_set_gamepad_hip_extra_pitch(float value) {
  
  gamepad_hip_extra_pitch_ = value;
}
inline void Profile::set_gamepad_hip_extra_pitch(float value) {
  _internal_set_gamepad_hip_extra_pitch(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.gamepad_hip_extra_pitch)
}

// float gamepad_hip_ramp_up_time = 66;
inline void Profile::clear_gamepad_hip_ramp_up_time() {
  gamepad_hip_ramp_up_time_ = 0;
}
inline float Profile::_internal_gamepad_hip_ramp_up_time() const {
  return gamepad_hip_ramp_up_time_;
}
inline float Profile::gamepad_hip_ramp_up_time() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.gamepad_hip_ramp_up_time)
  return _internal_gamepad_hip_ramp_up_time();
}
inline void Profile::_internal_set_gamepad_hip_ramp_up_time(float value) {
  
  gamepad_hip_ramp_up_time_ = value;
}
inline void Profile::set_gamepad_hip_ramp_up_time(float value) {
  _internal_set_gamepad_hip_ramp_up_time(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.gamepad_hip_ramp_up_time)
}

// float gamepad_hip_ramp_up_delay = 67;
inline void Profile::clear_gamepad_hip_ramp_up_delay() {
  gamepad_hip_ramp_up_delay_ = 0;
}
inline float Profile::_internal_gamepad_hip_ramp_up_delay() const {
  return gamepad_hip_ramp_up_delay_;
}
inline float Profile::gamepad_hip_ramp_up_delay() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.gamepad_hip_ramp_up_delay)
  return _internal_gamepad_hip_ramp_up_delay();
}
inline void Profile::_internal_set_gamepad_hip_ramp_up_delay(float value) {
  
  gamepad_hip_ramp_up_delay_ = value;
}
inline void Profile::set_gamepad_hip_ramp_up_delay(float value) {
  _internal_set_gamepad_hip_ramp_up_delay(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.gamepad_hip_ramp_up_delay)
}

// float gamepad_zoomed_yaw_rate = 68;
inline void Profile::clear_gamepad_zoomed_yaw_rate() {
  gamepad_zoomed_yaw_rate_ = 0;
}
inline float Profile::_internal_gamepad_zoomed_yaw_rate() const {
  return gamepad_zoomed_yaw_rate_;
}
inline float Profile::gamepad_zoomed_yaw_rate() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.gamepad_zoomed_yaw_rate)
  return _internal_gamepad_zoomed_yaw_rate();
}
inline void Profile::_internal_set_gamepad_zoomed_yaw_rate(float value) {
  
  gamepad_zoomed_yaw_rate_ = value;
}
inline void Profile::set_gamepad_zoomed_yaw_rate(float value) {
  _internal_set_gamepad_zoomed_yaw_rate(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.gamepad_zoomed_yaw_rate)
}

// float gamepad_zoomed_pitch_rate = 69;
inline void Profile::clear_gamepad_zoomed_pitch_rate() {
  gamepad_zoomed_pitch_rate_ = 0;
}
inline float Profile::_internal_gamepad_zoomed_pitch_rate() const {
  return gamepad_zoomed_pitch_rate_;
}
inline float Profile::gamepad_zoomed_pitch_rate() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.gamepad_zoomed_pitch_rate)
  return _internal_gamepad_zoomed_pitch_rate();
}
inline void Profile::_internal_set_gamepad_zoomed_pitch_rate(float value) {
  
  gamepad_zoomed_pitch_rate_ = value;
}
inline void Profile::set_gamepad_zoomed_pitch_rate(float value) {
  _internal_set_gamepad_zoomed_pitch_rate(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.gamepad_zoomed_pitch_rate)
}

// float gamepad_zoomed_extra_yaw = 70;
inline void Profile::clear_gamepad_zoomed_extra_yaw() {
  gamepad_zoomed_extra_yaw_ = 0;
}
inline float Profile::_internal_gamepad_zoomed_extra_yaw() const {
  return gamepad_zoomed_extra_yaw_;
}
inline float Profile::gamepad_zoomed_extra_yaw() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.gamepad_zoomed_extra_yaw)
  return _internal_gamepad_zoomed_extra_yaw();
}
inline void Profile::_internal_set_gamepad_zoomed_extra_yaw(float value) {
  
  gamepad_zoomed_extra_yaw_ = value;
}
inline void Profile::set_gamepad_zoomed_extra_yaw(float value) {
  _internal_set_gamepad_zoomed_extra_yaw(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.gamepad_zoomed_extra_yaw)
}

// float gamepad_zoomed_extra_pitch = 71;
inline void Profile::clear_gamepad_zoomed_extra_pitch() {
  gamepad_zoomed_extra_pitch_ = 0;
}
inline float Profile::_internal_gamepad_zoomed_extra_pitch() const {
  return gamepad_zoomed_extra_pitch_;
}
inline float Profile::gamepad_zoomed_extra_pitch() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.gamepad_zoomed_extra_pitch)
  return _internal_gamepad_zoomed_extra_pitch();
}
inline void Profile::_internal_set_gamepad_zoomed_extra_pitch(float value) {
  
  gamepad_zoomed_extra_pitch_ = value;
}
inline void Profile::set_gamepad_zoomed_extra_pitch(float value) {
  _internal_set_gamepad_zoomed_extra_pitch(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.gamepad_zoomed_extra_pitch)
}

// float gamepad_zoomed_ramp_up_time = 72;
inline void Profile::clear_gamepad_zoomed_ramp_up_time() {
  gamepad_zoomed_ramp_up_time_ = 0;
}
inline float Profile::_internal_gamepad_zoomed_ramp_up_time() const {
  return gamepad_zoomed_ramp_up_time_;
}
inline float Profile::gamepad_zoomed_ramp_up_time() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.gamepad_zoomed_ramp_up_time)
  return _internal_gamepad_zoomed_ramp_up_time();
}
inline void Profile::_internal_set_gamepad_zoomed_ramp_up_time(float value) {
  
  gamepad_zoomed_ramp_up_time_ = value;
}
inline void Profile::set_gamepad_zoomed_ramp_up_time(float value) {
  _internal_set_gamepad_zoomed_ramp_up_time(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.gamepad_zoomed_ramp_up_time)
}

// float gamepad_zoomed_ramp_up_delay = 73;
inline void Profile::clear_gamepad_zoomed_ramp_up_delay() {
  gamepad_zoomed_ramp_up_delay_ = 0;
}
inline float Profile::_internal_gamepad_zoomed_ramp_up_delay() const {
  return gamepad_zoomed_ramp_up_delay_;
}
inline float Profile::gamepad_zoomed_ramp_up_delay() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.gamepad_zoomed_ramp_up_delay)
  return _internal_gamepad_zoomed_ramp_up_delay();
}
inline void Profile::_internal_set_gamepad_zoomed_ramp_up_delay(float value) {
  
  gamepad_zoomed_ramp_up_delay_ = value;
}
inline void Profile::set_gamepad_zoomed_ramp_up_delay(float value) {
  _internal_set_gamepad_zoomed_ramp_up_delay(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.gamepad_zoomed_ramp_up_delay)
}

// float gamepad_vehicle_yaw_rate = 74;
inline void Profile::clear_gamepad_vehicle_yaw_rate() {
  gamepad_vehicle_yaw_rate_ = 0;
}
inline float Profile::_internal_gamepad_vehicle_yaw_rate() const {
  return gamepad_vehicle_yaw_rate_;
}
inline float Profile::gamepad_vehicle_yaw_rate() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.gamepad_vehicle_yaw_rate)
  return _internal_gamepad_vehicle_yaw_rate();
}
inline void Profile::_internal_set_gamepad_vehicle_yaw_rate(float value) {
  
  gamepad_vehicle_yaw_rate_ = value;
}
inline void Profile::set_gamepad_vehicle_yaw_rate(float value) {
  _internal_set_gamepad_vehicle_yaw_rate(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.gamepad_vehicle_yaw_rate)
}

// float gamepad_vehicle_pitch_rate = 75;
inline void Profile::clear_gamepad_vehicle_pitch_rate() {
  gamepad_vehicle_pitch_rate_ = 0;
}
inline float Profile::_internal_gamepad_vehicle_pitch_rate() const {
  return gamepad_vehicle_pitch_rate_;
}
inline float Profile::gamepad_vehicle_pitch_rate() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.gamepad_vehicle_pitch_rate)
  return _internal_gamepad_vehicle_pitch_rate();
}
inline void Profile::_internal_set_gamepad_vehicle_pitch_rate(float value) {
  
  gamepad_vehicle_pitch_rate_ = value;
}
inline void Profile::set_gamepad_vehicle_pitch_rate(float value) {
  _internal_set_gamepad_vehicle_pitch_rate(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.gamepad_vehicle_pitch_rate)
}

// float gamepad_vehicle_extra_yaw = 76;
inline void Profile::clear_gamepad_vehicle_extra_yaw() {
  gamepad_vehicle_extra_yaw_ = 0;
}
inline float Profile::_internal_gamepad_vehicle_extra_yaw() const {
  return gamepad_vehicle_extra_yaw_;
}
inline float Profile::gamepad_vehicle_extra_yaw() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.gamepad_vehicle_extra_yaw)
  return _internal_gamepad_vehicle_extra_yaw();
}
inline void Profile::_internal_set_gamepad_vehicle_extra_yaw(float value) {
  
  gamepad_vehicle_extra_yaw_ = value;
}
inline void Profile::set_gamepad_vehicle_extra_yaw(float value) {
  _internal_set_gamepad_vehicle_extra_yaw(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.gamepad_vehicle_extra_yaw)
}

// float gamepad_vehicle_extra_pitch = 77;
inline void Profile::clear_gamepad_vehicle_extra_pitch() {
  gamepad_vehicle_extra_pitch_ = 0;
}
inline float Profile::_internal_gamepad_vehicle_extra_pitch() const {
  return gamepad_vehicle_extra_pitch_;
}
inline float Profile::gamepad_vehicle_extra_pitch() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.gamepad_vehicle_extra_pitch)
  return _internal_gamepad_vehicle_extra_pitch();
}
inline void Profile::_internal_set_gamepad_vehicle_extra_pitch(float value) {
  
  gamepad_vehicle_extra_pitch_ = value;
}
inline void Profile::set_gamepad_vehicle_extra_pitch(float value) {
  _internal_set_gamepad_vehicle_extra_pitch(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.gamepad_vehicle_extra_pitch)
}

// float gamepad_vehicle_ramp_up_time = 78;
inline void Profile::clear_gamepad_vehicle_ramp_up_time() {
  gamepad_vehicle_ramp_up_time_ = 0;
}
inline float Profile::_internal_gamepad_vehicle_ramp_up_time() const {
  return gamepad_vehicle_ramp_up_time_;
}
inline float Profile::gamepad_vehicle_ramp_up_time() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.gamepad_vehicle_ramp_up_time)
  return _internal_gamepad_vehicle_ramp_up_time();
}
inline void Profile::_internal_set_gamepad_vehicle_ramp_up_time(float value) {
  
  gamepad_vehicle_ramp_up_time_ = value;
}
inline void Profile::set_gamepad_vehicle_ramp_up_time(float value) {
  _internal_set_gamepad_vehicle_ramp_up_time(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.gamepad_vehicle_ramp_up_time)
}

// float gamepad_vehicle_ramp_up_delay = 79;
inline void Profile::clear_gamepad_vehicle_ramp_up_delay() {
  gamepad_vehicle_ramp_up_delay_ = 0;
}
inline float Profile::_internal_gamepad_vehicle_ramp_up_delay() const {
  return gamepad_vehicle_ramp_up_delay_;
}
inline float Profile::gamepad_vehicle_ramp_up_delay() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.gamepad_vehicle_ramp_up_delay)
  return _internal_gamepad_vehicle_ramp_up_delay();
}
inline void Profile::_internal_set_gamepad_vehicle_ramp_up_delay(float value) {
  
  gamepad_vehicle_ramp_up_delay_ = value;
}
inline void Profile::set_gamepad_vehicle_ramp_up_delay(float value) {
  _internal_set_gamepad_vehicle_ramp_up_delay(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.gamepad_vehicle_ramp_up_delay)
}

// bool ironsight_aim_assist = 80;
inline void Profile::clear_ironsight_aim_assist() {
  ironsight_aim_assist_ = false;
}
inline bool Profile::_internal_ironsight_aim_assist() const {
  return ironsight_aim_assist_;
}
inline bool Profile::ironsight_aim_assist() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.ironsight_aim_assist)
  return _internal_ironsight_aim_assist();
}
inline void Profile::_internal_set_ironsight_aim_assist(bool value) {
  
  ironsight_aim_assist_ = value;
}
inline void Profile::set_ironsight_aim_assist(bool value) {
  _internal_set_ironsight_aim_assist(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.ironsight_aim_assist)
}

// uint32 walking_joystick_scheme = 81;
inline void Profile::clear_walking_joystick_scheme() {
  walking_joystick_scheme_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::_internal_walking_joystick_scheme() const {
  return walking_joystick_scheme_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::walking_joystick_scheme() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.walking_joystick_scheme)
  return _internal_walking_joystick_scheme();
}
inline void Profile::_internal_set_walking_joystick_scheme(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  walking_joystick_scheme_ = value;
}
inline void Profile::set_walking_joystick_scheme(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_walking_joystick_scheme(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.walking_joystick_scheme)
}

// uint32 driving_joystick_scheme = 82;
inline void Profile::clear_driving_joystick_scheme() {
  driving_joystick_scheme_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::_internal_driving_joystick_scheme() const {
  return driving_joystick_scheme_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::driving_joystick_scheme() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.driving_joystick_scheme)
  return _internal_driving_joystick_scheme();
}
inline void Profile::_internal_set_driving_joystick_scheme(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  driving_joystick_scheme_ = value;
}
inline void Profile::set_driving_joystick_scheme(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_driving_joystick_scheme(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.driving_joystick_scheme)
}

// float mouse_ads_scale = 83;
inline void Profile::clear_mouse_ads_scale() {
  mouse_ads_scale_ = 0;
}
inline float Profile::_internal_mouse_ads_scale() const {
  return mouse_ads_scale_;
}
inline float Profile::mouse_ads_scale() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.mouse_ads_scale)
  return _internal_mouse_ads_scale();
}
inline void Profile::_internal_set_mouse_ads_scale(float value) {
  
  mouse_ads_scale_ = value;
}
inline void Profile::set_mouse_ads_scale(float value) {
  _internal_set_mouse_ads_scale(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.mouse_ads_scale)
}

// float mouse_vehicle_scale = 84;
inline void Profile::clear_mouse_vehicle_scale() {
  mouse_vehicle_scale_ = 0;
}
inline float Profile::_internal_mouse_vehicle_scale() const {
  return mouse_vehicle_scale_;
}
inline float Profile::mouse_vehicle_scale() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.mouse_vehicle_scale)
  return _internal_mouse_vehicle_scale();
}
inline void Profile::_internal_set_mouse_vehicle_scale(float value) {
  
  mouse_vehicle_scale_ = value;
}
inline void Profile::set_mouse_vehicle_scale(float value) {
  _internal_set_mouse_vehicle_scale(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.mouse_vehicle_scale)
}

// bool mouse_ironsight_aim_assist = 85;
inline void Profile::clear_mouse_ironsight_aim_assist() {
  mouse_ironsight_aim_assist_ = false;
}
inline bool Profile::_internal_mouse_ironsight_aim_assist() const {
  return mouse_ironsight_aim_assist_;
}
inline bool Profile::mouse_ironsight_aim_assist() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.mouse_ironsight_aim_assist)
  return _internal_mouse_ironsight_aim_assist();
}
inline void Profile::_internal_set_mouse_ironsight_aim_assist(bool value) {
  
  mouse_ironsight_aim_assist_ = value;
}
inline void Profile::set_mouse_ironsight_aim_assist(bool value) {
  _internal_set_mouse_ironsight_aim_assist(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.mouse_ironsight_aim_assist)
}

// uint32 vehicle_input_mode = 86;
inline void Profile::clear_vehicle_input_mode() {
  vehicle_input_mode_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::_internal_vehicle_input_mode() const {
  return vehicle_input_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::vehicle_input_mode() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.vehicle_input_mode)
  return _internal_vehicle_input_mode();
}
inline void Profile::_internal_set_vehicle_input_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  vehicle_input_mode_ = value;
}
inline void Profile::set_vehicle_input_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_vehicle_input_mode(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.vehicle_input_mode)
}

// bool weapon_aim_toggle = 87;
inline void Profile::clear_weapon_aim_toggle() {
  weapon_aim_toggle_ = false;
}
inline bool Profile::_internal_weapon_aim_toggle() const {
  return weapon_aim_toggle_;
}
inline bool Profile::weapon_aim_toggle() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.weapon_aim_toggle)
  return _internal_weapon_aim_toggle();
}
inline void Profile::_internal_set_weapon_aim_toggle(bool value) {
  
  weapon_aim_toggle_ = value;
}
inline void Profile::set_weapon_aim_toggle(bool value) {
  _internal_set_weapon_aim_toggle(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.weapon_aim_toggle)
}

// bool mantle_requires_button = 88;
inline void Profile::clear_mantle_requires_button() {
  mantle_requires_button_ = false;
}
inline bool Profile::_internal_mantle_requires_button() const {
  return mantle_requires_button_;
}
inline bool Profile::mantle_requires_button() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.mantle_requires_button)
  return _internal_mantle_requires_button();
}
inline void Profile::_internal_set_mantle_requires_button(bool value) {
  
  mantle_requires_button_ = value;
}
inline void Profile::set_mantle_requires_button(bool value) {
  _internal_set_mantle_requires_button(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.mantle_requires_button)
}

// bool fixed_minimap_rotation = 89;
inline void Profile::clear_fixed_minimap_rotation() {
  fixed_minimap_rotation_ = false;
}
inline bool Profile::_internal_fixed_minimap_rotation() const {
  return fixed_minimap_rotation_;
}
inline bool Profile::fixed_minimap_rotation() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.fixed_minimap_rotation)
  return _internal_fixed_minimap_rotation();
}
inline void Profile::_internal_set_fixed_minimap_rotation(bool value) {
  
  fixed_minimap_rotation_ = value;
}
inline void Profile::set_fixed_minimap_rotation(bool value) {
  _internal_set_fixed_minimap_rotation(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.fixed_minimap_rotation)
}

// bool map_invert_pitch = 90;
inline void Profile::clear_map_invert_pitch() {
  map_invert_pitch_ = false;
}
inline bool Profile::_internal_map_invert_pitch() const {
  return map_invert_pitch_;
}
inline bool Profile::map_invert_pitch() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.map_invert_pitch)
  return _internal_map_invert_pitch();
}
inline void Profile::_internal_set_map_invert_pitch(bool value) {
  
  map_invert_pitch_ = value;
}
inline void Profile::set_map_invert_pitch(bool value) {
  _internal_set_map_invert_pitch(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.map_invert_pitch)
}

// bool map_invert_yaw = 91;
inline void Profile::clear_map_invert_yaw() {
  map_invert_yaw_ = false;
}
inline bool Profile::_internal_map_invert_yaw() const {
  return map_invert_yaw_;
}
inline bool Profile::map_invert_yaw() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.map_invert_yaw)
  return _internal_map_invert_yaw();
}
inline void Profile::_internal_set_map_invert_yaw(bool value) {
  
  map_invert_yaw_ = value;
}
inline void Profile::set_map_invert_yaw(bool value) {
  _internal_set_map_invert_yaw(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.map_invert_yaw)
}

// uint32 difficulty = 92;
inline void Profile::clear_difficulty() {
  difficulty_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::_internal_difficulty() const {
  return difficulty_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::difficulty() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.difficulty)
  return _internal_difficulty();
}
inline void Profile::_internal_set_difficulty(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  difficulty_ = value;
}
inline void Profile::set_difficulty(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_difficulty(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.difficulty)
}

// bool swap_dual_wield_controls = 93;
inline void Profile::clear_swap_dual_wield_controls() {
  swap_dual_wield_controls_ = false;
}
inline bool Profile::_internal_swap_dual_wield_controls() const {
  return swap_dual_wield_controls_;
}
inline bool Profile::swap_dual_wield_controls() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.swap_dual_wield_controls)
  return _internal_swap_dual_wield_controls();
}
inline void Profile::_internal_set_swap_dual_wield_controls(bool value) {
  
  swap_dual_wield_controls_ = value;
}
inline void Profile::set_swap_dual_wield_controls(bool value) {
  _internal_set_swap_dual_wield_controls(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.swap_dual_wield_controls)
}

// float base_fov = 94;
inline void Profile::clear_base_fov() {
  base_fov_ = 0;
}
inline float Profile::_internal_base_fov() const {
  return base_fov_;
}
inline float Profile::base_fov() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.base_fov)
  return _internal_base_fov();
}
inline void Profile::_internal_set_base_fov(float value) {
  
  base_fov_ = value;
}
inline void Profile::set_base_fov(float value) {
  _internal_set_base_fov(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.base_fov)
}

// uint32 crosshair_neutral_color_frame = 95;
inline void Profile::clear_crosshair_neutral_color_frame() {
  crosshair_neutral_color_frame_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::_internal_crosshair_neutral_color_frame() const {
  return crosshair_neutral_color_frame_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::crosshair_neutral_color_frame() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.crosshair_neutral_color_frame)
  return _internal_crosshair_neutral_color_frame();
}
inline void Profile::_internal_set_crosshair_neutral_color_frame(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  crosshair_neutral_color_frame_ = value;
}
inline void Profile::set_crosshair_neutral_color_frame(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_crosshair_neutral_color_frame(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.crosshair_neutral_color_frame)
}

// uint32 crosshair_enemy_color_frame = 96;
inline void Profile::clear_crosshair_enemy_color_frame() {
  crosshair_enemy_color_frame_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::_internal_crosshair_enemy_color_frame() const {
  return crosshair_enemy_color_frame_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::crosshair_enemy_color_frame() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.crosshair_enemy_color_frame)
  return _internal_crosshair_enemy_color_frame();
}
inline void Profile::_internal_set_crosshair_enemy_color_frame(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  crosshair_enemy_color_frame_ = value;
}
inline void Profile::set_crosshair_enemy_color_frame(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_crosshair_enemy_color_frame(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.crosshair_enemy_color_frame)
}

// uint32 crosshair_ally_color_frame = 97;
inline void Profile::clear_crosshair_ally_color_frame() {
  crosshair_ally_color_frame_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::_internal_crosshair_ally_color_frame() const {
  return crosshair_ally_color_frame_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::crosshair_ally_color_frame() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.crosshair_ally_color_frame)
  return _internal_crosshair_ally_color_frame();
}
inline void Profile::_internal_set_crosshair_ally_color_frame(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  crosshair_ally_color_frame_ = value;
}
inline void Profile::set_crosshair_ally_color_frame(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_crosshair_ally_color_frame(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.crosshair_ally_color_frame)
}

// bool enable_subtitles = 98;
inline void Profile::clear_enable_subtitles() {
  enable_subtitles_ = false;
}
inline bool Profile::_internal_enable_subtitles() const {
  return enable_subtitles_;
}
inline bool Profile::enable_subtitles() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.enable_subtitles)
  return _internal_enable_subtitles();
}
inline void Profile::_internal_set_enable_subtitles(bool value) {
  
  enable_subtitles_ = value;
}
inline void Profile::set_enable_subtitles(bool value) {
  _internal_set_enable_subtitles(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.enable_subtitles)
}

// bool enable_closed_captions = 99;
inline void Profile::clear_enable_closed_captions() {
  enable_closed_captions_ = false;
}
inline bool Profile::_internal_enable_closed_captions() const {
  return enable_closed_captions_;
}
inline bool Profile::enable_closed_captions() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.enable_closed_captions)
  return _internal_enable_closed_captions();
}
inline void Profile::_internal_set_enable_closed_captions(bool value) {
  
  enable_closed_captions_ = value;
}
inline void Profile::set_enable_closed_captions(bool value) {
  _internal_set_enable_closed_captions(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.enable_closed_captions)
}

// string last_status_menu_page = 100;
inline void Profile::clear_last_status_menu_page() {
  last_status_menu_page_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Profile::last_status_menu_page() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.last_status_menu_page)
  return _internal_last_status_menu_page();
}
inline void Profile::set_last_status_menu_page(const std::string& value) {
  _internal_set_last_status_menu_page(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.last_status_menu_page)
}
inline std::string* Profile::mutable_last_status_menu_page() {
  // @@protoc_insertion_point(field_mutable:OakSave.Profile.last_status_menu_page)
  return _internal_mutable_last_status_menu_page();
}
inline const std::string& Profile::_internal_last_status_menu_page() const {
  return last_status_menu_page_.Get();
}
inline void Profile::_internal_set_last_status_menu_page(const std::string& value) {
  
  last_status_menu_page_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Profile::set_last_status_menu_page(std::string&& value) {
  
  last_status_menu_page_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.Profile.last_status_menu_page)
}
inline void Profile::set_last_status_menu_page(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  last_status_menu_page_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.Profile.last_status_menu_page)
}
inline void Profile::set_last_status_menu_page(const char* value,
    size_t size) {
  
  last_status_menu_page_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.Profile.last_status_menu_page)
}
inline std::string* Profile::_internal_mutable_last_status_menu_page() {
  
  return last_status_menu_page_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Profile::release_last_status_menu_page() {
  // @@protoc_insertion_point(field_release:OakSave.Profile.last_status_menu_page)
  return last_status_menu_page_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Profile::set_allocated_last_status_menu_page(std::string* last_status_menu_page) {
  if (last_status_menu_page != nullptr) {
    
  } else {
    
  }
  last_status_menu_page_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_status_menu_page,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.Profile.last_status_menu_page)
}
inline std::string* Profile::unsafe_arena_release_last_status_menu_page() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.Profile.last_status_menu_page)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return last_status_menu_page_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Profile::unsafe_arena_set_allocated_last_status_menu_page(
    std::string* last_status_menu_page) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (last_status_menu_page != nullptr) {
    
  } else {
    
  }
  last_status_menu_page_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      last_status_menu_page, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.Profile.last_status_menu_page)
}

// repeated .OakSave.OakProfileLastInventoryFilterInfo inventory_screen_last_filter = 101;
inline int Profile::_internal_inventory_screen_last_filter_size() const {
  return inventory_screen_last_filter_.size();
}
inline int Profile::inventory_screen_last_filter_size() const {
  return _internal_inventory_screen_last_filter_size();
}
inline void Profile::clear_inventory_screen_last_filter() {
  inventory_screen_last_filter_.Clear();
}
inline ::OakSave::OakProfileLastInventoryFilterInfo* Profile::mutable_inventory_screen_last_filter(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.Profile.inventory_screen_last_filter)
  return inventory_screen_last_filter_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::OakProfileLastInventoryFilterInfo >*
Profile::mutable_inventory_screen_last_filter() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.Profile.inventory_screen_last_filter)
  return &inventory_screen_last_filter_;
}
inline const ::OakSave::OakProfileLastInventoryFilterInfo& Profile::_internal_inventory_screen_last_filter(int index) const {
  return inventory_screen_last_filter_.Get(index);
}
inline const ::OakSave::OakProfileLastInventoryFilterInfo& Profile::inventory_screen_last_filter(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.inventory_screen_last_filter)
  return _internal_inventory_screen_last_filter(index);
}
inline ::OakSave::OakProfileLastInventoryFilterInfo* Profile::_internal_add_inventory_screen_last_filter() {
  return inventory_screen_last_filter_.Add();
}
inline ::OakSave::OakProfileLastInventoryFilterInfo* Profile::add_inventory_screen_last_filter() {
  // @@protoc_insertion_point(field_add:OakSave.Profile.inventory_screen_last_filter)
  return _internal_add_inventory_screen_last_filter();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::OakProfileLastInventoryFilterInfo >&
Profile::inventory_screen_last_filter() const {
  // @@protoc_insertion_point(field_list:OakSave.Profile.inventory_screen_last_filter)
  return inventory_screen_last_filter_;
}

// .OakSave.OakProfileMenuTutorialInfo tutorial_info = 102;
inline bool Profile::_internal_has_tutorial_info() const {
  return this != internal_default_instance() && tutorial_info_ != nullptr;
}
inline bool Profile::has_tutorial_info() const {
  return _internal_has_tutorial_info();
}
inline void Profile::clear_tutorial_info() {
  if (GetArena() == nullptr && tutorial_info_ != nullptr) {
    delete tutorial_info_;
  }
  tutorial_info_ = nullptr;
}
inline const ::OakSave::OakProfileMenuTutorialInfo& Profile::_internal_tutorial_info() const {
  const ::OakSave::OakProfileMenuTutorialInfo* p = tutorial_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::OakSave::OakProfileMenuTutorialInfo*>(
      &::OakSave::_OakProfileMenuTutorialInfo_default_instance_);
}
inline const ::OakSave::OakProfileMenuTutorialInfo& Profile::tutorial_info() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.tutorial_info)
  return _internal_tutorial_info();
}
inline void Profile::unsafe_arena_set_allocated_tutorial_info(
    ::OakSave::OakProfileMenuTutorialInfo* tutorial_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tutorial_info_);
  }
  tutorial_info_ = tutorial_info;
  if (tutorial_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.Profile.tutorial_info)
}
inline ::OakSave::OakProfileMenuTutorialInfo* Profile::release_tutorial_info() {
  auto temp = unsafe_arena_release_tutorial_info();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::OakSave::OakProfileMenuTutorialInfo* Profile::unsafe_arena_release_tutorial_info() {
  // @@protoc_insertion_point(field_release:OakSave.Profile.tutorial_info)
  
  ::OakSave::OakProfileMenuTutorialInfo* temp = tutorial_info_;
  tutorial_info_ = nullptr;
  return temp;
}
inline ::OakSave::OakProfileMenuTutorialInfo* Profile::_internal_mutable_tutorial_info() {
  
  if (tutorial_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::OakSave::OakProfileMenuTutorialInfo>(GetArena());
    tutorial_info_ = p;
  }
  return tutorial_info_;
}
inline ::OakSave::OakProfileMenuTutorialInfo* Profile::mutable_tutorial_info() {
  // @@protoc_insertion_point(field_mutable:OakSave.Profile.tutorial_info)
  return _internal_mutable_tutorial_info();
}
inline void Profile::set_allocated_tutorial_info(::OakSave::OakProfileMenuTutorialInfo* tutorial_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tutorial_info_;
  }
  if (tutorial_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tutorial_info);
    if (message_arena != submessage_arena) {
      tutorial_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tutorial_info, submessage_arena);
    }
    
  } else {
    
  }
  tutorial_info_ = tutorial_info;
  // @@protoc_insertion_point(field_set_allocated:OakSave.Profile.tutorial_info)
}

// uint32 default_network_type = 103;
inline void Profile::clear_default_network_type() {
  default_network_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::_internal_default_network_type() const {
  return default_network_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::default_network_type() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.default_network_type)
  return _internal_default_network_type();
}
inline void Profile::_internal_set_default_network_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  default_network_type_ = value;
}
inline void Profile::set_default_network_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_default_network_type(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.default_network_type)
}

// uint32 default_invite_type = 104;
inline void Profile::clear_default_invite_type() {
  default_invite_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::_internal_default_invite_type() const {
  return default_invite_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::default_invite_type() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.default_invite_type)
  return _internal_default_invite_type();
}
inline void Profile::_internal_set_default_invite_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  default_invite_type_ = value;
}
inline void Profile::set_default_invite_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_default_invite_type(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.default_invite_type)
}

// string matchmaking_region = 105;
inline void Profile::clear_matchmaking_region() {
  matchmaking_region_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Profile::matchmaking_region() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.matchmaking_region)
  return _internal_matchmaking_region();
}
inline void Profile::set_matchmaking_region(const std::string& value) {
  _internal_set_matchmaking_region(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.matchmaking_region)
}
inline std::string* Profile::mutable_matchmaking_region() {
  // @@protoc_insertion_point(field_mutable:OakSave.Profile.matchmaking_region)
  return _internal_mutable_matchmaking_region();
}
inline const std::string& Profile::_internal_matchmaking_region() const {
  return matchmaking_region_.Get();
}
inline void Profile::_internal_set_matchmaking_region(const std::string& value) {
  
  matchmaking_region_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Profile::set_matchmaking_region(std::string&& value) {
  
  matchmaking_region_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:OakSave.Profile.matchmaking_region)
}
inline void Profile::set_matchmaking_region(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  matchmaking_region_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:OakSave.Profile.matchmaking_region)
}
inline void Profile::set_matchmaking_region(const char* value,
    size_t size) {
  
  matchmaking_region_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:OakSave.Profile.matchmaking_region)
}
inline std::string* Profile::_internal_mutable_matchmaking_region() {
  
  return matchmaking_region_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Profile::release_matchmaking_region() {
  // @@protoc_insertion_point(field_release:OakSave.Profile.matchmaking_region)
  return matchmaking_region_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Profile::set_allocated_matchmaking_region(std::string* matchmaking_region) {
  if (matchmaking_region != nullptr) {
    
  } else {
    
  }
  matchmaking_region_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), matchmaking_region,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:OakSave.Profile.matchmaking_region)
}
inline std::string* Profile::unsafe_arena_release_matchmaking_region() {
  // @@protoc_insertion_point(field_unsafe_arena_release:OakSave.Profile.matchmaking_region)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return matchmaking_region_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Profile::unsafe_arena_set_allocated_matchmaking_region(
    std::string* matchmaking_region) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (matchmaking_region != nullptr) {
    
  } else {
    
  }
  matchmaking_region_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      matchmaking_region, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.Profile.matchmaking_region)
}

// uint32 streaming_service = 106;
inline void Profile::clear_streaming_service() {
  streaming_service_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::_internal_streaming_service() const {
  return streaming_service_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::streaming_service() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.streaming_service)
  return _internal_streaming_service();
}
inline void Profile::_internal_set_streaming_service(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  streaming_service_ = value;
}
inline void Profile::set_streaming_service(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_streaming_service(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.streaming_service)
}

// int32 max_cached_friend_events = 107;
inline void Profile::clear_max_cached_friend_events() {
  max_cached_friend_events_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Profile::_internal_max_cached_friend_events() const {
  return max_cached_friend_events_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Profile::max_cached_friend_events() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.max_cached_friend_events)
  return _internal_max_cached_friend_events();
}
inline void Profile::_internal_set_max_cached_friend_events(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_cached_friend_events_ = value;
}
inline void Profile::set_max_cached_friend_events(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_cached_friend_events(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.max_cached_friend_events)
}

// int32 max_cached_friend_statuses = 108;
inline void Profile::clear_max_cached_friend_statuses() {
  max_cached_friend_statuses_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Profile::_internal_max_cached_friend_statuses() const {
  return max_cached_friend_statuses_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Profile::max_cached_friend_statuses() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.max_cached_friend_statuses)
  return _internal_max_cached_friend_statuses();
}
inline void Profile::_internal_set_max_cached_friend_statuses(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_cached_friend_statuses_ = value;
}
inline void Profile::set_max_cached_friend_statuses(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_cached_friend_statuses(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.max_cached_friend_statuses)
}

// repeated string friend_events = 109;
inline int Profile::_internal_friend_events_size() const {
  return friend_events_.size();
}
inline int Profile::friend_events_size() const {
  return _internal_friend_events_size();
}
inline void Profile::clear_friend_events() {
  friend_events_.Clear();
}
inline std::string* Profile::add_friend_events() {
  // @@protoc_insertion_point(field_add_mutable:OakSave.Profile.friend_events)
  return _internal_add_friend_events();
}
inline const std::string& Profile::_internal_friend_events(int index) const {
  return friend_events_.Get(index);
}
inline const std::string& Profile::friend_events(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.friend_events)
  return _internal_friend_events(index);
}
inline std::string* Profile::mutable_friend_events(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.Profile.friend_events)
  return friend_events_.Mutable(index);
}
inline void Profile::set_friend_events(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:OakSave.Profile.friend_events)
  friend_events_.Mutable(index)->assign(value);
}
inline void Profile::set_friend_events(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:OakSave.Profile.friend_events)
  friend_events_.Mutable(index)->assign(std::move(value));
}
inline void Profile::set_friend_events(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  friend_events_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:OakSave.Profile.friend_events)
}
inline void Profile::set_friend_events(int index, const char* value, size_t size) {
  friend_events_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:OakSave.Profile.friend_events)
}
inline std::string* Profile::_internal_add_friend_events() {
  return friend_events_.Add();
}
inline void Profile::add_friend_events(const std::string& value) {
  friend_events_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:OakSave.Profile.friend_events)
}
inline void Profile::add_friend_events(std::string&& value) {
  friend_events_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:OakSave.Profile.friend_events)
}
inline void Profile::add_friend_events(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  friend_events_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:OakSave.Profile.friend_events)
}
inline void Profile::add_friend_events(const char* value, size_t size) {
  friend_events_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:OakSave.Profile.friend_events)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Profile::friend_events() const {
  // @@protoc_insertion_point(field_list:OakSave.Profile.friend_events)
  return friend_events_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Profile::mutable_friend_events() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.Profile.friend_events)
  return &friend_events_;
}

// repeated string friend_statuses = 110;
inline int Profile::_internal_friend_statuses_size() const {
  return friend_statuses_.size();
}
inline int Profile::friend_statuses_size() const {
  return _internal_friend_statuses_size();
}
inline void Profile::clear_friend_statuses() {
  friend_statuses_.Clear();
}
inline std::string* Profile::add_friend_statuses() {
  // @@protoc_insertion_point(field_add_mutable:OakSave.Profile.friend_statuses)
  return _internal_add_friend_statuses();
}
inline const std::string& Profile::_internal_friend_statuses(int index) const {
  return friend_statuses_.Get(index);
}
inline const std::string& Profile::friend_statuses(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.friend_statuses)
  return _internal_friend_statuses(index);
}
inline std::string* Profile::mutable_friend_statuses(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.Profile.friend_statuses)
  return friend_statuses_.Mutable(index);
}
inline void Profile::set_friend_statuses(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:OakSave.Profile.friend_statuses)
  friend_statuses_.Mutable(index)->assign(value);
}
inline void Profile::set_friend_statuses(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:OakSave.Profile.friend_statuses)
  friend_statuses_.Mutable(index)->assign(std::move(value));
}
inline void Profile::set_friend_statuses(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  friend_statuses_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:OakSave.Profile.friend_statuses)
}
inline void Profile::set_friend_statuses(int index, const char* value, size_t size) {
  friend_statuses_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:OakSave.Profile.friend_statuses)
}
inline std::string* Profile::_internal_add_friend_statuses() {
  return friend_statuses_.Add();
}
inline void Profile::add_friend_statuses(const std::string& value) {
  friend_statuses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:OakSave.Profile.friend_statuses)
}
inline void Profile::add_friend_statuses(std::string&& value) {
  friend_statuses_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:OakSave.Profile.friend_statuses)
}
inline void Profile::add_friend_statuses(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  friend_statuses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:OakSave.Profile.friend_statuses)
}
inline void Profile::add_friend_statuses(const char* value, size_t size) {
  friend_statuses_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:OakSave.Profile.friend_statuses)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Profile::friend_statuses() const {
  // @@protoc_insertion_point(field_list:OakSave.Profile.friend_statuses)
  return friend_statuses_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Profile::mutable_friend_statuses() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.Profile.friend_statuses)
  return &friend_statuses_;
}

// int64 last_whisper_fetch_events_time = 111;
inline void Profile::clear_last_whisper_fetch_events_time() {
  last_whisper_fetch_events_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Profile::_internal_last_whisper_fetch_events_time() const {
  return last_whisper_fetch_events_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Profile::last_whisper_fetch_events_time() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.last_whisper_fetch_events_time)
  return _internal_last_whisper_fetch_events_time();
}
inline void Profile::_internal_set_last_whisper_fetch_events_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  last_whisper_fetch_events_time_ = value;
}
inline void Profile::set_last_whisper_fetch_events_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_last_whisper_fetch_events_time(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.last_whisper_fetch_events_time)
}

// int64 last_whisper_fetch_statuses_time = 112;
inline void Profile::clear_last_whisper_fetch_statuses_time() {
  last_whisper_fetch_statuses_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Profile::_internal_last_whisper_fetch_statuses_time() const {
  return last_whisper_fetch_statuses_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Profile::last_whisper_fetch_statuses_time() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.last_whisper_fetch_statuses_time)
  return _internal_last_whisper_fetch_statuses_time();
}
inline void Profile::_internal_set_last_whisper_fetch_statuses_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  last_whisper_fetch_statuses_time_ = value;
}
inline void Profile::set_last_whisper_fetch_statuses_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_last_whisper_fetch_statuses_time(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.last_whisper_fetch_statuses_time)
}

// uint32 desired_crossplay_state = 113;
inline void Profile::clear_desired_crossplay_state() {
  desired_crossplay_state_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::_internal_desired_crossplay_state() const {
  return desired_crossplay_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::desired_crossplay_state() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.desired_crossplay_state)
  return _internal_desired_crossplay_state();
}
inline void Profile::_internal_set_desired_crossplay_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  desired_crossplay_state_ = value;
}
inline void Profile::set_desired_crossplay_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_desired_crossplay_state(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.desired_crossplay_state)
}

// repeated .OakSave.Profile.FriendEncountersEntry friend_encounters = 133;
inline int Profile::_internal_friend_encounters_size() const {
  return friend_encounters_.size();
}
inline int Profile::friend_encounters_size() const {
  return _internal_friend_encounters_size();
}
inline void Profile::clear_friend_encounters() {
  friend_encounters_.Clear();
}
inline ::OakSave::Profile_FriendEncountersEntry* Profile::mutable_friend_encounters(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.Profile.friend_encounters)
  return friend_encounters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::Profile_FriendEncountersEntry >*
Profile::mutable_friend_encounters() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.Profile.friend_encounters)
  return &friend_encounters_;
}
inline const ::OakSave::Profile_FriendEncountersEntry& Profile::_internal_friend_encounters(int index) const {
  return friend_encounters_.Get(index);
}
inline const ::OakSave::Profile_FriendEncountersEntry& Profile::friend_encounters(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.friend_encounters)
  return _internal_friend_encounters(index);
}
inline ::OakSave::Profile_FriendEncountersEntry* Profile::_internal_add_friend_encounters() {
  return friend_encounters_.Add();
}
inline ::OakSave::Profile_FriendEncountersEntry* Profile::add_friend_encounters() {
  // @@protoc_insertion_point(field_add:OakSave.Profile.friend_encounters)
  return _internal_add_friend_encounters();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::Profile_FriendEncountersEntry >&
Profile::friend_encounters() const {
  // @@protoc_insertion_point(field_list:OakSave.Profile.friend_encounters)
  return friend_encounters_;
}

// int32 max_friend_encounter_size = 134;
inline void Profile::clear_max_friend_encounter_size() {
  max_friend_encounter_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Profile::_internal_max_friend_encounter_size() const {
  return max_friend_encounter_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Profile::max_friend_encounter_size() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.max_friend_encounter_size)
  return _internal_max_friend_encounter_size();
}
inline void Profile::_internal_set_max_friend_encounter_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_friend_encounter_size_ = value;
}
inline void Profile::set_max_friend_encounter_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_friend_encounter_size(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.max_friend_encounter_size)
}

// repeated .OakSave.GameStatSaveGameData profile_stats_data = 135;
inline int Profile::_internal_profile_stats_data_size() const {
  return profile_stats_data_.size();
}
inline int Profile::profile_stats_data_size() const {
  return _internal_profile_stats_data_size();
}
inline ::OakSave::GameStatSaveGameData* Profile::mutable_profile_stats_data(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.Profile.profile_stats_data)
  return profile_stats_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::GameStatSaveGameData >*
Profile::mutable_profile_stats_data() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.Profile.profile_stats_data)
  return &profile_stats_data_;
}
inline const ::OakSave::GameStatSaveGameData& Profile::_internal_profile_stats_data(int index) const {
  return profile_stats_data_.Get(index);
}
inline const ::OakSave::GameStatSaveGameData& Profile::profile_stats_data(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.profile_stats_data)
  return _internal_profile_stats_data(index);
}
inline ::OakSave::GameStatSaveGameData* Profile::_internal_add_profile_stats_data() {
  return profile_stats_data_.Add();
}
inline ::OakSave::GameStatSaveGameData* Profile::add_profile_stats_data() {
  // @@protoc_insertion_point(field_add:OakSave.Profile.profile_stats_data)
  return _internal_add_profile_stats_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::GameStatSaveGameData >&
Profile::profile_stats_data() const {
  // @@protoc_insertion_point(field_list:OakSave.Profile.profile_stats_data)
  return profile_stats_data_;
}

// repeated .OakSave.InventoryCategorySaveData bank_inventory_category_list = 136;
inline int Profile::_internal_bank_inventory_category_list_size() const {
  return bank_inventory_category_list_.size();
}
inline int Profile::bank_inventory_category_list_size() const {
  return _internal_bank_inventory_category_list_size();
}
inline ::OakSave::InventoryCategorySaveData* Profile::mutable_bank_inventory_category_list(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.Profile.bank_inventory_category_list)
  return bank_inventory_category_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::InventoryCategorySaveData >*
Profile::mutable_bank_inventory_category_list() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.Profile.bank_inventory_category_list)
  return &bank_inventory_category_list_;
}
inline const ::OakSave::InventoryCategorySaveData& Profile::_internal_bank_inventory_category_list(int index) const {
  return bank_inventory_category_list_.Get(index);
}
inline const ::OakSave::InventoryCategorySaveData& Profile::bank_inventory_category_list(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.bank_inventory_category_list)
  return _internal_bank_inventory_category_list(index);
}
inline ::OakSave::InventoryCategorySaveData* Profile::_internal_add_bank_inventory_category_list() {
  return bank_inventory_category_list_.Add();
}
inline ::OakSave::InventoryCategorySaveData* Profile::add_bank_inventory_category_list() {
  // @@protoc_insertion_point(field_add:OakSave.Profile.bank_inventory_category_list)
  return _internal_add_bank_inventory_category_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::InventoryCategorySaveData >&
Profile::bank_inventory_category_list() const {
  // @@protoc_insertion_point(field_list:OakSave.Profile.bank_inventory_category_list)
  return bank_inventory_category_list_;
}

// repeated bytes bank_inventory_list = 137;
inline int Profile::_internal_bank_inventory_list_size() const {
  return bank_inventory_list_.size();
}
inline int Profile::bank_inventory_list_size() const {
  return _internal_bank_inventory_list_size();
}
inline void Profile::clear_bank_inventory_list() {
  bank_inventory_list_.Clear();
}
inline std::string* Profile::add_bank_inventory_list() {
  // @@protoc_insertion_point(field_add_mutable:OakSave.Profile.bank_inventory_list)
  return _internal_add_bank_inventory_list();
}
inline const std::string& Profile::_internal_bank_inventory_list(int index) const {
  return bank_inventory_list_.Get(index);
}
inline const std::string& Profile::bank_inventory_list(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.bank_inventory_list)
  return _internal_bank_inventory_list(index);
}
inline std::string* Profile::mutable_bank_inventory_list(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.Profile.bank_inventory_list)
  return bank_inventory_list_.Mutable(index);
}
inline void Profile::set_bank_inventory_list(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:OakSave.Profile.bank_inventory_list)
  bank_inventory_list_.Mutable(index)->assign(value);
}
inline void Profile::set_bank_inventory_list(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:OakSave.Profile.bank_inventory_list)
  bank_inventory_list_.Mutable(index)->assign(std::move(value));
}
inline void Profile::set_bank_inventory_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  bank_inventory_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:OakSave.Profile.bank_inventory_list)
}
inline void Profile::set_bank_inventory_list(int index, const void* value, size_t size) {
  bank_inventory_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:OakSave.Profile.bank_inventory_list)
}
inline std::string* Profile::_internal_add_bank_inventory_list() {
  return bank_inventory_list_.Add();
}
inline void Profile::add_bank_inventory_list(const std::string& value) {
  bank_inventory_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:OakSave.Profile.bank_inventory_list)
}
inline void Profile::add_bank_inventory_list(std::string&& value) {
  bank_inventory_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:OakSave.Profile.bank_inventory_list)
}
inline void Profile::add_bank_inventory_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  bank_inventory_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:OakSave.Profile.bank_inventory_list)
}
inline void Profile::add_bank_inventory_list(const void* value, size_t size) {
  bank_inventory_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:OakSave.Profile.bank_inventory_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Profile::bank_inventory_list() const {
  // @@protoc_insertion_point(field_list:OakSave.Profile.bank_inventory_list)
  return bank_inventory_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Profile::mutable_bank_inventory_list() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.Profile.bank_inventory_list)
  return &bank_inventory_list_;
}

// repeated bytes lost_loot_inventory_list = 138;
inline int Profile::_internal_lost_loot_inventory_list_size() const {
  return lost_loot_inventory_list_.size();
}
inline int Profile::lost_loot_inventory_list_size() const {
  return _internal_lost_loot_inventory_list_size();
}
inline void Profile::clear_lost_loot_inventory_list() {
  lost_loot_inventory_list_.Clear();
}
inline std::string* Profile::add_lost_loot_inventory_list() {
  // @@protoc_insertion_point(field_add_mutable:OakSave.Profile.lost_loot_inventory_list)
  return _internal_add_lost_loot_inventory_list();
}
inline const std::string& Profile::_internal_lost_loot_inventory_list(int index) const {
  return lost_loot_inventory_list_.Get(index);
}
inline const std::string& Profile::lost_loot_inventory_list(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.lost_loot_inventory_list)
  return _internal_lost_loot_inventory_list(index);
}
inline std::string* Profile::mutable_lost_loot_inventory_list(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.Profile.lost_loot_inventory_list)
  return lost_loot_inventory_list_.Mutable(index);
}
inline void Profile::set_lost_loot_inventory_list(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:OakSave.Profile.lost_loot_inventory_list)
  lost_loot_inventory_list_.Mutable(index)->assign(value);
}
inline void Profile::set_lost_loot_inventory_list(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:OakSave.Profile.lost_loot_inventory_list)
  lost_loot_inventory_list_.Mutable(index)->assign(std::move(value));
}
inline void Profile::set_lost_loot_inventory_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  lost_loot_inventory_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:OakSave.Profile.lost_loot_inventory_list)
}
inline void Profile::set_lost_loot_inventory_list(int index, const void* value, size_t size) {
  lost_loot_inventory_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:OakSave.Profile.lost_loot_inventory_list)
}
inline std::string* Profile::_internal_add_lost_loot_inventory_list() {
  return lost_loot_inventory_list_.Add();
}
inline void Profile::add_lost_loot_inventory_list(const std::string& value) {
  lost_loot_inventory_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:OakSave.Profile.lost_loot_inventory_list)
}
inline void Profile::add_lost_loot_inventory_list(std::string&& value) {
  lost_loot_inventory_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:OakSave.Profile.lost_loot_inventory_list)
}
inline void Profile::add_lost_loot_inventory_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  lost_loot_inventory_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:OakSave.Profile.lost_loot_inventory_list)
}
inline void Profile::add_lost_loot_inventory_list(const void* value, size_t size) {
  lost_loot_inventory_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:OakSave.Profile.lost_loot_inventory_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Profile::lost_loot_inventory_list() const {
  // @@protoc_insertion_point(field_list:OakSave.Profile.lost_loot_inventory_list)
  return lost_loot_inventory_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Profile::mutable_lost_loot_inventory_list() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.Profile.lost_loot_inventory_list)
  return &lost_loot_inventory_list_;
}

// repeated .OakSave.OakMailItem npc_mail_items = 139;
inline int Profile::_internal_npc_mail_items_size() const {
  return npc_mail_items_.size();
}
inline int Profile::npc_mail_items_size() const {
  return _internal_npc_mail_items_size();
}
inline void Profile::clear_npc_mail_items() {
  npc_mail_items_.Clear();
}
inline ::OakSave::OakMailItem* Profile::mutable_npc_mail_items(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.Profile.npc_mail_items)
  return npc_mail_items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::OakMailItem >*
Profile::mutable_npc_mail_items() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.Profile.npc_mail_items)
  return &npc_mail_items_;
}
inline const ::OakSave::OakMailItem& Profile::_internal_npc_mail_items(int index) const {
  return npc_mail_items_.Get(index);
}
inline const ::OakSave::OakMailItem& Profile::npc_mail_items(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.npc_mail_items)
  return _internal_npc_mail_items(index);
}
inline ::OakSave::OakMailItem* Profile::_internal_add_npc_mail_items() {
  return npc_mail_items_.Add();
}
inline ::OakSave::OakMailItem* Profile::add_npc_mail_items() {
  // @@protoc_insertion_point(field_add:OakSave.Profile.npc_mail_items)
  return _internal_add_npc_mail_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::OakMailItem >&
Profile::npc_mail_items() const {
  // @@protoc_insertion_point(field_list:OakSave.Profile.npc_mail_items)
  return npc_mail_items_;
}

// repeated string mail_guids = 140;
inline int Profile::_internal_mail_guids_size() const {
  return mail_guids_.size();
}
inline int Profile::mail_guids_size() const {
  return _internal_mail_guids_size();
}
inline void Profile::clear_mail_guids() {
  mail_guids_.Clear();
}
inline std::string* Profile::add_mail_guids() {
  // @@protoc_insertion_point(field_add_mutable:OakSave.Profile.mail_guids)
  return _internal_add_mail_guids();
}
inline const std::string& Profile::_internal_mail_guids(int index) const {
  return mail_guids_.Get(index);
}
inline const std::string& Profile::mail_guids(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.mail_guids)
  return _internal_mail_guids(index);
}
inline std::string* Profile::mutable_mail_guids(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.Profile.mail_guids)
  return mail_guids_.Mutable(index);
}
inline void Profile::set_mail_guids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:OakSave.Profile.mail_guids)
  mail_guids_.Mutable(index)->assign(value);
}
inline void Profile::set_mail_guids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:OakSave.Profile.mail_guids)
  mail_guids_.Mutable(index)->assign(std::move(value));
}
inline void Profile::set_mail_guids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  mail_guids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:OakSave.Profile.mail_guids)
}
inline void Profile::set_mail_guids(int index, const char* value, size_t size) {
  mail_guids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:OakSave.Profile.mail_guids)
}
inline std::string* Profile::_internal_add_mail_guids() {
  return mail_guids_.Add();
}
inline void Profile::add_mail_guids(const std::string& value) {
  mail_guids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:OakSave.Profile.mail_guids)
}
inline void Profile::add_mail_guids(std::string&& value) {
  mail_guids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:OakSave.Profile.mail_guids)
}
inline void Profile::add_mail_guids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  mail_guids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:OakSave.Profile.mail_guids)
}
inline void Profile::add_mail_guids(const char* value, size_t size) {
  mail_guids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:OakSave.Profile.mail_guids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Profile::mail_guids() const {
  // @@protoc_insertion_point(field_list:OakSave.Profile.mail_guids)
  return mail_guids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Profile::mutable_mail_guids() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.Profile.mail_guids)
  return &mail_guids_;
}

// repeated string unread_mail_guids = 141;
inline int Profile::_internal_unread_mail_guids_size() const {
  return unread_mail_guids_.size();
}
inline int Profile::unread_mail_guids_size() const {
  return _internal_unread_mail_guids_size();
}
inline void Profile::clear_unread_mail_guids() {
  unread_mail_guids_.Clear();
}
inline std::string* Profile::add_unread_mail_guids() {
  // @@protoc_insertion_point(field_add_mutable:OakSave.Profile.unread_mail_guids)
  return _internal_add_unread_mail_guids();
}
inline const std::string& Profile::_internal_unread_mail_guids(int index) const {
  return unread_mail_guids_.Get(index);
}
inline const std::string& Profile::unread_mail_guids(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.unread_mail_guids)
  return _internal_unread_mail_guids(index);
}
inline std::string* Profile::mutable_unread_mail_guids(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.Profile.unread_mail_guids)
  return unread_mail_guids_.Mutable(index);
}
inline void Profile::set_unread_mail_guids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:OakSave.Profile.unread_mail_guids)
  unread_mail_guids_.Mutable(index)->assign(value);
}
inline void Profile::set_unread_mail_guids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:OakSave.Profile.unread_mail_guids)
  unread_mail_guids_.Mutable(index)->assign(std::move(value));
}
inline void Profile::set_unread_mail_guids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  unread_mail_guids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:OakSave.Profile.unread_mail_guids)
}
inline void Profile::set_unread_mail_guids(int index, const char* value, size_t size) {
  unread_mail_guids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:OakSave.Profile.unread_mail_guids)
}
inline std::string* Profile::_internal_add_unread_mail_guids() {
  return unread_mail_guids_.Add();
}
inline void Profile::add_unread_mail_guids(const std::string& value) {
  unread_mail_guids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:OakSave.Profile.unread_mail_guids)
}
inline void Profile::add_unread_mail_guids(std::string&& value) {
  unread_mail_guids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:OakSave.Profile.unread_mail_guids)
}
inline void Profile::add_unread_mail_guids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  unread_mail_guids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:OakSave.Profile.unread_mail_guids)
}
inline void Profile::add_unread_mail_guids(const char* value, size_t size) {
  unread_mail_guids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:OakSave.Profile.unread_mail_guids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Profile::unread_mail_guids() const {
  // @@protoc_insertion_point(field_list:OakSave.Profile.unread_mail_guids)
  return unread_mail_guids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Profile::mutable_unread_mail_guids() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.Profile.unread_mail_guids)
  return &unread_mail_guids_;
}

// repeated .OakSave.GearSoldByFriendData gear_sold_by_friends = 142;
inline int Profile::_internal_gear_sold_by_friends_size() const {
  return gear_sold_by_friends_.size();
}
inline int Profile::gear_sold_by_friends_size() const {
  return _internal_gear_sold_by_friends_size();
}
inline void Profile::clear_gear_sold_by_friends() {
  gear_sold_by_friends_.Clear();
}
inline ::OakSave::GearSoldByFriendData* Profile::mutable_gear_sold_by_friends(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.Profile.gear_sold_by_friends)
  return gear_sold_by_friends_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::GearSoldByFriendData >*
Profile::mutable_gear_sold_by_friends() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.Profile.gear_sold_by_friends)
  return &gear_sold_by_friends_;
}
inline const ::OakSave::GearSoldByFriendData& Profile::_internal_gear_sold_by_friends(int index) const {
  return gear_sold_by_friends_.Get(index);
}
inline const ::OakSave::GearSoldByFriendData& Profile::gear_sold_by_friends(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.gear_sold_by_friends)
  return _internal_gear_sold_by_friends(index);
}
inline ::OakSave::GearSoldByFriendData* Profile::_internal_add_gear_sold_by_friends() {
  return gear_sold_by_friends_.Add();
}
inline ::OakSave::GearSoldByFriendData* Profile::add_gear_sold_by_friends() {
  // @@protoc_insertion_point(field_add:OakSave.Profile.gear_sold_by_friends)
  return _internal_add_gear_sold_by_friends();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::GearSoldByFriendData >&
Profile::gear_sold_by_friends() const {
  // @@protoc_insertion_point(field_list:OakSave.Profile.gear_sold_by_friends)
  return gear_sold_by_friends_;
}

// repeated .OakSave.OakSDUSaveGameData profile_sdu_list = 143;
inline int Profile::_internal_profile_sdu_list_size() const {
  return profile_sdu_list_.size();
}
inline int Profile::profile_sdu_list_size() const {
  return _internal_profile_sdu_list_size();
}
inline ::OakSave::OakSDUSaveGameData* Profile::mutable_profile_sdu_list(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.Profile.profile_sdu_list)
  return profile_sdu_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::OakSDUSaveGameData >*
Profile::mutable_profile_sdu_list() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.Profile.profile_sdu_list)
  return &profile_sdu_list_;
}
inline const ::OakSave::OakSDUSaveGameData& Profile::_internal_profile_sdu_list(int index) const {
  return profile_sdu_list_.Get(index);
}
inline const ::OakSave::OakSDUSaveGameData& Profile::profile_sdu_list(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.profile_sdu_list)
  return _internal_profile_sdu_list(index);
}
inline ::OakSave::OakSDUSaveGameData* Profile::_internal_add_profile_sdu_list() {
  return profile_sdu_list_.Add();
}
inline ::OakSave::OakSDUSaveGameData* Profile::add_profile_sdu_list() {
  // @@protoc_insertion_point(field_add:OakSave.Profile.profile_sdu_list)
  return _internal_add_profile_sdu_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::OakSDUSaveGameData >&
Profile::profile_sdu_list() const {
  // @@protoc_insertion_point(field_list:OakSave.Profile.profile_sdu_list)
  return profile_sdu_list_;
}

// repeated .OakSave.OakCustomizationSaveGameData unlocked_customizations = 144;
inline int Profile::_internal_unlocked_customizations_size() const {
  return unlocked_customizations_.size();
}
inline int Profile::unlocked_customizations_size() const {
  return _internal_unlocked_customizations_size();
}
inline void Profile::clear_unlocked_customizations() {
  unlocked_customizations_.Clear();
}
inline ::OakSave::OakCustomizationSaveGameData* Profile::mutable_unlocked_customizations(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.Profile.unlocked_customizations)
  return unlocked_customizations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::OakCustomizationSaveGameData >*
Profile::mutable_unlocked_customizations() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.Profile.unlocked_customizations)
  return &unlocked_customizations_;
}
inline const ::OakSave::OakCustomizationSaveGameData& Profile::_internal_unlocked_customizations(int index) const {
  return unlocked_customizations_.Get(index);
}
inline const ::OakSave::OakCustomizationSaveGameData& Profile::unlocked_customizations(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.unlocked_customizations)
  return _internal_unlocked_customizations(index);
}
inline ::OakSave::OakCustomizationSaveGameData* Profile::_internal_add_unlocked_customizations() {
  return unlocked_customizations_.Add();
}
inline ::OakSave::OakCustomizationSaveGameData* Profile::add_unlocked_customizations() {
  // @@protoc_insertion_point(field_add:OakSave.Profile.unlocked_customizations)
  return _internal_add_unlocked_customizations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::OakCustomizationSaveGameData >&
Profile::unlocked_customizations() const {
  // @@protoc_insertion_point(field_list:OakSave.Profile.unlocked_customizations)
  return unlocked_customizations_;
}

// repeated .OakSave.OakInventoryCustomizationPartInfo unlocked_inventory_customization_parts = 145;
inline int Profile::_internal_unlocked_inventory_customization_parts_size() const {
  return unlocked_inventory_customization_parts_.size();
}
inline int Profile::unlocked_inventory_customization_parts_size() const {
  return _internal_unlocked_inventory_customization_parts_size();
}
inline void Profile::clear_unlocked_inventory_customization_parts() {
  unlocked_inventory_customization_parts_.Clear();
}
inline ::OakSave::OakInventoryCustomizationPartInfo* Profile::mutable_unlocked_inventory_customization_parts(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.Profile.unlocked_inventory_customization_parts)
  return unlocked_inventory_customization_parts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::OakInventoryCustomizationPartInfo >*
Profile::mutable_unlocked_inventory_customization_parts() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.Profile.unlocked_inventory_customization_parts)
  return &unlocked_inventory_customization_parts_;
}
inline const ::OakSave::OakInventoryCustomizationPartInfo& Profile::_internal_unlocked_inventory_customization_parts(int index) const {
  return unlocked_inventory_customization_parts_.Get(index);
}
inline const ::OakSave::OakInventoryCustomizationPartInfo& Profile::unlocked_inventory_customization_parts(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.unlocked_inventory_customization_parts)
  return _internal_unlocked_inventory_customization_parts(index);
}
inline ::OakSave::OakInventoryCustomizationPartInfo* Profile::_internal_add_unlocked_inventory_customization_parts() {
  return unlocked_inventory_customization_parts_.Add();
}
inline ::OakSave::OakInventoryCustomizationPartInfo* Profile::add_unlocked_inventory_customization_parts() {
  // @@protoc_insertion_point(field_add:OakSave.Profile.unlocked_inventory_customization_parts)
  return _internal_add_unlocked_inventory_customization_parts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::OakInventoryCustomizationPartInfo >&
Profile::unlocked_inventory_customization_parts() const {
  // @@protoc_insertion_point(field_list:OakSave.Profile.unlocked_inventory_customization_parts)
  return unlocked_inventory_customization_parts_;
}

// .OakSave.GuardianRankProfileData guardian_rank = 146;
inline bool Profile::_internal_has_guardian_rank() const {
  return this != internal_default_instance() && guardian_rank_ != nullptr;
}
inline bool Profile::has_guardian_rank() const {
  return _internal_has_guardian_rank();
}
inline void Profile::clear_guardian_rank() {
  if (GetArena() == nullptr && guardian_rank_ != nullptr) {
    delete guardian_rank_;
  }
  guardian_rank_ = nullptr;
}
inline const ::OakSave::GuardianRankProfileData& Profile::_internal_guardian_rank() const {
  const ::OakSave::GuardianRankProfileData* p = guardian_rank_;
  return p != nullptr ? *p : *reinterpret_cast<const ::OakSave::GuardianRankProfileData*>(
      &::OakSave::_GuardianRankProfileData_default_instance_);
}
inline const ::OakSave::GuardianRankProfileData& Profile::guardian_rank() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.guardian_rank)
  return _internal_guardian_rank();
}
inline void Profile::unsafe_arena_set_allocated_guardian_rank(
    ::OakSave::GuardianRankProfileData* guardian_rank) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(guardian_rank_);
  }
  guardian_rank_ = guardian_rank;
  if (guardian_rank) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:OakSave.Profile.guardian_rank)
}
inline ::OakSave::GuardianRankProfileData* Profile::release_guardian_rank() {
  auto temp = unsafe_arena_release_guardian_rank();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::OakSave::GuardianRankProfileData* Profile::unsafe_arena_release_guardian_rank() {
  // @@protoc_insertion_point(field_release:OakSave.Profile.guardian_rank)
  
  ::OakSave::GuardianRankProfileData* temp = guardian_rank_;
  guardian_rank_ = nullptr;
  return temp;
}
inline ::OakSave::GuardianRankProfileData* Profile::_internal_mutable_guardian_rank() {
  
  if (guardian_rank_ == nullptr) {
    auto* p = CreateMaybeMessage<::OakSave::GuardianRankProfileData>(GetArena());
    guardian_rank_ = p;
  }
  return guardian_rank_;
}
inline ::OakSave::GuardianRankProfileData* Profile::mutable_guardian_rank() {
  // @@protoc_insertion_point(field_mutable:OakSave.Profile.guardian_rank)
  return _internal_mutable_guardian_rank();
}
inline void Profile::set_allocated_guardian_rank(::OakSave::GuardianRankProfileData* guardian_rank) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete guardian_rank_;
  }
  if (guardian_rank) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(guardian_rank);
    if (message_arena != submessage_arena) {
      guardian_rank = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, guardian_rank, submessage_arena);
    }
    
  } else {
    
  }
  guardian_rank_ = guardian_rank;
  // @@protoc_insertion_point(field_set_allocated:OakSave.Profile.guardian_rank)
}

// repeated .OakSave.CrewQuartersDecorationItemSaveGameData unlocked_crew_quarters_decorations = 147;
inline int Profile::_internal_unlocked_crew_quarters_decorations_size() const {
  return unlocked_crew_quarters_decorations_.size();
}
inline int Profile::unlocked_crew_quarters_decorations_size() const {
  return _internal_unlocked_crew_quarters_decorations_size();
}
inline void Profile::clear_unlocked_crew_quarters_decorations() {
  unlocked_crew_quarters_decorations_.Clear();
}
inline ::OakSave::CrewQuartersDecorationItemSaveGameData* Profile::mutable_unlocked_crew_quarters_decorations(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.Profile.unlocked_crew_quarters_decorations)
  return unlocked_crew_quarters_decorations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::CrewQuartersDecorationItemSaveGameData >*
Profile::mutable_unlocked_crew_quarters_decorations() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.Profile.unlocked_crew_quarters_decorations)
  return &unlocked_crew_quarters_decorations_;
}
inline const ::OakSave::CrewQuartersDecorationItemSaveGameData& Profile::_internal_unlocked_crew_quarters_decorations(int index) const {
  return unlocked_crew_quarters_decorations_.Get(index);
}
inline const ::OakSave::CrewQuartersDecorationItemSaveGameData& Profile::unlocked_crew_quarters_decorations(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.unlocked_crew_quarters_decorations)
  return _internal_unlocked_crew_quarters_decorations(index);
}
inline ::OakSave::CrewQuartersDecorationItemSaveGameData* Profile::_internal_add_unlocked_crew_quarters_decorations() {
  return unlocked_crew_quarters_decorations_.Add();
}
inline ::OakSave::CrewQuartersDecorationItemSaveGameData* Profile::add_unlocked_crew_quarters_decorations() {
  // @@protoc_insertion_point(field_add:OakSave.Profile.unlocked_crew_quarters_decorations)
  return _internal_add_unlocked_crew_quarters_decorations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::CrewQuartersDecorationItemSaveGameData >&
Profile::unlocked_crew_quarters_decorations() const {
  // @@protoc_insertion_point(field_list:OakSave.Profile.unlocked_crew_quarters_decorations)
  return unlocked_crew_quarters_decorations_;
}

// repeated .OakSave.CrewQuartersRoomItemSaveGameData unlocked_crew_quarters_rooms = 148;
inline int Profile::_internal_unlocked_crew_quarters_rooms_size() const {
  return unlocked_crew_quarters_rooms_.size();
}
inline int Profile::unlocked_crew_quarters_rooms_size() const {
  return _internal_unlocked_crew_quarters_rooms_size();
}
inline void Profile::clear_unlocked_crew_quarters_rooms() {
  unlocked_crew_quarters_rooms_.Clear();
}
inline ::OakSave::CrewQuartersRoomItemSaveGameData* Profile::mutable_unlocked_crew_quarters_rooms(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.Profile.unlocked_crew_quarters_rooms)
  return unlocked_crew_quarters_rooms_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::CrewQuartersRoomItemSaveGameData >*
Profile::mutable_unlocked_crew_quarters_rooms() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.Profile.unlocked_crew_quarters_rooms)
  return &unlocked_crew_quarters_rooms_;
}
inline const ::OakSave::CrewQuartersRoomItemSaveGameData& Profile::_internal_unlocked_crew_quarters_rooms(int index) const {
  return unlocked_crew_quarters_rooms_.Get(index);
}
inline const ::OakSave::CrewQuartersRoomItemSaveGameData& Profile::unlocked_crew_quarters_rooms(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.unlocked_crew_quarters_rooms)
  return _internal_unlocked_crew_quarters_rooms(index);
}
inline ::OakSave::CrewQuartersRoomItemSaveGameData* Profile::_internal_add_unlocked_crew_quarters_rooms() {
  return unlocked_crew_quarters_rooms_.Add();
}
inline ::OakSave::CrewQuartersRoomItemSaveGameData* Profile::add_unlocked_crew_quarters_rooms() {
  // @@protoc_insertion_point(field_add:OakSave.Profile.unlocked_crew_quarters_rooms)
  return _internal_add_unlocked_crew_quarters_rooms();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::CrewQuartersRoomItemSaveGameData >&
Profile::unlocked_crew_quarters_rooms() const {
  // @@protoc_insertion_point(field_list:OakSave.Profile.unlocked_crew_quarters_rooms)
  return unlocked_crew_quarters_rooms_;
}

// bool enable_mouse_acceleration = 150;
inline void Profile::clear_enable_mouse_acceleration() {
  enable_mouse_acceleration_ = false;
}
inline bool Profile::_internal_enable_mouse_acceleration() const {
  return enable_mouse_acceleration_;
}
inline bool Profile::enable_mouse_acceleration() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.enable_mouse_acceleration)
  return _internal_enable_mouse_acceleration();
}
inline void Profile::_internal_set_enable_mouse_acceleration(bool value) {
  
  enable_mouse_acceleration_ = value;
}
inline void Profile::set_enable_mouse_acceleration(bool value) {
  _internal_set_enable_mouse_acceleration(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.enable_mouse_acceleration)
}

// bool enable_gamepad_input = 151;
inline void Profile::clear_enable_gamepad_input() {
  enable_gamepad_input_ = false;
}
inline bool Profile::_internal_enable_gamepad_input() const {
  return enable_gamepad_input_;
}
inline bool Profile::enable_gamepad_input() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.enable_gamepad_input)
  return _internal_enable_gamepad_input();
}
inline void Profile::_internal_set_enable_gamepad_input(bool value) {
  
  enable_gamepad_input_ = value;
}
inline void Profile::set_enable_gamepad_input(bool value) {
  _internal_set_enable_gamepad_input(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.enable_gamepad_input)
}

// bool use_classic_gamepad_input = 152;
inline void Profile::clear_use_classic_gamepad_input() {
  use_classic_gamepad_input_ = false;
}
inline bool Profile::_internal_use_classic_gamepad_input() const {
  return use_classic_gamepad_input_;
}
inline bool Profile::use_classic_gamepad_input() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.use_classic_gamepad_input)
  return _internal_use_classic_gamepad_input();
}
inline void Profile::_internal_set_use_classic_gamepad_input(bool value) {
  
  use_classic_gamepad_input_ = value;
}
inline void Profile::set_use_classic_gamepad_input(bool value) {
  _internal_set_use_classic_gamepad_input(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.use_classic_gamepad_input)
}

// float master_volume = 153;
inline void Profile::clear_master_volume() {
  master_volume_ = 0;
}
inline float Profile::_internal_master_volume() const {
  return master_volume_;
}
inline float Profile::master_volume() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.master_volume)
  return _internal_master_volume();
}
inline void Profile::_internal_set_master_volume(float value) {
  
  master_volume_ = value;
}
inline void Profile::set_master_volume(float value) {
  _internal_set_master_volume(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.master_volume)
}

// uint32 monitor_display_type = 154;
inline void Profile::clear_monitor_display_type() {
  monitor_display_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::_internal_monitor_display_type() const {
  return monitor_display_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::monitor_display_type() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.monitor_display_type)
  return _internal_monitor_display_type();
}
inline void Profile::_internal_set_monitor_display_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  monitor_display_type_ = value;
}
inline void Profile::set_monitor_display_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_monitor_display_type(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.monitor_display_type)
}

// uint32 graphics_mode = 155;
inline void Profile::clear_graphics_mode() {
  graphics_mode_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::_internal_graphics_mode() const {
  return graphics_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::graphics_mode() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.graphics_mode)
  return _internal_graphics_mode();
}
inline void Profile::_internal_set_graphics_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  graphics_mode_ = value;
}
inline void Profile::set_graphics_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_graphics_mode(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.graphics_mode)
}

// uint32 frame_rate_limit = 156;
inline void Profile::clear_frame_rate_limit() {
  frame_rate_limit_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::_internal_frame_rate_limit() const {
  return frame_rate_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::frame_rate_limit() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.frame_rate_limit)
  return _internal_frame_rate_limit();
}
inline void Profile::_internal_set_frame_rate_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  frame_rate_limit_ = value;
}
inline void Profile::set_frame_rate_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_frame_rate_limit(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.frame_rate_limit)
}

// float base_vehicle_fov = 157;
inline void Profile::clear_base_vehicle_fov() {
  base_vehicle_fov_ = 0;
}
inline float Profile::_internal_base_vehicle_fov() const {
  return base_vehicle_fov_;
}
inline float Profile::base_vehicle_fov() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.base_vehicle_fov)
  return _internal_base_vehicle_fov();
}
inline void Profile::_internal_set_base_vehicle_fov(float value) {
  
  base_vehicle_fov_ = value;
}
inline void Profile::set_base_vehicle_fov(float value) {
  _internal_set_base_vehicle_fov(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.base_vehicle_fov)
}

// uint32 graphics_quality = 158;
inline void Profile::clear_graphics_quality() {
  graphics_quality_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::_internal_graphics_quality() const {
  return graphics_quality_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::graphics_quality() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.graphics_quality)
  return _internal_graphics_quality();
}
inline void Profile::_internal_set_graphics_quality(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  graphics_quality_ = value;
}
inline void Profile::set_graphics_quality(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_graphics_quality(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.graphics_quality)
}

// uint32 anisotropic_filtering = 159;
inline void Profile::clear_anisotropic_filtering() {
  anisotropic_filtering_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::_internal_anisotropic_filtering() const {
  return anisotropic_filtering_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::anisotropic_filtering() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.anisotropic_filtering)
  return _internal_anisotropic_filtering();
}
inline void Profile::_internal_set_anisotropic_filtering(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  anisotropic_filtering_ = value;
}
inline void Profile::set_anisotropic_filtering(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_anisotropic_filtering(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.anisotropic_filtering)
}

// uint32 shadow_quality = 160;
inline void Profile::clear_shadow_quality() {
  shadow_quality_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::_internal_shadow_quality() const {
  return shadow_quality_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::shadow_quality() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.shadow_quality)
  return _internal_shadow_quality();
}
inline void Profile::_internal_set_shadow_quality(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  shadow_quality_ = value;
}
inline void Profile::set_shadow_quality(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_shadow_quality(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.shadow_quality)
}

// uint32 display_performance_stats = 161;
inline void Profile::clear_display_performance_stats() {
  display_performance_stats_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::_internal_display_performance_stats() const {
  return display_performance_stats_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::display_performance_stats() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.display_performance_stats)
  return _internal_display_performance_stats();
}
inline void Profile::_internal_set_display_performance_stats(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  display_performance_stats_ = value;
}
inline void Profile::set_display_performance_stats(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_display_performance_stats(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.display_performance_stats)
}

// uint32 texture_detail = 162;
inline void Profile::clear_texture_detail() {
  texture_detail_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::_internal_texture_detail() const {
  return texture_detail_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::texture_detail() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.texture_detail)
  return _internal_texture_detail();
}
inline void Profile::_internal_set_texture_detail(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  texture_detail_ = value;
}
inline void Profile::set_texture_detail(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_texture_detail(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.texture_detail)
}

// uint32 draw_distance = 163;
inline void Profile::clear_draw_distance() {
  draw_distance_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::_internal_draw_distance() const {
  return draw_distance_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::draw_distance() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.draw_distance)
  return _internal_draw_distance();
}
inline void Profile::_internal_set_draw_distance(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  draw_distance_ = value;
}
inline void Profile::set_draw_distance(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_draw_distance(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.draw_distance)
}

// uint32 clutter = 164;
inline void Profile::clear_clutter() {
  clutter_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::_internal_clutter() const {
  return clutter_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::clutter() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.clutter)
  return _internal_clutter();
}
inline void Profile::_internal_set_clutter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  clutter_ = value;
}
inline void Profile::set_clutter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_clutter(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.clutter)
}

// uint32 tessellation = 165;
inline void Profile::clear_tessellation() {
  tessellation_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::_internal_tessellation() const {
  return tessellation_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::tessellation() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.tessellation)
  return _internal_tessellation();
}
inline void Profile::_internal_set_tessellation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tessellation_ = value;
}
inline void Profile::set_tessellation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tessellation(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.tessellation)
}

// uint32 foliage = 166;
inline void Profile::clear_foliage() {
  foliage_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::_internal_foliage() const {
  return foliage_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::foliage() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.foliage)
  return _internal_foliage();
}
inline void Profile::_internal_set_foliage(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  foliage_ = value;
}
inline void Profile::set_foliage(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_foliage(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.foliage)
}

// bool foliage_shadows = 167;
inline void Profile::clear_foliage_shadows() {
  foliage_shadows_ = false;
}
inline bool Profile::_internal_foliage_shadows() const {
  return foliage_shadows_;
}
inline bool Profile::foliage_shadows() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.foliage_shadows)
  return _internal_foliage_shadows();
}
inline void Profile::_internal_set_foliage_shadows(bool value) {
  
  foliage_shadows_ = value;
}
inline void Profile::set_foliage_shadows(bool value) {
  _internal_set_foliage_shadows(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.foliage_shadows)
}

// bool planar_reflections = 168;
inline void Profile::clear_planar_reflections() {
  planar_reflections_ = false;
}
inline bool Profile::_internal_planar_reflections() const {
  return planar_reflections_;
}
inline bool Profile::planar_reflections() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.planar_reflections)
  return _internal_planar_reflections();
}
inline void Profile::_internal_set_planar_reflections(bool value) {
  
  planar_reflections_ = value;
}
inline void Profile::set_planar_reflections(bool value) {
  _internal_set_planar_reflections(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.planar_reflections)
}

// uint32 volumetric_fog = 169;
inline void Profile::clear_volumetric_fog() {
  volumetric_fog_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::_internal_volumetric_fog() const {
  return volumetric_fog_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::volumetric_fog() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.volumetric_fog)
  return _internal_volumetric_fog();
}
inline void Profile::_internal_set_volumetric_fog(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  volumetric_fog_ = value;
}
inline void Profile::set_volumetric_fog(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_volumetric_fog(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.volumetric_fog)
}

// uint32 screen_space_reflections = 170;
inline void Profile::clear_screen_space_reflections() {
  screen_space_reflections_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::_internal_screen_space_reflections() const {
  return screen_space_reflections_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::screen_space_reflections() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.screen_space_reflections)
  return _internal_screen_space_reflections();
}
inline void Profile::_internal_set_screen_space_reflections(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  screen_space_reflections_ = value;
}
inline void Profile::set_screen_space_reflections(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_screen_space_reflections(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.screen_space_reflections)
}

// uint32 character_texture_detail = 171;
inline void Profile::clear_character_texture_detail() {
  character_texture_detail_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::_internal_character_texture_detail() const {
  return character_texture_detail_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::character_texture_detail() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.character_texture_detail)
  return _internal_character_texture_detail();
}
inline void Profile::_internal_set_character_texture_detail(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  character_texture_detail_ = value;
}
inline void Profile::set_character_texture_detail(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_character_texture_detail(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.character_texture_detail)
}

// uint32 character_detail = 172;
inline void Profile::clear_character_detail() {
  character_detail_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::_internal_character_detail() const {
  return character_detail_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::character_detail() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.character_detail)
  return _internal_character_detail();
}
inline void Profile::_internal_set_character_detail(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  character_detail_ = value;
}
inline void Profile::set_character_detail(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_character_detail(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.character_detail)
}

// uint32 ambient_occlusion_quality = 173;
inline void Profile::clear_ambient_occlusion_quality() {
  ambient_occlusion_quality_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::_internal_ambient_occlusion_quality() const {
  return ambient_occlusion_quality_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::ambient_occlusion_quality() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.ambient_occlusion_quality)
  return _internal_ambient_occlusion_quality();
}
inline void Profile::_internal_set_ambient_occlusion_quality(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ambient_occlusion_quality_ = value;
}
inline void Profile::set_ambient_occlusion_quality(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ambient_occlusion_quality(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.ambient_occlusion_quality)
}

// bool object_motion_blur = 174;
inline void Profile::clear_object_motion_blur() {
  object_motion_blur_ = false;
}
inline bool Profile::_internal_object_motion_blur() const {
  return object_motion_blur_;
}
inline bool Profile::object_motion_blur() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.object_motion_blur)
  return _internal_object_motion_blur();
}
inline void Profile::_internal_set_object_motion_blur(bool value) {
  
  object_motion_blur_ = value;
}
inline void Profile::set_object_motion_blur(bool value) {
  _internal_set_object_motion_blur(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.object_motion_blur)
}

// bool lens_flare = 175;
inline void Profile::clear_lens_flare() {
  lens_flare_ = false;
}
inline bool Profile::_internal_lens_flare() const {
  return lens_flare_;
}
inline bool Profile::lens_flare() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.lens_flare)
  return _internal_lens_flare();
}
inline void Profile::_internal_set_lens_flare(bool value) {
  
  lens_flare_ = value;
}
inline void Profile::set_lens_flare(bool value) {
  _internal_set_lens_flare(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.lens_flare)
}

// bool combat_number_long_format = 176;
inline void Profile::clear_combat_number_long_format() {
  combat_number_long_format_ = false;
}
inline bool Profile::_internal_combat_number_long_format() const {
  return combat_number_long_format_;
}
inline bool Profile::combat_number_long_format() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.combat_number_long_format)
  return _internal_combat_number_long_format();
}
inline void Profile::_internal_set_combat_number_long_format(bool value) {
  
  combat_number_long_format_ = value;
}
inline void Profile::set_combat_number_long_format(bool value) {
  _internal_set_combat_number_long_format(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.combat_number_long_format)
}

// bool show_minimap_legendaries = 177;
inline void Profile::clear_show_minimap_legendaries() {
  show_minimap_legendaries_ = false;
}
inline bool Profile::_internal_show_minimap_legendaries() const {
  return show_minimap_legendaries_;
}
inline bool Profile::show_minimap_legendaries() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.show_minimap_legendaries)
  return _internal_show_minimap_legendaries();
}
inline void Profile::_internal_set_show_minimap_legendaries(bool value) {
  
  show_minimap_legendaries_ = value;
}
inline void Profile::set_show_minimap_legendaries(bool value) {
  _internal_set_show_minimap_legendaries(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.show_minimap_legendaries)
}

// bool use_player_callouts = 178;
inline void Profile::clear_use_player_callouts() {
  use_player_callouts_ = false;
}
inline bool Profile::_internal_use_player_callouts() const {
  return use_player_callouts_;
}
inline bool Profile::use_player_callouts() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.use_player_callouts)
  return _internal_use_player_callouts();
}
inline void Profile::_internal_set_use_player_callouts(bool value) {
  
  use_player_callouts_ = value;
}
inline void Profile::set_use_player_callouts(bool value) {
  _internal_set_use_player_callouts(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.use_player_callouts)
}

// uint32 friend_event_notification_lifetime = 179;
inline void Profile::clear_friend_event_notification_lifetime() {
  friend_event_notification_lifetime_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::_internal_friend_event_notification_lifetime() const {
  return friend_event_notification_lifetime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::friend_event_notification_lifetime() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.friend_event_notification_lifetime)
  return _internal_friend_event_notification_lifetime();
}
inline void Profile::_internal_set_friend_event_notification_lifetime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  friend_event_notification_lifetime_ = value;
}
inline void Profile::set_friend_event_notification_lifetime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_friend_event_notification_lifetime(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.friend_event_notification_lifetime)
}

// uint32 friend_event_notification_frequency = 180;
inline void Profile::clear_friend_event_notification_frequency() {
  friend_event_notification_frequency_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::_internal_friend_event_notification_frequency() const {
  return friend_event_notification_frequency_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::friend_event_notification_frequency() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.friend_event_notification_frequency)
  return _internal_friend_event_notification_frequency();
}
inline void Profile::_internal_set_friend_event_notification_frequency(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  friend_event_notification_frequency_ = value;
}
inline void Profile::set_friend_event_notification_frequency(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_friend_event_notification_frequency(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.friend_event_notification_frequency)
}

// uint32 trade_request_reception_type = 181;
inline void Profile::clear_trade_request_reception_type() {
  trade_request_reception_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::_internal_trade_request_reception_type() const {
  return trade_request_reception_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::trade_request_reception_type() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.trade_request_reception_type)
  return _internal_trade_request_reception_type();
}
inline void Profile::_internal_set_trade_request_reception_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  trade_request_reception_type_ = value;
}
inline void Profile::set_trade_request_reception_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_trade_request_reception_type(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.trade_request_reception_type)
}

// float head_bob_scale = 182;
inline void Profile::clear_head_bob_scale() {
  head_bob_scale_ = 0;
}
inline float Profile::_internal_head_bob_scale() const {
  return head_bob_scale_;
}
inline float Profile::head_bob_scale() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.head_bob_scale)
  return _internal_head_bob_scale();
}
inline void Profile::_internal_set_head_bob_scale(float value) {
  
  head_bob_scale_ = value;
}
inline void Profile::set_head_bob_scale(float value) {
  _internal_set_head_bob_scale(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.head_bob_scale)
}

// bool has_seen_first_boot = 184;
inline void Profile::clear_has_seen_first_boot() {
  has_seen_first_boot_ = false;
}
inline bool Profile::_internal_has_seen_first_boot() const {
  return has_seen_first_boot_;
}
inline bool Profile::has_seen_first_boot() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.has_seen_first_boot)
  return _internal_has_seen_first_boot();
}
inline void Profile::_internal_set_has_seen_first_boot(bool value) {
  
  has_seen_first_boot_ = value;
}
inline void Profile::set_has_seen_first_boot(bool value) {
  _internal_set_has_seen_first_boot(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.has_seen_first_boot)
}

// float subs_cc_size = 189;
inline void Profile::clear_subs_cc_size() {
  subs_cc_size_ = 0;
}
inline float Profile::_internal_subs_cc_size() const {
  return subs_cc_size_;
}
inline float Profile::subs_cc_size() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.subs_cc_size)
  return _internal_subs_cc_size();
}
inline void Profile::_internal_set_subs_cc_size(float value) {
  
  subs_cc_size_ = value;
}
inline void Profile::set_subs_cc_size(float value) {
  _internal_set_subs_cc_size(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.subs_cc_size)
}

// float cc_subs_background_opacity = 190;
inline void Profile::clear_cc_subs_background_opacity() {
  cc_subs_background_opacity_ = 0;
}
inline float Profile::_internal_cc_subs_background_opacity() const {
  return cc_subs_background_opacity_;
}
inline float Profile::cc_subs_background_opacity() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.cc_subs_background_opacity)
  return _internal_cc_subs_background_opacity();
}
inline void Profile::_internal_set_cc_subs_background_opacity(float value) {
  
  cc_subs_background_opacity_ = value;
}
inline void Profile::set_cc_subs_background_opacity(float value) {
  _internal_set_cc_subs_background_opacity(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.cc_subs_background_opacity)
}

// uint32 walking_button_scheme = 191;
inline void Profile::clear_walking_button_scheme() {
  walking_button_scheme_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::_internal_walking_button_scheme() const {
  return walking_button_scheme_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::walking_button_scheme() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.walking_button_scheme)
  return _internal_walking_button_scheme();
}
inline void Profile::_internal_set_walking_button_scheme(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  walking_button_scheme_ = value;
}
inline void Profile::set_walking_button_scheme(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_walking_button_scheme(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.walking_button_scheme)
}

// uint32 driving_button_scheme = 192;
inline void Profile::clear_driving_button_scheme() {
  driving_button_scheme_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::_internal_driving_button_scheme() const {
  return driving_button_scheme_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::driving_button_scheme() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.driving_button_scheme)
  return _internal_driving_button_scheme();
}
inline void Profile::_internal_set_driving_button_scheme(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  driving_button_scheme_ = value;
}
inline void Profile::set_driving_button_scheme(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_driving_button_scheme(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.driving_button_scheme)
}

// uint32 glyph_mode = 193;
inline void Profile::clear_glyph_mode() {
  glyph_mode_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::_internal_glyph_mode() const {
  return glyph_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::glyph_mode() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.glyph_mode)
  return _internal_glyph_mode();
}
inline void Profile::_internal_set_glyph_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  glyph_mode_ = value;
}
inline void Profile::set_glyph_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_glyph_mode(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.glyph_mode)
}

// bool use_MPH = 194;
inline void Profile::clear_use_mph() {
  use_mph_ = false;
}
inline bool Profile::_internal_use_mph() const {
  return use_mph_;
}
inline bool Profile::use_mph() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.use_MPH)
  return _internal_use_mph();
}
inline void Profile::_internal_set_use_mph(bool value) {
  
  use_mph_ = value;
}
inline void Profile::set_use_mph(bool value) {
  _internal_set_use_mph(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.use_MPH)
}

// repeated .OakSave.RegisteredDownloadableEntitlements registered_downloadable_entitlements = 195;
inline int Profile::_internal_registered_downloadable_entitlements_size() const {
  return registered_downloadable_entitlements_.size();
}
inline int Profile::registered_downloadable_entitlements_size() const {
  return _internal_registered_downloadable_entitlements_size();
}
inline ::OakSave::RegisteredDownloadableEntitlements* Profile::mutable_registered_downloadable_entitlements(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.Profile.registered_downloadable_entitlements)
  return registered_downloadable_entitlements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::RegisteredDownloadableEntitlements >*
Profile::mutable_registered_downloadable_entitlements() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.Profile.registered_downloadable_entitlements)
  return &registered_downloadable_entitlements_;
}
inline const ::OakSave::RegisteredDownloadableEntitlements& Profile::_internal_registered_downloadable_entitlements(int index) const {
  return registered_downloadable_entitlements_.Get(index);
}
inline const ::OakSave::RegisteredDownloadableEntitlements& Profile::registered_downloadable_entitlements(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.registered_downloadable_entitlements)
  return _internal_registered_downloadable_entitlements(index);
}
inline ::OakSave::RegisteredDownloadableEntitlements* Profile::_internal_add_registered_downloadable_entitlements() {
  return registered_downloadable_entitlements_.Add();
}
inline ::OakSave::RegisteredDownloadableEntitlements* Profile::add_registered_downloadable_entitlements() {
  // @@protoc_insertion_point(field_add:OakSave.Profile.registered_downloadable_entitlements)
  return _internal_add_registered_downloadable_entitlements();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::RegisteredDownloadableEntitlements >&
Profile::registered_downloadable_entitlements() const {
  // @@protoc_insertion_point(field_list:OakSave.Profile.registered_downloadable_entitlements)
  return registered_downloadable_entitlements_;
}

// repeated string seen_news_items = 196;
inline int Profile::_internal_seen_news_items_size() const {
  return seen_news_items_.size();
}
inline int Profile::seen_news_items_size() const {
  return _internal_seen_news_items_size();
}
inline void Profile::clear_seen_news_items() {
  seen_news_items_.Clear();
}
inline std::string* Profile::add_seen_news_items() {
  // @@protoc_insertion_point(field_add_mutable:OakSave.Profile.seen_news_items)
  return _internal_add_seen_news_items();
}
inline const std::string& Profile::_internal_seen_news_items(int index) const {
  return seen_news_items_.Get(index);
}
inline const std::string& Profile::seen_news_items(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.seen_news_items)
  return _internal_seen_news_items(index);
}
inline std::string* Profile::mutable_seen_news_items(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.Profile.seen_news_items)
  return seen_news_items_.Mutable(index);
}
inline void Profile::set_seen_news_items(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:OakSave.Profile.seen_news_items)
  seen_news_items_.Mutable(index)->assign(value);
}
inline void Profile::set_seen_news_items(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:OakSave.Profile.seen_news_items)
  seen_news_items_.Mutable(index)->assign(std::move(value));
}
inline void Profile::set_seen_news_items(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  seen_news_items_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:OakSave.Profile.seen_news_items)
}
inline void Profile::set_seen_news_items(int index, const char* value, size_t size) {
  seen_news_items_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:OakSave.Profile.seen_news_items)
}
inline std::string* Profile::_internal_add_seen_news_items() {
  return seen_news_items_.Add();
}
inline void Profile::add_seen_news_items(const std::string& value) {
  seen_news_items_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:OakSave.Profile.seen_news_items)
}
inline void Profile::add_seen_news_items(std::string&& value) {
  seen_news_items_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:OakSave.Profile.seen_news_items)
}
inline void Profile::add_seen_news_items(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  seen_news_items_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:OakSave.Profile.seen_news_items)
}
inline void Profile::add_seen_news_items(const char* value, size_t size) {
  seen_news_items_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:OakSave.Profile.seen_news_items)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Profile::seen_news_items() const {
  // @@protoc_insertion_point(field_list:OakSave.Profile.seen_news_items)
  return seen_news_items_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Profile::mutable_seen_news_items() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.Profile.seen_news_items)
  return &seen_news_items_;
}

// bool auto_centering_enabled = 197;
inline void Profile::clear_auto_centering_enabled() {
  auto_centering_enabled_ = false;
}
inline bool Profile::_internal_auto_centering_enabled() const {
  return auto_centering_enabled_;
}
inline bool Profile::auto_centering_enabled() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.auto_centering_enabled)
  return _internal_auto_centering_enabled();
}
inline void Profile::_internal_set_auto_centering_enabled(bool value) {
  
  auto_centering_enabled_ = value;
}
inline void Profile::set_auto_centering_enabled(bool value) {
  _internal_set_auto_centering_enabled(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.auto_centering_enabled)
}

// bool increased_chance_for_subscribers = 198;
inline void Profile::clear_increased_chance_for_subscribers() {
  increased_chance_for_subscribers_ = false;
}
inline bool Profile::_internal_increased_chance_for_subscribers() const {
  return increased_chance_for_subscribers_;
}
inline bool Profile::increased_chance_for_subscribers() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.increased_chance_for_subscribers)
  return _internal_increased_chance_for_subscribers();
}
inline void Profile::_internal_set_increased_chance_for_subscribers(bool value) {
  
  increased_chance_for_subscribers_ = value;
}
inline void Profile::set_increased_chance_for_subscribers(bool value) {
  _internal_set_increased_chance_for_subscribers(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.increased_chance_for_subscribers)
}

// bool rare_chest_event_enabled = 199;
inline void Profile::clear_rare_chest_event_enabled() {
  rare_chest_event_enabled_ = false;
}
inline bool Profile::_internal_rare_chest_event_enabled() const {
  return rare_chest_event_enabled_;
}
inline bool Profile::rare_chest_event_enabled() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.rare_chest_event_enabled)
  return _internal_rare_chest_event_enabled();
}
inline void Profile::_internal_set_rare_chest_event_enabled(bool value) {
  
  rare_chest_event_enabled_ = value;
}
inline void Profile::set_rare_chest_event_enabled(bool value) {
  _internal_set_rare_chest_event_enabled(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.rare_chest_event_enabled)
}

// bool badass_event_enabled = 200;
inline void Profile::clear_badass_event_enabled() {
  badass_event_enabled_ = false;
}
inline bool Profile::_internal_badass_event_enabled() const {
  return badass_event_enabled_;
}
inline bool Profile::badass_event_enabled() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.badass_event_enabled)
  return _internal_badass_event_enabled();
}
inline void Profile::_internal_set_badass_event_enabled(bool value) {
  
  badass_event_enabled_ = value;
}
inline void Profile::set_badass_event_enabled(bool value) {
  _internal_set_badass_event_enabled(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.badass_event_enabled)
}

// bool pinata_event_enabled = 201;
inline void Profile::clear_pinata_event_enabled() {
  pinata_event_enabled_ = false;
}
inline bool Profile::_internal_pinata_event_enabled() const {
  return pinata_event_enabled_;
}
inline bool Profile::pinata_event_enabled() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.pinata_event_enabled)
  return _internal_pinata_event_enabled();
}
inline void Profile::_internal_set_pinata_event_enabled(bool value) {
  
  pinata_event_enabled_ = value;
}
inline void Profile::set_pinata_event_enabled(bool value) {
  _internal_set_pinata_event_enabled(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.pinata_event_enabled)
}

// int32 min_time_between_badass_events = 202;
inline void Profile::clear_min_time_between_badass_events() {
  min_time_between_badass_events_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Profile::_internal_min_time_between_badass_events() const {
  return min_time_between_badass_events_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Profile::min_time_between_badass_events() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.min_time_between_badass_events)
  return _internal_min_time_between_badass_events();
}
inline void Profile::_internal_set_min_time_between_badass_events(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  min_time_between_badass_events_ = value;
}
inline void Profile::set_min_time_between_badass_events(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_min_time_between_badass_events(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.min_time_between_badass_events)
}

// float hud_scale_multiplier = 203;
inline void Profile::clear_hud_scale_multiplier() {
  hud_scale_multiplier_ = 0;
}
inline float Profile::_internal_hud_scale_multiplier() const {
  return hud_scale_multiplier_;
}
inline float Profile::hud_scale_multiplier() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.hud_scale_multiplier)
  return _internal_hud_scale_multiplier();
}
inline void Profile::_internal_set_hud_scale_multiplier(float value) {
  
  hud_scale_multiplier_ = value;
}
inline void Profile::set_hud_scale_multiplier(float value) {
  _internal_set_hud_scale_multiplier(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.hud_scale_multiplier)
}

// bool disable_spatial_audio = 204;
inline void Profile::clear_disable_spatial_audio() {
  disable_spatial_audio_ = false;
}
inline bool Profile::_internal_disable_spatial_audio() const {
  return disable_spatial_audio_;
}
inline bool Profile::disable_spatial_audio() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.disable_spatial_audio)
  return _internal_disable_spatial_audio();
}
inline void Profile::_internal_set_disable_spatial_audio(bool value) {
  
  disable_spatial_audio_ = value;
}
inline void Profile::set_disable_spatial_audio(bool value) {
  _internal_set_disable_spatial_audio(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.disable_spatial_audio)
}

// int32 total_playtime_seconds = 205;
inline void Profile::clear_total_playtime_seconds() {
  total_playtime_seconds_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Profile::_internal_total_playtime_seconds() const {
  return total_playtime_seconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Profile::total_playtime_seconds() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.total_playtime_seconds)
  return _internal_total_playtime_seconds();
}
inline void Profile::_internal_set_total_playtime_seconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_playtime_seconds_ = value;
}
inline void Profile::set_total_playtime_seconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_playtime_seconds(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.total_playtime_seconds)
}

// bool moxxis_drink_event_enabled = 206;
inline void Profile::clear_moxxis_drink_event_enabled() {
  moxxis_drink_event_enabled_ = false;
}
inline bool Profile::_internal_moxxis_drink_event_enabled() const {
  return moxxis_drink_event_enabled_;
}
inline bool Profile::moxxis_drink_event_enabled() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.moxxis_drink_event_enabled)
  return _internal_moxxis_drink_event_enabled();
}
inline void Profile::_internal_set_moxxis_drink_event_enabled(bool value) {
  
  moxxis_drink_event_enabled_ = value;
}
inline void Profile::set_moxxis_drink_event_enabled(bool value) {
  _internal_set_moxxis_drink_event_enabled(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.moxxis_drink_event_enabled)
}

// int32 moxxis_drink_event_bits_product_id = 207;
inline void Profile::clear_moxxis_drink_event_bits_product_id() {
  moxxis_drink_event_bits_product_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Profile::_internal_moxxis_drink_event_bits_product_id() const {
  return moxxis_drink_event_bits_product_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Profile::moxxis_drink_event_bits_product_id() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.moxxis_drink_event_bits_product_id)
  return _internal_moxxis_drink_event_bits_product_id();
}
inline void Profile::_internal_set_moxxis_drink_event_bits_product_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  moxxis_drink_event_bits_product_id_ = value;
}
inline void Profile::set_moxxis_drink_event_bits_product_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_moxxis_drink_event_bits_product_id(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.moxxis_drink_event_bits_product_id)
}

// repeated .OakSave.ChallengeSaveGameData challenge_data = 208;
inline int Profile::_internal_challenge_data_size() const {
  return challenge_data_.size();
}
inline int Profile::challenge_data_size() const {
  return _internal_challenge_data_size();
}
inline ::OakSave::ChallengeSaveGameData* Profile::mutable_challenge_data(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.Profile.challenge_data)
  return challenge_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::ChallengeSaveGameData >*
Profile::mutable_challenge_data() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.Profile.challenge_data)
  return &challenge_data_;
}
inline const ::OakSave::ChallengeSaveGameData& Profile::_internal_challenge_data(int index) const {
  return challenge_data_.Get(index);
}
inline const ::OakSave::ChallengeSaveGameData& Profile::challenge_data(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.challenge_data)
  return _internal_challenge_data(index);
}
inline ::OakSave::ChallengeSaveGameData* Profile::_internal_add_challenge_data() {
  return challenge_data_.Add();
}
inline ::OakSave::ChallengeSaveGameData* Profile::add_challenge_data() {
  // @@protoc_insertion_point(field_add:OakSave.Profile.challenge_data)
  return _internal_add_challenge_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::ChallengeSaveGameData >&
Profile::challenge_data() const {
  // @@protoc_insertion_point(field_list:OakSave.Profile.challenge_data)
  return challenge_data_;
}

// repeated int32 CitizenScienceLevelProgression = 209;
inline int Profile::_internal_citizensciencelevelprogression_size() const {
  return citizensciencelevelprogression_.size();
}
inline int Profile::citizensciencelevelprogression_size() const {
  return _internal_citizensciencelevelprogression_size();
}
inline void Profile::clear_citizensciencelevelprogression() {
  citizensciencelevelprogression_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Profile::_internal_citizensciencelevelprogression(int index) const {
  return citizensciencelevelprogression_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Profile::citizensciencelevelprogression(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.CitizenScienceLevelProgression)
  return _internal_citizensciencelevelprogression(index);
}
inline void Profile::set_citizensciencelevelprogression(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  citizensciencelevelprogression_.Set(index, value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.CitizenScienceLevelProgression)
}
inline void Profile::_internal_add_citizensciencelevelprogression(::PROTOBUF_NAMESPACE_ID::int32 value) {
  citizensciencelevelprogression_.Add(value);
}
inline void Profile::add_citizensciencelevelprogression(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_citizensciencelevelprogression(value);
  // @@protoc_insertion_point(field_add:OakSave.Profile.CitizenScienceLevelProgression)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Profile::_internal_citizensciencelevelprogression() const {
  return citizensciencelevelprogression_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Profile::citizensciencelevelprogression() const {
  // @@protoc_insertion_point(field_list:OakSave.Profile.CitizenScienceLevelProgression)
  return _internal_citizensciencelevelprogression();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Profile::_internal_mutable_citizensciencelevelprogression() {
  return &citizensciencelevelprogression_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Profile::mutable_citizensciencelevelprogression() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.Profile.CitizenScienceLevelProgression)
  return _internal_mutable_citizensciencelevelprogression();
}

// bool default_dead_zone_inner_updated = 210;
inline void Profile::clear_default_dead_zone_inner_updated() {
  default_dead_zone_inner_updated_ = false;
}
inline bool Profile::_internal_default_dead_zone_inner_updated() const {
  return default_dead_zone_inner_updated_;
}
inline bool Profile::default_dead_zone_inner_updated() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.default_dead_zone_inner_updated)
  return _internal_default_dead_zone_inner_updated();
}
inline void Profile::_internal_set_default_dead_zone_inner_updated(bool value) {
  
  default_dead_zone_inner_updated_ = value;
}
inline void Profile::set_default_dead_zone_inner_updated(bool value) {
  _internal_set_default_dead_zone_inner_updated(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.default_dead_zone_inner_updated)
}

// bool disable_event_content = 211;
inline void Profile::clear_disable_event_content() {
  disable_event_content_ = false;
}
inline bool Profile::_internal_disable_event_content() const {
  return disable_event_content_;
}
inline bool Profile::disable_event_content() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.disable_event_content)
  return _internal_disable_event_content();
}
inline void Profile::_internal_set_disable_event_content(bool value) {
  
  disable_event_content_ = value;
}
inline void Profile::set_disable_event_content(bool value) {
  _internal_set_disable_event_content(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.disable_event_content)
}

// uint32 desired_friend_sync_state = 212;
inline void Profile::clear_desired_friend_sync_state() {
  desired_friend_sync_state_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::_internal_desired_friend_sync_state() const {
  return desired_friend_sync_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile::desired_friend_sync_state() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.desired_friend_sync_state)
  return _internal_desired_friend_sync_state();
}
inline void Profile::_internal_set_desired_friend_sync_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  desired_friend_sync_state_ = value;
}
inline void Profile::set_desired_friend_sync_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_desired_friend_sync_state(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.desired_friend_sync_state)
}

// bool needs_shift_first_boot = 213;
inline void Profile::clear_needs_shift_first_boot() {
  needs_shift_first_boot_ = false;
}
inline bool Profile::_internal_needs_shift_first_boot() const {
  return needs_shift_first_boot_;
}
inline bool Profile::needs_shift_first_boot() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.needs_shift_first_boot)
  return _internal_needs_shift_first_boot();
}
inline void Profile::_internal_set_needs_shift_first_boot(bool value) {
  
  needs_shift_first_boot_ = value;
}
inline void Profile::set_needs_shift_first_boot(bool value) {
  _internal_set_needs_shift_first_boot(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.needs_shift_first_boot)
}

// repeated .OakSave.RecentlyMetPlayer recently_met_players = 214;
inline int Profile::_internal_recently_met_players_size() const {
  return recently_met_players_.size();
}
inline int Profile::recently_met_players_size() const {
  return _internal_recently_met_players_size();
}
inline void Profile::clear_recently_met_players() {
  recently_met_players_.Clear();
}
inline ::OakSave::RecentlyMetPlayer* Profile::mutable_recently_met_players(int index) {
  // @@protoc_insertion_point(field_mutable:OakSave.Profile.recently_met_players)
  return recently_met_players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::RecentlyMetPlayer >*
Profile::mutable_recently_met_players() {
  // @@protoc_insertion_point(field_mutable_list:OakSave.Profile.recently_met_players)
  return &recently_met_players_;
}
inline const ::OakSave::RecentlyMetPlayer& Profile::_internal_recently_met_players(int index) const {
  return recently_met_players_.Get(index);
}
inline const ::OakSave::RecentlyMetPlayer& Profile::recently_met_players(int index) const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.recently_met_players)
  return _internal_recently_met_players(index);
}
inline ::OakSave::RecentlyMetPlayer* Profile::_internal_add_recently_met_players() {
  return recently_met_players_.Add();
}
inline ::OakSave::RecentlyMetPlayer* Profile::add_recently_met_players() {
  // @@protoc_insertion_point(field_add:OakSave.Profile.recently_met_players)
  return _internal_add_recently_met_players();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OakSave::RecentlyMetPlayer >&
Profile::recently_met_players() const {
  // @@protoc_insertion_point(field_list:OakSave.Profile.recently_met_players)
  return recently_met_players_;
}

// int32 CitizenScienceActiveBoosterIndex = 215;
inline void Profile::clear_citizenscienceactiveboosterindex() {
  citizenscienceactiveboosterindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Profile::_internal_citizenscienceactiveboosterindex() const {
  return citizenscienceactiveboosterindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Profile::citizenscienceactiveboosterindex() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.CitizenScienceActiveBoosterIndex)
  return _internal_citizenscienceactiveboosterindex();
}
inline void Profile::_internal_set_citizenscienceactiveboosterindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  citizenscienceactiveboosterindex_ = value;
}
inline void Profile::set_citizenscienceactiveboosterindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_citizenscienceactiveboosterindex(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.CitizenScienceActiveBoosterIndex)
}

// float CitizenScienceActiveBoosterRemainingTime = 216;
inline void Profile::clear_citizenscienceactiveboosterremainingtime() {
  citizenscienceactiveboosterremainingtime_ = 0;
}
inline float Profile::_internal_citizenscienceactiveboosterremainingtime() const {
  return citizenscienceactiveboosterremainingtime_;
}
inline float Profile::citizenscienceactiveboosterremainingtime() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.CitizenScienceActiveBoosterRemainingTime)
  return _internal_citizenscienceactiveboosterremainingtime();
}
inline void Profile::_internal_set_citizenscienceactiveboosterremainingtime(float value) {
  
  citizenscienceactiveboosterremainingtime_ = value;
}
inline void Profile::set_citizenscienceactiveboosterremainingtime(float value) {
  _internal_set_citizenscienceactiveboosterremainingtime(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.CitizenScienceActiveBoosterRemainingTime)
}

// float CitizenScienceActiveBoosterTotalTime = 217;
inline void Profile::clear_citizenscienceactiveboostertotaltime() {
  citizenscienceactiveboostertotaltime_ = 0;
}
inline float Profile::_internal_citizenscienceactiveboostertotaltime() const {
  return citizenscienceactiveboostertotaltime_;
}
inline float Profile::citizenscienceactiveboostertotaltime() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.CitizenScienceActiveBoosterTotalTime)
  return _internal_citizenscienceactiveboostertotaltime();
}
inline void Profile::_internal_set_citizenscienceactiveboostertotaltime(float value) {
  
  citizenscienceactiveboostertotaltime_ = value;
}
inline void Profile::set_citizenscienceactiveboostertotaltime(float value) {
  _internal_set_citizenscienceactiveboostertotaltime(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.CitizenScienceActiveBoosterTotalTime)
}

// int32 StreamerPrimaryActiveBoosterIndex = 218;
inline void Profile::clear_streamerprimaryactiveboosterindex() {
  streamerprimaryactiveboosterindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Profile::_internal_streamerprimaryactiveboosterindex() const {
  return streamerprimaryactiveboosterindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Profile::streamerprimaryactiveboosterindex() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.StreamerPrimaryActiveBoosterIndex)
  return _internal_streamerprimaryactiveboosterindex();
}
inline void Profile::_internal_set_streamerprimaryactiveboosterindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  streamerprimaryactiveboosterindex_ = value;
}
inline void Profile::set_streamerprimaryactiveboosterindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_streamerprimaryactiveboosterindex(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.StreamerPrimaryActiveBoosterIndex)
}

// float StreamerPrimaryActiveBoosterRemainingTime = 219;
inline void Profile::clear_streamerprimaryactiveboosterremainingtime() {
  streamerprimaryactiveboosterremainingtime_ = 0;
}
inline float Profile::_internal_streamerprimaryactiveboosterremainingtime() const {
  return streamerprimaryactiveboosterremainingtime_;
}
inline float Profile::streamerprimaryactiveboosterremainingtime() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.StreamerPrimaryActiveBoosterRemainingTime)
  return _internal_streamerprimaryactiveboosterremainingtime();
}
inline void Profile::_internal_set_streamerprimaryactiveboosterremainingtime(float value) {
  
  streamerprimaryactiveboosterremainingtime_ = value;
}
inline void Profile::set_streamerprimaryactiveboosterremainingtime(float value) {
  _internal_set_streamerprimaryactiveboosterremainingtime(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.StreamerPrimaryActiveBoosterRemainingTime)
}

// float StreamerPrimaryActiveBoosterTotalTime = 220;
inline void Profile::clear_streamerprimaryactiveboostertotaltime() {
  streamerprimaryactiveboostertotaltime_ = 0;
}
inline float Profile::_internal_streamerprimaryactiveboostertotaltime() const {
  return streamerprimaryactiveboostertotaltime_;
}
inline float Profile::streamerprimaryactiveboostertotaltime() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.StreamerPrimaryActiveBoosterTotalTime)
  return _internal_streamerprimaryactiveboostertotaltime();
}
inline void Profile::_internal_set_streamerprimaryactiveboostertotaltime(float value) {
  
  streamerprimaryactiveboostertotaltime_ = value;
}
inline void Profile::set_streamerprimaryactiveboostertotaltime(float value) {
  _internal_set_streamerprimaryactiveboostertotaltime(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.StreamerPrimaryActiveBoosterTotalTime)
}

// int32 StreamerSecondaryActiveBoosterIndex = 221;
inline void Profile::clear_streamersecondaryactiveboosterindex() {
  streamersecondaryactiveboosterindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Profile::_internal_streamersecondaryactiveboosterindex() const {
  return streamersecondaryactiveboosterindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Profile::streamersecondaryactiveboosterindex() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.StreamerSecondaryActiveBoosterIndex)
  return _internal_streamersecondaryactiveboosterindex();
}
inline void Profile::_internal_set_streamersecondaryactiveboosterindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  streamersecondaryactiveboosterindex_ = value;
}
inline void Profile::set_streamersecondaryactiveboosterindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_streamersecondaryactiveboosterindex(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.StreamerSecondaryActiveBoosterIndex)
}

// float StreamerSecondaryActiveBoosterRemainingTime = 222;
inline void Profile::clear_streamersecondaryactiveboosterremainingtime() {
  streamersecondaryactiveboosterremainingtime_ = 0;
}
inline float Profile::_internal_streamersecondaryactiveboosterremainingtime() const {
  return streamersecondaryactiveboosterremainingtime_;
}
inline float Profile::streamersecondaryactiveboosterremainingtime() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.StreamerSecondaryActiveBoosterRemainingTime)
  return _internal_streamersecondaryactiveboosterremainingtime();
}
inline void Profile::_internal_set_streamersecondaryactiveboosterremainingtime(float value) {
  
  streamersecondaryactiveboosterremainingtime_ = value;
}
inline void Profile::set_streamersecondaryactiveboosterremainingtime(float value) {
  _internal_set_streamersecondaryactiveboosterremainingtime(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.StreamerSecondaryActiveBoosterRemainingTime)
}

// float StreamerSecondaryActiveBoosterTotalTime = 223;
inline void Profile::clear_streamersecondaryactiveboostertotaltime() {
  streamersecondaryactiveboostertotaltime_ = 0;
}
inline float Profile::_internal_streamersecondaryactiveboostertotaltime() const {
  return streamersecondaryactiveboostertotaltime_;
}
inline float Profile::streamersecondaryactiveboostertotaltime() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.StreamerSecondaryActiveBoosterTotalTime)
  return _internal_streamersecondaryactiveboostertotaltime();
}
inline void Profile::_internal_set_streamersecondaryactiveboostertotaltime(float value) {
  
  streamersecondaryactiveboostertotaltime_ = value;
}
inline void Profile::set_streamersecondaryactiveboostertotaltime(float value) {
  _internal_set_streamersecondaryactiveboostertotaltime(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.StreamerSecondaryActiveBoosterTotalTime)
}

// int32 StreamerBoosterTier = 224;
inline void Profile::clear_streamerboostertier() {
  streamerboostertier_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Profile::_internal_streamerboostertier() const {
  return streamerboostertier_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Profile::streamerboostertier() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.StreamerBoosterTier)
  return _internal_streamerboostertier();
}
inline void Profile::_internal_set_streamerboostertier(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  streamerboostertier_ = value;
}
inline void Profile::set_streamerboostertier(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_streamerboostertier(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.StreamerBoosterTier)
}

// int32 CitizenScienceCSBucksAmount = 226;
inline void Profile::clear_citizensciencecsbucksamount() {
  citizensciencecsbucksamount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Profile::_internal_citizensciencecsbucksamount() const {
  return citizensciencecsbucksamount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Profile::citizensciencecsbucksamount() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.CitizenScienceCSBucksAmount)
  return _internal_citizensciencecsbucksamount();
}
inline void Profile::_internal_set_citizensciencecsbucksamount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  citizensciencecsbucksamount_ = value;
}
inline void Profile::set_citizensciencecsbucksamount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_citizensciencecsbucksamount(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.CitizenScienceCSBucksAmount)
}

// bool bCitizenScienceHasSeenIntroVideo = 227;
inline void Profile::clear_bcitizensciencehasseenintrovideo() {
  bcitizensciencehasseenintrovideo_ = false;
}
inline bool Profile::_internal_bcitizensciencehasseenintrovideo() const {
  return bcitizensciencehasseenintrovideo_;
}
inline bool Profile::bcitizensciencehasseenintrovideo() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.bCitizenScienceHasSeenIntroVideo)
  return _internal_bcitizensciencehasseenintrovideo();
}
inline void Profile::_internal_set_bcitizensciencehasseenintrovideo(bool value) {
  
  bcitizensciencehasseenintrovideo_ = value;
}
inline void Profile::set_bcitizensciencehasseenintrovideo(bool value) {
  _internal_set_bcitizensciencehasseenintrovideo(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.bCitizenScienceHasSeenIntroVideo)
}

// bool bCitizenScienceTutorialDone = 228;
inline void Profile::clear_bcitizensciencetutorialdone() {
  bcitizensciencetutorialdone_ = false;
}
inline bool Profile::_internal_bcitizensciencetutorialdone() const {
  return bcitizensciencetutorialdone_;
}
inline bool Profile::bcitizensciencetutorialdone() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.bCitizenScienceTutorialDone)
  return _internal_bcitizensciencetutorialdone();
}
inline void Profile::_internal_set_bcitizensciencetutorialdone(bool value) {
  
  bcitizensciencetutorialdone_ = value;
}
inline void Profile::set_bcitizensciencetutorialdone(bool value) {
  _internal_set_bcitizensciencetutorialdone(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.bCitizenScienceTutorialDone)
}

// bool fixed_initial_zonemap_rotation = 230;
inline void Profile::clear_fixed_initial_zonemap_rotation() {
  fixed_initial_zonemap_rotation_ = false;
}
inline bool Profile::_internal_fixed_initial_zonemap_rotation() const {
  return fixed_initial_zonemap_rotation_;
}
inline bool Profile::fixed_initial_zonemap_rotation() const {
  // @@protoc_insertion_point(field_get:OakSave.Profile.fixed_initial_zonemap_rotation)
  return _internal_fixed_initial_zonemap_rotation();
}
inline void Profile::_internal_set_fixed_initial_zonemap_rotation(bool value) {
  
  fixed_initial_zonemap_rotation_ = value;
}
inline void Profile::set_fixed_initial_zonemap_rotation(bool value) {
  _internal_set_fixed_initial_zonemap_rotation(value);
  // @@protoc_insertion_point(field_set:OakSave.Profile.fixed_initial_zonemap_rotation)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace OakSave

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_OakProfile_2eproto
