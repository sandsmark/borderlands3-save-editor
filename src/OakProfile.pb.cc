// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OakProfile.proto

#include "OakProfile.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_OakShared_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ChallengeSaveGameData_OakShared_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakProfile_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CrewQuartersDecorationItemSaveGameData_OakProfile_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakProfile_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CrewQuartersRoomItemSaveGameData_OakProfile_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakShared_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameStatSaveGameData_OakShared_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakProfile_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GearSoldByFriendData_OakProfile_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakProfile_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GuardianRankProfileData_OakProfile_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakProfile_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GuardianRankRewardSaveGameData_OakProfile_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakShared_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InventoryCategorySaveData_OakShared_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakProfile_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OakCustomizationSaveGameData_OakProfile_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakProfile_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OakFriendEncounterData_OakProfile_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakProfile_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OakInventoryCustomizationPartInfo_OakProfile_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakProfile_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OakMailItem_OakProfile_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakProfile_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OakProfileLastInventoryFilterInfo_OakProfile_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakProfile_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OakProfileMenuTutorialInfo_OakProfile_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakShared_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OakSDUSaveGameData_OakShared_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakProfile_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlayerInputBinding_Axis_OakProfile_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakProfile_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlayerInputBinding_Axis_Key_OakProfile_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakProfile_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerInputBinding_Button_OakProfile_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakProfile_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PlayerInputBinding_Category_OakProfile_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakProfile_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlayerInputBindings_OakProfile_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakProfile_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Profile_FriendEncountersEntry_OakProfile_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakProfile_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RecentlyMetPlayer_OakProfile_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakShared_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RegisteredDownloadableEntitlements_OakShared_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OakShared_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vec3_OakShared_2eproto;
namespace OakSave {
class PlayerInputBinding_ButtonDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerInputBinding_Button> _instance;
} _PlayerInputBinding_Button_default_instance_;
class PlayerInputBinding_Axis_KeyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerInputBinding_Axis_Key> _instance;
} _PlayerInputBinding_Axis_Key_default_instance_;
class PlayerInputBinding_AxisDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerInputBinding_Axis> _instance;
} _PlayerInputBinding_Axis_default_instance_;
class PlayerInputBinding_CategoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerInputBinding_Category> _instance;
} _PlayerInputBinding_Category_default_instance_;
class PlayerInputBindingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerInputBindings> _instance;
} _PlayerInputBindings_default_instance_;
class OakProfileLastInventoryFilterInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OakProfileLastInventoryFilterInfo> _instance;
} _OakProfileLastInventoryFilterInfo_default_instance_;
class OakProfileMenuTutorialInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OakProfileMenuTutorialInfo> _instance;
} _OakProfileMenuTutorialInfo_default_instance_;
class OakFriendEncounterDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OakFriendEncounterData> _instance;
} _OakFriendEncounterData_default_instance_;
class OakMailItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OakMailItem> _instance;
} _OakMailItem_default_instance_;
class GearSoldByFriendDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GearSoldByFriendData> _instance;
} _GearSoldByFriendData_default_instance_;
class OakCustomizationSaveGameDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OakCustomizationSaveGameData> _instance;
} _OakCustomizationSaveGameData_default_instance_;
class OakInventoryCustomizationPartInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OakInventoryCustomizationPartInfo> _instance;
} _OakInventoryCustomizationPartInfo_default_instance_;
class GuardianRankRewardSaveGameDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GuardianRankRewardSaveGameData> _instance;
} _GuardianRankRewardSaveGameData_default_instance_;
class GuardianRankProfileDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GuardianRankProfileData> _instance;
} _GuardianRankProfileData_default_instance_;
class CrewQuartersDecorationItemSaveGameDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CrewQuartersDecorationItemSaveGameData> _instance;
} _CrewQuartersDecorationItemSaveGameData_default_instance_;
class CrewQuartersRoomItemSaveGameDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CrewQuartersRoomItemSaveGameData> _instance;
} _CrewQuartersRoomItemSaveGameData_default_instance_;
class RecentlyMetPlayerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RecentlyMetPlayer> _instance;
} _RecentlyMetPlayer_default_instance_;
class Profile_FriendEncountersEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Profile_FriendEncountersEntry> _instance;
} _Profile_FriendEncountersEntry_default_instance_;
class ProfileDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Profile> _instance;
} _Profile_default_instance_;
}  // namespace OakSave
static void InitDefaultsscc_info_CrewQuartersDecorationItemSaveGameData_OakProfile_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_CrewQuartersDecorationItemSaveGameData_default_instance_;
    new (ptr) ::OakSave::CrewQuartersDecorationItemSaveGameData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::CrewQuartersDecorationItemSaveGameData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CrewQuartersDecorationItemSaveGameData_OakProfile_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CrewQuartersDecorationItemSaveGameData_OakProfile_2eproto}, {}};

static void InitDefaultsscc_info_CrewQuartersRoomItemSaveGameData_OakProfile_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_CrewQuartersRoomItemSaveGameData_default_instance_;
    new (ptr) ::OakSave::CrewQuartersRoomItemSaveGameData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::CrewQuartersRoomItemSaveGameData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CrewQuartersRoomItemSaveGameData_OakProfile_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CrewQuartersRoomItemSaveGameData_OakProfile_2eproto}, {}};

static void InitDefaultsscc_info_GearSoldByFriendData_OakProfile_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_GearSoldByFriendData_default_instance_;
    new (ptr) ::OakSave::GearSoldByFriendData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::GearSoldByFriendData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GearSoldByFriendData_OakProfile_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GearSoldByFriendData_OakProfile_2eproto}, {}};

static void InitDefaultsscc_info_GuardianRankProfileData_OakProfile_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_GuardianRankProfileData_default_instance_;
    new (ptr) ::OakSave::GuardianRankProfileData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::GuardianRankProfileData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GuardianRankProfileData_OakProfile_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GuardianRankProfileData_OakProfile_2eproto}, {
      &scc_info_GuardianRankRewardSaveGameData_OakProfile_2eproto.base,}};

static void InitDefaultsscc_info_GuardianRankRewardSaveGameData_OakProfile_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_GuardianRankRewardSaveGameData_default_instance_;
    new (ptr) ::OakSave::GuardianRankRewardSaveGameData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::GuardianRankRewardSaveGameData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GuardianRankRewardSaveGameData_OakProfile_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GuardianRankRewardSaveGameData_OakProfile_2eproto}, {}};

static void InitDefaultsscc_info_OakCustomizationSaveGameData_OakProfile_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_OakCustomizationSaveGameData_default_instance_;
    new (ptr) ::OakSave::OakCustomizationSaveGameData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::OakCustomizationSaveGameData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OakCustomizationSaveGameData_OakProfile_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OakCustomizationSaveGameData_OakProfile_2eproto}, {}};

static void InitDefaultsscc_info_OakFriendEncounterData_OakProfile_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_OakFriendEncounterData_default_instance_;
    new (ptr) ::OakSave::OakFriendEncounterData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::OakFriendEncounterData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OakFriendEncounterData_OakProfile_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OakFriendEncounterData_OakProfile_2eproto}, {}};

static void InitDefaultsscc_info_OakInventoryCustomizationPartInfo_OakProfile_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_OakInventoryCustomizationPartInfo_default_instance_;
    new (ptr) ::OakSave::OakInventoryCustomizationPartInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::OakInventoryCustomizationPartInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OakInventoryCustomizationPartInfo_OakProfile_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OakInventoryCustomizationPartInfo_OakProfile_2eproto}, {}};

static void InitDefaultsscc_info_OakMailItem_OakProfile_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_OakMailItem_default_instance_;
    new (ptr) ::OakSave::OakMailItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::OakMailItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OakMailItem_OakProfile_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OakMailItem_OakProfile_2eproto}, {}};

static void InitDefaultsscc_info_OakProfileLastInventoryFilterInfo_OakProfile_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_OakProfileLastInventoryFilterInfo_default_instance_;
    new (ptr) ::OakSave::OakProfileLastInventoryFilterInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::OakProfileLastInventoryFilterInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OakProfileLastInventoryFilterInfo_OakProfile_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OakProfileLastInventoryFilterInfo_OakProfile_2eproto}, {}};

static void InitDefaultsscc_info_OakProfileMenuTutorialInfo_OakProfile_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_OakProfileMenuTutorialInfo_default_instance_;
    new (ptr) ::OakSave::OakProfileMenuTutorialInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::OakProfileMenuTutorialInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OakProfileMenuTutorialInfo_OakProfile_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OakProfileMenuTutorialInfo_OakProfile_2eproto}, {}};

static void InitDefaultsscc_info_PlayerInputBinding_Axis_OakProfile_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_PlayerInputBinding_Axis_default_instance_;
    new (ptr) ::OakSave::PlayerInputBinding_Axis();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::PlayerInputBinding_Axis::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlayerInputBinding_Axis_OakProfile_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PlayerInputBinding_Axis_OakProfile_2eproto}, {
      &scc_info_PlayerInputBinding_Axis_Key_OakProfile_2eproto.base,}};

static void InitDefaultsscc_info_PlayerInputBinding_Axis_Key_OakProfile_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_PlayerInputBinding_Axis_Key_default_instance_;
    new (ptr) ::OakSave::PlayerInputBinding_Axis_Key();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::PlayerInputBinding_Axis_Key::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlayerInputBinding_Axis_Key_OakProfile_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PlayerInputBinding_Axis_Key_OakProfile_2eproto}, {
      &scc_info_Vec3_OakShared_2eproto.base,}};

static void InitDefaultsscc_info_PlayerInputBinding_Button_OakProfile_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_PlayerInputBinding_Button_default_instance_;
    new (ptr) ::OakSave::PlayerInputBinding_Button();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::PlayerInputBinding_Button::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerInputBinding_Button_OakProfile_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PlayerInputBinding_Button_OakProfile_2eproto}, {}};

static void InitDefaultsscc_info_PlayerInputBinding_Category_OakProfile_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_PlayerInputBinding_Category_default_instance_;
    new (ptr) ::OakSave::PlayerInputBinding_Category();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::PlayerInputBinding_Category::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PlayerInputBinding_Category_OakProfile_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PlayerInputBinding_Category_OakProfile_2eproto}, {
      &scc_info_PlayerInputBinding_Button_OakProfile_2eproto.base,
      &scc_info_PlayerInputBinding_Axis_OakProfile_2eproto.base,}};

static void InitDefaultsscc_info_PlayerInputBindings_OakProfile_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_PlayerInputBindings_default_instance_;
    new (ptr) ::OakSave::PlayerInputBindings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::PlayerInputBindings::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlayerInputBindings_OakProfile_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PlayerInputBindings_OakProfile_2eproto}, {
      &scc_info_PlayerInputBinding_Category_OakProfile_2eproto.base,}};

static void InitDefaultsscc_info_Profile_OakProfile_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_Profile_default_instance_;
    new (ptr) ::OakSave::Profile();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::Profile::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<17> scc_info_Profile_OakProfile_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 17, 0, InitDefaultsscc_info_Profile_OakProfile_2eproto}, {
      &scc_info_PlayerInputBindings_OakProfile_2eproto.base,
      &scc_info_OakProfileLastInventoryFilterInfo_OakProfile_2eproto.base,
      &scc_info_OakProfileMenuTutorialInfo_OakProfile_2eproto.base,
      &scc_info_Profile_FriendEncountersEntry_OakProfile_2eproto.base,
      &scc_info_GameStatSaveGameData_OakShared_2eproto.base,
      &scc_info_InventoryCategorySaveData_OakShared_2eproto.base,
      &scc_info_OakMailItem_OakProfile_2eproto.base,
      &scc_info_GearSoldByFriendData_OakProfile_2eproto.base,
      &scc_info_OakSDUSaveGameData_OakShared_2eproto.base,
      &scc_info_OakCustomizationSaveGameData_OakProfile_2eproto.base,
      &scc_info_OakInventoryCustomizationPartInfo_OakProfile_2eproto.base,
      &scc_info_GuardianRankProfileData_OakProfile_2eproto.base,
      &scc_info_CrewQuartersDecorationItemSaveGameData_OakProfile_2eproto.base,
      &scc_info_CrewQuartersRoomItemSaveGameData_OakProfile_2eproto.base,
      &scc_info_RegisteredDownloadableEntitlements_OakShared_2eproto.base,
      &scc_info_ChallengeSaveGameData_OakShared_2eproto.base,
      &scc_info_RecentlyMetPlayer_OakProfile_2eproto.base,}};

static void InitDefaultsscc_info_Profile_FriendEncountersEntry_OakProfile_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_Profile_FriendEncountersEntry_default_instance_;
    new (ptr) ::OakSave::Profile_FriendEncountersEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::Profile_FriendEncountersEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Profile_FriendEncountersEntry_OakProfile_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Profile_FriendEncountersEntry_OakProfile_2eproto}, {
      &scc_info_OakFriendEncounterData_OakProfile_2eproto.base,}};

static void InitDefaultsscc_info_RecentlyMetPlayer_OakProfile_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::OakSave::_RecentlyMetPlayer_default_instance_;
    new (ptr) ::OakSave::RecentlyMetPlayer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OakSave::RecentlyMetPlayer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RecentlyMetPlayer_OakProfile_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RecentlyMetPlayer_OakProfile_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_OakProfile_2eproto[19];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_OakProfile_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_OakProfile_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_OakProfile_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::PlayerInputBinding_Button, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::PlayerInputBinding_Button, rebind_data_path_),
  PROTOBUF_FIELD_OFFSET(::OakSave::PlayerInputBinding_Button, key_names_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::PlayerInputBinding_Axis_Key, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::PlayerInputBinding_Axis_Key, key_name_),
  PROTOBUF_FIELD_OFFSET(::OakSave::PlayerInputBinding_Axis_Key, scale_3d_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::PlayerInputBinding_Axis, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::PlayerInputBinding_Axis, rebind_data_path_),
  PROTOBUF_FIELD_OFFSET(::OakSave::PlayerInputBinding_Axis, keys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::PlayerInputBinding_Category, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::PlayerInputBinding_Category, category_data_path_),
  PROTOBUF_FIELD_OFFSET(::OakSave::PlayerInputBinding_Category, context_data_path_),
  PROTOBUF_FIELD_OFFSET(::OakSave::PlayerInputBinding_Category, button_bindings_),
  PROTOBUF_FIELD_OFFSET(::OakSave::PlayerInputBinding_Category, axis_bindings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::PlayerInputBindings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::PlayerInputBindings, categories_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::OakProfileLastInventoryFilterInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::OakProfileLastInventoryFilterInfo, slot_type_id_),
  PROTOBUF_FIELD_OFFSET(::OakSave::OakProfileLastInventoryFilterInfo, last_filter_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::OakProfileMenuTutorialInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::OakProfileMenuTutorialInfo, seen_tutorials_),
  PROTOBUF_FIELD_OFFSET(::OakSave::OakProfileMenuTutorialInfo, tutorials_disabled_),
  PROTOBUF_FIELD_OFFSET(::OakSave::OakProfileMenuTutorialInfo, tutorials_allowed_in_non_game_modes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::OakFriendEncounterData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::OakFriendEncounterData, num_encounters_),
  PROTOBUF_FIELD_OFFSET(::OakSave::OakFriendEncounterData, time_last_encounter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::OakMailItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::OakMailItem, mail_item_type_),
  PROTOBUF_FIELD_OFFSET(::OakSave::OakMailItem, sender_display_name_),
  PROTOBUF_FIELD_OFFSET(::OakSave::OakMailItem, subject_),
  PROTOBUF_FIELD_OFFSET(::OakSave::OakMailItem, body_),
  PROTOBUF_FIELD_OFFSET(::OakSave::OakMailItem, gear_serial_number_),
  PROTOBUF_FIELD_OFFSET(::OakSave::OakMailItem, mail_guid_),
  PROTOBUF_FIELD_OFFSET(::OakSave::OakMailItem, date_sent_),
  PROTOBUF_FIELD_OFFSET(::OakSave::OakMailItem, expiration_date_),
  PROTOBUF_FIELD_OFFSET(::OakSave::OakMailItem, from_player_id_),
  PROTOBUF_FIELD_OFFSET(::OakSave::OakMailItem, has_been_read_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::GearSoldByFriendData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::GearSoldByFriendData, gear_serial_number_),
  PROTOBUF_FIELD_OFFSET(::OakSave::GearSoldByFriendData, player_class_identifier_hash_),
  PROTOBUF_FIELD_OFFSET(::OakSave::GearSoldByFriendData, friend_net_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::OakCustomizationSaveGameData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::OakCustomizationSaveGameData, is_new_),
  PROTOBUF_FIELD_OFFSET(::OakSave::OakCustomizationSaveGameData, customization_asset_path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::OakInventoryCustomizationPartInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::OakInventoryCustomizationPartInfo, customization_part_hash_),
  PROTOBUF_FIELD_OFFSET(::OakSave::OakInventoryCustomizationPartInfo, is_new_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::GuardianRankRewardSaveGameData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::GuardianRankRewardSaveGameData, num_tokens_),
  PROTOBUF_FIELD_OFFSET(::OakSave::GuardianRankRewardSaveGameData, reward_data_path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::GuardianRankProfileData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::GuardianRankProfileData, available_tokens_),
  PROTOBUF_FIELD_OFFSET(::OakSave::GuardianRankProfileData, rank_rewards_),
  PROTOBUF_FIELD_OFFSET(::OakSave::GuardianRankProfileData, guardian_rank_),
  PROTOBUF_FIELD_OFFSET(::OakSave::GuardianRankProfileData, guardian_experience_),
  PROTOBUF_FIELD_OFFSET(::OakSave::GuardianRankProfileData, guardian_reward_random_seed_),
  PROTOBUF_FIELD_OFFSET(::OakSave::GuardianRankProfileData, new_guardian_experience_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::CrewQuartersDecorationItemSaveGameData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::CrewQuartersDecorationItemSaveGameData, is_new_),
  PROTOBUF_FIELD_OFFSET(::OakSave::CrewQuartersDecorationItemSaveGameData, decoration_item_asset_path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::CrewQuartersRoomItemSaveGameData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::CrewQuartersRoomItemSaveGameData, is_new_),
  PROTOBUF_FIELD_OFFSET(::OakSave::CrewQuartersRoomItemSaveGameData, room_item_asset_path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::RecentlyMetPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::RecentlyMetPlayer, shift_player_id_),
  PROTOBUF_FIELD_OFFSET(::OakSave::RecentlyMetPlayer, first_party_player_id_),
  PROTOBUF_FIELD_OFFSET(::OakSave::RecentlyMetPlayer, show_shift_player_entry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile_FriendEncountersEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile_FriendEncountersEntry, key_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile_FriendEncountersEntry, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, enable_aim_assist_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, gamepad_invert_look_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, gamepad_invert_turn_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, gamepad_invert_move_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, gamepad_invert_strafe_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, enable_vibration_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, invert_mouse_pitch_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, enable_mouse_smoothing_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, mouse_scale_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, show_damage_numbers_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, show_damage_number_icons_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, enable_training_messages_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, show_text_chat_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, center_crosshair_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, toggle_sprint_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, toggle_crouch_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, censor_content_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, music_volume_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, sound_effects_volume_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, vo_volume_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, voice_volume_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, enable_optional_vo_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, push_to_talk_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, enable_controller_audio_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, speaker_angle_front_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, speaker_angle_side_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, speaker_angle_back_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, speaker_setup_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, mute_audio_on_focus_loss_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, hide_strict_nat_help_dialog_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, player_input_bindings_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, news_hashes_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, last_used_savegame_id_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, gamepad_hip_sensitivity_level_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, gamepad_zoomed_sensitivity_level_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, gamepad_vehicle_sensitivity_level_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, gamepad_movement_dead_zone_x_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, gamepad_movement_dead_zone_y_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, gamepad_look_dead_zone_inner_x_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, gamepad_look_dead_zone_outer_x_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, gamepad_look_dead_zone_inner_y_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, gamepad_look_dead_zone_outer_y_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, gamepad_vehicle_movement_dead_zone_x_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, gamepad_vehicle_movement_dead_zone_y_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, gamepad_vehicle_look_dead_zone_inner_x_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, gamepad_vehicle_look_dead_zone_outer_x_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, gamepad_vehicle_look_dead_zone_inner_y_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, gamepad_vehicle_look_dead_zone_outer_y_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, gamepad_left_dead_zone_inner_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, gamepad_left_dead_zone_outer_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, gamepad_right_dead_zone_inner_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, gamepad_right_dead_zone_outer_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, gamepad_look_axial_dead_zone_scale_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, gamepad_move_axial_dead_zone_scale_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, gamepad_use_advanced_hip_aim_settings_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, gamepad_use_advanced_zoomed_aim_settings_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, gamepad_use_advanced_vehicle_aim_settings_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, gamepad_hip_yaw_rate_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, gamepad_hip_pitch_rate_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, gamepad_hip_extra_yaw_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, gamepad_hip_extra_pitch_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, gamepad_hip_ramp_up_time_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, gamepad_hip_ramp_up_delay_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, gamepad_zoomed_yaw_rate_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, gamepad_zoomed_pitch_rate_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, gamepad_zoomed_extra_yaw_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, gamepad_zoomed_extra_pitch_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, gamepad_zoomed_ramp_up_time_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, gamepad_zoomed_ramp_up_delay_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, gamepad_vehicle_yaw_rate_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, gamepad_vehicle_pitch_rate_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, gamepad_vehicle_extra_yaw_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, gamepad_vehicle_extra_pitch_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, gamepad_vehicle_ramp_up_time_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, gamepad_vehicle_ramp_up_delay_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, ironsight_aim_assist_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, walking_joystick_scheme_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, driving_joystick_scheme_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, mouse_ads_scale_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, mouse_vehicle_scale_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, mouse_ironsight_aim_assist_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, vehicle_input_mode_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, weapon_aim_toggle_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, mantle_requires_button_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, fixed_minimap_rotation_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, map_invert_pitch_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, map_invert_yaw_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, difficulty_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, swap_dual_wield_controls_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, base_fov_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, crosshair_neutral_color_frame_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, crosshair_enemy_color_frame_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, crosshair_ally_color_frame_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, enable_subtitles_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, enable_closed_captions_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, last_status_menu_page_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, inventory_screen_last_filter_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, tutorial_info_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, default_network_type_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, default_invite_type_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, matchmaking_region_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, streaming_service_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, max_cached_friend_events_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, max_cached_friend_statuses_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, friend_events_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, friend_statuses_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, last_whisper_fetch_events_time_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, last_whisper_fetch_statuses_time_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, desired_crossplay_state_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, friend_encounters_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, max_friend_encounter_size_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, profile_stats_data_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, bank_inventory_category_list_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, bank_inventory_list_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, lost_loot_inventory_list_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, npc_mail_items_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, mail_guids_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, unread_mail_guids_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, gear_sold_by_friends_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, profile_sdu_list_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, unlocked_customizations_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, unlocked_inventory_customization_parts_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, guardian_rank_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, unlocked_crew_quarters_decorations_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, unlocked_crew_quarters_rooms_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, enable_mouse_acceleration_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, enable_gamepad_input_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, use_classic_gamepad_input_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, master_volume_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, monitor_display_type_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, graphics_mode_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, frame_rate_limit_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, base_vehicle_fov_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, graphics_quality_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, anisotropic_filtering_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, shadow_quality_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, display_performance_stats_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, texture_detail_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, draw_distance_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, clutter_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, tessellation_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, foliage_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, foliage_shadows_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, planar_reflections_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, volumetric_fog_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, screen_space_reflections_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, character_texture_detail_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, character_detail_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, ambient_occlusion_quality_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, object_motion_blur_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, lens_flare_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, combat_number_long_format_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, show_minimap_legendaries_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, use_player_callouts_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, friend_event_notification_lifetime_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, friend_event_notification_frequency_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, trade_request_reception_type_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, head_bob_scale_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, has_seen_first_boot_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, subs_cc_size_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, cc_subs_background_opacity_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, walking_button_scheme_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, driving_button_scheme_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, glyph_mode_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, use_mph_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, registered_downloadable_entitlements_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, seen_news_items_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, auto_centering_enabled_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, increased_chance_for_subscribers_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, rare_chest_event_enabled_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, badass_event_enabled_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, pinata_event_enabled_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, min_time_between_badass_events_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, hud_scale_multiplier_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, disable_spatial_audio_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, total_playtime_seconds_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, moxxis_drink_event_enabled_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, moxxis_drink_event_bits_product_id_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, challenge_data_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, citizensciencelevelprogression_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, default_dead_zone_inner_updated_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, disable_event_content_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, desired_friend_sync_state_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, needs_shift_first_boot_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, recently_met_players_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, citizenscienceactiveboosterindex_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, citizenscienceactiveboosterremainingtime_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, citizenscienceactiveboostertotaltime_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, streamerprimaryactiveboosterindex_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, streamerprimaryactiveboosterremainingtime_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, streamerprimaryactiveboostertotaltime_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, streamersecondaryactiveboosterindex_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, streamersecondaryactiveboosterremainingtime_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, streamersecondaryactiveboostertotaltime_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, streamerboostertier_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, citizensciencecsbucksamount_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, bcitizensciencehasseenintrovideo_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, bcitizensciencetutorialdone_),
  PROTOBUF_FIELD_OFFSET(::OakSave::Profile, fixed_initial_zonemap_rotation_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::OakSave::PlayerInputBinding_Button)},
  { 7, -1, sizeof(::OakSave::PlayerInputBinding_Axis_Key)},
  { 14, -1, sizeof(::OakSave::PlayerInputBinding_Axis)},
  { 21, -1, sizeof(::OakSave::PlayerInputBinding_Category)},
  { 30, -1, sizeof(::OakSave::PlayerInputBindings)},
  { 36, -1, sizeof(::OakSave::OakProfileLastInventoryFilterInfo)},
  { 43, -1, sizeof(::OakSave::OakProfileMenuTutorialInfo)},
  { 51, -1, sizeof(::OakSave::OakFriendEncounterData)},
  { 58, -1, sizeof(::OakSave::OakMailItem)},
  { 73, -1, sizeof(::OakSave::GearSoldByFriendData)},
  { 81, -1, sizeof(::OakSave::OakCustomizationSaveGameData)},
  { 88, -1, sizeof(::OakSave::OakInventoryCustomizationPartInfo)},
  { 95, -1, sizeof(::OakSave::GuardianRankRewardSaveGameData)},
  { 102, -1, sizeof(::OakSave::GuardianRankProfileData)},
  { 113, -1, sizeof(::OakSave::CrewQuartersDecorationItemSaveGameData)},
  { 120, -1, sizeof(::OakSave::CrewQuartersRoomItemSaveGameData)},
  { 127, -1, sizeof(::OakSave::RecentlyMetPlayer)},
  { 135, -1, sizeof(::OakSave::Profile_FriendEncountersEntry)},
  { 142, -1, sizeof(::OakSave::Profile)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_PlayerInputBinding_Button_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_PlayerInputBinding_Axis_Key_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_PlayerInputBinding_Axis_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_PlayerInputBinding_Category_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_PlayerInputBindings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_OakProfileLastInventoryFilterInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_OakProfileMenuTutorialInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_OakFriendEncounterData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_OakMailItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_GearSoldByFriendData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_OakCustomizationSaveGameData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_OakInventoryCustomizationPartInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_GuardianRankRewardSaveGameData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_GuardianRankProfileData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_CrewQuartersDecorationItemSaveGameData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_CrewQuartersRoomItemSaveGameData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_RecentlyMetPlayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_Profile_FriendEncountersEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::OakSave::_Profile_default_instance_),
};

const char descriptor_table_protodef_OakProfile_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020OakProfile.proto\022\007OakSave\032\017OakShared.p"
  "roto\"H\n\031PlayerInputBinding_Button\022\030\n\020reb"
  "ind_data_path\030\001 \001(\t\022\021\n\tkey_names\030\002 \003(\t\"P"
  "\n\033PlayerInputBinding_Axis_Key\022\020\n\010key_nam"
  "e\030\001 \001(\t\022\037\n\010scale_3d\030\002 \001(\0132\r.OakSave.Vec3"
  "\"g\n\027PlayerInputBinding_Axis\022\030\n\020rebind_da"
  "ta_path\030\001 \001(\t\0222\n\004keys\030\002 \003(\0132$.OakSave.Pl"
  "ayerInputBinding_Axis_Key\"\312\001\n\033PlayerInpu"
  "tBinding_Category\022\032\n\022category_data_path\030"
  "\001 \001(\t\022\031\n\021context_data_path\030\002 \001(\t\022;\n\017butt"
  "on_bindings\030\003 \003(\0132\".OakSave.PlayerInputB"
  "inding_Button\0227\n\raxis_bindings\030\004 \003(\0132 .O"
  "akSave.PlayerInputBinding_Axis\"O\n\023Player"
  "InputBindings\0228\n\ncategories\030\001 \003(\0132$.OakS"
  "ave.PlayerInputBinding_Category\"T\n!OakPr"
  "ofileLastInventoryFilterInfo\022\024\n\014slot_typ"
  "e_id\030\001 \001(\t\022\031\n\021last_filter_index\030\002 \001(\005\"}\n"
  "\032OakProfileMenuTutorialInfo\022\026\n\016seen_tuto"
  "rials\030\001 \003(\t\022\032\n\022tutorials_disabled\030\002 \001(\010\022"
  "+\n#tutorials_allowed_in_non_game_modes\030\003"
  " \001(\010\"M\n\026OakFriendEncounterData\022\026\n\016num_en"
  "counters\030\001 \001(\r\022\033\n\023time_last_encounter\030\002 "
  "\001(\003\"\353\001\n\013OakMailItem\022\026\n\016mail_item_type\030\001 "
  "\001(\r\022\033\n\023sender_display_name\030\002 \001(\t\022\017\n\007subj"
  "ect\030\003 \001(\t\022\014\n\004body\030\004 \001(\t\022\032\n\022gear_serial_n"
  "umber\030\005 \001(\t\022\021\n\tmail_guid\030\006 \001(\t\022\021\n\tdate_s"
  "ent\030\007 \001(\003\022\027\n\017expiration_date\030\010 \001(\003\022\026\n\016fr"
  "om_player_id\030\t \001(\t\022\025\n\rhas_been_read\030\n \001("
  "\010\"o\n\024GearSoldByFriendData\022\032\n\022gear_serial"
  "_number\030\001 \001(\t\022$\n\034player_class_identifier"
  "_hash\030\002 \001(\005\022\025\n\rfriend_net_id\030\003 \001(\t\"P\n\034Oa"
  "kCustomizationSaveGameData\022\016\n\006is_new\030\001 \001"
  "(\010\022 \n\030customization_asset_path\030\002 \001(\t\"T\n!"
  "OakInventoryCustomizationPartInfo\022\037\n\027cus"
  "tomization_part_hash\030\001 \001(\r\022\016\n\006is_new\030\002 \001"
  "(\010\"N\n\036GuardianRankRewardSaveGameData\022\022\n\n"
  "num_tokens\030\001 \001(\005\022\030\n\020reward_data_path\030\002 \001"
  "(\t\"\354\001\n\027GuardianRankProfileData\022\030\n\020availa"
  "ble_tokens\030\001 \001(\005\022=\n\014rank_rewards\030\002 \003(\0132\'"
  ".OakSave.GuardianRankRewardSaveGameData\022"
  "\025\n\rguardian_rank\030\003 \001(\005\022\033\n\023guardian_exper"
  "ience\030\004 \001(\005\022#\n\033guardian_reward_random_se"
  "ed\030\005 \001(\005\022\037\n\027new_guardian_experience\030\006 \001("
  "\003\"\\\n&CrewQuartersDecorationItemSaveGameD"
  "ata\022\016\n\006is_new\030\001 \001(\010\022\"\n\032decoration_item_a"
  "sset_path\030\002 \001(\t\"P\n CrewQuartersRoomItemS"
  "aveGameData\022\016\n\006is_new\030\001 \001(\010\022\034\n\024room_item"
  "_asset_path\030\002 \001(\t\"l\n\021RecentlyMetPlayer\022\027"
  "\n\017shift_player_id\030\001 \001(\t\022\035\n\025first_party_p"
  "layer_id\030\002 \001(\t\022\037\n\027show_shift_player_entr"
  "y\030\003 \001(\010\"\2539\n\007Profile\022\031\n\021enable_aim_assist"
  "\030\001 \001(\010\022\033\n\023gamepad_invert_look\030\002 \001(\010\022\033\n\023g"
  "amepad_invert_turn\030\003 \001(\010\022\033\n\023gamepad_inve"
  "rt_move\030\004 \001(\010\022\035\n\025gamepad_invert_strafe\030\005"
  " \001(\010\022\030\n\020enable_vibration\030\006 \001(\010\022\032\n\022invert"
  "_mouse_pitch\030\007 \001(\010\022\036\n\026enable_mouse_smoot"
  "hing\030\010 \001(\010\022\023\n\013mouse_scale\030\t \001(\002\022\033\n\023show_"
  "damage_numbers\030\n \001(\010\022 \n\030show_damage_numb"
  "er_icons\030\013 \001(\010\022 \n\030enable_training_messag"
  "es\030\014 \001(\010\022\026\n\016show_text_chat\030\r \001(\010\022\030\n\020cent"
  "er_crosshair\030\016 \001(\010\022\025\n\rtoggle_sprint\030\017 \001("
  "\010\022\025\n\rtoggle_crouch\030\020 \001(\010\022\026\n\016censor_conte"
  "nt\030\021 \001(\010\022\024\n\014music_volume\030\022 \001(\002\022\034\n\024sound_"
  "effects_volume\030\023 \001(\002\022\021\n\tvo_volume\030\024 \001(\002\022"
  "\024\n\014voice_volume\030\025 \001(\002\022\032\n\022enable_optional"
  "_vo\030\026 \001(\010\022\024\n\014push_to_talk\030\027 \001(\010\022\037\n\027enabl"
  "e_controller_audio\030\030 \001(\010\022\033\n\023speaker_angl"
  "e_front\030\031 \001(\002\022\032\n\022speaker_angle_side\030\032 \001("
  "\002\022\032\n\022speaker_angle_back\030\033 \001(\002\022\025\n\rspeaker"
  "_setup\030\034 \001(\r\022 \n\030mute_audio_on_focus_loss"
  "\030\035 \001(\010\022#\n\033hide_strict_nat_help_dialog\030\" "
  "\001(\010\022;\n\025player_input_bindings\030# \001(\0132\034.Oak"
  "Save.PlayerInputBindings\022\023\n\013news_hashes\030"
  "$ \003(\r\022\035\n\025last_used_savegame_id\030% \001(\r\022%\n\035"
  "gamepad_hip_sensitivity_level\030& \001(\005\022(\n g"
  "amepad_zoomed_sensitivity_level\030\' \001(\005\022)\n"
  "!gamepad_vehicle_sensitivity_level\030( \001(\005"
  "\022$\n\034gamepad_movement_dead_zone_x\030) \001(\002\022$"
  "\n\034gamepad_movement_dead_zone_y\030* \001(\002\022&\n\036"
  "gamepad_look_dead_zone_inner_x\030+ \001(\002\022&\n\036"
  "gamepad_look_dead_zone_outer_x\030, \001(\002\022&\n\036"
  "gamepad_look_dead_zone_inner_y\030- \001(\002\022&\n\036"
  "gamepad_look_dead_zone_outer_y\030. \001(\002\022,\n$"
  "gamepad_vehicle_movement_dead_zone_x\030/ \001"
  "(\002\022,\n$gamepad_vehicle_movement_dead_zone"
  "_y\0300 \001(\002\022.\n&gamepad_vehicle_look_dead_zo"
  "ne_inner_x\0301 \001(\002\022.\n&gamepad_vehicle_look"
  "_dead_zone_outer_x\0302 \001(\002\022.\n&gamepad_vehi"
  "cle_look_dead_zone_inner_y\0303 \001(\002\022.\n&game"
  "pad_vehicle_look_dead_zone_outer_y\0304 \001(\002"
  "\022$\n\034gamepad_left_dead_zone_inner\0305 \001(\002\022$"
  "\n\034gamepad_left_dead_zone_outer\0306 \001(\002\022%\n\035"
  "gamepad_right_dead_zone_inner\0307 \001(\002\022%\n\035g"
  "amepad_right_dead_zone_outer\0308 \001(\002\022*\n\"ga"
  "mepad_look_axial_dead_zone_scale\0309 \001(\002\022*"
  "\n\"gamepad_move_axial_dead_zone_scale\030: \001"
  "(\002\022-\n%gamepad_use_advanced_hip_aim_setti"
  "ngs\030; \001(\010\0220\n(gamepad_use_advanced_zoomed"
  "_aim_settings\030< \001(\010\0221\n)gamepad_use_advan"
  "ced_vehicle_aim_settings\030= \001(\010\022\034\n\024gamepa"
  "d_hip_yaw_rate\030> \001(\002\022\036\n\026gamepad_hip_pitc"
  "h_rate\030\? \001(\002\022\035\n\025gamepad_hip_extra_yaw\030@ "
  "\001(\002\022\037\n\027gamepad_hip_extra_pitch\030A \001(\002\022 \n\030"
  "gamepad_hip_ramp_up_time\030B \001(\002\022!\n\031gamepa"
  "d_hip_ramp_up_delay\030C \001(\002\022\037\n\027gamepad_zoo"
  "med_yaw_rate\030D \001(\002\022!\n\031gamepad_zoomed_pit"
  "ch_rate\030E \001(\002\022 \n\030gamepad_zoomed_extra_ya"
  "w\030F \001(\002\022\"\n\032gamepad_zoomed_extra_pitch\030G "
  "\001(\002\022#\n\033gamepad_zoomed_ramp_up_time\030H \001(\002"
  "\022$\n\034gamepad_zoomed_ramp_up_delay\030I \001(\002\022 "
  "\n\030gamepad_vehicle_yaw_rate\030J \001(\002\022\"\n\032game"
  "pad_vehicle_pitch_rate\030K \001(\002\022!\n\031gamepad_"
  "vehicle_extra_yaw\030L \001(\002\022#\n\033gamepad_vehic"
  "le_extra_pitch\030M \001(\002\022$\n\034gamepad_vehicle_"
  "ramp_up_time\030N \001(\002\022%\n\035gamepad_vehicle_ra"
  "mp_up_delay\030O \001(\002\022\034\n\024ironsight_aim_assis"
  "t\030P \001(\010\022\037\n\027walking_joystick_scheme\030Q \001(\r"
  "\022\037\n\027driving_joystick_scheme\030R \001(\r\022\027\n\017mou"
  "se_ads_scale\030S \001(\002\022\033\n\023mouse_vehicle_scal"
  "e\030T \001(\002\022\"\n\032mouse_ironsight_aim_assist\030U "
  "\001(\010\022\032\n\022vehicle_input_mode\030V \001(\r\022\031\n\021weapo"
  "n_aim_toggle\030W \001(\010\022\036\n\026mantle_requires_bu"
  "tton\030X \001(\010\022\036\n\026fixed_minimap_rotation\030Y \001"
  "(\010\022\030\n\020map_invert_pitch\030Z \001(\010\022\026\n\016map_inve"
  "rt_yaw\030[ \001(\010\022\022\n\ndifficulty\030\\ \001(\r\022 \n\030swap"
  "_dual_wield_controls\030] \001(\010\022\020\n\010base_fov\030^"
  " \001(\002\022%\n\035crosshair_neutral_color_frame\030_ "
  "\001(\r\022#\n\033crosshair_enemy_color_frame\030` \001(\r"
  "\022\"\n\032crosshair_ally_color_frame\030a \001(\r\022\030\n\020"
  "enable_subtitles\030b \001(\010\022\036\n\026enable_closed_"
  "captions\030c \001(\010\022\035\n\025last_status_menu_page\030"
  "d \001(\t\022P\n\034inventory_screen_last_filter\030e "
  "\003(\0132*.OakSave.OakProfileLastInventoryFil"
  "terInfo\022:\n\rtutorial_info\030f \001(\0132#.OakSave"
  ".OakProfileMenuTutorialInfo\022\034\n\024default_n"
  "etwork_type\030g \001(\r\022\033\n\023default_invite_type"
  "\030h \001(\r\022\032\n\022matchmaking_region\030i \001(\t\022\031\n\021st"
  "reaming_service\030j \001(\r\022 \n\030max_cached_frie"
  "nd_events\030k \001(\005\022\"\n\032max_cached_friend_sta"
  "tuses\030l \001(\005\022\025\n\rfriend_events\030m \003(\t\022\027\n\017fr"
  "iend_statuses\030n \003(\t\022&\n\036last_whisper_fetc"
  "h_events_time\030o \001(\003\022(\n last_whisper_fetc"
  "h_statuses_time\030p \001(\003\022\037\n\027desired_crosspl"
  "ay_state\030q \001(\r\022B\n\021friend_encounters\030\205\001 \003"
  "(\0132&.OakSave.Profile.FriendEncountersEnt"
  "ry\022\"\n\031max_friend_encounter_size\030\206\001 \001(\005\022:"
  "\n\022profile_stats_data\030\207\001 \003(\0132\035.OakSave.Ga"
  "meStatSaveGameData\022I\n\034bank_inventory_cat"
  "egory_list\030\210\001 \003(\0132\".OakSave.InventoryCat"
  "egorySaveData\022\034\n\023bank_inventory_list\030\211\001 "
  "\003(\014\022!\n\030lost_loot_inventory_list\030\212\001 \003(\014\022-"
  "\n\016npc_mail_items\030\213\001 \003(\0132\024.OakSave.OakMai"
  "lItem\022\023\n\nmail_guids\030\214\001 \003(\t\022\032\n\021unread_mai"
  "l_guids\030\215\001 \003(\t\022<\n\024gear_sold_by_friends\030\216"
  "\001 \003(\0132\035.OakSave.GearSoldByFriendData\0226\n\020"
  "profile_sdu_list\030\217\001 \003(\0132\033.OakSave.OakSDU"
  "SaveGameData\022G\n\027unlocked_customizations\030"
  "\220\001 \003(\0132%.OakSave.OakCustomizationSaveGam"
  "eData\022[\n&unlocked_inventory_customizatio"
  "n_parts\030\221\001 \003(\0132*.OakSave.OakInventoryCus"
  "tomizationPartInfo\0228\n\rguardian_rank\030\222\001 \001"
  "(\0132 .OakSave.GuardianRankProfileData\022\\\n\""
  "unlocked_crew_quarters_decorations\030\223\001 \003("
  "\0132/.OakSave.CrewQuartersDecorationItemSa"
  "veGameData\022P\n\034unlocked_crew_quarters_roo"
  "ms\030\224\001 \003(\0132).OakSave.CrewQuartersRoomItem"
  "SaveGameData\022\"\n\031enable_mouse_acceleratio"
  "n\030\226\001 \001(\010\022\035\n\024enable_gamepad_input\030\227\001 \001(\010\022"
  "\"\n\031use_classic_gamepad_input\030\230\001 \001(\010\022\026\n\rm"
  "aster_volume\030\231\001 \001(\002\022\035\n\024monitor_display_t"
  "ype\030\232\001 \001(\r\022\026\n\rgraphics_mode\030\233\001 \001(\r\022\031\n\020fr"
  "ame_rate_limit\030\234\001 \001(\r\022\031\n\020base_vehicle_fo"
  "v\030\235\001 \001(\002\022\031\n\020graphics_quality\030\236\001 \001(\r\022\036\n\025a"
  "nisotropic_filtering\030\237\001 \001(\r\022\027\n\016shadow_qu"
  "ality\030\240\001 \001(\r\022\"\n\031display_performance_stat"
  "s\030\241\001 \001(\r\022\027\n\016texture_detail\030\242\001 \001(\r\022\026\n\rdra"
  "w_distance\030\243\001 \001(\r\022\020\n\007clutter\030\244\001 \001(\r\022\025\n\014t"
  "essellation\030\245\001 \001(\r\022\020\n\007foliage\030\246\001 \001(\r\022\030\n\017"
  "foliage_shadows\030\247\001 \001(\010\022\033\n\022planar_reflect"
  "ions\030\250\001 \001(\010\022\027\n\016volumetric_fog\030\251\001 \001(\r\022!\n\030"
  "screen_space_reflections\030\252\001 \001(\r\022!\n\030chara"
  "cter_texture_detail\030\253\001 \001(\r\022\031\n\020character_"
  "detail\030\254\001 \001(\r\022\"\n\031ambient_occlusion_quali"
  "ty\030\255\001 \001(\r\022\033\n\022object_motion_blur\030\256\001 \001(\010\022\023"
  "\n\nlens_flare\030\257\001 \001(\010\022\"\n\031combat_number_lon"
  "g_format\030\260\001 \001(\010\022!\n\030show_minimap_legendar"
  "ies\030\261\001 \001(\010\022\034\n\023use_player_callouts\030\262\001 \001(\010"
  "\022+\n\"friend_event_notification_lifetime\030\263"
  "\001 \001(\r\022,\n#friend_event_notification_frequ"
  "ency\030\264\001 \001(\r\022%\n\034trade_request_reception_t"
  "ype\030\265\001 \001(\r\022\027\n\016head_bob_scale\030\266\001 \001(\002\022\034\n\023h"
  "as_seen_first_boot\030\270\001 \001(\010\022\025\n\014subs_cc_siz"
  "e\030\275\001 \001(\002\022#\n\032cc_subs_background_opacity\030\276"
  "\001 \001(\002\022\036\n\025walking_button_scheme\030\277\001 \001(\r\022\036\n"
  "\025driving_button_scheme\030\300\001 \001(\r\022\023\n\nglyph_m"
  "ode\030\301\001 \001(\r\022\020\n\007use_MPH\030\302\001 \001(\010\022Z\n$register"
  "ed_downloadable_entitlements\030\303\001 \003(\0132+.Oa"
  "kSave.RegisteredDownloadableEntitlements"
  "\022\030\n\017seen_news_items\030\304\001 \003(\t\022\037\n\026auto_cente"
  "ring_enabled\030\305\001 \001(\010\022)\n increased_chance_"
  "for_subscribers\030\306\001 \001(\010\022!\n\030rare_chest_eve"
  "nt_enabled\030\307\001 \001(\010\022\035\n\024badass_event_enable"
  "d\030\310\001 \001(\010\022\035\n\024pinata_event_enabled\030\311\001 \001(\010\022"
  "\'\n\036min_time_between_badass_events\030\312\001 \001(\005"
  "\022\035\n\024hud_scale_multiplier\030\313\001 \001(\002\022\036\n\025disab"
  "le_spatial_audio\030\314\001 \001(\010\022\037\n\026total_playtim"
  "e_seconds\030\315\001 \001(\005\022#\n\032moxxis_drink_event_e"
  "nabled\030\316\001 \001(\010\022+\n\"moxxis_drink_event_bits"
  "_product_id\030\317\001 \001(\005\0227\n\016challenge_data\030\320\001 "
  "\003(\0132\036.OakSave.ChallengeSaveGameData\022\'\n\036C"
  "itizenScienceLevelProgression\030\321\001 \003(\005\022(\n\037"
  "default_dead_zone_inner_updated\030\322\001 \001(\010\022\036"
  "\n\025disable_event_content\030\323\001 \001(\010\022\"\n\031desire"
  "d_friend_sync_state\030\324\001 \001(\r\022\037\n\026needs_shif"
  "t_first_boot\030\325\001 \001(\010\0229\n\024recently_met_play"
  "ers\030\326\001 \003(\0132\032.OakSave.RecentlyMetPlayer\022)"
  "\n CitizenScienceActiveBoosterIndex\030\327\001 \001("
  "\005\0221\n(CitizenScienceActiveBoosterRemainin"
  "gTime\030\330\001 \001(\002\022-\n$CitizenScienceActiveBoos"
  "terTotalTime\030\331\001 \001(\002\022*\n!StreamerPrimaryAc"
  "tiveBoosterIndex\030\332\001 \001(\005\0222\n)StreamerPrima"
  "ryActiveBoosterRemainingTime\030\333\001 \001(\002\022.\n%S"
  "treamerPrimaryActiveBoosterTotalTime\030\334\001 "
  "\001(\002\022,\n#StreamerSecondaryActiveBoosterInd"
  "ex\030\335\001 \001(\005\0224\n+StreamerSecondaryActiveBoos"
  "terRemainingTime\030\336\001 \001(\002\0220\n\'StreamerSecon"
  "daryActiveBoosterTotalTime\030\337\001 \001(\002\022\034\n\023Str"
  "eamerBoosterTier\030\340\001 \001(\005\022$\n\033CitizenScienc"
  "eCSBucksAmount\030\342\001 \001(\005\022)\n bCitizenScience"
  "HasSeenIntroVideo\030\343\001 \001(\010\022$\n\033bCitizenScie"
  "nceTutorialDone\030\344\001 \001(\010\022\'\n\036fixed_initial_"
  "zonemap_rotation\030\346\001 \001(\010\032T\n\025FriendEncount"
  "ersEntry\022\013\n\003key\030\001 \001(\t\022.\n\005value\030\002 \001(\0132\037.O"
  "akSave.OakFriendEncounterDatab\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_OakProfile_2eproto_deps[1] = {
  &::descriptor_table_OakShared_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_OakProfile_2eproto_sccs[19] = {
  &scc_info_CrewQuartersDecorationItemSaveGameData_OakProfile_2eproto.base,
  &scc_info_CrewQuartersRoomItemSaveGameData_OakProfile_2eproto.base,
  &scc_info_GearSoldByFriendData_OakProfile_2eproto.base,
  &scc_info_GuardianRankProfileData_OakProfile_2eproto.base,
  &scc_info_GuardianRankRewardSaveGameData_OakProfile_2eproto.base,
  &scc_info_OakCustomizationSaveGameData_OakProfile_2eproto.base,
  &scc_info_OakFriendEncounterData_OakProfile_2eproto.base,
  &scc_info_OakInventoryCustomizationPartInfo_OakProfile_2eproto.base,
  &scc_info_OakMailItem_OakProfile_2eproto.base,
  &scc_info_OakProfileLastInventoryFilterInfo_OakProfile_2eproto.base,
  &scc_info_OakProfileMenuTutorialInfo_OakProfile_2eproto.base,
  &scc_info_PlayerInputBinding_Axis_OakProfile_2eproto.base,
  &scc_info_PlayerInputBinding_Axis_Key_OakProfile_2eproto.base,
  &scc_info_PlayerInputBinding_Button_OakProfile_2eproto.base,
  &scc_info_PlayerInputBinding_Category_OakProfile_2eproto.base,
  &scc_info_PlayerInputBindings_OakProfile_2eproto.base,
  &scc_info_Profile_OakProfile_2eproto.base,
  &scc_info_Profile_FriendEncountersEntry_OakProfile_2eproto.base,
  &scc_info_RecentlyMetPlayer_OakProfile_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_OakProfile_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_OakProfile_2eproto = {
  false, false, descriptor_table_protodef_OakProfile_2eproto, "OakProfile.proto", 9357,
  &descriptor_table_OakProfile_2eproto_once, descriptor_table_OakProfile_2eproto_sccs, descriptor_table_OakProfile_2eproto_deps, 19, 1,
  schemas, file_default_instances, TableStruct_OakProfile_2eproto::offsets,
  file_level_metadata_OakProfile_2eproto, 19, file_level_enum_descriptors_OakProfile_2eproto, file_level_service_descriptors_OakProfile_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_OakProfile_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_OakProfile_2eproto)), true);
namespace OakSave {

// ===================================================================

void PlayerInputBinding_Button::InitAsDefaultInstance() {
}
class PlayerInputBinding_Button::_Internal {
 public:
};

PlayerInputBinding_Button::PlayerInputBinding_Button(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  key_names_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.PlayerInputBinding_Button)
}
PlayerInputBinding_Button::PlayerInputBinding_Button(const PlayerInputBinding_Button& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      key_names_(from.key_names_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rebind_data_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rebind_data_path().empty()) {
    rebind_data_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_rebind_data_path(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:OakSave.PlayerInputBinding_Button)
}

void PlayerInputBinding_Button::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlayerInputBinding_Button_OakProfile_2eproto.base);
  rebind_data_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PlayerInputBinding_Button::~PlayerInputBinding_Button() {
  // @@protoc_insertion_point(destructor:OakSave.PlayerInputBinding_Button)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlayerInputBinding_Button::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  rebind_data_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PlayerInputBinding_Button::ArenaDtor(void* object) {
  PlayerInputBinding_Button* _this = reinterpret_cast< PlayerInputBinding_Button* >(object);
  (void)_this;
}
void PlayerInputBinding_Button::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerInputBinding_Button::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerInputBinding_Button& PlayerInputBinding_Button::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerInputBinding_Button_OakProfile_2eproto.base);
  return *internal_default_instance();
}


void PlayerInputBinding_Button::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.PlayerInputBinding_Button)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_names_.Clear();
  rebind_data_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerInputBinding_Button::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string rebind_data_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_rebind_data_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.PlayerInputBinding_Button.rebind_data_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string key_names = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_key_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.PlayerInputBinding_Button.key_names"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerInputBinding_Button::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.PlayerInputBinding_Button)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string rebind_data_path = 1;
  if (this->rebind_data_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rebind_data_path().data(), static_cast<int>(this->_internal_rebind_data_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.PlayerInputBinding_Button.rebind_data_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_rebind_data_path(), target);
  }

  // repeated string key_names = 2;
  for (int i = 0, n = this->_internal_key_names_size(); i < n; i++) {
    const auto& s = this->_internal_key_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.PlayerInputBinding_Button.key_names");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.PlayerInputBinding_Button)
  return target;
}

size_t PlayerInputBinding_Button::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.PlayerInputBinding_Button)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string key_names = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(key_names_.size());
  for (int i = 0, n = key_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      key_names_.Get(i));
  }

  // string rebind_data_path = 1;
  if (this->rebind_data_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rebind_data_path());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerInputBinding_Button::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.PlayerInputBinding_Button)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerInputBinding_Button* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerInputBinding_Button>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.PlayerInputBinding_Button)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.PlayerInputBinding_Button)
    MergeFrom(*source);
  }
}

void PlayerInputBinding_Button::MergeFrom(const PlayerInputBinding_Button& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.PlayerInputBinding_Button)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  key_names_.MergeFrom(from.key_names_);
  if (from.rebind_data_path().size() > 0) {
    _internal_set_rebind_data_path(from._internal_rebind_data_path());
  }
}

void PlayerInputBinding_Button::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.PlayerInputBinding_Button)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInputBinding_Button::CopyFrom(const PlayerInputBinding_Button& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.PlayerInputBinding_Button)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInputBinding_Button::IsInitialized() const {
  return true;
}

void PlayerInputBinding_Button::InternalSwap(PlayerInputBinding_Button* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_names_.InternalSwap(&other->key_names_);
  rebind_data_path_.Swap(&other->rebind_data_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerInputBinding_Button::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlayerInputBinding_Axis_Key::InitAsDefaultInstance() {
  ::OakSave::_PlayerInputBinding_Axis_Key_default_instance_._instance.get_mutable()->scale_3d_ = const_cast< ::OakSave::Vec3*>(
      ::OakSave::Vec3::internal_default_instance());
}
class PlayerInputBinding_Axis_Key::_Internal {
 public:
  static const ::OakSave::Vec3& scale_3d(const PlayerInputBinding_Axis_Key* msg);
};

const ::OakSave::Vec3&
PlayerInputBinding_Axis_Key::_Internal::scale_3d(const PlayerInputBinding_Axis_Key* msg) {
  return *msg->scale_3d_;
}
void PlayerInputBinding_Axis_Key::clear_scale_3d() {
  if (GetArena() == nullptr && scale_3d_ != nullptr) {
    delete scale_3d_;
  }
  scale_3d_ = nullptr;
}
PlayerInputBinding_Axis_Key::PlayerInputBinding_Axis_Key(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.PlayerInputBinding_Axis_Key)
}
PlayerInputBinding_Axis_Key::PlayerInputBinding_Axis_Key(const PlayerInputBinding_Axis_Key& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key_name().empty()) {
    key_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key_name(),
      GetArena());
  }
  if (from._internal_has_scale_3d()) {
    scale_3d_ = new ::OakSave::Vec3(*from.scale_3d_);
  } else {
    scale_3d_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:OakSave.PlayerInputBinding_Axis_Key)
}

void PlayerInputBinding_Axis_Key::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlayerInputBinding_Axis_Key_OakProfile_2eproto.base);
  key_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scale_3d_ = nullptr;
}

PlayerInputBinding_Axis_Key::~PlayerInputBinding_Axis_Key() {
  // @@protoc_insertion_point(destructor:OakSave.PlayerInputBinding_Axis_Key)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlayerInputBinding_Axis_Key::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete scale_3d_;
}

void PlayerInputBinding_Axis_Key::ArenaDtor(void* object) {
  PlayerInputBinding_Axis_Key* _this = reinterpret_cast< PlayerInputBinding_Axis_Key* >(object);
  (void)_this;
}
void PlayerInputBinding_Axis_Key::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerInputBinding_Axis_Key::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerInputBinding_Axis_Key& PlayerInputBinding_Axis_Key::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerInputBinding_Axis_Key_OakProfile_2eproto.base);
  return *internal_default_instance();
}


void PlayerInputBinding_Axis_Key::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.PlayerInputBinding_Axis_Key)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && scale_3d_ != nullptr) {
    delete scale_3d_;
  }
  scale_3d_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerInputBinding_Axis_Key::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.PlayerInputBinding_Axis_Key.key_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OakSave.Vec3 scale_3d = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_scale_3d(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerInputBinding_Axis_Key::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.PlayerInputBinding_Axis_Key)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key_name = 1;
  if (this->key_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key_name().data(), static_cast<int>(this->_internal_key_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.PlayerInputBinding_Axis_Key.key_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key_name(), target);
  }

  // .OakSave.Vec3 scale_3d = 2;
  if (this->has_scale_3d()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::scale_3d(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.PlayerInputBinding_Axis_Key)
  return target;
}

size_t PlayerInputBinding_Axis_Key::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.PlayerInputBinding_Axis_Key)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key_name = 1;
  if (this->key_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key_name());
  }

  // .OakSave.Vec3 scale_3d = 2;
  if (this->has_scale_3d()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scale_3d_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerInputBinding_Axis_Key::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.PlayerInputBinding_Axis_Key)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerInputBinding_Axis_Key* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerInputBinding_Axis_Key>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.PlayerInputBinding_Axis_Key)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.PlayerInputBinding_Axis_Key)
    MergeFrom(*source);
  }
}

void PlayerInputBinding_Axis_Key::MergeFrom(const PlayerInputBinding_Axis_Key& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.PlayerInputBinding_Axis_Key)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key_name().size() > 0) {
    _internal_set_key_name(from._internal_key_name());
  }
  if (from.has_scale_3d()) {
    _internal_mutable_scale_3d()->::OakSave::Vec3::MergeFrom(from._internal_scale_3d());
  }
}

void PlayerInputBinding_Axis_Key::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.PlayerInputBinding_Axis_Key)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInputBinding_Axis_Key::CopyFrom(const PlayerInputBinding_Axis_Key& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.PlayerInputBinding_Axis_Key)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInputBinding_Axis_Key::IsInitialized() const {
  return true;
}

void PlayerInputBinding_Axis_Key::InternalSwap(PlayerInputBinding_Axis_Key* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_name_.Swap(&other->key_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(scale_3d_, other->scale_3d_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerInputBinding_Axis_Key::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlayerInputBinding_Axis::InitAsDefaultInstance() {
}
class PlayerInputBinding_Axis::_Internal {
 public:
};

PlayerInputBinding_Axis::PlayerInputBinding_Axis(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  keys_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.PlayerInputBinding_Axis)
}
PlayerInputBinding_Axis::PlayerInputBinding_Axis(const PlayerInputBinding_Axis& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      keys_(from.keys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rebind_data_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rebind_data_path().empty()) {
    rebind_data_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_rebind_data_path(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:OakSave.PlayerInputBinding_Axis)
}

void PlayerInputBinding_Axis::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlayerInputBinding_Axis_OakProfile_2eproto.base);
  rebind_data_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PlayerInputBinding_Axis::~PlayerInputBinding_Axis() {
  // @@protoc_insertion_point(destructor:OakSave.PlayerInputBinding_Axis)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlayerInputBinding_Axis::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  rebind_data_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PlayerInputBinding_Axis::ArenaDtor(void* object) {
  PlayerInputBinding_Axis* _this = reinterpret_cast< PlayerInputBinding_Axis* >(object);
  (void)_this;
}
void PlayerInputBinding_Axis::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerInputBinding_Axis::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerInputBinding_Axis& PlayerInputBinding_Axis::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerInputBinding_Axis_OakProfile_2eproto.base);
  return *internal_default_instance();
}


void PlayerInputBinding_Axis::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.PlayerInputBinding_Axis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  rebind_data_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerInputBinding_Axis::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string rebind_data_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_rebind_data_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.PlayerInputBinding_Axis.rebind_data_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .OakSave.PlayerInputBinding_Axis_Key keys = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerInputBinding_Axis::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.PlayerInputBinding_Axis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string rebind_data_path = 1;
  if (this->rebind_data_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rebind_data_path().data(), static_cast<int>(this->_internal_rebind_data_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.PlayerInputBinding_Axis.rebind_data_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_rebind_data_path(), target);
  }

  // repeated .OakSave.PlayerInputBinding_Axis_Key keys = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_keys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_keys(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.PlayerInputBinding_Axis)
  return target;
}

size_t PlayerInputBinding_Axis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.PlayerInputBinding_Axis)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .OakSave.PlayerInputBinding_Axis_Key keys = 2;
  total_size += 1UL * this->_internal_keys_size();
  for (const auto& msg : this->keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string rebind_data_path = 1;
  if (this->rebind_data_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rebind_data_path());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerInputBinding_Axis::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.PlayerInputBinding_Axis)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerInputBinding_Axis* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerInputBinding_Axis>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.PlayerInputBinding_Axis)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.PlayerInputBinding_Axis)
    MergeFrom(*source);
  }
}

void PlayerInputBinding_Axis::MergeFrom(const PlayerInputBinding_Axis& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.PlayerInputBinding_Axis)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  if (from.rebind_data_path().size() > 0) {
    _internal_set_rebind_data_path(from._internal_rebind_data_path());
  }
}

void PlayerInputBinding_Axis::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.PlayerInputBinding_Axis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInputBinding_Axis::CopyFrom(const PlayerInputBinding_Axis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.PlayerInputBinding_Axis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInputBinding_Axis::IsInitialized() const {
  return true;
}

void PlayerInputBinding_Axis::InternalSwap(PlayerInputBinding_Axis* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  keys_.InternalSwap(&other->keys_);
  rebind_data_path_.Swap(&other->rebind_data_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerInputBinding_Axis::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlayerInputBinding_Category::InitAsDefaultInstance() {
}
class PlayerInputBinding_Category::_Internal {
 public:
};

PlayerInputBinding_Category::PlayerInputBinding_Category(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  button_bindings_(arena),
  axis_bindings_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.PlayerInputBinding_Category)
}
PlayerInputBinding_Category::PlayerInputBinding_Category(const PlayerInputBinding_Category& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      button_bindings_(from.button_bindings_),
      axis_bindings_(from.axis_bindings_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  category_data_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_category_data_path().empty()) {
    category_data_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_category_data_path(),
      GetArena());
  }
  context_data_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_context_data_path().empty()) {
    context_data_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_context_data_path(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:OakSave.PlayerInputBinding_Category)
}

void PlayerInputBinding_Category::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlayerInputBinding_Category_OakProfile_2eproto.base);
  category_data_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  context_data_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PlayerInputBinding_Category::~PlayerInputBinding_Category() {
  // @@protoc_insertion_point(destructor:OakSave.PlayerInputBinding_Category)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlayerInputBinding_Category::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  category_data_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  context_data_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PlayerInputBinding_Category::ArenaDtor(void* object) {
  PlayerInputBinding_Category* _this = reinterpret_cast< PlayerInputBinding_Category* >(object);
  (void)_this;
}
void PlayerInputBinding_Category::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerInputBinding_Category::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerInputBinding_Category& PlayerInputBinding_Category::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerInputBinding_Category_OakProfile_2eproto.base);
  return *internal_default_instance();
}


void PlayerInputBinding_Category::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.PlayerInputBinding_Category)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  button_bindings_.Clear();
  axis_bindings_.Clear();
  category_data_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  context_data_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerInputBinding_Category::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string category_data_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_category_data_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.PlayerInputBinding_Category.category_data_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string context_data_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_context_data_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.PlayerInputBinding_Category.context_data_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .OakSave.PlayerInputBinding_Button button_bindings = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_button_bindings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .OakSave.PlayerInputBinding_Axis axis_bindings = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_axis_bindings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerInputBinding_Category::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.PlayerInputBinding_Category)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string category_data_path = 1;
  if (this->category_data_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_category_data_path().data(), static_cast<int>(this->_internal_category_data_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.PlayerInputBinding_Category.category_data_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_category_data_path(), target);
  }

  // string context_data_path = 2;
  if (this->context_data_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_context_data_path().data(), static_cast<int>(this->_internal_context_data_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.PlayerInputBinding_Category.context_data_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_context_data_path(), target);
  }

  // repeated .OakSave.PlayerInputBinding_Button button_bindings = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_button_bindings_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_button_bindings(i), target, stream);
  }

  // repeated .OakSave.PlayerInputBinding_Axis axis_bindings = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_axis_bindings_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_axis_bindings(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.PlayerInputBinding_Category)
  return target;
}

size_t PlayerInputBinding_Category::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.PlayerInputBinding_Category)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .OakSave.PlayerInputBinding_Button button_bindings = 3;
  total_size += 1UL * this->_internal_button_bindings_size();
  for (const auto& msg : this->button_bindings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .OakSave.PlayerInputBinding_Axis axis_bindings = 4;
  total_size += 1UL * this->_internal_axis_bindings_size();
  for (const auto& msg : this->axis_bindings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string category_data_path = 1;
  if (this->category_data_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_category_data_path());
  }

  // string context_data_path = 2;
  if (this->context_data_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_context_data_path());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerInputBinding_Category::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.PlayerInputBinding_Category)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerInputBinding_Category* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerInputBinding_Category>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.PlayerInputBinding_Category)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.PlayerInputBinding_Category)
    MergeFrom(*source);
  }
}

void PlayerInputBinding_Category::MergeFrom(const PlayerInputBinding_Category& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.PlayerInputBinding_Category)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  button_bindings_.MergeFrom(from.button_bindings_);
  axis_bindings_.MergeFrom(from.axis_bindings_);
  if (from.category_data_path().size() > 0) {
    _internal_set_category_data_path(from._internal_category_data_path());
  }
  if (from.context_data_path().size() > 0) {
    _internal_set_context_data_path(from._internal_context_data_path());
  }
}

void PlayerInputBinding_Category::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.PlayerInputBinding_Category)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInputBinding_Category::CopyFrom(const PlayerInputBinding_Category& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.PlayerInputBinding_Category)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInputBinding_Category::IsInitialized() const {
  return true;
}

void PlayerInputBinding_Category::InternalSwap(PlayerInputBinding_Category* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  button_bindings_.InternalSwap(&other->button_bindings_);
  axis_bindings_.InternalSwap(&other->axis_bindings_);
  category_data_path_.Swap(&other->category_data_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  context_data_path_.Swap(&other->context_data_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerInputBinding_Category::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlayerInputBindings::InitAsDefaultInstance() {
}
class PlayerInputBindings::_Internal {
 public:
};

PlayerInputBindings::PlayerInputBindings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  categories_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.PlayerInputBindings)
}
PlayerInputBindings::PlayerInputBindings(const PlayerInputBindings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      categories_(from.categories_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:OakSave.PlayerInputBindings)
}

void PlayerInputBindings::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlayerInputBindings_OakProfile_2eproto.base);
}

PlayerInputBindings::~PlayerInputBindings() {
  // @@protoc_insertion_point(destructor:OakSave.PlayerInputBindings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlayerInputBindings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PlayerInputBindings::ArenaDtor(void* object) {
  PlayerInputBindings* _this = reinterpret_cast< PlayerInputBindings* >(object);
  (void)_this;
}
void PlayerInputBindings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerInputBindings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerInputBindings& PlayerInputBindings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerInputBindings_OakProfile_2eproto.base);
  return *internal_default_instance();
}


void PlayerInputBindings::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.PlayerInputBindings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  categories_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerInputBindings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .OakSave.PlayerInputBinding_Category categories = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_categories(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerInputBindings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.PlayerInputBindings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .OakSave.PlayerInputBinding_Category categories = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_categories_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_categories(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.PlayerInputBindings)
  return target;
}

size_t PlayerInputBindings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.PlayerInputBindings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .OakSave.PlayerInputBinding_Category categories = 1;
  total_size += 1UL * this->_internal_categories_size();
  for (const auto& msg : this->categories_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerInputBindings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.PlayerInputBindings)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerInputBindings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerInputBindings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.PlayerInputBindings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.PlayerInputBindings)
    MergeFrom(*source);
  }
}

void PlayerInputBindings::MergeFrom(const PlayerInputBindings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.PlayerInputBindings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  categories_.MergeFrom(from.categories_);
}

void PlayerInputBindings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.PlayerInputBindings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInputBindings::CopyFrom(const PlayerInputBindings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.PlayerInputBindings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInputBindings::IsInitialized() const {
  return true;
}

void PlayerInputBindings::InternalSwap(PlayerInputBindings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  categories_.InternalSwap(&other->categories_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerInputBindings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OakProfileLastInventoryFilterInfo::InitAsDefaultInstance() {
}
class OakProfileLastInventoryFilterInfo::_Internal {
 public:
};

OakProfileLastInventoryFilterInfo::OakProfileLastInventoryFilterInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.OakProfileLastInventoryFilterInfo)
}
OakProfileLastInventoryFilterInfo::OakProfileLastInventoryFilterInfo(const OakProfileLastInventoryFilterInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  slot_type_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_slot_type_id().empty()) {
    slot_type_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_slot_type_id(),
      GetArena());
  }
  last_filter_index_ = from.last_filter_index_;
  // @@protoc_insertion_point(copy_constructor:OakSave.OakProfileLastInventoryFilterInfo)
}

void OakProfileLastInventoryFilterInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OakProfileLastInventoryFilterInfo_OakProfile_2eproto.base);
  slot_type_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_filter_index_ = 0;
}

OakProfileLastInventoryFilterInfo::~OakProfileLastInventoryFilterInfo() {
  // @@protoc_insertion_point(destructor:OakSave.OakProfileLastInventoryFilterInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OakProfileLastInventoryFilterInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  slot_type_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OakProfileLastInventoryFilterInfo::ArenaDtor(void* object) {
  OakProfileLastInventoryFilterInfo* _this = reinterpret_cast< OakProfileLastInventoryFilterInfo* >(object);
  (void)_this;
}
void OakProfileLastInventoryFilterInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OakProfileLastInventoryFilterInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OakProfileLastInventoryFilterInfo& OakProfileLastInventoryFilterInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OakProfileLastInventoryFilterInfo_OakProfile_2eproto.base);
  return *internal_default_instance();
}


void OakProfileLastInventoryFilterInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.OakProfileLastInventoryFilterInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slot_type_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  last_filter_index_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OakProfileLastInventoryFilterInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string slot_type_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_slot_type_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.OakProfileLastInventoryFilterInfo.slot_type_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 last_filter_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          last_filter_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OakProfileLastInventoryFilterInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.OakProfileLastInventoryFilterInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string slot_type_id = 1;
  if (this->slot_type_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_slot_type_id().data(), static_cast<int>(this->_internal_slot_type_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.OakProfileLastInventoryFilterInfo.slot_type_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_slot_type_id(), target);
  }

  // int32 last_filter_index = 2;
  if (this->last_filter_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_last_filter_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.OakProfileLastInventoryFilterInfo)
  return target;
}

size_t OakProfileLastInventoryFilterInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.OakProfileLastInventoryFilterInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string slot_type_id = 1;
  if (this->slot_type_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_slot_type_id());
  }

  // int32 last_filter_index = 2;
  if (this->last_filter_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_last_filter_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OakProfileLastInventoryFilterInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.OakProfileLastInventoryFilterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const OakProfileLastInventoryFilterInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OakProfileLastInventoryFilterInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.OakProfileLastInventoryFilterInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.OakProfileLastInventoryFilterInfo)
    MergeFrom(*source);
  }
}

void OakProfileLastInventoryFilterInfo::MergeFrom(const OakProfileLastInventoryFilterInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.OakProfileLastInventoryFilterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.slot_type_id().size() > 0) {
    _internal_set_slot_type_id(from._internal_slot_type_id());
  }
  if (from.last_filter_index() != 0) {
    _internal_set_last_filter_index(from._internal_last_filter_index());
  }
}

void OakProfileLastInventoryFilterInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.OakProfileLastInventoryFilterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OakProfileLastInventoryFilterInfo::CopyFrom(const OakProfileLastInventoryFilterInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.OakProfileLastInventoryFilterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OakProfileLastInventoryFilterInfo::IsInitialized() const {
  return true;
}

void OakProfileLastInventoryFilterInfo::InternalSwap(OakProfileLastInventoryFilterInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  slot_type_id_.Swap(&other->slot_type_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(last_filter_index_, other->last_filter_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OakProfileLastInventoryFilterInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OakProfileMenuTutorialInfo::InitAsDefaultInstance() {
}
class OakProfileMenuTutorialInfo::_Internal {
 public:
};

OakProfileMenuTutorialInfo::OakProfileMenuTutorialInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  seen_tutorials_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.OakProfileMenuTutorialInfo)
}
OakProfileMenuTutorialInfo::OakProfileMenuTutorialInfo(const OakProfileMenuTutorialInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      seen_tutorials_(from.seen_tutorials_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&tutorials_disabled_, &from.tutorials_disabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&tutorials_allowed_in_non_game_modes_) -
    reinterpret_cast<char*>(&tutorials_disabled_)) + sizeof(tutorials_allowed_in_non_game_modes_));
  // @@protoc_insertion_point(copy_constructor:OakSave.OakProfileMenuTutorialInfo)
}

void OakProfileMenuTutorialInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OakProfileMenuTutorialInfo_OakProfile_2eproto.base);
  ::memset(&tutorials_disabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tutorials_allowed_in_non_game_modes_) -
      reinterpret_cast<char*>(&tutorials_disabled_)) + sizeof(tutorials_allowed_in_non_game_modes_));
}

OakProfileMenuTutorialInfo::~OakProfileMenuTutorialInfo() {
  // @@protoc_insertion_point(destructor:OakSave.OakProfileMenuTutorialInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OakProfileMenuTutorialInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OakProfileMenuTutorialInfo::ArenaDtor(void* object) {
  OakProfileMenuTutorialInfo* _this = reinterpret_cast< OakProfileMenuTutorialInfo* >(object);
  (void)_this;
}
void OakProfileMenuTutorialInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OakProfileMenuTutorialInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OakProfileMenuTutorialInfo& OakProfileMenuTutorialInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OakProfileMenuTutorialInfo_OakProfile_2eproto.base);
  return *internal_default_instance();
}


void OakProfileMenuTutorialInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.OakProfileMenuTutorialInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  seen_tutorials_.Clear();
  ::memset(&tutorials_disabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tutorials_allowed_in_non_game_modes_) -
      reinterpret_cast<char*>(&tutorials_disabled_)) + sizeof(tutorials_allowed_in_non_game_modes_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OakProfileMenuTutorialInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string seen_tutorials = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_seen_tutorials();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.OakProfileMenuTutorialInfo.seen_tutorials"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // bool tutorials_disabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          tutorials_disabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool tutorials_allowed_in_non_game_modes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          tutorials_allowed_in_non_game_modes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OakProfileMenuTutorialInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.OakProfileMenuTutorialInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string seen_tutorials = 1;
  for (int i = 0, n = this->_internal_seen_tutorials_size(); i < n; i++) {
    const auto& s = this->_internal_seen_tutorials(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.OakProfileMenuTutorialInfo.seen_tutorials");
    target = stream->WriteString(1, s, target);
  }

  // bool tutorials_disabled = 2;
  if (this->tutorials_disabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_tutorials_disabled(), target);
  }

  // bool tutorials_allowed_in_non_game_modes = 3;
  if (this->tutorials_allowed_in_non_game_modes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_tutorials_allowed_in_non_game_modes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.OakProfileMenuTutorialInfo)
  return target;
}

size_t OakProfileMenuTutorialInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.OakProfileMenuTutorialInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string seen_tutorials = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(seen_tutorials_.size());
  for (int i = 0, n = seen_tutorials_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      seen_tutorials_.Get(i));
  }

  // bool tutorials_disabled = 2;
  if (this->tutorials_disabled() != 0) {
    total_size += 1 + 1;
  }

  // bool tutorials_allowed_in_non_game_modes = 3;
  if (this->tutorials_allowed_in_non_game_modes() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OakProfileMenuTutorialInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.OakProfileMenuTutorialInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const OakProfileMenuTutorialInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OakProfileMenuTutorialInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.OakProfileMenuTutorialInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.OakProfileMenuTutorialInfo)
    MergeFrom(*source);
  }
}

void OakProfileMenuTutorialInfo::MergeFrom(const OakProfileMenuTutorialInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.OakProfileMenuTutorialInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  seen_tutorials_.MergeFrom(from.seen_tutorials_);
  if (from.tutorials_disabled() != 0) {
    _internal_set_tutorials_disabled(from._internal_tutorials_disabled());
  }
  if (from.tutorials_allowed_in_non_game_modes() != 0) {
    _internal_set_tutorials_allowed_in_non_game_modes(from._internal_tutorials_allowed_in_non_game_modes());
  }
}

void OakProfileMenuTutorialInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.OakProfileMenuTutorialInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OakProfileMenuTutorialInfo::CopyFrom(const OakProfileMenuTutorialInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.OakProfileMenuTutorialInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OakProfileMenuTutorialInfo::IsInitialized() const {
  return true;
}

void OakProfileMenuTutorialInfo::InternalSwap(OakProfileMenuTutorialInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  seen_tutorials_.InternalSwap(&other->seen_tutorials_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OakProfileMenuTutorialInfo, tutorials_allowed_in_non_game_modes_)
      + sizeof(OakProfileMenuTutorialInfo::tutorials_allowed_in_non_game_modes_)
      - PROTOBUF_FIELD_OFFSET(OakProfileMenuTutorialInfo, tutorials_disabled_)>(
          reinterpret_cast<char*>(&tutorials_disabled_),
          reinterpret_cast<char*>(&other->tutorials_disabled_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OakProfileMenuTutorialInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OakFriendEncounterData::InitAsDefaultInstance() {
}
class OakFriendEncounterData::_Internal {
 public:
};

OakFriendEncounterData::OakFriendEncounterData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.OakFriendEncounterData)
}
OakFriendEncounterData::OakFriendEncounterData(const OakFriendEncounterData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&time_last_encounter_, &from.time_last_encounter_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_encounters_) -
    reinterpret_cast<char*>(&time_last_encounter_)) + sizeof(num_encounters_));
  // @@protoc_insertion_point(copy_constructor:OakSave.OakFriendEncounterData)
}

void OakFriendEncounterData::SharedCtor() {
  ::memset(&time_last_encounter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_encounters_) -
      reinterpret_cast<char*>(&time_last_encounter_)) + sizeof(num_encounters_));
}

OakFriendEncounterData::~OakFriendEncounterData() {
  // @@protoc_insertion_point(destructor:OakSave.OakFriendEncounterData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OakFriendEncounterData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OakFriendEncounterData::ArenaDtor(void* object) {
  OakFriendEncounterData* _this = reinterpret_cast< OakFriendEncounterData* >(object);
  (void)_this;
}
void OakFriendEncounterData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OakFriendEncounterData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OakFriendEncounterData& OakFriendEncounterData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OakFriendEncounterData_OakProfile_2eproto.base);
  return *internal_default_instance();
}


void OakFriendEncounterData::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.OakFriendEncounterData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&time_last_encounter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_encounters_) -
      reinterpret_cast<char*>(&time_last_encounter_)) + sizeof(num_encounters_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OakFriendEncounterData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 num_encounters = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          num_encounters_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 time_last_encounter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          time_last_encounter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OakFriendEncounterData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.OakFriendEncounterData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 num_encounters = 1;
  if (this->num_encounters() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_num_encounters(), target);
  }

  // int64 time_last_encounter = 2;
  if (this->time_last_encounter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_time_last_encounter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.OakFriendEncounterData)
  return target;
}

size_t OakFriendEncounterData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.OakFriendEncounterData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 time_last_encounter = 2;
  if (this->time_last_encounter() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time_last_encounter());
  }

  // uint32 num_encounters = 1;
  if (this->num_encounters() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_encounters());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OakFriendEncounterData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.OakFriendEncounterData)
  GOOGLE_DCHECK_NE(&from, this);
  const OakFriendEncounterData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OakFriendEncounterData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.OakFriendEncounterData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.OakFriendEncounterData)
    MergeFrom(*source);
  }
}

void OakFriendEncounterData::MergeFrom(const OakFriendEncounterData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.OakFriendEncounterData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.time_last_encounter() != 0) {
    _internal_set_time_last_encounter(from._internal_time_last_encounter());
  }
  if (from.num_encounters() != 0) {
    _internal_set_num_encounters(from._internal_num_encounters());
  }
}

void OakFriendEncounterData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.OakFriendEncounterData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OakFriendEncounterData::CopyFrom(const OakFriendEncounterData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.OakFriendEncounterData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OakFriendEncounterData::IsInitialized() const {
  return true;
}

void OakFriendEncounterData::InternalSwap(OakFriendEncounterData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OakFriendEncounterData, num_encounters_)
      + sizeof(OakFriendEncounterData::num_encounters_)
      - PROTOBUF_FIELD_OFFSET(OakFriendEncounterData, time_last_encounter_)>(
          reinterpret_cast<char*>(&time_last_encounter_),
          reinterpret_cast<char*>(&other->time_last_encounter_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OakFriendEncounterData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OakMailItem::InitAsDefaultInstance() {
}
class OakMailItem::_Internal {
 public:
};

OakMailItem::OakMailItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.OakMailItem)
}
OakMailItem::OakMailItem(const OakMailItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sender_display_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sender_display_name().empty()) {
    sender_display_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sender_display_name(),
      GetArena());
  }
  subject_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_subject().empty()) {
    subject_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_subject(),
      GetArena());
  }
  body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_body().empty()) {
    body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_body(),
      GetArena());
  }
  gear_serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gear_serial_number().empty()) {
    gear_serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_gear_serial_number(),
      GetArena());
  }
  mail_guid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mail_guid().empty()) {
    mail_guid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_mail_guid(),
      GetArena());
  }
  from_player_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_from_player_id().empty()) {
    from_player_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_from_player_id(),
      GetArena());
  }
  ::memcpy(&mail_item_type_, &from.mail_item_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&expiration_date_) -
    reinterpret_cast<char*>(&mail_item_type_)) + sizeof(expiration_date_));
  // @@protoc_insertion_point(copy_constructor:OakSave.OakMailItem)
}

void OakMailItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OakMailItem_OakProfile_2eproto.base);
  sender_display_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subject_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gear_serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mail_guid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  from_player_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&mail_item_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expiration_date_) -
      reinterpret_cast<char*>(&mail_item_type_)) + sizeof(expiration_date_));
}

OakMailItem::~OakMailItem() {
  // @@protoc_insertion_point(destructor:OakSave.OakMailItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OakMailItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sender_display_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subject_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gear_serial_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mail_guid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  from_player_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OakMailItem::ArenaDtor(void* object) {
  OakMailItem* _this = reinterpret_cast< OakMailItem* >(object);
  (void)_this;
}
void OakMailItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OakMailItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OakMailItem& OakMailItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OakMailItem_OakProfile_2eproto.base);
  return *internal_default_instance();
}


void OakMailItem::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.OakMailItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sender_display_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  subject_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  body_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  gear_serial_number_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mail_guid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  from_player_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&mail_item_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expiration_date_) -
      reinterpret_cast<char*>(&mail_item_type_)) + sizeof(expiration_date_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OakMailItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 mail_item_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          mail_item_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sender_display_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_sender_display_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.OakMailItem.sender_display_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string subject = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_subject();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.OakMailItem.subject"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string body = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_body();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.OakMailItem.body"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string gear_serial_number = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_gear_serial_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.OakMailItem.gear_serial_number"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mail_guid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_mail_guid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.OakMailItem.mail_guid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 date_sent = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          date_sent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 expiration_date = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          expiration_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string from_player_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_from_player_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.OakMailItem.from_player_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool has_been_read = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          has_been_read_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OakMailItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.OakMailItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 mail_item_type = 1;
  if (this->mail_item_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_mail_item_type(), target);
  }

  // string sender_display_name = 2;
  if (this->sender_display_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sender_display_name().data(), static_cast<int>(this->_internal_sender_display_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.OakMailItem.sender_display_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sender_display_name(), target);
  }

  // string subject = 3;
  if (this->subject().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subject().data(), static_cast<int>(this->_internal_subject().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.OakMailItem.subject");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_subject(), target);
  }

  // string body = 4;
  if (this->body().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_body().data(), static_cast<int>(this->_internal_body().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.OakMailItem.body");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_body(), target);
  }

  // string gear_serial_number = 5;
  if (this->gear_serial_number().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gear_serial_number().data(), static_cast<int>(this->_internal_gear_serial_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.OakMailItem.gear_serial_number");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_gear_serial_number(), target);
  }

  // string mail_guid = 6;
  if (this->mail_guid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mail_guid().data(), static_cast<int>(this->_internal_mail_guid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.OakMailItem.mail_guid");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_mail_guid(), target);
  }

  // int64 date_sent = 7;
  if (this->date_sent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_date_sent(), target);
  }

  // int64 expiration_date = 8;
  if (this->expiration_date() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_expiration_date(), target);
  }

  // string from_player_id = 9;
  if (this->from_player_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_from_player_id().data(), static_cast<int>(this->_internal_from_player_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.OakMailItem.from_player_id");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_from_player_id(), target);
  }

  // bool has_been_read = 10;
  if (this->has_been_read() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_has_been_read(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.OakMailItem)
  return target;
}

size_t OakMailItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.OakMailItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sender_display_name = 2;
  if (this->sender_display_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sender_display_name());
  }

  // string subject = 3;
  if (this->subject().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subject());
  }

  // string body = 4;
  if (this->body().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_body());
  }

  // string gear_serial_number = 5;
  if (this->gear_serial_number().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gear_serial_number());
  }

  // string mail_guid = 6;
  if (this->mail_guid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mail_guid());
  }

  // string from_player_id = 9;
  if (this->from_player_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_from_player_id());
  }

  // uint32 mail_item_type = 1;
  if (this->mail_item_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mail_item_type());
  }

  // bool has_been_read = 10;
  if (this->has_been_read() != 0) {
    total_size += 1 + 1;
  }

  // int64 date_sent = 7;
  if (this->date_sent() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_date_sent());
  }

  // int64 expiration_date = 8;
  if (this->expiration_date() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_expiration_date());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OakMailItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.OakMailItem)
  GOOGLE_DCHECK_NE(&from, this);
  const OakMailItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OakMailItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.OakMailItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.OakMailItem)
    MergeFrom(*source);
  }
}

void OakMailItem::MergeFrom(const OakMailItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.OakMailItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sender_display_name().size() > 0) {
    _internal_set_sender_display_name(from._internal_sender_display_name());
  }
  if (from.subject().size() > 0) {
    _internal_set_subject(from._internal_subject());
  }
  if (from.body().size() > 0) {
    _internal_set_body(from._internal_body());
  }
  if (from.gear_serial_number().size() > 0) {
    _internal_set_gear_serial_number(from._internal_gear_serial_number());
  }
  if (from.mail_guid().size() > 0) {
    _internal_set_mail_guid(from._internal_mail_guid());
  }
  if (from.from_player_id().size() > 0) {
    _internal_set_from_player_id(from._internal_from_player_id());
  }
  if (from.mail_item_type() != 0) {
    _internal_set_mail_item_type(from._internal_mail_item_type());
  }
  if (from.has_been_read() != 0) {
    _internal_set_has_been_read(from._internal_has_been_read());
  }
  if (from.date_sent() != 0) {
    _internal_set_date_sent(from._internal_date_sent());
  }
  if (from.expiration_date() != 0) {
    _internal_set_expiration_date(from._internal_expiration_date());
  }
}

void OakMailItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.OakMailItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OakMailItem::CopyFrom(const OakMailItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.OakMailItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OakMailItem::IsInitialized() const {
  return true;
}

void OakMailItem::InternalSwap(OakMailItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sender_display_name_.Swap(&other->sender_display_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  subject_.Swap(&other->subject_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  body_.Swap(&other->body_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  gear_serial_number_.Swap(&other->gear_serial_number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mail_guid_.Swap(&other->mail_guid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  from_player_id_.Swap(&other->from_player_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OakMailItem, expiration_date_)
      + sizeof(OakMailItem::expiration_date_)
      - PROTOBUF_FIELD_OFFSET(OakMailItem, mail_item_type_)>(
          reinterpret_cast<char*>(&mail_item_type_),
          reinterpret_cast<char*>(&other->mail_item_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OakMailItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GearSoldByFriendData::InitAsDefaultInstance() {
}
class GearSoldByFriendData::_Internal {
 public:
};

GearSoldByFriendData::GearSoldByFriendData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.GearSoldByFriendData)
}
GearSoldByFriendData::GearSoldByFriendData(const GearSoldByFriendData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gear_serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gear_serial_number().empty()) {
    gear_serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_gear_serial_number(),
      GetArena());
  }
  friend_net_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_friend_net_id().empty()) {
    friend_net_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_friend_net_id(),
      GetArena());
  }
  player_class_identifier_hash_ = from.player_class_identifier_hash_;
  // @@protoc_insertion_point(copy_constructor:OakSave.GearSoldByFriendData)
}

void GearSoldByFriendData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GearSoldByFriendData_OakProfile_2eproto.base);
  gear_serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  friend_net_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  player_class_identifier_hash_ = 0;
}

GearSoldByFriendData::~GearSoldByFriendData() {
  // @@protoc_insertion_point(destructor:OakSave.GearSoldByFriendData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GearSoldByFriendData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  gear_serial_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  friend_net_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GearSoldByFriendData::ArenaDtor(void* object) {
  GearSoldByFriendData* _this = reinterpret_cast< GearSoldByFriendData* >(object);
  (void)_this;
}
void GearSoldByFriendData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GearSoldByFriendData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GearSoldByFriendData& GearSoldByFriendData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GearSoldByFriendData_OakProfile_2eproto.base);
  return *internal_default_instance();
}


void GearSoldByFriendData::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.GearSoldByFriendData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gear_serial_number_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  friend_net_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  player_class_identifier_hash_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GearSoldByFriendData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string gear_serial_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_gear_serial_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.GearSoldByFriendData.gear_serial_number"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 player_class_identifier_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          player_class_identifier_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string friend_net_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_friend_net_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.GearSoldByFriendData.friend_net_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GearSoldByFriendData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.GearSoldByFriendData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gear_serial_number = 1;
  if (this->gear_serial_number().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gear_serial_number().data(), static_cast<int>(this->_internal_gear_serial_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.GearSoldByFriendData.gear_serial_number");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_gear_serial_number(), target);
  }

  // int32 player_class_identifier_hash = 2;
  if (this->player_class_identifier_hash() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_player_class_identifier_hash(), target);
  }

  // string friend_net_id = 3;
  if (this->friend_net_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_friend_net_id().data(), static_cast<int>(this->_internal_friend_net_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.GearSoldByFriendData.friend_net_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_friend_net_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.GearSoldByFriendData)
  return target;
}

size_t GearSoldByFriendData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.GearSoldByFriendData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string gear_serial_number = 1;
  if (this->gear_serial_number().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gear_serial_number());
  }

  // string friend_net_id = 3;
  if (this->friend_net_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_friend_net_id());
  }

  // int32 player_class_identifier_hash = 2;
  if (this->player_class_identifier_hash() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_player_class_identifier_hash());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GearSoldByFriendData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.GearSoldByFriendData)
  GOOGLE_DCHECK_NE(&from, this);
  const GearSoldByFriendData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GearSoldByFriendData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.GearSoldByFriendData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.GearSoldByFriendData)
    MergeFrom(*source);
  }
}

void GearSoldByFriendData::MergeFrom(const GearSoldByFriendData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.GearSoldByFriendData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gear_serial_number().size() > 0) {
    _internal_set_gear_serial_number(from._internal_gear_serial_number());
  }
  if (from.friend_net_id().size() > 0) {
    _internal_set_friend_net_id(from._internal_friend_net_id());
  }
  if (from.player_class_identifier_hash() != 0) {
    _internal_set_player_class_identifier_hash(from._internal_player_class_identifier_hash());
  }
}

void GearSoldByFriendData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.GearSoldByFriendData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GearSoldByFriendData::CopyFrom(const GearSoldByFriendData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.GearSoldByFriendData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GearSoldByFriendData::IsInitialized() const {
  return true;
}

void GearSoldByFriendData::InternalSwap(GearSoldByFriendData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  gear_serial_number_.Swap(&other->gear_serial_number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  friend_net_id_.Swap(&other->friend_net_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(player_class_identifier_hash_, other->player_class_identifier_hash_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GearSoldByFriendData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OakCustomizationSaveGameData::InitAsDefaultInstance() {
}
class OakCustomizationSaveGameData::_Internal {
 public:
};

OakCustomizationSaveGameData::OakCustomizationSaveGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.OakCustomizationSaveGameData)
}
OakCustomizationSaveGameData::OakCustomizationSaveGameData(const OakCustomizationSaveGameData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  customization_asset_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_customization_asset_path().empty()) {
    customization_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_customization_asset_path(),
      GetArena());
  }
  is_new_ = from.is_new_;
  // @@protoc_insertion_point(copy_constructor:OakSave.OakCustomizationSaveGameData)
}

void OakCustomizationSaveGameData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OakCustomizationSaveGameData_OakProfile_2eproto.base);
  customization_asset_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  is_new_ = false;
}

OakCustomizationSaveGameData::~OakCustomizationSaveGameData() {
  // @@protoc_insertion_point(destructor:OakSave.OakCustomizationSaveGameData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OakCustomizationSaveGameData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  customization_asset_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OakCustomizationSaveGameData::ArenaDtor(void* object) {
  OakCustomizationSaveGameData* _this = reinterpret_cast< OakCustomizationSaveGameData* >(object);
  (void)_this;
}
void OakCustomizationSaveGameData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OakCustomizationSaveGameData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OakCustomizationSaveGameData& OakCustomizationSaveGameData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OakCustomizationSaveGameData_OakProfile_2eproto.base);
  return *internal_default_instance();
}


void OakCustomizationSaveGameData::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.OakCustomizationSaveGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  customization_asset_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  is_new_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OakCustomizationSaveGameData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_new = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_new_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string customization_asset_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_customization_asset_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.OakCustomizationSaveGameData.customization_asset_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OakCustomizationSaveGameData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.OakCustomizationSaveGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_new = 1;
  if (this->is_new() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_new(), target);
  }

  // string customization_asset_path = 2;
  if (this->customization_asset_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_customization_asset_path().data(), static_cast<int>(this->_internal_customization_asset_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.OakCustomizationSaveGameData.customization_asset_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_customization_asset_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.OakCustomizationSaveGameData)
  return target;
}

size_t OakCustomizationSaveGameData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.OakCustomizationSaveGameData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string customization_asset_path = 2;
  if (this->customization_asset_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_customization_asset_path());
  }

  // bool is_new = 1;
  if (this->is_new() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OakCustomizationSaveGameData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.OakCustomizationSaveGameData)
  GOOGLE_DCHECK_NE(&from, this);
  const OakCustomizationSaveGameData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OakCustomizationSaveGameData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.OakCustomizationSaveGameData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.OakCustomizationSaveGameData)
    MergeFrom(*source);
  }
}

void OakCustomizationSaveGameData::MergeFrom(const OakCustomizationSaveGameData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.OakCustomizationSaveGameData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.customization_asset_path().size() > 0) {
    _internal_set_customization_asset_path(from._internal_customization_asset_path());
  }
  if (from.is_new() != 0) {
    _internal_set_is_new(from._internal_is_new());
  }
}

void OakCustomizationSaveGameData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.OakCustomizationSaveGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OakCustomizationSaveGameData::CopyFrom(const OakCustomizationSaveGameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.OakCustomizationSaveGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OakCustomizationSaveGameData::IsInitialized() const {
  return true;
}

void OakCustomizationSaveGameData::InternalSwap(OakCustomizationSaveGameData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  customization_asset_path_.Swap(&other->customization_asset_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(is_new_, other->is_new_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OakCustomizationSaveGameData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OakInventoryCustomizationPartInfo::InitAsDefaultInstance() {
}
class OakInventoryCustomizationPartInfo::_Internal {
 public:
};

OakInventoryCustomizationPartInfo::OakInventoryCustomizationPartInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.OakInventoryCustomizationPartInfo)
}
OakInventoryCustomizationPartInfo::OakInventoryCustomizationPartInfo(const OakInventoryCustomizationPartInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&customization_part_hash_, &from.customization_part_hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_new_) -
    reinterpret_cast<char*>(&customization_part_hash_)) + sizeof(is_new_));
  // @@protoc_insertion_point(copy_constructor:OakSave.OakInventoryCustomizationPartInfo)
}

void OakInventoryCustomizationPartInfo::SharedCtor() {
  ::memset(&customization_part_hash_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_new_) -
      reinterpret_cast<char*>(&customization_part_hash_)) + sizeof(is_new_));
}

OakInventoryCustomizationPartInfo::~OakInventoryCustomizationPartInfo() {
  // @@protoc_insertion_point(destructor:OakSave.OakInventoryCustomizationPartInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OakInventoryCustomizationPartInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OakInventoryCustomizationPartInfo::ArenaDtor(void* object) {
  OakInventoryCustomizationPartInfo* _this = reinterpret_cast< OakInventoryCustomizationPartInfo* >(object);
  (void)_this;
}
void OakInventoryCustomizationPartInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OakInventoryCustomizationPartInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OakInventoryCustomizationPartInfo& OakInventoryCustomizationPartInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OakInventoryCustomizationPartInfo_OakProfile_2eproto.base);
  return *internal_default_instance();
}


void OakInventoryCustomizationPartInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.OakInventoryCustomizationPartInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&customization_part_hash_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_new_) -
      reinterpret_cast<char*>(&customization_part_hash_)) + sizeof(is_new_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OakInventoryCustomizationPartInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 customization_part_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          customization_part_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_new = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_new_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OakInventoryCustomizationPartInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.OakInventoryCustomizationPartInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 customization_part_hash = 1;
  if (this->customization_part_hash() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_customization_part_hash(), target);
  }

  // bool is_new = 2;
  if (this->is_new() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_new(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.OakInventoryCustomizationPartInfo)
  return target;
}

size_t OakInventoryCustomizationPartInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.OakInventoryCustomizationPartInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 customization_part_hash = 1;
  if (this->customization_part_hash() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_customization_part_hash());
  }

  // bool is_new = 2;
  if (this->is_new() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OakInventoryCustomizationPartInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.OakInventoryCustomizationPartInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const OakInventoryCustomizationPartInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OakInventoryCustomizationPartInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.OakInventoryCustomizationPartInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.OakInventoryCustomizationPartInfo)
    MergeFrom(*source);
  }
}

void OakInventoryCustomizationPartInfo::MergeFrom(const OakInventoryCustomizationPartInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.OakInventoryCustomizationPartInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.customization_part_hash() != 0) {
    _internal_set_customization_part_hash(from._internal_customization_part_hash());
  }
  if (from.is_new() != 0) {
    _internal_set_is_new(from._internal_is_new());
  }
}

void OakInventoryCustomizationPartInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.OakInventoryCustomizationPartInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OakInventoryCustomizationPartInfo::CopyFrom(const OakInventoryCustomizationPartInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.OakInventoryCustomizationPartInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OakInventoryCustomizationPartInfo::IsInitialized() const {
  return true;
}

void OakInventoryCustomizationPartInfo::InternalSwap(OakInventoryCustomizationPartInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OakInventoryCustomizationPartInfo, is_new_)
      + sizeof(OakInventoryCustomizationPartInfo::is_new_)
      - PROTOBUF_FIELD_OFFSET(OakInventoryCustomizationPartInfo, customization_part_hash_)>(
          reinterpret_cast<char*>(&customization_part_hash_),
          reinterpret_cast<char*>(&other->customization_part_hash_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OakInventoryCustomizationPartInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GuardianRankRewardSaveGameData::InitAsDefaultInstance() {
}
class GuardianRankRewardSaveGameData::_Internal {
 public:
};

GuardianRankRewardSaveGameData::GuardianRankRewardSaveGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.GuardianRankRewardSaveGameData)
}
GuardianRankRewardSaveGameData::GuardianRankRewardSaveGameData(const GuardianRankRewardSaveGameData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reward_data_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reward_data_path().empty()) {
    reward_data_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_reward_data_path(),
      GetArena());
  }
  num_tokens_ = from.num_tokens_;
  // @@protoc_insertion_point(copy_constructor:OakSave.GuardianRankRewardSaveGameData)
}

void GuardianRankRewardSaveGameData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GuardianRankRewardSaveGameData_OakProfile_2eproto.base);
  reward_data_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  num_tokens_ = 0;
}

GuardianRankRewardSaveGameData::~GuardianRankRewardSaveGameData() {
  // @@protoc_insertion_point(destructor:OakSave.GuardianRankRewardSaveGameData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GuardianRankRewardSaveGameData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  reward_data_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GuardianRankRewardSaveGameData::ArenaDtor(void* object) {
  GuardianRankRewardSaveGameData* _this = reinterpret_cast< GuardianRankRewardSaveGameData* >(object);
  (void)_this;
}
void GuardianRankRewardSaveGameData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GuardianRankRewardSaveGameData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GuardianRankRewardSaveGameData& GuardianRankRewardSaveGameData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GuardianRankRewardSaveGameData_OakProfile_2eproto.base);
  return *internal_default_instance();
}


void GuardianRankRewardSaveGameData::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.GuardianRankRewardSaveGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reward_data_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  num_tokens_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GuardianRankRewardSaveGameData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 num_tokens = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          num_tokens_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reward_data_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_reward_data_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.GuardianRankRewardSaveGameData.reward_data_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GuardianRankRewardSaveGameData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.GuardianRankRewardSaveGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num_tokens = 1;
  if (this->num_tokens() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_num_tokens(), target);
  }

  // string reward_data_path = 2;
  if (this->reward_data_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reward_data_path().data(), static_cast<int>(this->_internal_reward_data_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.GuardianRankRewardSaveGameData.reward_data_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reward_data_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.GuardianRankRewardSaveGameData)
  return target;
}

size_t GuardianRankRewardSaveGameData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.GuardianRankRewardSaveGameData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reward_data_path = 2;
  if (this->reward_data_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reward_data_path());
  }

  // int32 num_tokens = 1;
  if (this->num_tokens() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_tokens());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GuardianRankRewardSaveGameData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.GuardianRankRewardSaveGameData)
  GOOGLE_DCHECK_NE(&from, this);
  const GuardianRankRewardSaveGameData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GuardianRankRewardSaveGameData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.GuardianRankRewardSaveGameData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.GuardianRankRewardSaveGameData)
    MergeFrom(*source);
  }
}

void GuardianRankRewardSaveGameData::MergeFrom(const GuardianRankRewardSaveGameData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.GuardianRankRewardSaveGameData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reward_data_path().size() > 0) {
    _internal_set_reward_data_path(from._internal_reward_data_path());
  }
  if (from.num_tokens() != 0) {
    _internal_set_num_tokens(from._internal_num_tokens());
  }
}

void GuardianRankRewardSaveGameData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.GuardianRankRewardSaveGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuardianRankRewardSaveGameData::CopyFrom(const GuardianRankRewardSaveGameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.GuardianRankRewardSaveGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuardianRankRewardSaveGameData::IsInitialized() const {
  return true;
}

void GuardianRankRewardSaveGameData::InternalSwap(GuardianRankRewardSaveGameData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  reward_data_path_.Swap(&other->reward_data_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(num_tokens_, other->num_tokens_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GuardianRankRewardSaveGameData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GuardianRankProfileData::InitAsDefaultInstance() {
}
class GuardianRankProfileData::_Internal {
 public:
};

GuardianRankProfileData::GuardianRankProfileData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  rank_rewards_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.GuardianRankProfileData)
}
GuardianRankProfileData::GuardianRankProfileData(const GuardianRankProfileData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rank_rewards_(from.rank_rewards_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&available_tokens_, &from.available_tokens_,
    static_cast<size_t>(reinterpret_cast<char*>(&new_guardian_experience_) -
    reinterpret_cast<char*>(&available_tokens_)) + sizeof(new_guardian_experience_));
  // @@protoc_insertion_point(copy_constructor:OakSave.GuardianRankProfileData)
}

void GuardianRankProfileData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GuardianRankProfileData_OakProfile_2eproto.base);
  ::memset(&available_tokens_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&new_guardian_experience_) -
      reinterpret_cast<char*>(&available_tokens_)) + sizeof(new_guardian_experience_));
}

GuardianRankProfileData::~GuardianRankProfileData() {
  // @@protoc_insertion_point(destructor:OakSave.GuardianRankProfileData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GuardianRankProfileData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GuardianRankProfileData::ArenaDtor(void* object) {
  GuardianRankProfileData* _this = reinterpret_cast< GuardianRankProfileData* >(object);
  (void)_this;
}
void GuardianRankProfileData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GuardianRankProfileData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GuardianRankProfileData& GuardianRankProfileData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GuardianRankProfileData_OakProfile_2eproto.base);
  return *internal_default_instance();
}


void GuardianRankProfileData::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.GuardianRankProfileData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rank_rewards_.Clear();
  ::memset(&available_tokens_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&new_guardian_experience_) -
      reinterpret_cast<char*>(&available_tokens_)) + sizeof(new_guardian_experience_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GuardianRankProfileData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 available_tokens = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          available_tokens_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .OakSave.GuardianRankRewardSaveGameData rank_rewards = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rank_rewards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 guardian_rank = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          guardian_rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 guardian_experience = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          guardian_experience_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 guardian_reward_random_seed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          guardian_reward_random_seed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 new_guardian_experience = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          new_guardian_experience_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GuardianRankProfileData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.GuardianRankProfileData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 available_tokens = 1;
  if (this->available_tokens() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_available_tokens(), target);
  }

  // repeated .OakSave.GuardianRankRewardSaveGameData rank_rewards = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rank_rewards_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_rank_rewards(i), target, stream);
  }

  // int32 guardian_rank = 3;
  if (this->guardian_rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_guardian_rank(), target);
  }

  // int32 guardian_experience = 4;
  if (this->guardian_experience() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_guardian_experience(), target);
  }

  // int32 guardian_reward_random_seed = 5;
  if (this->guardian_reward_random_seed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_guardian_reward_random_seed(), target);
  }

  // int64 new_guardian_experience = 6;
  if (this->new_guardian_experience() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_new_guardian_experience(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.GuardianRankProfileData)
  return target;
}

size_t GuardianRankProfileData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.GuardianRankProfileData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .OakSave.GuardianRankRewardSaveGameData rank_rewards = 2;
  total_size += 1UL * this->_internal_rank_rewards_size();
  for (const auto& msg : this->rank_rewards_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 available_tokens = 1;
  if (this->available_tokens() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_available_tokens());
  }

  // int32 guardian_rank = 3;
  if (this->guardian_rank() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_guardian_rank());
  }

  // int32 guardian_experience = 4;
  if (this->guardian_experience() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_guardian_experience());
  }

  // int32 guardian_reward_random_seed = 5;
  if (this->guardian_reward_random_seed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_guardian_reward_random_seed());
  }

  // int64 new_guardian_experience = 6;
  if (this->new_guardian_experience() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_new_guardian_experience());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GuardianRankProfileData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.GuardianRankProfileData)
  GOOGLE_DCHECK_NE(&from, this);
  const GuardianRankProfileData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GuardianRankProfileData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.GuardianRankProfileData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.GuardianRankProfileData)
    MergeFrom(*source);
  }
}

void GuardianRankProfileData::MergeFrom(const GuardianRankProfileData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.GuardianRankProfileData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rank_rewards_.MergeFrom(from.rank_rewards_);
  if (from.available_tokens() != 0) {
    _internal_set_available_tokens(from._internal_available_tokens());
  }
  if (from.guardian_rank() != 0) {
    _internal_set_guardian_rank(from._internal_guardian_rank());
  }
  if (from.guardian_experience() != 0) {
    _internal_set_guardian_experience(from._internal_guardian_experience());
  }
  if (from.guardian_reward_random_seed() != 0) {
    _internal_set_guardian_reward_random_seed(from._internal_guardian_reward_random_seed());
  }
  if (from.new_guardian_experience() != 0) {
    _internal_set_new_guardian_experience(from._internal_new_guardian_experience());
  }
}

void GuardianRankProfileData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.GuardianRankProfileData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuardianRankProfileData::CopyFrom(const GuardianRankProfileData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.GuardianRankProfileData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuardianRankProfileData::IsInitialized() const {
  return true;
}

void GuardianRankProfileData::InternalSwap(GuardianRankProfileData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  rank_rewards_.InternalSwap(&other->rank_rewards_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GuardianRankProfileData, new_guardian_experience_)
      + sizeof(GuardianRankProfileData::new_guardian_experience_)
      - PROTOBUF_FIELD_OFFSET(GuardianRankProfileData, available_tokens_)>(
          reinterpret_cast<char*>(&available_tokens_),
          reinterpret_cast<char*>(&other->available_tokens_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GuardianRankProfileData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CrewQuartersDecorationItemSaveGameData::InitAsDefaultInstance() {
}
class CrewQuartersDecorationItemSaveGameData::_Internal {
 public:
};

CrewQuartersDecorationItemSaveGameData::CrewQuartersDecorationItemSaveGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.CrewQuartersDecorationItemSaveGameData)
}
CrewQuartersDecorationItemSaveGameData::CrewQuartersDecorationItemSaveGameData(const CrewQuartersDecorationItemSaveGameData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  decoration_item_asset_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_decoration_item_asset_path().empty()) {
    decoration_item_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_decoration_item_asset_path(),
      GetArena());
  }
  is_new_ = from.is_new_;
  // @@protoc_insertion_point(copy_constructor:OakSave.CrewQuartersDecorationItemSaveGameData)
}

void CrewQuartersDecorationItemSaveGameData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CrewQuartersDecorationItemSaveGameData_OakProfile_2eproto.base);
  decoration_item_asset_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  is_new_ = false;
}

CrewQuartersDecorationItemSaveGameData::~CrewQuartersDecorationItemSaveGameData() {
  // @@protoc_insertion_point(destructor:OakSave.CrewQuartersDecorationItemSaveGameData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CrewQuartersDecorationItemSaveGameData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  decoration_item_asset_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CrewQuartersDecorationItemSaveGameData::ArenaDtor(void* object) {
  CrewQuartersDecorationItemSaveGameData* _this = reinterpret_cast< CrewQuartersDecorationItemSaveGameData* >(object);
  (void)_this;
}
void CrewQuartersDecorationItemSaveGameData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CrewQuartersDecorationItemSaveGameData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CrewQuartersDecorationItemSaveGameData& CrewQuartersDecorationItemSaveGameData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CrewQuartersDecorationItemSaveGameData_OakProfile_2eproto.base);
  return *internal_default_instance();
}


void CrewQuartersDecorationItemSaveGameData::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.CrewQuartersDecorationItemSaveGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  decoration_item_asset_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  is_new_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CrewQuartersDecorationItemSaveGameData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_new = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_new_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string decoration_item_asset_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_decoration_item_asset_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.CrewQuartersDecorationItemSaveGameData.decoration_item_asset_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CrewQuartersDecorationItemSaveGameData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.CrewQuartersDecorationItemSaveGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_new = 1;
  if (this->is_new() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_new(), target);
  }

  // string decoration_item_asset_path = 2;
  if (this->decoration_item_asset_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_decoration_item_asset_path().data(), static_cast<int>(this->_internal_decoration_item_asset_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.CrewQuartersDecorationItemSaveGameData.decoration_item_asset_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_decoration_item_asset_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.CrewQuartersDecorationItemSaveGameData)
  return target;
}

size_t CrewQuartersDecorationItemSaveGameData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.CrewQuartersDecorationItemSaveGameData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string decoration_item_asset_path = 2;
  if (this->decoration_item_asset_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_decoration_item_asset_path());
  }

  // bool is_new = 1;
  if (this->is_new() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CrewQuartersDecorationItemSaveGameData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.CrewQuartersDecorationItemSaveGameData)
  GOOGLE_DCHECK_NE(&from, this);
  const CrewQuartersDecorationItemSaveGameData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CrewQuartersDecorationItemSaveGameData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.CrewQuartersDecorationItemSaveGameData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.CrewQuartersDecorationItemSaveGameData)
    MergeFrom(*source);
  }
}

void CrewQuartersDecorationItemSaveGameData::MergeFrom(const CrewQuartersDecorationItemSaveGameData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.CrewQuartersDecorationItemSaveGameData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.decoration_item_asset_path().size() > 0) {
    _internal_set_decoration_item_asset_path(from._internal_decoration_item_asset_path());
  }
  if (from.is_new() != 0) {
    _internal_set_is_new(from._internal_is_new());
  }
}

void CrewQuartersDecorationItemSaveGameData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.CrewQuartersDecorationItemSaveGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrewQuartersDecorationItemSaveGameData::CopyFrom(const CrewQuartersDecorationItemSaveGameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.CrewQuartersDecorationItemSaveGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrewQuartersDecorationItemSaveGameData::IsInitialized() const {
  return true;
}

void CrewQuartersDecorationItemSaveGameData::InternalSwap(CrewQuartersDecorationItemSaveGameData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  decoration_item_asset_path_.Swap(&other->decoration_item_asset_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(is_new_, other->is_new_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CrewQuartersDecorationItemSaveGameData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CrewQuartersRoomItemSaveGameData::InitAsDefaultInstance() {
}
class CrewQuartersRoomItemSaveGameData::_Internal {
 public:
};

CrewQuartersRoomItemSaveGameData::CrewQuartersRoomItemSaveGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.CrewQuartersRoomItemSaveGameData)
}
CrewQuartersRoomItemSaveGameData::CrewQuartersRoomItemSaveGameData(const CrewQuartersRoomItemSaveGameData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  room_item_asset_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_room_item_asset_path().empty()) {
    room_item_asset_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_room_item_asset_path(),
      GetArena());
  }
  is_new_ = from.is_new_;
  // @@protoc_insertion_point(copy_constructor:OakSave.CrewQuartersRoomItemSaveGameData)
}

void CrewQuartersRoomItemSaveGameData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CrewQuartersRoomItemSaveGameData_OakProfile_2eproto.base);
  room_item_asset_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  is_new_ = false;
}

CrewQuartersRoomItemSaveGameData::~CrewQuartersRoomItemSaveGameData() {
  // @@protoc_insertion_point(destructor:OakSave.CrewQuartersRoomItemSaveGameData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CrewQuartersRoomItemSaveGameData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  room_item_asset_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CrewQuartersRoomItemSaveGameData::ArenaDtor(void* object) {
  CrewQuartersRoomItemSaveGameData* _this = reinterpret_cast< CrewQuartersRoomItemSaveGameData* >(object);
  (void)_this;
}
void CrewQuartersRoomItemSaveGameData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CrewQuartersRoomItemSaveGameData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CrewQuartersRoomItemSaveGameData& CrewQuartersRoomItemSaveGameData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CrewQuartersRoomItemSaveGameData_OakProfile_2eproto.base);
  return *internal_default_instance();
}


void CrewQuartersRoomItemSaveGameData::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.CrewQuartersRoomItemSaveGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  room_item_asset_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  is_new_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CrewQuartersRoomItemSaveGameData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_new = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_new_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string room_item_asset_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_room_item_asset_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.CrewQuartersRoomItemSaveGameData.room_item_asset_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CrewQuartersRoomItemSaveGameData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.CrewQuartersRoomItemSaveGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_new = 1;
  if (this->is_new() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_new(), target);
  }

  // string room_item_asset_path = 2;
  if (this->room_item_asset_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_item_asset_path().data(), static_cast<int>(this->_internal_room_item_asset_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.CrewQuartersRoomItemSaveGameData.room_item_asset_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_room_item_asset_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.CrewQuartersRoomItemSaveGameData)
  return target;
}

size_t CrewQuartersRoomItemSaveGameData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.CrewQuartersRoomItemSaveGameData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string room_item_asset_path = 2;
  if (this->room_item_asset_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_item_asset_path());
  }

  // bool is_new = 1;
  if (this->is_new() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CrewQuartersRoomItemSaveGameData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.CrewQuartersRoomItemSaveGameData)
  GOOGLE_DCHECK_NE(&from, this);
  const CrewQuartersRoomItemSaveGameData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CrewQuartersRoomItemSaveGameData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.CrewQuartersRoomItemSaveGameData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.CrewQuartersRoomItemSaveGameData)
    MergeFrom(*source);
  }
}

void CrewQuartersRoomItemSaveGameData::MergeFrom(const CrewQuartersRoomItemSaveGameData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.CrewQuartersRoomItemSaveGameData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.room_item_asset_path().size() > 0) {
    _internal_set_room_item_asset_path(from._internal_room_item_asset_path());
  }
  if (from.is_new() != 0) {
    _internal_set_is_new(from._internal_is_new());
  }
}

void CrewQuartersRoomItemSaveGameData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.CrewQuartersRoomItemSaveGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrewQuartersRoomItemSaveGameData::CopyFrom(const CrewQuartersRoomItemSaveGameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.CrewQuartersRoomItemSaveGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrewQuartersRoomItemSaveGameData::IsInitialized() const {
  return true;
}

void CrewQuartersRoomItemSaveGameData::InternalSwap(CrewQuartersRoomItemSaveGameData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  room_item_asset_path_.Swap(&other->room_item_asset_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(is_new_, other->is_new_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CrewQuartersRoomItemSaveGameData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RecentlyMetPlayer::InitAsDefaultInstance() {
}
class RecentlyMetPlayer::_Internal {
 public:
};

RecentlyMetPlayer::RecentlyMetPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.RecentlyMetPlayer)
}
RecentlyMetPlayer::RecentlyMetPlayer(const RecentlyMetPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  shift_player_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_shift_player_id().empty()) {
    shift_player_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_shift_player_id(),
      GetArena());
  }
  first_party_player_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_first_party_player_id().empty()) {
    first_party_player_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_first_party_player_id(),
      GetArena());
  }
  show_shift_player_entry_ = from.show_shift_player_entry_;
  // @@protoc_insertion_point(copy_constructor:OakSave.RecentlyMetPlayer)
}

void RecentlyMetPlayer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RecentlyMetPlayer_OakProfile_2eproto.base);
  shift_player_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_party_player_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  show_shift_player_entry_ = false;
}

RecentlyMetPlayer::~RecentlyMetPlayer() {
  // @@protoc_insertion_point(destructor:OakSave.RecentlyMetPlayer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RecentlyMetPlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  shift_player_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_party_player_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RecentlyMetPlayer::ArenaDtor(void* object) {
  RecentlyMetPlayer* _this = reinterpret_cast< RecentlyMetPlayer* >(object);
  (void)_this;
}
void RecentlyMetPlayer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecentlyMetPlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecentlyMetPlayer& RecentlyMetPlayer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RecentlyMetPlayer_OakProfile_2eproto.base);
  return *internal_default_instance();
}


void RecentlyMetPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.RecentlyMetPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shift_player_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  first_party_player_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  show_shift_player_entry_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecentlyMetPlayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string shift_player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_shift_player_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.RecentlyMetPlayer.shift_player_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string first_party_player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_first_party_player_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.RecentlyMetPlayer.first_party_player_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool show_shift_player_entry = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          show_shift_player_entry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecentlyMetPlayer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.RecentlyMetPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string shift_player_id = 1;
  if (this->shift_player_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_shift_player_id().data(), static_cast<int>(this->_internal_shift_player_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.RecentlyMetPlayer.shift_player_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_shift_player_id(), target);
  }

  // string first_party_player_id = 2;
  if (this->first_party_player_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_first_party_player_id().data(), static_cast<int>(this->_internal_first_party_player_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.RecentlyMetPlayer.first_party_player_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_first_party_player_id(), target);
  }

  // bool show_shift_player_entry = 3;
  if (this->show_shift_player_entry() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_show_shift_player_entry(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.RecentlyMetPlayer)
  return target;
}

size_t RecentlyMetPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.RecentlyMetPlayer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string shift_player_id = 1;
  if (this->shift_player_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_shift_player_id());
  }

  // string first_party_player_id = 2;
  if (this->first_party_player_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_first_party_player_id());
  }

  // bool show_shift_player_entry = 3;
  if (this->show_shift_player_entry() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecentlyMetPlayer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.RecentlyMetPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const RecentlyMetPlayer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecentlyMetPlayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.RecentlyMetPlayer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.RecentlyMetPlayer)
    MergeFrom(*source);
  }
}

void RecentlyMetPlayer::MergeFrom(const RecentlyMetPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.RecentlyMetPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.shift_player_id().size() > 0) {
    _internal_set_shift_player_id(from._internal_shift_player_id());
  }
  if (from.first_party_player_id().size() > 0) {
    _internal_set_first_party_player_id(from._internal_first_party_player_id());
  }
  if (from.show_shift_player_entry() != 0) {
    _internal_set_show_shift_player_entry(from._internal_show_shift_player_entry());
  }
}

void RecentlyMetPlayer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.RecentlyMetPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecentlyMetPlayer::CopyFrom(const RecentlyMetPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.RecentlyMetPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecentlyMetPlayer::IsInitialized() const {
  return true;
}

void RecentlyMetPlayer::InternalSwap(RecentlyMetPlayer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  shift_player_id_.Swap(&other->shift_player_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  first_party_player_id_.Swap(&other->first_party_player_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(show_shift_player_entry_, other->show_shift_player_entry_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecentlyMetPlayer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Profile_FriendEncountersEntry::InitAsDefaultInstance() {
  ::OakSave::_Profile_FriendEncountersEntry_default_instance_._instance.get_mutable()->value_ = const_cast< ::OakSave::OakFriendEncounterData*>(
      ::OakSave::OakFriendEncounterData::internal_default_instance());
}
class Profile_FriendEncountersEntry::_Internal {
 public:
  static const ::OakSave::OakFriendEncounterData& value(const Profile_FriendEncountersEntry* msg);
};

const ::OakSave::OakFriendEncounterData&
Profile_FriendEncountersEntry::_Internal::value(const Profile_FriendEncountersEntry* msg) {
  return *msg->value_;
}
Profile_FriendEncountersEntry::Profile_FriendEncountersEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.Profile.FriendEncountersEntry)
}
Profile_FriendEncountersEntry::Profile_FriendEncountersEntry(const Profile_FriendEncountersEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  if (from._internal_has_value()) {
    value_ = new ::OakSave::OakFriendEncounterData(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:OakSave.Profile.FriendEncountersEntry)
}

void Profile_FriendEncountersEntry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Profile_FriendEncountersEntry_OakProfile_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_ = nullptr;
}

Profile_FriendEncountersEntry::~Profile_FriendEncountersEntry() {
  // @@protoc_insertion_point(destructor:OakSave.Profile.FriendEncountersEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Profile_FriendEncountersEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
}

void Profile_FriendEncountersEntry::ArenaDtor(void* object) {
  Profile_FriendEncountersEntry* _this = reinterpret_cast< Profile_FriendEncountersEntry* >(object);
  (void)_this;
}
void Profile_FriendEncountersEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Profile_FriendEncountersEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Profile_FriendEncountersEntry& Profile_FriendEncountersEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Profile_FriendEncountersEntry_OakProfile_2eproto.base);
  return *internal_default_instance();
}


void Profile_FriendEncountersEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.Profile.FriendEncountersEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Profile_FriendEncountersEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.Profile.FriendEncountersEntry.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OakSave.OakFriendEncounterData value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Profile_FriendEncountersEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.Profile.FriendEncountersEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.Profile.FriendEncountersEntry.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // .OakSave.OakFriendEncounterData value = 2;
  if (this->has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.Profile.FriendEncountersEntry)
  return target;
}

size_t Profile_FriendEncountersEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.Profile.FriendEncountersEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // .OakSave.OakFriendEncounterData value = 2;
  if (this->has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Profile_FriendEncountersEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.Profile.FriendEncountersEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const Profile_FriendEncountersEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Profile_FriendEncountersEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.Profile.FriendEncountersEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.Profile.FriendEncountersEntry)
    MergeFrom(*source);
  }
}

void Profile_FriendEncountersEntry::MergeFrom(const Profile_FriendEncountersEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.Profile.FriendEncountersEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.has_value()) {
    _internal_mutable_value()->::OakSave::OakFriendEncounterData::MergeFrom(from._internal_value());
  }
}

void Profile_FriendEncountersEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.Profile.FriendEncountersEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Profile_FriendEncountersEntry::CopyFrom(const Profile_FriendEncountersEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.Profile.FriendEncountersEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Profile_FriendEncountersEntry::IsInitialized() const {
  return true;
}

void Profile_FriendEncountersEntry::InternalSwap(Profile_FriendEncountersEntry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Profile_FriendEncountersEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Profile::InitAsDefaultInstance() {
  ::OakSave::_Profile_default_instance_._instance.get_mutable()->player_input_bindings_ = const_cast< ::OakSave::PlayerInputBindings*>(
      ::OakSave::PlayerInputBindings::internal_default_instance());
  ::OakSave::_Profile_default_instance_._instance.get_mutable()->tutorial_info_ = const_cast< ::OakSave::OakProfileMenuTutorialInfo*>(
      ::OakSave::OakProfileMenuTutorialInfo::internal_default_instance());
  ::OakSave::_Profile_default_instance_._instance.get_mutable()->guardian_rank_ = const_cast< ::OakSave::GuardianRankProfileData*>(
      ::OakSave::GuardianRankProfileData::internal_default_instance());
}
class Profile::_Internal {
 public:
  static const ::OakSave::PlayerInputBindings& player_input_bindings(const Profile* msg);
  static const ::OakSave::OakProfileMenuTutorialInfo& tutorial_info(const Profile* msg);
  static const ::OakSave::GuardianRankProfileData& guardian_rank(const Profile* msg);
};

const ::OakSave::PlayerInputBindings&
Profile::_Internal::player_input_bindings(const Profile* msg) {
  return *msg->player_input_bindings_;
}
const ::OakSave::OakProfileMenuTutorialInfo&
Profile::_Internal::tutorial_info(const Profile* msg) {
  return *msg->tutorial_info_;
}
const ::OakSave::GuardianRankProfileData&
Profile::_Internal::guardian_rank(const Profile* msg) {
  return *msg->guardian_rank_;
}
void Profile::clear_profile_stats_data() {
  profile_stats_data_.Clear();
}
void Profile::clear_bank_inventory_category_list() {
  bank_inventory_category_list_.Clear();
}
void Profile::clear_profile_sdu_list() {
  profile_sdu_list_.Clear();
}
void Profile::clear_registered_downloadable_entitlements() {
  registered_downloadable_entitlements_.Clear();
}
void Profile::clear_challenge_data() {
  challenge_data_.Clear();
}
Profile::Profile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  news_hashes_(arena),
  inventory_screen_last_filter_(arena),
  friend_events_(arena),
  friend_statuses_(arena),
  friend_encounters_(arena),
  profile_stats_data_(arena),
  bank_inventory_category_list_(arena),
  bank_inventory_list_(arena),
  lost_loot_inventory_list_(arena),
  npc_mail_items_(arena),
  mail_guids_(arena),
  unread_mail_guids_(arena),
  gear_sold_by_friends_(arena),
  profile_sdu_list_(arena),
  unlocked_customizations_(arena),
  unlocked_inventory_customization_parts_(arena),
  unlocked_crew_quarters_decorations_(arena),
  unlocked_crew_quarters_rooms_(arena),
  registered_downloadable_entitlements_(arena),
  seen_news_items_(arena),
  challenge_data_(arena),
  citizensciencelevelprogression_(arena),
  recently_met_players_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OakSave.Profile)
}
Profile::Profile(const Profile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      news_hashes_(from.news_hashes_),
      inventory_screen_last_filter_(from.inventory_screen_last_filter_),
      friend_events_(from.friend_events_),
      friend_statuses_(from.friend_statuses_),
      friend_encounters_(from.friend_encounters_),
      profile_stats_data_(from.profile_stats_data_),
      bank_inventory_category_list_(from.bank_inventory_category_list_),
      bank_inventory_list_(from.bank_inventory_list_),
      lost_loot_inventory_list_(from.lost_loot_inventory_list_),
      npc_mail_items_(from.npc_mail_items_),
      mail_guids_(from.mail_guids_),
      unread_mail_guids_(from.unread_mail_guids_),
      gear_sold_by_friends_(from.gear_sold_by_friends_),
      profile_sdu_list_(from.profile_sdu_list_),
      unlocked_customizations_(from.unlocked_customizations_),
      unlocked_inventory_customization_parts_(from.unlocked_inventory_customization_parts_),
      unlocked_crew_quarters_decorations_(from.unlocked_crew_quarters_decorations_),
      unlocked_crew_quarters_rooms_(from.unlocked_crew_quarters_rooms_),
      registered_downloadable_entitlements_(from.registered_downloadable_entitlements_),
      seen_news_items_(from.seen_news_items_),
      challenge_data_(from.challenge_data_),
      citizensciencelevelprogression_(from.citizensciencelevelprogression_),
      recently_met_players_(from.recently_met_players_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  last_status_menu_page_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_last_status_menu_page().empty()) {
    last_status_menu_page_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_last_status_menu_page(),
      GetArena());
  }
  matchmaking_region_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_matchmaking_region().empty()) {
    matchmaking_region_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_matchmaking_region(),
      GetArena());
  }
  if (from._internal_has_player_input_bindings()) {
    player_input_bindings_ = new ::OakSave::PlayerInputBindings(*from.player_input_bindings_);
  } else {
    player_input_bindings_ = nullptr;
  }
  if (from._internal_has_tutorial_info()) {
    tutorial_info_ = new ::OakSave::OakProfileMenuTutorialInfo(*from.tutorial_info_);
  } else {
    tutorial_info_ = nullptr;
  }
  if (from._internal_has_guardian_rank()) {
    guardian_rank_ = new ::OakSave::GuardianRankProfileData(*from.guardian_rank_);
  } else {
    guardian_rank_ = nullptr;
  }
  ::memcpy(&enable_aim_assist_, &from.enable_aim_assist_,
    static_cast<size_t>(reinterpret_cast<char*>(&citizensciencecsbucksamount_) -
    reinterpret_cast<char*>(&enable_aim_assist_)) + sizeof(citizensciencecsbucksamount_));
  // @@protoc_insertion_point(copy_constructor:OakSave.Profile)
}

void Profile::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Profile_OakProfile_2eproto.base);
  last_status_menu_page_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  matchmaking_region_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_input_bindings_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&citizensciencecsbucksamount_) -
      reinterpret_cast<char*>(&player_input_bindings_)) + sizeof(citizensciencecsbucksamount_));
}

Profile::~Profile() {
  // @@protoc_insertion_point(destructor:OakSave.Profile)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Profile::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  last_status_menu_page_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  matchmaking_region_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_input_bindings_;
  if (this != internal_default_instance()) delete tutorial_info_;
  if (this != internal_default_instance()) delete guardian_rank_;
}

void Profile::ArenaDtor(void* object) {
  Profile* _this = reinterpret_cast< Profile* >(object);
  (void)_this;
}
void Profile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Profile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Profile& Profile::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Profile_OakProfile_2eproto.base);
  return *internal_default_instance();
}


void Profile::Clear() {
// @@protoc_insertion_point(message_clear_start:OakSave.Profile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  news_hashes_.Clear();
  inventory_screen_last_filter_.Clear();
  friend_events_.Clear();
  friend_statuses_.Clear();
  friend_encounters_.Clear();
  profile_stats_data_.Clear();
  bank_inventory_category_list_.Clear();
  bank_inventory_list_.Clear();
  lost_loot_inventory_list_.Clear();
  npc_mail_items_.Clear();
  mail_guids_.Clear();
  unread_mail_guids_.Clear();
  gear_sold_by_friends_.Clear();
  profile_sdu_list_.Clear();
  unlocked_customizations_.Clear();
  unlocked_inventory_customization_parts_.Clear();
  unlocked_crew_quarters_decorations_.Clear();
  unlocked_crew_quarters_rooms_.Clear();
  registered_downloadable_entitlements_.Clear();
  seen_news_items_.Clear();
  challenge_data_.Clear();
  citizensciencelevelprogression_.Clear();
  recently_met_players_.Clear();
  last_status_menu_page_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  matchmaking_region_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && player_input_bindings_ != nullptr) {
    delete player_input_bindings_;
  }
  player_input_bindings_ = nullptr;
  if (GetArena() == nullptr && tutorial_info_ != nullptr) {
    delete tutorial_info_;
  }
  tutorial_info_ = nullptr;
  if (GetArena() == nullptr && guardian_rank_ != nullptr) {
    delete guardian_rank_;
  }
  guardian_rank_ = nullptr;
  ::memset(&enable_aim_assist_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&citizensciencecsbucksamount_) -
      reinterpret_cast<char*>(&enable_aim_assist_)) + sizeof(citizensciencecsbucksamount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Profile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool enable_aim_assist = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enable_aim_assist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool gamepad_invert_look = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          gamepad_invert_look_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool gamepad_invert_turn = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          gamepad_invert_turn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool gamepad_invert_move = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          gamepad_invert_move_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool gamepad_invert_strafe = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          gamepad_invert_strafe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enable_vibration = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          enable_vibration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool invert_mouse_pitch = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          invert_mouse_pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enable_mouse_smoothing = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          enable_mouse_smoothing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float mouse_scale = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          mouse_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool show_damage_numbers = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          show_damage_numbers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool show_damage_number_icons = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          show_damage_number_icons_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enable_training_messages = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          enable_training_messages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool show_text_chat = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          show_text_chat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool center_crosshair = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          center_crosshair_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool toggle_sprint = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          toggle_sprint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool toggle_crouch = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          toggle_crouch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool censor_content = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          censor_content_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float music_volume = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          music_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float sound_effects_volume = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          sound_effects_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float vo_volume = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          vo_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float voice_volume = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          voice_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool enable_optional_vo = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          enable_optional_vo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool push_to_talk = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          push_to_talk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enable_controller_audio = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          enable_controller_audio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float speaker_angle_front = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 205)) {
          speaker_angle_front_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float speaker_angle_side = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 213)) {
          speaker_angle_side_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float speaker_angle_back = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 221)) {
          speaker_angle_back_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 speaker_setup = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          speaker_setup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool mute_audio_on_focus_loss = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          mute_audio_on_focus_loss_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool hide_strict_nat_help_dialog = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          hide_strict_nat_help_dialog_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OakSave.PlayerInputBindings player_input_bindings = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_input_bindings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 news_hashes = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_news_hashes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_news_hashes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 last_used_savegame_id = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          last_used_savegame_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gamepad_hip_sensitivity_level = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          gamepad_hip_sensitivity_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gamepad_zoomed_sensitivity_level = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          gamepad_zoomed_sensitivity_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gamepad_vehicle_sensitivity_level = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          gamepad_vehicle_sensitivity_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float gamepad_movement_dead_zone_x = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          gamepad_movement_dead_zone_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float gamepad_movement_dead_zone_y = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          gamepad_movement_dead_zone_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float gamepad_look_dead_zone_inner_x = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          gamepad_look_dead_zone_inner_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float gamepad_look_dead_zone_outer_x = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          gamepad_look_dead_zone_outer_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float gamepad_look_dead_zone_inner_y = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          gamepad_look_dead_zone_inner_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float gamepad_look_dead_zone_outer_y = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          gamepad_look_dead_zone_outer_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float gamepad_vehicle_movement_dead_zone_x = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          gamepad_vehicle_movement_dead_zone_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float gamepad_vehicle_movement_dead_zone_y = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          gamepad_vehicle_movement_dead_zone_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float gamepad_vehicle_look_dead_zone_inner_x = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          gamepad_vehicle_look_dead_zone_inner_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float gamepad_vehicle_look_dead_zone_outer_x = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          gamepad_vehicle_look_dead_zone_outer_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float gamepad_vehicle_look_dead_zone_inner_y = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          gamepad_vehicle_look_dead_zone_inner_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float gamepad_vehicle_look_dead_zone_outer_y = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          gamepad_vehicle_look_dead_zone_outer_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float gamepad_left_dead_zone_inner = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          gamepad_left_dead_zone_inner_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float gamepad_left_dead_zone_outer = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          gamepad_left_dead_zone_outer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float gamepad_right_dead_zone_inner = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          gamepad_right_dead_zone_inner_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float gamepad_right_dead_zone_outer = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 197)) {
          gamepad_right_dead_zone_outer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float gamepad_look_axial_dead_zone_scale = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 205)) {
          gamepad_look_axial_dead_zone_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float gamepad_move_axial_dead_zone_scale = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 213)) {
          gamepad_move_axial_dead_zone_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool gamepad_use_advanced_hip_aim_settings = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          gamepad_use_advanced_hip_aim_settings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool gamepad_use_advanced_zoomed_aim_settings = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          gamepad_use_advanced_zoomed_aim_settings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool gamepad_use_advanced_vehicle_aim_settings = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          gamepad_use_advanced_vehicle_aim_settings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float gamepad_hip_yaw_rate = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 245)) {
          gamepad_hip_yaw_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float gamepad_hip_pitch_rate = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 253)) {
          gamepad_hip_pitch_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float gamepad_hip_extra_yaw = 64;
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 5)) {
          gamepad_hip_extra_yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float gamepad_hip_extra_pitch = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          gamepad_hip_extra_pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float gamepad_hip_ramp_up_time = 66;
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          gamepad_hip_ramp_up_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float gamepad_hip_ramp_up_delay = 67;
      case 67:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          gamepad_hip_ramp_up_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float gamepad_zoomed_yaw_rate = 68;
      case 68:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          gamepad_zoomed_yaw_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float gamepad_zoomed_pitch_rate = 69;
      case 69:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          gamepad_zoomed_pitch_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float gamepad_zoomed_extra_yaw = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          gamepad_zoomed_extra_yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float gamepad_zoomed_extra_pitch = 71;
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          gamepad_zoomed_extra_pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float gamepad_zoomed_ramp_up_time = 72;
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          gamepad_zoomed_ramp_up_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float gamepad_zoomed_ramp_up_delay = 73;
      case 73:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          gamepad_zoomed_ramp_up_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float gamepad_vehicle_yaw_rate = 74;
      case 74:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          gamepad_vehicle_yaw_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float gamepad_vehicle_pitch_rate = 75;
      case 75:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          gamepad_vehicle_pitch_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float gamepad_vehicle_extra_yaw = 76;
      case 76:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          gamepad_vehicle_extra_yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float gamepad_vehicle_extra_pitch = 77;
      case 77:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          gamepad_vehicle_extra_pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float gamepad_vehicle_ramp_up_time = 78;
      case 78:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          gamepad_vehicle_ramp_up_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float gamepad_vehicle_ramp_up_delay = 79;
      case 79:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          gamepad_vehicle_ramp_up_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool ironsight_aim_assist = 80;
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          ironsight_aim_assist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 walking_joystick_scheme = 81;
      case 81:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          walking_joystick_scheme_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 driving_joystick_scheme = 82;
      case 82:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          driving_joystick_scheme_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float mouse_ads_scale = 83;
      case 83:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          mouse_ads_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float mouse_vehicle_scale = 84;
      case 84:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          mouse_vehicle_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool mouse_ironsight_aim_assist = 85;
      case 85:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          mouse_ironsight_aim_assist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 vehicle_input_mode = 86;
      case 86:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          vehicle_input_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool weapon_aim_toggle = 87;
      case 87:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          weapon_aim_toggle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool mantle_requires_button = 88;
      case 88:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          mantle_requires_button_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool fixed_minimap_rotation = 89;
      case 89:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          fixed_minimap_rotation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool map_invert_pitch = 90;
      case 90:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          map_invert_pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool map_invert_yaw = 91;
      case 91:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          map_invert_yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 difficulty = 92;
      case 92:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          difficulty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool swap_dual_wield_controls = 93;
      case 93:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          swap_dual_wield_controls_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float base_fov = 94;
      case 94:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 245)) {
          base_fov_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 crosshair_neutral_color_frame = 95;
      case 95:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          crosshair_neutral_color_frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 crosshair_enemy_color_frame = 96;
      case 96:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          crosshair_enemy_color_frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 crosshair_ally_color_frame = 97;
      case 97:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          crosshair_ally_color_frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enable_subtitles = 98;
      case 98:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          enable_subtitles_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enable_closed_captions = 99;
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          enable_closed_captions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string last_status_menu_page = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_last_status_menu_page();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.Profile.last_status_menu_page"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .OakSave.OakProfileLastInventoryFilterInfo inventory_screen_last_filter = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_inventory_screen_last_filter(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<810>(ptr));
        } else goto handle_unusual;
        continue;
      // .OakSave.OakProfileMenuTutorialInfo tutorial_info = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_tutorial_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 default_network_type = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          default_network_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 default_invite_type = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          default_invite_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string matchmaking_region = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_matchmaking_region();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.Profile.matchmaking_region"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 streaming_service = 106;
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          streaming_service_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_cached_friend_events = 107;
      case 107:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          max_cached_friend_events_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_cached_friend_statuses = 108;
      case 108:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          max_cached_friend_statuses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string friend_events = 109;
      case 109:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_friend_events();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.Profile.friend_events"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<874>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string friend_statuses = 110;
      case 110:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_friend_statuses();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.Profile.friend_statuses"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<882>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 last_whisper_fetch_events_time = 111;
      case 111:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          last_whisper_fetch_events_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 last_whisper_fetch_statuses_time = 112;
      case 112:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          last_whisper_fetch_statuses_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 desired_crossplay_state = 113;
      case 113:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          desired_crossplay_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .OakSave.Profile.FriendEncountersEntry friend_encounters = 133;
      case 133:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_friend_encounters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<1066>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 max_friend_encounter_size = 134;
      case 134:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          max_friend_encounter_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .OakSave.GameStatSaveGameData profile_stats_data = 135;
      case 135:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_profile_stats_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<1082>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .OakSave.InventoryCategorySaveData bank_inventory_category_list = 136;
      case 136:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_bank_inventory_category_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<1090>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated bytes bank_inventory_list = 137;
      case 137:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_bank_inventory_list();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<1098>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated bytes lost_loot_inventory_list = 138;
      case 138:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_lost_loot_inventory_list();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<1106>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .OakSave.OakMailItem npc_mail_items = 139;
      case 139:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_npc_mail_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<1114>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string mail_guids = 140;
      case 140:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_mail_guids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.Profile.mail_guids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<1122>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string unread_mail_guids = 141;
      case 141:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_unread_mail_guids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.Profile.unread_mail_guids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<1130>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .OakSave.GearSoldByFriendData gear_sold_by_friends = 142;
      case 142:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_gear_sold_by_friends(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<1138>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .OakSave.OakSDUSaveGameData profile_sdu_list = 143;
      case 143:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_profile_sdu_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<1146>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .OakSave.OakCustomizationSaveGameData unlocked_customizations = 144;
      case 144:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_unlocked_customizations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<1154>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .OakSave.OakInventoryCustomizationPartInfo unlocked_inventory_customization_parts = 145;
      case 145:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_unlocked_inventory_customization_parts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<1162>(ptr));
        } else goto handle_unusual;
        continue;
      // .OakSave.GuardianRankProfileData guardian_rank = 146;
      case 146:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_guardian_rank(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .OakSave.CrewQuartersDecorationItemSaveGameData unlocked_crew_quarters_decorations = 147;
      case 147:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_unlocked_crew_quarters_decorations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<1178>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .OakSave.CrewQuartersRoomItemSaveGameData unlocked_crew_quarters_rooms = 148;
      case 148:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_unlocked_crew_quarters_rooms(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<1186>(ptr));
        } else goto handle_unusual;
        continue;
      // bool enable_mouse_acceleration = 150;
      case 150:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          enable_mouse_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enable_gamepad_input = 151;
      case 151:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          enable_gamepad_input_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool use_classic_gamepad_input = 152;
      case 152:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          use_classic_gamepad_input_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float master_volume = 153;
      case 153:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 205)) {
          master_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 monitor_display_type = 154;
      case 154:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          monitor_display_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 graphics_mode = 155;
      case 155:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          graphics_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 frame_rate_limit = 156;
      case 156:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          frame_rate_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float base_vehicle_fov = 157;
      case 157:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 237)) {
          base_vehicle_fov_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 graphics_quality = 158;
      case 158:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          graphics_quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 anisotropic_filtering = 159;
      case 159:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          anisotropic_filtering_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 shadow_quality = 160;
      case 160:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          shadow_quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 display_performance_stats = 161;
      case 161:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          display_performance_stats_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 texture_detail = 162;
      case 162:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          texture_detail_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 draw_distance = 163;
      case 163:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          draw_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 clutter = 164;
      case 164:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          clutter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tessellation = 165;
      case 165:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          tessellation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 foliage = 166;
      case 166:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          foliage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool foliage_shadows = 167;
      case 167:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          foliage_shadows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool planar_reflections = 168;
      case 168:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          planar_reflections_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 volumetric_fog = 169;
      case 169:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          volumetric_fog_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 screen_space_reflections = 170;
      case 170:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          screen_space_reflections_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 character_texture_detail = 171;
      case 171:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          character_texture_detail_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 character_detail = 172;
      case 172:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          character_detail_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ambient_occlusion_quality = 173;
      case 173:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ambient_occlusion_quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool object_motion_blur = 174;
      case 174:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          object_motion_blur_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool lens_flare = 175;
      case 175:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          lens_flare_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool combat_number_long_format = 176;
      case 176:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          combat_number_long_format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool show_minimap_legendaries = 177;
      case 177:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          show_minimap_legendaries_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool use_player_callouts = 178;
      case 178:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          use_player_callouts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 friend_event_notification_lifetime = 179;
      case 179:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          friend_event_notification_lifetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 friend_event_notification_frequency = 180;
      case 180:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          friend_event_notification_frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 trade_request_reception_type = 181;
      case 181:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          trade_request_reception_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float head_bob_scale = 182;
      case 182:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          head_bob_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool has_seen_first_boot = 184;
      case 184:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          has_seen_first_boot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float subs_cc_size = 189;
      case 189:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 237)) {
          subs_cc_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float cc_subs_background_opacity = 190;
      case 190:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 245)) {
          cc_subs_background_opacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 walking_button_scheme = 191;
      case 191:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          walking_button_scheme_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 driving_button_scheme = 192;
      case 192:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          driving_button_scheme_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 glyph_mode = 193;
      case 193:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          glyph_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool use_MPH = 194;
      case 194:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          use_mph_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .OakSave.RegisteredDownloadableEntitlements registered_downloadable_entitlements = 195;
      case 195:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_registered_downloadable_entitlements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<1562>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string seen_news_items = 196;
      case 196:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_seen_news_items();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OakSave.Profile.seen_news_items"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<1570>(ptr));
        } else goto handle_unusual;
        continue;
      // bool auto_centering_enabled = 197;
      case 197:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          auto_centering_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool increased_chance_for_subscribers = 198;
      case 198:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          increased_chance_for_subscribers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool rare_chest_event_enabled = 199;
      case 199:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          rare_chest_event_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool badass_event_enabled = 200;
      case 200:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          badass_event_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool pinata_event_enabled = 201;
      case 201:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          pinata_event_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 min_time_between_badass_events = 202;
      case 202:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          min_time_between_badass_events_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float hud_scale_multiplier = 203;
      case 203:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          hud_scale_multiplier_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool disable_spatial_audio = 204;
      case 204:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          disable_spatial_audio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total_playtime_seconds = 205;
      case 205:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          total_playtime_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool moxxis_drink_event_enabled = 206;
      case 206:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          moxxis_drink_event_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 moxxis_drink_event_bits_product_id = 207;
      case 207:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          moxxis_drink_event_bits_product_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .OakSave.ChallengeSaveGameData challenge_data = 208;
      case 208:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_challenge_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<1666>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 CitizenScienceLevelProgression = 209;
      case 209:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_citizensciencelevelprogression(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136) {
          _internal_add_citizensciencelevelprogression(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool default_dead_zone_inner_updated = 210;
      case 210:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          default_dead_zone_inner_updated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool disable_event_content = 211;
      case 211:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          disable_event_content_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 desired_friend_sync_state = 212;
      case 212:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          desired_friend_sync_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool needs_shift_first_boot = 213;
      case 213:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          needs_shift_first_boot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .OakSave.RecentlyMetPlayer recently_met_players = 214;
      case 214:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_recently_met_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<1714>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 CitizenScienceActiveBoosterIndex = 215;
      case 215:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          citizenscienceactiveboosterindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float CitizenScienceActiveBoosterRemainingTime = 216;
      case 216:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 197)) {
          citizenscienceactiveboosterremainingtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float CitizenScienceActiveBoosterTotalTime = 217;
      case 217:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 205)) {
          citizenscienceactiveboostertotaltime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 StreamerPrimaryActiveBoosterIndex = 218;
      case 218:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          streamerprimaryactiveboosterindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float StreamerPrimaryActiveBoosterRemainingTime = 219;
      case 219:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 221)) {
          streamerprimaryactiveboosterremainingtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float StreamerPrimaryActiveBoosterTotalTime = 220;
      case 220:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 229)) {
          streamerprimaryactiveboostertotaltime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 StreamerSecondaryActiveBoosterIndex = 221;
      case 221:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          streamersecondaryactiveboosterindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float StreamerSecondaryActiveBoosterRemainingTime = 222;
      case 222:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 245)) {
          streamersecondaryactiveboosterremainingtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float StreamerSecondaryActiveBoosterTotalTime = 223;
      case 223:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 253)) {
          streamersecondaryactiveboostertotaltime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 StreamerBoosterTier = 224;
      case 224:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          streamerboostertier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 CitizenScienceCSBucksAmount = 226;
      case 226:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          citizensciencecsbucksamount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool bCitizenScienceHasSeenIntroVideo = 227;
      case 227:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          bcitizensciencehasseenintrovideo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool bCitizenScienceTutorialDone = 228;
      case 228:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          bcitizensciencetutorialdone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool fixed_initial_zonemap_rotation = 230;
      case 230:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          fixed_initial_zonemap_rotation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Profile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OakSave.Profile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable_aim_assist = 1;
  if (this->enable_aim_assist() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enable_aim_assist(), target);
  }

  // bool gamepad_invert_look = 2;
  if (this->gamepad_invert_look() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_gamepad_invert_look(), target);
  }

  // bool gamepad_invert_turn = 3;
  if (this->gamepad_invert_turn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_gamepad_invert_turn(), target);
  }

  // bool gamepad_invert_move = 4;
  if (this->gamepad_invert_move() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_gamepad_invert_move(), target);
  }

  // bool gamepad_invert_strafe = 5;
  if (this->gamepad_invert_strafe() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_gamepad_invert_strafe(), target);
  }

  // bool enable_vibration = 6;
  if (this->enable_vibration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_enable_vibration(), target);
  }

  // bool invert_mouse_pitch = 7;
  if (this->invert_mouse_pitch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_invert_mouse_pitch(), target);
  }

  // bool enable_mouse_smoothing = 8;
  if (this->enable_mouse_smoothing() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_enable_mouse_smoothing(), target);
  }

  // float mouse_scale = 9;
  if (!(this->mouse_scale() <= 0 && this->mouse_scale() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_mouse_scale(), target);
  }

  // bool show_damage_numbers = 10;
  if (this->show_damage_numbers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_show_damage_numbers(), target);
  }

  // bool show_damage_number_icons = 11;
  if (this->show_damage_number_icons() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_show_damage_number_icons(), target);
  }

  // bool enable_training_messages = 12;
  if (this->enable_training_messages() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_enable_training_messages(), target);
  }

  // bool show_text_chat = 13;
  if (this->show_text_chat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_show_text_chat(), target);
  }

  // bool center_crosshair = 14;
  if (this->center_crosshair() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_center_crosshair(), target);
  }

  // bool toggle_sprint = 15;
  if (this->toggle_sprint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_toggle_sprint(), target);
  }

  // bool toggle_crouch = 16;
  if (this->toggle_crouch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_toggle_crouch(), target);
  }

  // bool censor_content = 17;
  if (this->censor_content() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_censor_content(), target);
  }

  // float music_volume = 18;
  if (!(this->music_volume() <= 0 && this->music_volume() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(18, this->_internal_music_volume(), target);
  }

  // float sound_effects_volume = 19;
  if (!(this->sound_effects_volume() <= 0 && this->sound_effects_volume() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(19, this->_internal_sound_effects_volume(), target);
  }

  // float vo_volume = 20;
  if (!(this->vo_volume() <= 0 && this->vo_volume() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(20, this->_internal_vo_volume(), target);
  }

  // float voice_volume = 21;
  if (!(this->voice_volume() <= 0 && this->voice_volume() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(21, this->_internal_voice_volume(), target);
  }

  // bool enable_optional_vo = 22;
  if (this->enable_optional_vo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_enable_optional_vo(), target);
  }

  // bool push_to_talk = 23;
  if (this->push_to_talk() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_push_to_talk(), target);
  }

  // bool enable_controller_audio = 24;
  if (this->enable_controller_audio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->_internal_enable_controller_audio(), target);
  }

  // float speaker_angle_front = 25;
  if (!(this->speaker_angle_front() <= 0 && this->speaker_angle_front() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(25, this->_internal_speaker_angle_front(), target);
  }

  // float speaker_angle_side = 26;
  if (!(this->speaker_angle_side() <= 0 && this->speaker_angle_side() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(26, this->_internal_speaker_angle_side(), target);
  }

  // float speaker_angle_back = 27;
  if (!(this->speaker_angle_back() <= 0 && this->speaker_angle_back() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(27, this->_internal_speaker_angle_back(), target);
  }

  // uint32 speaker_setup = 28;
  if (this->speaker_setup() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(28, this->_internal_speaker_setup(), target);
  }

  // bool mute_audio_on_focus_loss = 29;
  if (this->mute_audio_on_focus_loss() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(29, this->_internal_mute_audio_on_focus_loss(), target);
  }

  // bool hide_strict_nat_help_dialog = 34;
  if (this->hide_strict_nat_help_dialog() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(34, this->_internal_hide_strict_nat_help_dialog(), target);
  }

  // .OakSave.PlayerInputBindings player_input_bindings = 35;
  if (this->has_player_input_bindings()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        35, _Internal::player_input_bindings(this), target, stream);
  }

  // repeated uint32 news_hashes = 36;
  {
    int byte_size = _news_hashes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          36, _internal_news_hashes(), byte_size, target);
    }
  }

  // uint32 last_used_savegame_id = 37;
  if (this->last_used_savegame_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(37, this->_internal_last_used_savegame_id(), target);
  }

  // int32 gamepad_hip_sensitivity_level = 38;
  if (this->gamepad_hip_sensitivity_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(38, this->_internal_gamepad_hip_sensitivity_level(), target);
  }

  // int32 gamepad_zoomed_sensitivity_level = 39;
  if (this->gamepad_zoomed_sensitivity_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(39, this->_internal_gamepad_zoomed_sensitivity_level(), target);
  }

  // int32 gamepad_vehicle_sensitivity_level = 40;
  if (this->gamepad_vehicle_sensitivity_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(40, this->_internal_gamepad_vehicle_sensitivity_level(), target);
  }

  // float gamepad_movement_dead_zone_x = 41;
  if (!(this->gamepad_movement_dead_zone_x() <= 0 && this->gamepad_movement_dead_zone_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(41, this->_internal_gamepad_movement_dead_zone_x(), target);
  }

  // float gamepad_movement_dead_zone_y = 42;
  if (!(this->gamepad_movement_dead_zone_y() <= 0 && this->gamepad_movement_dead_zone_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(42, this->_internal_gamepad_movement_dead_zone_y(), target);
  }

  // float gamepad_look_dead_zone_inner_x = 43;
  if (!(this->gamepad_look_dead_zone_inner_x() <= 0 && this->gamepad_look_dead_zone_inner_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(43, this->_internal_gamepad_look_dead_zone_inner_x(), target);
  }

  // float gamepad_look_dead_zone_outer_x = 44;
  if (!(this->gamepad_look_dead_zone_outer_x() <= 0 && this->gamepad_look_dead_zone_outer_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(44, this->_internal_gamepad_look_dead_zone_outer_x(), target);
  }

  // float gamepad_look_dead_zone_inner_y = 45;
  if (!(this->gamepad_look_dead_zone_inner_y() <= 0 && this->gamepad_look_dead_zone_inner_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(45, this->_internal_gamepad_look_dead_zone_inner_y(), target);
  }

  // float gamepad_look_dead_zone_outer_y = 46;
  if (!(this->gamepad_look_dead_zone_outer_y() <= 0 && this->gamepad_look_dead_zone_outer_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(46, this->_internal_gamepad_look_dead_zone_outer_y(), target);
  }

  // float gamepad_vehicle_movement_dead_zone_x = 47;
  if (!(this->gamepad_vehicle_movement_dead_zone_x() <= 0 && this->gamepad_vehicle_movement_dead_zone_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(47, this->_internal_gamepad_vehicle_movement_dead_zone_x(), target);
  }

  // float gamepad_vehicle_movement_dead_zone_y = 48;
  if (!(this->gamepad_vehicle_movement_dead_zone_y() <= 0 && this->gamepad_vehicle_movement_dead_zone_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(48, this->_internal_gamepad_vehicle_movement_dead_zone_y(), target);
  }

  // float gamepad_vehicle_look_dead_zone_inner_x = 49;
  if (!(this->gamepad_vehicle_look_dead_zone_inner_x() <= 0 && this->gamepad_vehicle_look_dead_zone_inner_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(49, this->_internal_gamepad_vehicle_look_dead_zone_inner_x(), target);
  }

  // float gamepad_vehicle_look_dead_zone_outer_x = 50;
  if (!(this->gamepad_vehicle_look_dead_zone_outer_x() <= 0 && this->gamepad_vehicle_look_dead_zone_outer_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(50, this->_internal_gamepad_vehicle_look_dead_zone_outer_x(), target);
  }

  // float gamepad_vehicle_look_dead_zone_inner_y = 51;
  if (!(this->gamepad_vehicle_look_dead_zone_inner_y() <= 0 && this->gamepad_vehicle_look_dead_zone_inner_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(51, this->_internal_gamepad_vehicle_look_dead_zone_inner_y(), target);
  }

  // float gamepad_vehicle_look_dead_zone_outer_y = 52;
  if (!(this->gamepad_vehicle_look_dead_zone_outer_y() <= 0 && this->gamepad_vehicle_look_dead_zone_outer_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(52, this->_internal_gamepad_vehicle_look_dead_zone_outer_y(), target);
  }

  // float gamepad_left_dead_zone_inner = 53;
  if (!(this->gamepad_left_dead_zone_inner() <= 0 && this->gamepad_left_dead_zone_inner() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(53, this->_internal_gamepad_left_dead_zone_inner(), target);
  }

  // float gamepad_left_dead_zone_outer = 54;
  if (!(this->gamepad_left_dead_zone_outer() <= 0 && this->gamepad_left_dead_zone_outer() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(54, this->_internal_gamepad_left_dead_zone_outer(), target);
  }

  // float gamepad_right_dead_zone_inner = 55;
  if (!(this->gamepad_right_dead_zone_inner() <= 0 && this->gamepad_right_dead_zone_inner() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(55, this->_internal_gamepad_right_dead_zone_inner(), target);
  }

  // float gamepad_right_dead_zone_outer = 56;
  if (!(this->gamepad_right_dead_zone_outer() <= 0 && this->gamepad_right_dead_zone_outer() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(56, this->_internal_gamepad_right_dead_zone_outer(), target);
  }

  // float gamepad_look_axial_dead_zone_scale = 57;
  if (!(this->gamepad_look_axial_dead_zone_scale() <= 0 && this->gamepad_look_axial_dead_zone_scale() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(57, this->_internal_gamepad_look_axial_dead_zone_scale(), target);
  }

  // float gamepad_move_axial_dead_zone_scale = 58;
  if (!(this->gamepad_move_axial_dead_zone_scale() <= 0 && this->gamepad_move_axial_dead_zone_scale() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(58, this->_internal_gamepad_move_axial_dead_zone_scale(), target);
  }

  // bool gamepad_use_advanced_hip_aim_settings = 59;
  if (this->gamepad_use_advanced_hip_aim_settings() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(59, this->_internal_gamepad_use_advanced_hip_aim_settings(), target);
  }

  // bool gamepad_use_advanced_zoomed_aim_settings = 60;
  if (this->gamepad_use_advanced_zoomed_aim_settings() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(60, this->_internal_gamepad_use_advanced_zoomed_aim_settings(), target);
  }

  // bool gamepad_use_advanced_vehicle_aim_settings = 61;
  if (this->gamepad_use_advanced_vehicle_aim_settings() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(61, this->_internal_gamepad_use_advanced_vehicle_aim_settings(), target);
  }

  // float gamepad_hip_yaw_rate = 62;
  if (!(this->gamepad_hip_yaw_rate() <= 0 && this->gamepad_hip_yaw_rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(62, this->_internal_gamepad_hip_yaw_rate(), target);
  }

  // float gamepad_hip_pitch_rate = 63;
  if (!(this->gamepad_hip_pitch_rate() <= 0 && this->gamepad_hip_pitch_rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(63, this->_internal_gamepad_hip_pitch_rate(), target);
  }

  // float gamepad_hip_extra_yaw = 64;
  if (!(this->gamepad_hip_extra_yaw() <= 0 && this->gamepad_hip_extra_yaw() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(64, this->_internal_gamepad_hip_extra_yaw(), target);
  }

  // float gamepad_hip_extra_pitch = 65;
  if (!(this->gamepad_hip_extra_pitch() <= 0 && this->gamepad_hip_extra_pitch() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(65, this->_internal_gamepad_hip_extra_pitch(), target);
  }

  // float gamepad_hip_ramp_up_time = 66;
  if (!(this->gamepad_hip_ramp_up_time() <= 0 && this->gamepad_hip_ramp_up_time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(66, this->_internal_gamepad_hip_ramp_up_time(), target);
  }

  // float gamepad_hip_ramp_up_delay = 67;
  if (!(this->gamepad_hip_ramp_up_delay() <= 0 && this->gamepad_hip_ramp_up_delay() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(67, this->_internal_gamepad_hip_ramp_up_delay(), target);
  }

  // float gamepad_zoomed_yaw_rate = 68;
  if (!(this->gamepad_zoomed_yaw_rate() <= 0 && this->gamepad_zoomed_yaw_rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(68, this->_internal_gamepad_zoomed_yaw_rate(), target);
  }

  // float gamepad_zoomed_pitch_rate = 69;
  if (!(this->gamepad_zoomed_pitch_rate() <= 0 && this->gamepad_zoomed_pitch_rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(69, this->_internal_gamepad_zoomed_pitch_rate(), target);
  }

  // float gamepad_zoomed_extra_yaw = 70;
  if (!(this->gamepad_zoomed_extra_yaw() <= 0 && this->gamepad_zoomed_extra_yaw() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(70, this->_internal_gamepad_zoomed_extra_yaw(), target);
  }

  // float gamepad_zoomed_extra_pitch = 71;
  if (!(this->gamepad_zoomed_extra_pitch() <= 0 && this->gamepad_zoomed_extra_pitch() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(71, this->_internal_gamepad_zoomed_extra_pitch(), target);
  }

  // float gamepad_zoomed_ramp_up_time = 72;
  if (!(this->gamepad_zoomed_ramp_up_time() <= 0 && this->gamepad_zoomed_ramp_up_time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(72, this->_internal_gamepad_zoomed_ramp_up_time(), target);
  }

  // float gamepad_zoomed_ramp_up_delay = 73;
  if (!(this->gamepad_zoomed_ramp_up_delay() <= 0 && this->gamepad_zoomed_ramp_up_delay() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(73, this->_internal_gamepad_zoomed_ramp_up_delay(), target);
  }

  // float gamepad_vehicle_yaw_rate = 74;
  if (!(this->gamepad_vehicle_yaw_rate() <= 0 && this->gamepad_vehicle_yaw_rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(74, this->_internal_gamepad_vehicle_yaw_rate(), target);
  }

  // float gamepad_vehicle_pitch_rate = 75;
  if (!(this->gamepad_vehicle_pitch_rate() <= 0 && this->gamepad_vehicle_pitch_rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(75, this->_internal_gamepad_vehicle_pitch_rate(), target);
  }

  // float gamepad_vehicle_extra_yaw = 76;
  if (!(this->gamepad_vehicle_extra_yaw() <= 0 && this->gamepad_vehicle_extra_yaw() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(76, this->_internal_gamepad_vehicle_extra_yaw(), target);
  }

  // float gamepad_vehicle_extra_pitch = 77;
  if (!(this->gamepad_vehicle_extra_pitch() <= 0 && this->gamepad_vehicle_extra_pitch() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(77, this->_internal_gamepad_vehicle_extra_pitch(), target);
  }

  // float gamepad_vehicle_ramp_up_time = 78;
  if (!(this->gamepad_vehicle_ramp_up_time() <= 0 && this->gamepad_vehicle_ramp_up_time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(78, this->_internal_gamepad_vehicle_ramp_up_time(), target);
  }

  // float gamepad_vehicle_ramp_up_delay = 79;
  if (!(this->gamepad_vehicle_ramp_up_delay() <= 0 && this->gamepad_vehicle_ramp_up_delay() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(79, this->_internal_gamepad_vehicle_ramp_up_delay(), target);
  }

  // bool ironsight_aim_assist = 80;
  if (this->ironsight_aim_assist() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(80, this->_internal_ironsight_aim_assist(), target);
  }

  // uint32 walking_joystick_scheme = 81;
  if (this->walking_joystick_scheme() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(81, this->_internal_walking_joystick_scheme(), target);
  }

  // uint32 driving_joystick_scheme = 82;
  if (this->driving_joystick_scheme() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(82, this->_internal_driving_joystick_scheme(), target);
  }

  // float mouse_ads_scale = 83;
  if (!(this->mouse_ads_scale() <= 0 && this->mouse_ads_scale() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(83, this->_internal_mouse_ads_scale(), target);
  }

  // float mouse_vehicle_scale = 84;
  if (!(this->mouse_vehicle_scale() <= 0 && this->mouse_vehicle_scale() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(84, this->_internal_mouse_vehicle_scale(), target);
  }

  // bool mouse_ironsight_aim_assist = 85;
  if (this->mouse_ironsight_aim_assist() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(85, this->_internal_mouse_ironsight_aim_assist(), target);
  }

  // uint32 vehicle_input_mode = 86;
  if (this->vehicle_input_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(86, this->_internal_vehicle_input_mode(), target);
  }

  // bool weapon_aim_toggle = 87;
  if (this->weapon_aim_toggle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(87, this->_internal_weapon_aim_toggle(), target);
  }

  // bool mantle_requires_button = 88;
  if (this->mantle_requires_button() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(88, this->_internal_mantle_requires_button(), target);
  }

  // bool fixed_minimap_rotation = 89;
  if (this->fixed_minimap_rotation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(89, this->_internal_fixed_minimap_rotation(), target);
  }

  // bool map_invert_pitch = 90;
  if (this->map_invert_pitch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(90, this->_internal_map_invert_pitch(), target);
  }

  // bool map_invert_yaw = 91;
  if (this->map_invert_yaw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(91, this->_internal_map_invert_yaw(), target);
  }

  // uint32 difficulty = 92;
  if (this->difficulty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(92, this->_internal_difficulty(), target);
  }

  // bool swap_dual_wield_controls = 93;
  if (this->swap_dual_wield_controls() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(93, this->_internal_swap_dual_wield_controls(), target);
  }

  // float base_fov = 94;
  if (!(this->base_fov() <= 0 && this->base_fov() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(94, this->_internal_base_fov(), target);
  }

  // uint32 crosshair_neutral_color_frame = 95;
  if (this->crosshair_neutral_color_frame() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(95, this->_internal_crosshair_neutral_color_frame(), target);
  }

  // uint32 crosshair_enemy_color_frame = 96;
  if (this->crosshair_enemy_color_frame() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(96, this->_internal_crosshair_enemy_color_frame(), target);
  }

  // uint32 crosshair_ally_color_frame = 97;
  if (this->crosshair_ally_color_frame() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(97, this->_internal_crosshair_ally_color_frame(), target);
  }

  // bool enable_subtitles = 98;
  if (this->enable_subtitles() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(98, this->_internal_enable_subtitles(), target);
  }

  // bool enable_closed_captions = 99;
  if (this->enable_closed_captions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(99, this->_internal_enable_closed_captions(), target);
  }

  // string last_status_menu_page = 100;
  if (this->last_status_menu_page().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_status_menu_page().data(), static_cast<int>(this->_internal_last_status_menu_page().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.Profile.last_status_menu_page");
    target = stream->WriteStringMaybeAliased(
        100, this->_internal_last_status_menu_page(), target);
  }

  // repeated .OakSave.OakProfileLastInventoryFilterInfo inventory_screen_last_filter = 101;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inventory_screen_last_filter_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(101, this->_internal_inventory_screen_last_filter(i), target, stream);
  }

  // .OakSave.OakProfileMenuTutorialInfo tutorial_info = 102;
  if (this->has_tutorial_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        102, _Internal::tutorial_info(this), target, stream);
  }

  // uint32 default_network_type = 103;
  if (this->default_network_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(103, this->_internal_default_network_type(), target);
  }

  // uint32 default_invite_type = 104;
  if (this->default_invite_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(104, this->_internal_default_invite_type(), target);
  }

  // string matchmaking_region = 105;
  if (this->matchmaking_region().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_matchmaking_region().data(), static_cast<int>(this->_internal_matchmaking_region().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.Profile.matchmaking_region");
    target = stream->WriteStringMaybeAliased(
        105, this->_internal_matchmaking_region(), target);
  }

  // uint32 streaming_service = 106;
  if (this->streaming_service() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(106, this->_internal_streaming_service(), target);
  }

  // int32 max_cached_friend_events = 107;
  if (this->max_cached_friend_events() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(107, this->_internal_max_cached_friend_events(), target);
  }

  // int32 max_cached_friend_statuses = 108;
  if (this->max_cached_friend_statuses() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(108, this->_internal_max_cached_friend_statuses(), target);
  }

  // repeated string friend_events = 109;
  for (int i = 0, n = this->_internal_friend_events_size(); i < n; i++) {
    const auto& s = this->_internal_friend_events(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.Profile.friend_events");
    target = stream->WriteString(109, s, target);
  }

  // repeated string friend_statuses = 110;
  for (int i = 0, n = this->_internal_friend_statuses_size(); i < n; i++) {
    const auto& s = this->_internal_friend_statuses(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.Profile.friend_statuses");
    target = stream->WriteString(110, s, target);
  }

  // int64 last_whisper_fetch_events_time = 111;
  if (this->last_whisper_fetch_events_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(111, this->_internal_last_whisper_fetch_events_time(), target);
  }

  // int64 last_whisper_fetch_statuses_time = 112;
  if (this->last_whisper_fetch_statuses_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(112, this->_internal_last_whisper_fetch_statuses_time(), target);
  }

  // uint32 desired_crossplay_state = 113;
  if (this->desired_crossplay_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(113, this->_internal_desired_crossplay_state(), target);
  }

  // repeated .OakSave.Profile.FriendEncountersEntry friend_encounters = 133;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_friend_encounters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(133, this->_internal_friend_encounters(i), target, stream);
  }

  // int32 max_friend_encounter_size = 134;
  if (this->max_friend_encounter_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(134, this->_internal_max_friend_encounter_size(), target);
  }

  // repeated .OakSave.GameStatSaveGameData profile_stats_data = 135;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_profile_stats_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(135, this->_internal_profile_stats_data(i), target, stream);
  }

  // repeated .OakSave.InventoryCategorySaveData bank_inventory_category_list = 136;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bank_inventory_category_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(136, this->_internal_bank_inventory_category_list(i), target, stream);
  }

  // repeated bytes bank_inventory_list = 137;
  for (int i = 0, n = this->_internal_bank_inventory_list_size(); i < n; i++) {
    const auto& s = this->_internal_bank_inventory_list(i);
    target = stream->WriteBytes(137, s, target);
  }

  // repeated bytes lost_loot_inventory_list = 138;
  for (int i = 0, n = this->_internal_lost_loot_inventory_list_size(); i < n; i++) {
    const auto& s = this->_internal_lost_loot_inventory_list(i);
    target = stream->WriteBytes(138, s, target);
  }

  // repeated .OakSave.OakMailItem npc_mail_items = 139;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_npc_mail_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(139, this->_internal_npc_mail_items(i), target, stream);
  }

  // repeated string mail_guids = 140;
  for (int i = 0, n = this->_internal_mail_guids_size(); i < n; i++) {
    const auto& s = this->_internal_mail_guids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.Profile.mail_guids");
    target = stream->WriteString(140, s, target);
  }

  // repeated string unread_mail_guids = 141;
  for (int i = 0, n = this->_internal_unread_mail_guids_size(); i < n; i++) {
    const auto& s = this->_internal_unread_mail_guids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.Profile.unread_mail_guids");
    target = stream->WriteString(141, s, target);
  }

  // repeated .OakSave.GearSoldByFriendData gear_sold_by_friends = 142;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_gear_sold_by_friends_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(142, this->_internal_gear_sold_by_friends(i), target, stream);
  }

  // repeated .OakSave.OakSDUSaveGameData profile_sdu_list = 143;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_profile_sdu_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(143, this->_internal_profile_sdu_list(i), target, stream);
  }

  // repeated .OakSave.OakCustomizationSaveGameData unlocked_customizations = 144;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_unlocked_customizations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(144, this->_internal_unlocked_customizations(i), target, stream);
  }

  // repeated .OakSave.OakInventoryCustomizationPartInfo unlocked_inventory_customization_parts = 145;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_unlocked_inventory_customization_parts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(145, this->_internal_unlocked_inventory_customization_parts(i), target, stream);
  }

  // .OakSave.GuardianRankProfileData guardian_rank = 146;
  if (this->has_guardian_rank()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        146, _Internal::guardian_rank(this), target, stream);
  }

  // repeated .OakSave.CrewQuartersDecorationItemSaveGameData unlocked_crew_quarters_decorations = 147;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_unlocked_crew_quarters_decorations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(147, this->_internal_unlocked_crew_quarters_decorations(i), target, stream);
  }

  // repeated .OakSave.CrewQuartersRoomItemSaveGameData unlocked_crew_quarters_rooms = 148;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_unlocked_crew_quarters_rooms_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(148, this->_internal_unlocked_crew_quarters_rooms(i), target, stream);
  }

  // bool enable_mouse_acceleration = 150;
  if (this->enable_mouse_acceleration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(150, this->_internal_enable_mouse_acceleration(), target);
  }

  // bool enable_gamepad_input = 151;
  if (this->enable_gamepad_input() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(151, this->_internal_enable_gamepad_input(), target);
  }

  // bool use_classic_gamepad_input = 152;
  if (this->use_classic_gamepad_input() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(152, this->_internal_use_classic_gamepad_input(), target);
  }

  // float master_volume = 153;
  if (!(this->master_volume() <= 0 && this->master_volume() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(153, this->_internal_master_volume(), target);
  }

  // uint32 monitor_display_type = 154;
  if (this->monitor_display_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(154, this->_internal_monitor_display_type(), target);
  }

  // uint32 graphics_mode = 155;
  if (this->graphics_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(155, this->_internal_graphics_mode(), target);
  }

  // uint32 frame_rate_limit = 156;
  if (this->frame_rate_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(156, this->_internal_frame_rate_limit(), target);
  }

  // float base_vehicle_fov = 157;
  if (!(this->base_vehicle_fov() <= 0 && this->base_vehicle_fov() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(157, this->_internal_base_vehicle_fov(), target);
  }

  // uint32 graphics_quality = 158;
  if (this->graphics_quality() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(158, this->_internal_graphics_quality(), target);
  }

  // uint32 anisotropic_filtering = 159;
  if (this->anisotropic_filtering() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(159, this->_internal_anisotropic_filtering(), target);
  }

  // uint32 shadow_quality = 160;
  if (this->shadow_quality() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(160, this->_internal_shadow_quality(), target);
  }

  // uint32 display_performance_stats = 161;
  if (this->display_performance_stats() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(161, this->_internal_display_performance_stats(), target);
  }

  // uint32 texture_detail = 162;
  if (this->texture_detail() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(162, this->_internal_texture_detail(), target);
  }

  // uint32 draw_distance = 163;
  if (this->draw_distance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(163, this->_internal_draw_distance(), target);
  }

  // uint32 clutter = 164;
  if (this->clutter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(164, this->_internal_clutter(), target);
  }

  // uint32 tessellation = 165;
  if (this->tessellation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(165, this->_internal_tessellation(), target);
  }

  // uint32 foliage = 166;
  if (this->foliage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(166, this->_internal_foliage(), target);
  }

  // bool foliage_shadows = 167;
  if (this->foliage_shadows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(167, this->_internal_foliage_shadows(), target);
  }

  // bool planar_reflections = 168;
  if (this->planar_reflections() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(168, this->_internal_planar_reflections(), target);
  }

  // uint32 volumetric_fog = 169;
  if (this->volumetric_fog() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(169, this->_internal_volumetric_fog(), target);
  }

  // uint32 screen_space_reflections = 170;
  if (this->screen_space_reflections() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(170, this->_internal_screen_space_reflections(), target);
  }

  // uint32 character_texture_detail = 171;
  if (this->character_texture_detail() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(171, this->_internal_character_texture_detail(), target);
  }

  // uint32 character_detail = 172;
  if (this->character_detail() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(172, this->_internal_character_detail(), target);
  }

  // uint32 ambient_occlusion_quality = 173;
  if (this->ambient_occlusion_quality() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(173, this->_internal_ambient_occlusion_quality(), target);
  }

  // bool object_motion_blur = 174;
  if (this->object_motion_blur() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(174, this->_internal_object_motion_blur(), target);
  }

  // bool lens_flare = 175;
  if (this->lens_flare() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(175, this->_internal_lens_flare(), target);
  }

  // bool combat_number_long_format = 176;
  if (this->combat_number_long_format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(176, this->_internal_combat_number_long_format(), target);
  }

  // bool show_minimap_legendaries = 177;
  if (this->show_minimap_legendaries() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(177, this->_internal_show_minimap_legendaries(), target);
  }

  // bool use_player_callouts = 178;
  if (this->use_player_callouts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(178, this->_internal_use_player_callouts(), target);
  }

  // uint32 friend_event_notification_lifetime = 179;
  if (this->friend_event_notification_lifetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(179, this->_internal_friend_event_notification_lifetime(), target);
  }

  // uint32 friend_event_notification_frequency = 180;
  if (this->friend_event_notification_frequency() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(180, this->_internal_friend_event_notification_frequency(), target);
  }

  // uint32 trade_request_reception_type = 181;
  if (this->trade_request_reception_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(181, this->_internal_trade_request_reception_type(), target);
  }

  // float head_bob_scale = 182;
  if (!(this->head_bob_scale() <= 0 && this->head_bob_scale() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(182, this->_internal_head_bob_scale(), target);
  }

  // bool has_seen_first_boot = 184;
  if (this->has_seen_first_boot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(184, this->_internal_has_seen_first_boot(), target);
  }

  // float subs_cc_size = 189;
  if (!(this->subs_cc_size() <= 0 && this->subs_cc_size() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(189, this->_internal_subs_cc_size(), target);
  }

  // float cc_subs_background_opacity = 190;
  if (!(this->cc_subs_background_opacity() <= 0 && this->cc_subs_background_opacity() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(190, this->_internal_cc_subs_background_opacity(), target);
  }

  // uint32 walking_button_scheme = 191;
  if (this->walking_button_scheme() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(191, this->_internal_walking_button_scheme(), target);
  }

  // uint32 driving_button_scheme = 192;
  if (this->driving_button_scheme() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(192, this->_internal_driving_button_scheme(), target);
  }

  // uint32 glyph_mode = 193;
  if (this->glyph_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(193, this->_internal_glyph_mode(), target);
  }

  // bool use_MPH = 194;
  if (this->use_mph() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(194, this->_internal_use_mph(), target);
  }

  // repeated .OakSave.RegisteredDownloadableEntitlements registered_downloadable_entitlements = 195;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_registered_downloadable_entitlements_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(195, this->_internal_registered_downloadable_entitlements(i), target, stream);
  }

  // repeated string seen_news_items = 196;
  for (int i = 0, n = this->_internal_seen_news_items_size(); i < n; i++) {
    const auto& s = this->_internal_seen_news_items(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OakSave.Profile.seen_news_items");
    target = stream->WriteString(196, s, target);
  }

  // bool auto_centering_enabled = 197;
  if (this->auto_centering_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(197, this->_internal_auto_centering_enabled(), target);
  }

  // bool increased_chance_for_subscribers = 198;
  if (this->increased_chance_for_subscribers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(198, this->_internal_increased_chance_for_subscribers(), target);
  }

  // bool rare_chest_event_enabled = 199;
  if (this->rare_chest_event_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(199, this->_internal_rare_chest_event_enabled(), target);
  }

  // bool badass_event_enabled = 200;
  if (this->badass_event_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(200, this->_internal_badass_event_enabled(), target);
  }

  // bool pinata_event_enabled = 201;
  if (this->pinata_event_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(201, this->_internal_pinata_event_enabled(), target);
  }

  // int32 min_time_between_badass_events = 202;
  if (this->min_time_between_badass_events() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(202, this->_internal_min_time_between_badass_events(), target);
  }

  // float hud_scale_multiplier = 203;
  if (!(this->hud_scale_multiplier() <= 0 && this->hud_scale_multiplier() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(203, this->_internal_hud_scale_multiplier(), target);
  }

  // bool disable_spatial_audio = 204;
  if (this->disable_spatial_audio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(204, this->_internal_disable_spatial_audio(), target);
  }

  // int32 total_playtime_seconds = 205;
  if (this->total_playtime_seconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(205, this->_internal_total_playtime_seconds(), target);
  }

  // bool moxxis_drink_event_enabled = 206;
  if (this->moxxis_drink_event_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(206, this->_internal_moxxis_drink_event_enabled(), target);
  }

  // int32 moxxis_drink_event_bits_product_id = 207;
  if (this->moxxis_drink_event_bits_product_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(207, this->_internal_moxxis_drink_event_bits_product_id(), target);
  }

  // repeated .OakSave.ChallengeSaveGameData challenge_data = 208;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_challenge_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(208, this->_internal_challenge_data(i), target, stream);
  }

  // repeated int32 CitizenScienceLevelProgression = 209;
  {
    int byte_size = _citizensciencelevelprogression_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          209, _internal_citizensciencelevelprogression(), byte_size, target);
    }
  }

  // bool default_dead_zone_inner_updated = 210;
  if (this->default_dead_zone_inner_updated() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(210, this->_internal_default_dead_zone_inner_updated(), target);
  }

  // bool disable_event_content = 211;
  if (this->disable_event_content() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(211, this->_internal_disable_event_content(), target);
  }

  // uint32 desired_friend_sync_state = 212;
  if (this->desired_friend_sync_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(212, this->_internal_desired_friend_sync_state(), target);
  }

  // bool needs_shift_first_boot = 213;
  if (this->needs_shift_first_boot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(213, this->_internal_needs_shift_first_boot(), target);
  }

  // repeated .OakSave.RecentlyMetPlayer recently_met_players = 214;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_recently_met_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(214, this->_internal_recently_met_players(i), target, stream);
  }

  // int32 CitizenScienceActiveBoosterIndex = 215;
  if (this->citizenscienceactiveboosterindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(215, this->_internal_citizenscienceactiveboosterindex(), target);
  }

  // float CitizenScienceActiveBoosterRemainingTime = 216;
  if (!(this->citizenscienceactiveboosterremainingtime() <= 0 && this->citizenscienceactiveboosterremainingtime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(216, this->_internal_citizenscienceactiveboosterremainingtime(), target);
  }

  // float CitizenScienceActiveBoosterTotalTime = 217;
  if (!(this->citizenscienceactiveboostertotaltime() <= 0 && this->citizenscienceactiveboostertotaltime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(217, this->_internal_citizenscienceactiveboostertotaltime(), target);
  }

  // int32 StreamerPrimaryActiveBoosterIndex = 218;
  if (this->streamerprimaryactiveboosterindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(218, this->_internal_streamerprimaryactiveboosterindex(), target);
  }

  // float StreamerPrimaryActiveBoosterRemainingTime = 219;
  if (!(this->streamerprimaryactiveboosterremainingtime() <= 0 && this->streamerprimaryactiveboosterremainingtime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(219, this->_internal_streamerprimaryactiveboosterremainingtime(), target);
  }

  // float StreamerPrimaryActiveBoosterTotalTime = 220;
  if (!(this->streamerprimaryactiveboostertotaltime() <= 0 && this->streamerprimaryactiveboostertotaltime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(220, this->_internal_streamerprimaryactiveboostertotaltime(), target);
  }

  // int32 StreamerSecondaryActiveBoosterIndex = 221;
  if (this->streamersecondaryactiveboosterindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(221, this->_internal_streamersecondaryactiveboosterindex(), target);
  }

  // float StreamerSecondaryActiveBoosterRemainingTime = 222;
  if (!(this->streamersecondaryactiveboosterremainingtime() <= 0 && this->streamersecondaryactiveboosterremainingtime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(222, this->_internal_streamersecondaryactiveboosterremainingtime(), target);
  }

  // float StreamerSecondaryActiveBoosterTotalTime = 223;
  if (!(this->streamersecondaryactiveboostertotaltime() <= 0 && this->streamersecondaryactiveboostertotaltime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(223, this->_internal_streamersecondaryactiveboostertotaltime(), target);
  }

  // int32 StreamerBoosterTier = 224;
  if (this->streamerboostertier() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(224, this->_internal_streamerboostertier(), target);
  }

  // int32 CitizenScienceCSBucksAmount = 226;
  if (this->citizensciencecsbucksamount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(226, this->_internal_citizensciencecsbucksamount(), target);
  }

  // bool bCitizenScienceHasSeenIntroVideo = 227;
  if (this->bcitizensciencehasseenintrovideo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(227, this->_internal_bcitizensciencehasseenintrovideo(), target);
  }

  // bool bCitizenScienceTutorialDone = 228;
  if (this->bcitizensciencetutorialdone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(228, this->_internal_bcitizensciencetutorialdone(), target);
  }

  // bool fixed_initial_zonemap_rotation = 230;
  if (this->fixed_initial_zonemap_rotation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(230, this->_internal_fixed_initial_zonemap_rotation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OakSave.Profile)
  return target;
}

size_t Profile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OakSave.Profile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 news_hashes = 36;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->news_hashes_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _news_hashes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .OakSave.OakProfileLastInventoryFilterInfo inventory_screen_last_filter = 101;
  total_size += 2UL * this->_internal_inventory_screen_last_filter_size();
  for (const auto& msg : this->inventory_screen_last_filter_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string friend_events = 109;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(friend_events_.size());
  for (int i = 0, n = friend_events_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      friend_events_.Get(i));
  }

  // repeated string friend_statuses = 110;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(friend_statuses_.size());
  for (int i = 0, n = friend_statuses_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      friend_statuses_.Get(i));
  }

  // repeated .OakSave.Profile.FriendEncountersEntry friend_encounters = 133;
  total_size += 2UL * this->_internal_friend_encounters_size();
  for (const auto& msg : this->friend_encounters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .OakSave.GameStatSaveGameData profile_stats_data = 135;
  total_size += 2UL * this->_internal_profile_stats_data_size();
  for (const auto& msg : this->profile_stats_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .OakSave.InventoryCategorySaveData bank_inventory_category_list = 136;
  total_size += 2UL * this->_internal_bank_inventory_category_list_size();
  for (const auto& msg : this->bank_inventory_category_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated bytes bank_inventory_list = 137;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(bank_inventory_list_.size());
  for (int i = 0, n = bank_inventory_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      bank_inventory_list_.Get(i));
  }

  // repeated bytes lost_loot_inventory_list = 138;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(lost_loot_inventory_list_.size());
  for (int i = 0, n = lost_loot_inventory_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      lost_loot_inventory_list_.Get(i));
  }

  // repeated .OakSave.OakMailItem npc_mail_items = 139;
  total_size += 2UL * this->_internal_npc_mail_items_size();
  for (const auto& msg : this->npc_mail_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string mail_guids = 140;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(mail_guids_.size());
  for (int i = 0, n = mail_guids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      mail_guids_.Get(i));
  }

  // repeated string unread_mail_guids = 141;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(unread_mail_guids_.size());
  for (int i = 0, n = unread_mail_guids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      unread_mail_guids_.Get(i));
  }

  // repeated .OakSave.GearSoldByFriendData gear_sold_by_friends = 142;
  total_size += 2UL * this->_internal_gear_sold_by_friends_size();
  for (const auto& msg : this->gear_sold_by_friends_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .OakSave.OakSDUSaveGameData profile_sdu_list = 143;
  total_size += 2UL * this->_internal_profile_sdu_list_size();
  for (const auto& msg : this->profile_sdu_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .OakSave.OakCustomizationSaveGameData unlocked_customizations = 144;
  total_size += 2UL * this->_internal_unlocked_customizations_size();
  for (const auto& msg : this->unlocked_customizations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .OakSave.OakInventoryCustomizationPartInfo unlocked_inventory_customization_parts = 145;
  total_size += 2UL * this->_internal_unlocked_inventory_customization_parts_size();
  for (const auto& msg : this->unlocked_inventory_customization_parts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .OakSave.CrewQuartersDecorationItemSaveGameData unlocked_crew_quarters_decorations = 147;
  total_size += 2UL * this->_internal_unlocked_crew_quarters_decorations_size();
  for (const auto& msg : this->unlocked_crew_quarters_decorations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .OakSave.CrewQuartersRoomItemSaveGameData unlocked_crew_quarters_rooms = 148;
  total_size += 2UL * this->_internal_unlocked_crew_quarters_rooms_size();
  for (const auto& msg : this->unlocked_crew_quarters_rooms_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .OakSave.RegisteredDownloadableEntitlements registered_downloadable_entitlements = 195;
  total_size += 2UL * this->_internal_registered_downloadable_entitlements_size();
  for (const auto& msg : this->registered_downloadable_entitlements_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string seen_news_items = 196;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(seen_news_items_.size());
  for (int i = 0, n = seen_news_items_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      seen_news_items_.Get(i));
  }

  // repeated .OakSave.ChallengeSaveGameData challenge_data = 208;
  total_size += 2UL * this->_internal_challenge_data_size();
  for (const auto& msg : this->challenge_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 CitizenScienceLevelProgression = 209;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->citizensciencelevelprogression_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _citizensciencelevelprogression_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .OakSave.RecentlyMetPlayer recently_met_players = 214;
  total_size += 2UL * this->_internal_recently_met_players_size();
  for (const auto& msg : this->recently_met_players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string last_status_menu_page = 100;
  if (this->last_status_menu_page().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_status_menu_page());
  }

  // string matchmaking_region = 105;
  if (this->matchmaking_region().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_matchmaking_region());
  }

  // .OakSave.PlayerInputBindings player_input_bindings = 35;
  if (this->has_player_input_bindings()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_input_bindings_);
  }

  // .OakSave.OakProfileMenuTutorialInfo tutorial_info = 102;
  if (this->has_tutorial_info()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tutorial_info_);
  }

  // .OakSave.GuardianRankProfileData guardian_rank = 146;
  if (this->has_guardian_rank()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *guardian_rank_);
  }

  // bool enable_aim_assist = 1;
  if (this->enable_aim_assist() != 0) {
    total_size += 1 + 1;
  }

  // bool gamepad_invert_look = 2;
  if (this->gamepad_invert_look() != 0) {
    total_size += 1 + 1;
  }

  // bool gamepad_invert_turn = 3;
  if (this->gamepad_invert_turn() != 0) {
    total_size += 1 + 1;
  }

  // bool gamepad_invert_move = 4;
  if (this->gamepad_invert_move() != 0) {
    total_size += 1 + 1;
  }

  // bool gamepad_invert_strafe = 5;
  if (this->gamepad_invert_strafe() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_vibration = 6;
  if (this->enable_vibration() != 0) {
    total_size += 1 + 1;
  }

  // bool invert_mouse_pitch = 7;
  if (this->invert_mouse_pitch() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_mouse_smoothing = 8;
  if (this->enable_mouse_smoothing() != 0) {
    total_size += 1 + 1;
  }

  // float mouse_scale = 9;
  if (!(this->mouse_scale() <= 0 && this->mouse_scale() >= 0)) {
    total_size += 1 + 4;
  }

  // bool show_damage_numbers = 10;
  if (this->show_damage_numbers() != 0) {
    total_size += 1 + 1;
  }

  // bool show_damage_number_icons = 11;
  if (this->show_damage_number_icons() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_training_messages = 12;
  if (this->enable_training_messages() != 0) {
    total_size += 1 + 1;
  }

  // bool show_text_chat = 13;
  if (this->show_text_chat() != 0) {
    total_size += 1 + 1;
  }

  // bool center_crosshair = 14;
  if (this->center_crosshair() != 0) {
    total_size += 1 + 1;
  }

  // bool toggle_sprint = 15;
  if (this->toggle_sprint() != 0) {
    total_size += 1 + 1;
  }

  // bool toggle_crouch = 16;
  if (this->toggle_crouch() != 0) {
    total_size += 2 + 1;
  }

  // bool censor_content = 17;
  if (this->censor_content() != 0) {
    total_size += 2 + 1;
  }

  // float music_volume = 18;
  if (!(this->music_volume() <= 0 && this->music_volume() >= 0)) {
    total_size += 2 + 4;
  }

  // float sound_effects_volume = 19;
  if (!(this->sound_effects_volume() <= 0 && this->sound_effects_volume() >= 0)) {
    total_size += 2 + 4;
  }

  // float vo_volume = 20;
  if (!(this->vo_volume() <= 0 && this->vo_volume() >= 0)) {
    total_size += 2 + 4;
  }

  // float voice_volume = 21;
  if (!(this->voice_volume() <= 0 && this->voice_volume() >= 0)) {
    total_size += 2 + 4;
  }

  // bool enable_optional_vo = 22;
  if (this->enable_optional_vo() != 0) {
    total_size += 2 + 1;
  }

  // bool push_to_talk = 23;
  if (this->push_to_talk() != 0) {
    total_size += 2 + 1;
  }

  // bool enable_controller_audio = 24;
  if (this->enable_controller_audio() != 0) {
    total_size += 2 + 1;
  }

  // bool mute_audio_on_focus_loss = 29;
  if (this->mute_audio_on_focus_loss() != 0) {
    total_size += 2 + 1;
  }

  // float speaker_angle_front = 25;
  if (!(this->speaker_angle_front() <= 0 && this->speaker_angle_front() >= 0)) {
    total_size += 2 + 4;
  }

  // float speaker_angle_side = 26;
  if (!(this->speaker_angle_side() <= 0 && this->speaker_angle_side() >= 0)) {
    total_size += 2 + 4;
  }

  // float speaker_angle_back = 27;
  if (!(this->speaker_angle_back() <= 0 && this->speaker_angle_back() >= 0)) {
    total_size += 2 + 4;
  }

  // uint32 speaker_setup = 28;
  if (this->speaker_setup() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_speaker_setup());
  }

  // uint32 last_used_savegame_id = 37;
  if (this->last_used_savegame_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_last_used_savegame_id());
  }

  // int32 gamepad_hip_sensitivity_level = 38;
  if (this->gamepad_hip_sensitivity_level() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gamepad_hip_sensitivity_level());
  }

  // int32 gamepad_zoomed_sensitivity_level = 39;
  if (this->gamepad_zoomed_sensitivity_level() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gamepad_zoomed_sensitivity_level());
  }

  // int32 gamepad_vehicle_sensitivity_level = 40;
  if (this->gamepad_vehicle_sensitivity_level() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gamepad_vehicle_sensitivity_level());
  }

  // float gamepad_movement_dead_zone_x = 41;
  if (!(this->gamepad_movement_dead_zone_x() <= 0 && this->gamepad_movement_dead_zone_x() >= 0)) {
    total_size += 2 + 4;
  }

  // float gamepad_movement_dead_zone_y = 42;
  if (!(this->gamepad_movement_dead_zone_y() <= 0 && this->gamepad_movement_dead_zone_y() >= 0)) {
    total_size += 2 + 4;
  }

  // float gamepad_look_dead_zone_inner_x = 43;
  if (!(this->gamepad_look_dead_zone_inner_x() <= 0 && this->gamepad_look_dead_zone_inner_x() >= 0)) {
    total_size += 2 + 4;
  }

  // float gamepad_look_dead_zone_outer_x = 44;
  if (!(this->gamepad_look_dead_zone_outer_x() <= 0 && this->gamepad_look_dead_zone_outer_x() >= 0)) {
    total_size += 2 + 4;
  }

  // float gamepad_look_dead_zone_inner_y = 45;
  if (!(this->gamepad_look_dead_zone_inner_y() <= 0 && this->gamepad_look_dead_zone_inner_y() >= 0)) {
    total_size += 2 + 4;
  }

  // float gamepad_look_dead_zone_outer_y = 46;
  if (!(this->gamepad_look_dead_zone_outer_y() <= 0 && this->gamepad_look_dead_zone_outer_y() >= 0)) {
    total_size += 2 + 4;
  }

  // float gamepad_vehicle_movement_dead_zone_x = 47;
  if (!(this->gamepad_vehicle_movement_dead_zone_x() <= 0 && this->gamepad_vehicle_movement_dead_zone_x() >= 0)) {
    total_size += 2 + 4;
  }

  // float gamepad_vehicle_movement_dead_zone_y = 48;
  if (!(this->gamepad_vehicle_movement_dead_zone_y() <= 0 && this->gamepad_vehicle_movement_dead_zone_y() >= 0)) {
    total_size += 2 + 4;
  }

  // float gamepad_vehicle_look_dead_zone_inner_x = 49;
  if (!(this->gamepad_vehicle_look_dead_zone_inner_x() <= 0 && this->gamepad_vehicle_look_dead_zone_inner_x() >= 0)) {
    total_size += 2 + 4;
  }

  // float gamepad_vehicle_look_dead_zone_outer_x = 50;
  if (!(this->gamepad_vehicle_look_dead_zone_outer_x() <= 0 && this->gamepad_vehicle_look_dead_zone_outer_x() >= 0)) {
    total_size += 2 + 4;
  }

  // float gamepad_vehicle_look_dead_zone_inner_y = 51;
  if (!(this->gamepad_vehicle_look_dead_zone_inner_y() <= 0 && this->gamepad_vehicle_look_dead_zone_inner_y() >= 0)) {
    total_size += 2 + 4;
  }

  // float gamepad_vehicle_look_dead_zone_outer_y = 52;
  if (!(this->gamepad_vehicle_look_dead_zone_outer_y() <= 0 && this->gamepad_vehicle_look_dead_zone_outer_y() >= 0)) {
    total_size += 2 + 4;
  }

  // float gamepad_left_dead_zone_inner = 53;
  if (!(this->gamepad_left_dead_zone_inner() <= 0 && this->gamepad_left_dead_zone_inner() >= 0)) {
    total_size += 2 + 4;
  }

  // bool hide_strict_nat_help_dialog = 34;
  if (this->hide_strict_nat_help_dialog() != 0) {
    total_size += 2 + 1;
  }

  // bool gamepad_use_advanced_hip_aim_settings = 59;
  if (this->gamepad_use_advanced_hip_aim_settings() != 0) {
    total_size += 2 + 1;
  }

  // bool gamepad_use_advanced_zoomed_aim_settings = 60;
  if (this->gamepad_use_advanced_zoomed_aim_settings() != 0) {
    total_size += 2 + 1;
  }

  // bool gamepad_use_advanced_vehicle_aim_settings = 61;
  if (this->gamepad_use_advanced_vehicle_aim_settings() != 0) {
    total_size += 2 + 1;
  }

  // float gamepad_left_dead_zone_outer = 54;
  if (!(this->gamepad_left_dead_zone_outer() <= 0 && this->gamepad_left_dead_zone_outer() >= 0)) {
    total_size += 2 + 4;
  }

  // float gamepad_right_dead_zone_inner = 55;
  if (!(this->gamepad_right_dead_zone_inner() <= 0 && this->gamepad_right_dead_zone_inner() >= 0)) {
    total_size += 2 + 4;
  }

  // float gamepad_right_dead_zone_outer = 56;
  if (!(this->gamepad_right_dead_zone_outer() <= 0 && this->gamepad_right_dead_zone_outer() >= 0)) {
    total_size += 2 + 4;
  }

  // float gamepad_look_axial_dead_zone_scale = 57;
  if (!(this->gamepad_look_axial_dead_zone_scale() <= 0 && this->gamepad_look_axial_dead_zone_scale() >= 0)) {
    total_size += 2 + 4;
  }

  // float gamepad_move_axial_dead_zone_scale = 58;
  if (!(this->gamepad_move_axial_dead_zone_scale() <= 0 && this->gamepad_move_axial_dead_zone_scale() >= 0)) {
    total_size += 2 + 4;
  }

  // float gamepad_hip_yaw_rate = 62;
  if (!(this->gamepad_hip_yaw_rate() <= 0 && this->gamepad_hip_yaw_rate() >= 0)) {
    total_size += 2 + 4;
  }

  // float gamepad_hip_pitch_rate = 63;
  if (!(this->gamepad_hip_pitch_rate() <= 0 && this->gamepad_hip_pitch_rate() >= 0)) {
    total_size += 2 + 4;
  }

  // float gamepad_hip_extra_yaw = 64;
  if (!(this->gamepad_hip_extra_yaw() <= 0 && this->gamepad_hip_extra_yaw() >= 0)) {
    total_size += 2 + 4;
  }

  // float gamepad_hip_extra_pitch = 65;
  if (!(this->gamepad_hip_extra_pitch() <= 0 && this->gamepad_hip_extra_pitch() >= 0)) {
    total_size += 2 + 4;
  }

  // float gamepad_hip_ramp_up_time = 66;
  if (!(this->gamepad_hip_ramp_up_time() <= 0 && this->gamepad_hip_ramp_up_time() >= 0)) {
    total_size += 2 + 4;
  }

  // float gamepad_hip_ramp_up_delay = 67;
  if (!(this->gamepad_hip_ramp_up_delay() <= 0 && this->gamepad_hip_ramp_up_delay() >= 0)) {
    total_size += 2 + 4;
  }

  // float gamepad_zoomed_yaw_rate = 68;
  if (!(this->gamepad_zoomed_yaw_rate() <= 0 && this->gamepad_zoomed_yaw_rate() >= 0)) {
    total_size += 2 + 4;
  }

  // float gamepad_zoomed_pitch_rate = 69;
  if (!(this->gamepad_zoomed_pitch_rate() <= 0 && this->gamepad_zoomed_pitch_rate() >= 0)) {
    total_size += 2 + 4;
  }

  // float gamepad_zoomed_extra_yaw = 70;
  if (!(this->gamepad_zoomed_extra_yaw() <= 0 && this->gamepad_zoomed_extra_yaw() >= 0)) {
    total_size += 2 + 4;
  }

  // float gamepad_zoomed_extra_pitch = 71;
  if (!(this->gamepad_zoomed_extra_pitch() <= 0 && this->gamepad_zoomed_extra_pitch() >= 0)) {
    total_size += 2 + 4;
  }

  // float gamepad_zoomed_ramp_up_time = 72;
  if (!(this->gamepad_zoomed_ramp_up_time() <= 0 && this->gamepad_zoomed_ramp_up_time() >= 0)) {
    total_size += 2 + 4;
  }

  // float gamepad_zoomed_ramp_up_delay = 73;
  if (!(this->gamepad_zoomed_ramp_up_delay() <= 0 && this->gamepad_zoomed_ramp_up_delay() >= 0)) {
    total_size += 2 + 4;
  }

  // float gamepad_vehicle_yaw_rate = 74;
  if (!(this->gamepad_vehicle_yaw_rate() <= 0 && this->gamepad_vehicle_yaw_rate() >= 0)) {
    total_size += 2 + 4;
  }

  // float gamepad_vehicle_pitch_rate = 75;
  if (!(this->gamepad_vehicle_pitch_rate() <= 0 && this->gamepad_vehicle_pitch_rate() >= 0)) {
    total_size += 2 + 4;
  }

  // float gamepad_vehicle_extra_yaw = 76;
  if (!(this->gamepad_vehicle_extra_yaw() <= 0 && this->gamepad_vehicle_extra_yaw() >= 0)) {
    total_size += 2 + 4;
  }

  // float gamepad_vehicle_extra_pitch = 77;
  if (!(this->gamepad_vehicle_extra_pitch() <= 0 && this->gamepad_vehicle_extra_pitch() >= 0)) {
    total_size += 2 + 4;
  }

  // float gamepad_vehicle_ramp_up_time = 78;
  if (!(this->gamepad_vehicle_ramp_up_time() <= 0 && this->gamepad_vehicle_ramp_up_time() >= 0)) {
    total_size += 2 + 4;
  }

  // float gamepad_vehicle_ramp_up_delay = 79;
  if (!(this->gamepad_vehicle_ramp_up_delay() <= 0 && this->gamepad_vehicle_ramp_up_delay() >= 0)) {
    total_size += 2 + 4;
  }

  // uint32 walking_joystick_scheme = 81;
  if (this->walking_joystick_scheme() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_walking_joystick_scheme());
  }

  // uint32 driving_joystick_scheme = 82;
  if (this->driving_joystick_scheme() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_driving_joystick_scheme());
  }

  // float mouse_ads_scale = 83;
  if (!(this->mouse_ads_scale() <= 0 && this->mouse_ads_scale() >= 0)) {
    total_size += 2 + 4;
  }

  // float mouse_vehicle_scale = 84;
  if (!(this->mouse_vehicle_scale() <= 0 && this->mouse_vehicle_scale() >= 0)) {
    total_size += 2 + 4;
  }

  // bool ironsight_aim_assist = 80;
  if (this->ironsight_aim_assist() != 0) {
    total_size += 2 + 1;
  }

  // bool mouse_ironsight_aim_assist = 85;
  if (this->mouse_ironsight_aim_assist() != 0) {
    total_size += 2 + 1;
  }

  // bool weapon_aim_toggle = 87;
  if (this->weapon_aim_toggle() != 0) {
    total_size += 2 + 1;
  }

  // bool mantle_requires_button = 88;
  if (this->mantle_requires_button() != 0) {
    total_size += 2 + 1;
  }

  // uint32 vehicle_input_mode = 86;
  if (this->vehicle_input_mode() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_vehicle_input_mode());
  }

  // bool fixed_minimap_rotation = 89;
  if (this->fixed_minimap_rotation() != 0) {
    total_size += 2 + 1;
  }

  // bool map_invert_pitch = 90;
  if (this->map_invert_pitch() != 0) {
    total_size += 2 + 1;
  }

  // bool map_invert_yaw = 91;
  if (this->map_invert_yaw() != 0) {
    total_size += 2 + 1;
  }

  // bool swap_dual_wield_controls = 93;
  if (this->swap_dual_wield_controls() != 0) {
    total_size += 2 + 1;
  }

  // uint32 difficulty = 92;
  if (this->difficulty() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_difficulty());
  }

  // float base_fov = 94;
  if (!(this->base_fov() <= 0 && this->base_fov() >= 0)) {
    total_size += 2 + 4;
  }

  // uint32 crosshair_neutral_color_frame = 95;
  if (this->crosshair_neutral_color_frame() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_crosshair_neutral_color_frame());
  }

  // uint32 crosshair_enemy_color_frame = 96;
  if (this->crosshair_enemy_color_frame() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_crosshair_enemy_color_frame());
  }

  // uint32 crosshair_ally_color_frame = 97;
  if (this->crosshair_ally_color_frame() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_crosshair_ally_color_frame());
  }

  // uint32 default_network_type = 103;
  if (this->default_network_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_default_network_type());
  }

  // uint32 default_invite_type = 104;
  if (this->default_invite_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_default_invite_type());
  }

  // uint32 streaming_service = 106;
  if (this->streaming_service() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_streaming_service());
  }

  // int32 max_cached_friend_events = 107;
  if (this->max_cached_friend_events() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_cached_friend_events());
  }

  // int32 max_cached_friend_statuses = 108;
  if (this->max_cached_friend_statuses() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_cached_friend_statuses());
  }

  // int64 last_whisper_fetch_events_time = 111;
  if (this->last_whisper_fetch_events_time() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_last_whisper_fetch_events_time());
  }

  // int64 last_whisper_fetch_statuses_time = 112;
  if (this->last_whisper_fetch_statuses_time() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_last_whisper_fetch_statuses_time());
  }

  // uint32 desired_crossplay_state = 113;
  if (this->desired_crossplay_state() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_desired_crossplay_state());
  }

  // bool enable_subtitles = 98;
  if (this->enable_subtitles() != 0) {
    total_size += 2 + 1;
  }

  // bool enable_closed_captions = 99;
  if (this->enable_closed_captions() != 0) {
    total_size += 2 + 1;
  }

  // bool enable_mouse_acceleration = 150;
  if (this->enable_mouse_acceleration() != 0) {
    total_size += 2 + 1;
  }

  // bool enable_gamepad_input = 151;
  if (this->enable_gamepad_input() != 0) {
    total_size += 2 + 1;
  }

  // int32 max_friend_encounter_size = 134;
  if (this->max_friend_encounter_size() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_friend_encounter_size());
  }

  // float master_volume = 153;
  if (!(this->master_volume() <= 0 && this->master_volume() >= 0)) {
    total_size += 2 + 4;
  }

  // uint32 monitor_display_type = 154;
  if (this->monitor_display_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_monitor_display_type());
  }

  // uint32 graphics_mode = 155;
  if (this->graphics_mode() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_graphics_mode());
  }

  // uint32 frame_rate_limit = 156;
  if (this->frame_rate_limit() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_frame_rate_limit());
  }

  // float base_vehicle_fov = 157;
  if (!(this->base_vehicle_fov() <= 0 && this->base_vehicle_fov() >= 0)) {
    total_size += 2 + 4;
  }

  // uint32 graphics_quality = 158;
  if (this->graphics_quality() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_graphics_quality());
  }

  // uint32 anisotropic_filtering = 159;
  if (this->anisotropic_filtering() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_anisotropic_filtering());
  }

  // uint32 shadow_quality = 160;
  if (this->shadow_quality() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_shadow_quality());
  }

  // uint32 display_performance_stats = 161;
  if (this->display_performance_stats() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_display_performance_stats());
  }

  // uint32 texture_detail = 162;
  if (this->texture_detail() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_texture_detail());
  }

  // uint32 draw_distance = 163;
  if (this->draw_distance() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_draw_distance());
  }

  // uint32 clutter = 164;
  if (this->clutter() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_clutter());
  }

  // uint32 tessellation = 165;
  if (this->tessellation() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tessellation());
  }

  // bool use_classic_gamepad_input = 152;
  if (this->use_classic_gamepad_input() != 0) {
    total_size += 2 + 1;
  }

  // bool foliage_shadows = 167;
  if (this->foliage_shadows() != 0) {
    total_size += 2 + 1;
  }

  // bool planar_reflections = 168;
  if (this->planar_reflections() != 0) {
    total_size += 2 + 1;
  }

  // bool object_motion_blur = 174;
  if (this->object_motion_blur() != 0) {
    total_size += 2 + 1;
  }

  // uint32 foliage = 166;
  if (this->foliage() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_foliage());
  }

  // uint32 volumetric_fog = 169;
  if (this->volumetric_fog() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_volumetric_fog());
  }

  // uint32 screen_space_reflections = 170;
  if (this->screen_space_reflections() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_screen_space_reflections());
  }

  // uint32 character_texture_detail = 171;
  if (this->character_texture_detail() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_character_texture_detail());
  }

  // uint32 character_detail = 172;
  if (this->character_detail() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_character_detail());
  }

  // uint32 ambient_occlusion_quality = 173;
  if (this->ambient_occlusion_quality() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ambient_occlusion_quality());
  }

  // bool lens_flare = 175;
  if (this->lens_flare() != 0) {
    total_size += 2 + 1;
  }

  // bool combat_number_long_format = 176;
  if (this->combat_number_long_format() != 0) {
    total_size += 2 + 1;
  }

  // bool show_minimap_legendaries = 177;
  if (this->show_minimap_legendaries() != 0) {
    total_size += 2 + 1;
  }

  // bool use_player_callouts = 178;
  if (this->use_player_callouts() != 0) {
    total_size += 2 + 1;
  }

  // uint32 friend_event_notification_lifetime = 179;
  if (this->friend_event_notification_lifetime() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_friend_event_notification_lifetime());
  }

  // uint32 friend_event_notification_frequency = 180;
  if (this->friend_event_notification_frequency() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_friend_event_notification_frequency());
  }

  // uint32 trade_request_reception_type = 181;
  if (this->trade_request_reception_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_trade_request_reception_type());
  }

  // float head_bob_scale = 182;
  if (!(this->head_bob_scale() <= 0 && this->head_bob_scale() >= 0)) {
    total_size += 2 + 4;
  }

  // float subs_cc_size = 189;
  if (!(this->subs_cc_size() <= 0 && this->subs_cc_size() >= 0)) {
    total_size += 2 + 4;
  }

  // float cc_subs_background_opacity = 190;
  if (!(this->cc_subs_background_opacity() <= 0 && this->cc_subs_background_opacity() >= 0)) {
    total_size += 2 + 4;
  }

  // uint32 walking_button_scheme = 191;
  if (this->walking_button_scheme() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_walking_button_scheme());
  }

  // uint32 driving_button_scheme = 192;
  if (this->driving_button_scheme() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_driving_button_scheme());
  }

  // uint32 glyph_mode = 193;
  if (this->glyph_mode() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_glyph_mode());
  }

  // bool has_seen_first_boot = 184;
  if (this->has_seen_first_boot() != 0) {
    total_size += 2 + 1;
  }

  // bool use_MPH = 194;
  if (this->use_mph() != 0) {
    total_size += 2 + 1;
  }

  // bool auto_centering_enabled = 197;
  if (this->auto_centering_enabled() != 0) {
    total_size += 2 + 1;
  }

  // bool increased_chance_for_subscribers = 198;
  if (this->increased_chance_for_subscribers() != 0) {
    total_size += 2 + 1;
  }

  // bool bCitizenScienceHasSeenIntroVideo = 227;
  if (this->bcitizensciencehasseenintrovideo() != 0) {
    total_size += 2 + 1;
  }

  // bool bCitizenScienceTutorialDone = 228;
  if (this->bcitizensciencetutorialdone() != 0) {
    total_size += 2 + 1;
  }

  // bool fixed_initial_zonemap_rotation = 230;
  if (this->fixed_initial_zonemap_rotation() != 0) {
    total_size += 2 + 1;
  }

  // bool rare_chest_event_enabled = 199;
  if (this->rare_chest_event_enabled() != 0) {
    total_size += 2 + 1;
  }

  // bool badass_event_enabled = 200;
  if (this->badass_event_enabled() != 0) {
    total_size += 2 + 1;
  }

  // bool pinata_event_enabled = 201;
  if (this->pinata_event_enabled() != 0) {
    total_size += 2 + 1;
  }

  // bool disable_spatial_audio = 204;
  if (this->disable_spatial_audio() != 0) {
    total_size += 2 + 1;
  }

  // int32 min_time_between_badass_events = 202;
  if (this->min_time_between_badass_events() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_min_time_between_badass_events());
  }

  // float hud_scale_multiplier = 203;
  if (!(this->hud_scale_multiplier() <= 0 && this->hud_scale_multiplier() >= 0)) {
    total_size += 2 + 4;
  }

  // int32 total_playtime_seconds = 205;
  if (this->total_playtime_seconds() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_playtime_seconds());
  }

  // int32 moxxis_drink_event_bits_product_id = 207;
  if (this->moxxis_drink_event_bits_product_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_moxxis_drink_event_bits_product_id());
  }

  // bool moxxis_drink_event_enabled = 206;
  if (this->moxxis_drink_event_enabled() != 0) {
    total_size += 2 + 1;
  }

  // bool default_dead_zone_inner_updated = 210;
  if (this->default_dead_zone_inner_updated() != 0) {
    total_size += 2 + 1;
  }

  // bool disable_event_content = 211;
  if (this->disable_event_content() != 0) {
    total_size += 2 + 1;
  }

  // bool needs_shift_first_boot = 213;
  if (this->needs_shift_first_boot() != 0) {
    total_size += 2 + 1;
  }

  // uint32 desired_friend_sync_state = 212;
  if (this->desired_friend_sync_state() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_desired_friend_sync_state());
  }

  // int32 CitizenScienceActiveBoosterIndex = 215;
  if (this->citizenscienceactiveboosterindex() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_citizenscienceactiveboosterindex());
  }

  // float CitizenScienceActiveBoosterRemainingTime = 216;
  if (!(this->citizenscienceactiveboosterremainingtime() <= 0 && this->citizenscienceactiveboosterremainingtime() >= 0)) {
    total_size += 2 + 4;
  }

  // float CitizenScienceActiveBoosterTotalTime = 217;
  if (!(this->citizenscienceactiveboostertotaltime() <= 0 && this->citizenscienceactiveboostertotaltime() >= 0)) {
    total_size += 2 + 4;
  }

  // int32 StreamerPrimaryActiveBoosterIndex = 218;
  if (this->streamerprimaryactiveboosterindex() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_streamerprimaryactiveboosterindex());
  }

  // float StreamerPrimaryActiveBoosterRemainingTime = 219;
  if (!(this->streamerprimaryactiveboosterremainingtime() <= 0 && this->streamerprimaryactiveboosterremainingtime() >= 0)) {
    total_size += 2 + 4;
  }

  // float StreamerPrimaryActiveBoosterTotalTime = 220;
  if (!(this->streamerprimaryactiveboostertotaltime() <= 0 && this->streamerprimaryactiveboostertotaltime() >= 0)) {
    total_size += 2 + 4;
  }

  // int32 StreamerSecondaryActiveBoosterIndex = 221;
  if (this->streamersecondaryactiveboosterindex() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_streamersecondaryactiveboosterindex());
  }

  // float StreamerSecondaryActiveBoosterRemainingTime = 222;
  if (!(this->streamersecondaryactiveboosterremainingtime() <= 0 && this->streamersecondaryactiveboosterremainingtime() >= 0)) {
    total_size += 2 + 4;
  }

  // float StreamerSecondaryActiveBoosterTotalTime = 223;
  if (!(this->streamersecondaryactiveboostertotaltime() <= 0 && this->streamersecondaryactiveboostertotaltime() >= 0)) {
    total_size += 2 + 4;
  }

  // int32 StreamerBoosterTier = 224;
  if (this->streamerboostertier() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_streamerboostertier());
  }

  // int32 CitizenScienceCSBucksAmount = 226;
  if (this->citizensciencecsbucksamount() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_citizensciencecsbucksamount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Profile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OakSave.Profile)
  GOOGLE_DCHECK_NE(&from, this);
  const Profile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Profile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OakSave.Profile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OakSave.Profile)
    MergeFrom(*source);
  }
}

void Profile::MergeFrom(const Profile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OakSave.Profile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  news_hashes_.MergeFrom(from.news_hashes_);
  inventory_screen_last_filter_.MergeFrom(from.inventory_screen_last_filter_);
  friend_events_.MergeFrom(from.friend_events_);
  friend_statuses_.MergeFrom(from.friend_statuses_);
  friend_encounters_.MergeFrom(from.friend_encounters_);
  profile_stats_data_.MergeFrom(from.profile_stats_data_);
  bank_inventory_category_list_.MergeFrom(from.bank_inventory_category_list_);
  bank_inventory_list_.MergeFrom(from.bank_inventory_list_);
  lost_loot_inventory_list_.MergeFrom(from.lost_loot_inventory_list_);
  npc_mail_items_.MergeFrom(from.npc_mail_items_);
  mail_guids_.MergeFrom(from.mail_guids_);
  unread_mail_guids_.MergeFrom(from.unread_mail_guids_);
  gear_sold_by_friends_.MergeFrom(from.gear_sold_by_friends_);
  profile_sdu_list_.MergeFrom(from.profile_sdu_list_);
  unlocked_customizations_.MergeFrom(from.unlocked_customizations_);
  unlocked_inventory_customization_parts_.MergeFrom(from.unlocked_inventory_customization_parts_);
  unlocked_crew_quarters_decorations_.MergeFrom(from.unlocked_crew_quarters_decorations_);
  unlocked_crew_quarters_rooms_.MergeFrom(from.unlocked_crew_quarters_rooms_);
  registered_downloadable_entitlements_.MergeFrom(from.registered_downloadable_entitlements_);
  seen_news_items_.MergeFrom(from.seen_news_items_);
  challenge_data_.MergeFrom(from.challenge_data_);
  citizensciencelevelprogression_.MergeFrom(from.citizensciencelevelprogression_);
  recently_met_players_.MergeFrom(from.recently_met_players_);
  if (from.last_status_menu_page().size() > 0) {
    _internal_set_last_status_menu_page(from._internal_last_status_menu_page());
  }
  if (from.matchmaking_region().size() > 0) {
    _internal_set_matchmaking_region(from._internal_matchmaking_region());
  }
  if (from.has_player_input_bindings()) {
    _internal_mutable_player_input_bindings()->::OakSave::PlayerInputBindings::MergeFrom(from._internal_player_input_bindings());
  }
  if (from.has_tutorial_info()) {
    _internal_mutable_tutorial_info()->::OakSave::OakProfileMenuTutorialInfo::MergeFrom(from._internal_tutorial_info());
  }
  if (from.has_guardian_rank()) {
    _internal_mutable_guardian_rank()->::OakSave::GuardianRankProfileData::MergeFrom(from._internal_guardian_rank());
  }
  if (from.enable_aim_assist() != 0) {
    _internal_set_enable_aim_assist(from._internal_enable_aim_assist());
  }
  if (from.gamepad_invert_look() != 0) {
    _internal_set_gamepad_invert_look(from._internal_gamepad_invert_look());
  }
  if (from.gamepad_invert_turn() != 0) {
    _internal_set_gamepad_invert_turn(from._internal_gamepad_invert_turn());
  }
  if (from.gamepad_invert_move() != 0) {
    _internal_set_gamepad_invert_move(from._internal_gamepad_invert_move());
  }
  if (from.gamepad_invert_strafe() != 0) {
    _internal_set_gamepad_invert_strafe(from._internal_gamepad_invert_strafe());
  }
  if (from.enable_vibration() != 0) {
    _internal_set_enable_vibration(from._internal_enable_vibration());
  }
  if (from.invert_mouse_pitch() != 0) {
    _internal_set_invert_mouse_pitch(from._internal_invert_mouse_pitch());
  }
  if (from.enable_mouse_smoothing() != 0) {
    _internal_set_enable_mouse_smoothing(from._internal_enable_mouse_smoothing());
  }
  if (!(from.mouse_scale() <= 0 && from.mouse_scale() >= 0)) {
    _internal_set_mouse_scale(from._internal_mouse_scale());
  }
  if (from.show_damage_numbers() != 0) {
    _internal_set_show_damage_numbers(from._internal_show_damage_numbers());
  }
  if (from.show_damage_number_icons() != 0) {
    _internal_set_show_damage_number_icons(from._internal_show_damage_number_icons());
  }
  if (from.enable_training_messages() != 0) {
    _internal_set_enable_training_messages(from._internal_enable_training_messages());
  }
  if (from.show_text_chat() != 0) {
    _internal_set_show_text_chat(from._internal_show_text_chat());
  }
  if (from.center_crosshair() != 0) {
    _internal_set_center_crosshair(from._internal_center_crosshair());
  }
  if (from.toggle_sprint() != 0) {
    _internal_set_toggle_sprint(from._internal_toggle_sprint());
  }
  if (from.toggle_crouch() != 0) {
    _internal_set_toggle_crouch(from._internal_toggle_crouch());
  }
  if (from.censor_content() != 0) {
    _internal_set_censor_content(from._internal_censor_content());
  }
  if (!(from.music_volume() <= 0 && from.music_volume() >= 0)) {
    _internal_set_music_volume(from._internal_music_volume());
  }
  if (!(from.sound_effects_volume() <= 0 && from.sound_effects_volume() >= 0)) {
    _internal_set_sound_effects_volume(from._internal_sound_effects_volume());
  }
  if (!(from.vo_volume() <= 0 && from.vo_volume() >= 0)) {
    _internal_set_vo_volume(from._internal_vo_volume());
  }
  if (!(from.voice_volume() <= 0 && from.voice_volume() >= 0)) {
    _internal_set_voice_volume(from._internal_voice_volume());
  }
  if (from.enable_optional_vo() != 0) {
    _internal_set_enable_optional_vo(from._internal_enable_optional_vo());
  }
  if (from.push_to_talk() != 0) {
    _internal_set_push_to_talk(from._internal_push_to_talk());
  }
  if (from.enable_controller_audio() != 0) {
    _internal_set_enable_controller_audio(from._internal_enable_controller_audio());
  }
  if (from.mute_audio_on_focus_loss() != 0) {
    _internal_set_mute_audio_on_focus_loss(from._internal_mute_audio_on_focus_loss());
  }
  if (!(from.speaker_angle_front() <= 0 && from.speaker_angle_front() >= 0)) {
    _internal_set_speaker_angle_front(from._internal_speaker_angle_front());
  }
  if (!(from.speaker_angle_side() <= 0 && from.speaker_angle_side() >= 0)) {
    _internal_set_speaker_angle_side(from._internal_speaker_angle_side());
  }
  if (!(from.speaker_angle_back() <= 0 && from.speaker_angle_back() >= 0)) {
    _internal_set_speaker_angle_back(from._internal_speaker_angle_back());
  }
  if (from.speaker_setup() != 0) {
    _internal_set_speaker_setup(from._internal_speaker_setup());
  }
  if (from.last_used_savegame_id() != 0) {
    _internal_set_last_used_savegame_id(from._internal_last_used_savegame_id());
  }
  if (from.gamepad_hip_sensitivity_level() != 0) {
    _internal_set_gamepad_hip_sensitivity_level(from._internal_gamepad_hip_sensitivity_level());
  }
  if (from.gamepad_zoomed_sensitivity_level() != 0) {
    _internal_set_gamepad_zoomed_sensitivity_level(from._internal_gamepad_zoomed_sensitivity_level());
  }
  if (from.gamepad_vehicle_sensitivity_level() != 0) {
    _internal_set_gamepad_vehicle_sensitivity_level(from._internal_gamepad_vehicle_sensitivity_level());
  }
  if (!(from.gamepad_movement_dead_zone_x() <= 0 && from.gamepad_movement_dead_zone_x() >= 0)) {
    _internal_set_gamepad_movement_dead_zone_x(from._internal_gamepad_movement_dead_zone_x());
  }
  if (!(from.gamepad_movement_dead_zone_y() <= 0 && from.gamepad_movement_dead_zone_y() >= 0)) {
    _internal_set_gamepad_movement_dead_zone_y(from._internal_gamepad_movement_dead_zone_y());
  }
  if (!(from.gamepad_look_dead_zone_inner_x() <= 0 && from.gamepad_look_dead_zone_inner_x() >= 0)) {
    _internal_set_gamepad_look_dead_zone_inner_x(from._internal_gamepad_look_dead_zone_inner_x());
  }
  if (!(from.gamepad_look_dead_zone_outer_x() <= 0 && from.gamepad_look_dead_zone_outer_x() >= 0)) {
    _internal_set_gamepad_look_dead_zone_outer_x(from._internal_gamepad_look_dead_zone_outer_x());
  }
  if (!(from.gamepad_look_dead_zone_inner_y() <= 0 && from.gamepad_look_dead_zone_inner_y() >= 0)) {
    _internal_set_gamepad_look_dead_zone_inner_y(from._internal_gamepad_look_dead_zone_inner_y());
  }
  if (!(from.gamepad_look_dead_zone_outer_y() <= 0 && from.gamepad_look_dead_zone_outer_y() >= 0)) {
    _internal_set_gamepad_look_dead_zone_outer_y(from._internal_gamepad_look_dead_zone_outer_y());
  }
  if (!(from.gamepad_vehicle_movement_dead_zone_x() <= 0 && from.gamepad_vehicle_movement_dead_zone_x() >= 0)) {
    _internal_set_gamepad_vehicle_movement_dead_zone_x(from._internal_gamepad_vehicle_movement_dead_zone_x());
  }
  if (!(from.gamepad_vehicle_movement_dead_zone_y() <= 0 && from.gamepad_vehicle_movement_dead_zone_y() >= 0)) {
    _internal_set_gamepad_vehicle_movement_dead_zone_y(from._internal_gamepad_vehicle_movement_dead_zone_y());
  }
  if (!(from.gamepad_vehicle_look_dead_zone_inner_x() <= 0 && from.gamepad_vehicle_look_dead_zone_inner_x() >= 0)) {
    _internal_set_gamepad_vehicle_look_dead_zone_inner_x(from._internal_gamepad_vehicle_look_dead_zone_inner_x());
  }
  if (!(from.gamepad_vehicle_look_dead_zone_outer_x() <= 0 && from.gamepad_vehicle_look_dead_zone_outer_x() >= 0)) {
    _internal_set_gamepad_vehicle_look_dead_zone_outer_x(from._internal_gamepad_vehicle_look_dead_zone_outer_x());
  }
  if (!(from.gamepad_vehicle_look_dead_zone_inner_y() <= 0 && from.gamepad_vehicle_look_dead_zone_inner_y() >= 0)) {
    _internal_set_gamepad_vehicle_look_dead_zone_inner_y(from._internal_gamepad_vehicle_look_dead_zone_inner_y());
  }
  if (!(from.gamepad_vehicle_look_dead_zone_outer_y() <= 0 && from.gamepad_vehicle_look_dead_zone_outer_y() >= 0)) {
    _internal_set_gamepad_vehicle_look_dead_zone_outer_y(from._internal_gamepad_vehicle_look_dead_zone_outer_y());
  }
  if (!(from.gamepad_left_dead_zone_inner() <= 0 && from.gamepad_left_dead_zone_inner() >= 0)) {
    _internal_set_gamepad_left_dead_zone_inner(from._internal_gamepad_left_dead_zone_inner());
  }
  if (from.hide_strict_nat_help_dialog() != 0) {
    _internal_set_hide_strict_nat_help_dialog(from._internal_hide_strict_nat_help_dialog());
  }
  if (from.gamepad_use_advanced_hip_aim_settings() != 0) {
    _internal_set_gamepad_use_advanced_hip_aim_settings(from._internal_gamepad_use_advanced_hip_aim_settings());
  }
  if (from.gamepad_use_advanced_zoomed_aim_settings() != 0) {
    _internal_set_gamepad_use_advanced_zoomed_aim_settings(from._internal_gamepad_use_advanced_zoomed_aim_settings());
  }
  if (from.gamepad_use_advanced_vehicle_aim_settings() != 0) {
    _internal_set_gamepad_use_advanced_vehicle_aim_settings(from._internal_gamepad_use_advanced_vehicle_aim_settings());
  }
  if (!(from.gamepad_left_dead_zone_outer() <= 0 && from.gamepad_left_dead_zone_outer() >= 0)) {
    _internal_set_gamepad_left_dead_zone_outer(from._internal_gamepad_left_dead_zone_outer());
  }
  if (!(from.gamepad_right_dead_zone_inner() <= 0 && from.gamepad_right_dead_zone_inner() >= 0)) {
    _internal_set_gamepad_right_dead_zone_inner(from._internal_gamepad_right_dead_zone_inner());
  }
  if (!(from.gamepad_right_dead_zone_outer() <= 0 && from.gamepad_right_dead_zone_outer() >= 0)) {
    _internal_set_gamepad_right_dead_zone_outer(from._internal_gamepad_right_dead_zone_outer());
  }
  if (!(from.gamepad_look_axial_dead_zone_scale() <= 0 && from.gamepad_look_axial_dead_zone_scale() >= 0)) {
    _internal_set_gamepad_look_axial_dead_zone_scale(from._internal_gamepad_look_axial_dead_zone_scale());
  }
  if (!(from.gamepad_move_axial_dead_zone_scale() <= 0 && from.gamepad_move_axial_dead_zone_scale() >= 0)) {
    _internal_set_gamepad_move_axial_dead_zone_scale(from._internal_gamepad_move_axial_dead_zone_scale());
  }
  if (!(from.gamepad_hip_yaw_rate() <= 0 && from.gamepad_hip_yaw_rate() >= 0)) {
    _internal_set_gamepad_hip_yaw_rate(from._internal_gamepad_hip_yaw_rate());
  }
  if (!(from.gamepad_hip_pitch_rate() <= 0 && from.gamepad_hip_pitch_rate() >= 0)) {
    _internal_set_gamepad_hip_pitch_rate(from._internal_gamepad_hip_pitch_rate());
  }
  if (!(from.gamepad_hip_extra_yaw() <= 0 && from.gamepad_hip_extra_yaw() >= 0)) {
    _internal_set_gamepad_hip_extra_yaw(from._internal_gamepad_hip_extra_yaw());
  }
  if (!(from.gamepad_hip_extra_pitch() <= 0 && from.gamepad_hip_extra_pitch() >= 0)) {
    _internal_set_gamepad_hip_extra_pitch(from._internal_gamepad_hip_extra_pitch());
  }
  if (!(from.gamepad_hip_ramp_up_time() <= 0 && from.gamepad_hip_ramp_up_time() >= 0)) {
    _internal_set_gamepad_hip_ramp_up_time(from._internal_gamepad_hip_ramp_up_time());
  }
  if (!(from.gamepad_hip_ramp_up_delay() <= 0 && from.gamepad_hip_ramp_up_delay() >= 0)) {
    _internal_set_gamepad_hip_ramp_up_delay(from._internal_gamepad_hip_ramp_up_delay());
  }
  if (!(from.gamepad_zoomed_yaw_rate() <= 0 && from.gamepad_zoomed_yaw_rate() >= 0)) {
    _internal_set_gamepad_zoomed_yaw_rate(from._internal_gamepad_zoomed_yaw_rate());
  }
  if (!(from.gamepad_zoomed_pitch_rate() <= 0 && from.gamepad_zoomed_pitch_rate() >= 0)) {
    _internal_set_gamepad_zoomed_pitch_rate(from._internal_gamepad_zoomed_pitch_rate());
  }
  if (!(from.gamepad_zoomed_extra_yaw() <= 0 && from.gamepad_zoomed_extra_yaw() >= 0)) {
    _internal_set_gamepad_zoomed_extra_yaw(from._internal_gamepad_zoomed_extra_yaw());
  }
  if (!(from.gamepad_zoomed_extra_pitch() <= 0 && from.gamepad_zoomed_extra_pitch() >= 0)) {
    _internal_set_gamepad_zoomed_extra_pitch(from._internal_gamepad_zoomed_extra_pitch());
  }
  if (!(from.gamepad_zoomed_ramp_up_time() <= 0 && from.gamepad_zoomed_ramp_up_time() >= 0)) {
    _internal_set_gamepad_zoomed_ramp_up_time(from._internal_gamepad_zoomed_ramp_up_time());
  }
  if (!(from.gamepad_zoomed_ramp_up_delay() <= 0 && from.gamepad_zoomed_ramp_up_delay() >= 0)) {
    _internal_set_gamepad_zoomed_ramp_up_delay(from._internal_gamepad_zoomed_ramp_up_delay());
  }
  if (!(from.gamepad_vehicle_yaw_rate() <= 0 && from.gamepad_vehicle_yaw_rate() >= 0)) {
    _internal_set_gamepad_vehicle_yaw_rate(from._internal_gamepad_vehicle_yaw_rate());
  }
  if (!(from.gamepad_vehicle_pitch_rate() <= 0 && from.gamepad_vehicle_pitch_rate() >= 0)) {
    _internal_set_gamepad_vehicle_pitch_rate(from._internal_gamepad_vehicle_pitch_rate());
  }
  if (!(from.gamepad_vehicle_extra_yaw() <= 0 && from.gamepad_vehicle_extra_yaw() >= 0)) {
    _internal_set_gamepad_vehicle_extra_yaw(from._internal_gamepad_vehicle_extra_yaw());
  }
  if (!(from.gamepad_vehicle_extra_pitch() <= 0 && from.gamepad_vehicle_extra_pitch() >= 0)) {
    _internal_set_gamepad_vehicle_extra_pitch(from._internal_gamepad_vehicle_extra_pitch());
  }
  if (!(from.gamepad_vehicle_ramp_up_time() <= 0 && from.gamepad_vehicle_ramp_up_time() >= 0)) {
    _internal_set_gamepad_vehicle_ramp_up_time(from._internal_gamepad_vehicle_ramp_up_time());
  }
  if (!(from.gamepad_vehicle_ramp_up_delay() <= 0 && from.gamepad_vehicle_ramp_up_delay() >= 0)) {
    _internal_set_gamepad_vehicle_ramp_up_delay(from._internal_gamepad_vehicle_ramp_up_delay());
  }
  if (from.walking_joystick_scheme() != 0) {
    _internal_set_walking_joystick_scheme(from._internal_walking_joystick_scheme());
  }
  if (from.driving_joystick_scheme() != 0) {
    _internal_set_driving_joystick_scheme(from._internal_driving_joystick_scheme());
  }
  if (!(from.mouse_ads_scale() <= 0 && from.mouse_ads_scale() >= 0)) {
    _internal_set_mouse_ads_scale(from._internal_mouse_ads_scale());
  }
  if (!(from.mouse_vehicle_scale() <= 0 && from.mouse_vehicle_scale() >= 0)) {
    _internal_set_mouse_vehicle_scale(from._internal_mouse_vehicle_scale());
  }
  if (from.ironsight_aim_assist() != 0) {
    _internal_set_ironsight_aim_assist(from._internal_ironsight_aim_assist());
  }
  if (from.mouse_ironsight_aim_assist() != 0) {
    _internal_set_mouse_ironsight_aim_assist(from._internal_mouse_ironsight_aim_assist());
  }
  if (from.weapon_aim_toggle() != 0) {
    _internal_set_weapon_aim_toggle(from._internal_weapon_aim_toggle());
  }
  if (from.mantle_requires_button() != 0) {
    _internal_set_mantle_requires_button(from._internal_mantle_requires_button());
  }
  if (from.vehicle_input_mode() != 0) {
    _internal_set_vehicle_input_mode(from._internal_vehicle_input_mode());
  }
  if (from.fixed_minimap_rotation() != 0) {
    _internal_set_fixed_minimap_rotation(from._internal_fixed_minimap_rotation());
  }
  if (from.map_invert_pitch() != 0) {
    _internal_set_map_invert_pitch(from._internal_map_invert_pitch());
  }
  if (from.map_invert_yaw() != 0) {
    _internal_set_map_invert_yaw(from._internal_map_invert_yaw());
  }
  if (from.swap_dual_wield_controls() != 0) {
    _internal_set_swap_dual_wield_controls(from._internal_swap_dual_wield_controls());
  }
  if (from.difficulty() != 0) {
    _internal_set_difficulty(from._internal_difficulty());
  }
  if (!(from.base_fov() <= 0 && from.base_fov() >= 0)) {
    _internal_set_base_fov(from._internal_base_fov());
  }
  if (from.crosshair_neutral_color_frame() != 0) {
    _internal_set_crosshair_neutral_color_frame(from._internal_crosshair_neutral_color_frame());
  }
  if (from.crosshair_enemy_color_frame() != 0) {
    _internal_set_crosshair_enemy_color_frame(from._internal_crosshair_enemy_color_frame());
  }
  if (from.crosshair_ally_color_frame() != 0) {
    _internal_set_crosshair_ally_color_frame(from._internal_crosshair_ally_color_frame());
  }
  if (from.default_network_type() != 0) {
    _internal_set_default_network_type(from._internal_default_network_type());
  }
  if (from.default_invite_type() != 0) {
    _internal_set_default_invite_type(from._internal_default_invite_type());
  }
  if (from.streaming_service() != 0) {
    _internal_set_streaming_service(from._internal_streaming_service());
  }
  if (from.max_cached_friend_events() != 0) {
    _internal_set_max_cached_friend_events(from._internal_max_cached_friend_events());
  }
  if (from.max_cached_friend_statuses() != 0) {
    _internal_set_max_cached_friend_statuses(from._internal_max_cached_friend_statuses());
  }
  if (from.last_whisper_fetch_events_time() != 0) {
    _internal_set_last_whisper_fetch_events_time(from._internal_last_whisper_fetch_events_time());
  }
  if (from.last_whisper_fetch_statuses_time() != 0) {
    _internal_set_last_whisper_fetch_statuses_time(from._internal_last_whisper_fetch_statuses_time());
  }
  if (from.desired_crossplay_state() != 0) {
    _internal_set_desired_crossplay_state(from._internal_desired_crossplay_state());
  }
  if (from.enable_subtitles() != 0) {
    _internal_set_enable_subtitles(from._internal_enable_subtitles());
  }
  if (from.enable_closed_captions() != 0) {
    _internal_set_enable_closed_captions(from._internal_enable_closed_captions());
  }
  if (from.enable_mouse_acceleration() != 0) {
    _internal_set_enable_mouse_acceleration(from._internal_enable_mouse_acceleration());
  }
  if (from.enable_gamepad_input() != 0) {
    _internal_set_enable_gamepad_input(from._internal_enable_gamepad_input());
  }
  if (from.max_friend_encounter_size() != 0) {
    _internal_set_max_friend_encounter_size(from._internal_max_friend_encounter_size());
  }
  if (!(from.master_volume() <= 0 && from.master_volume() >= 0)) {
    _internal_set_master_volume(from._internal_master_volume());
  }
  if (from.monitor_display_type() != 0) {
    _internal_set_monitor_display_type(from._internal_monitor_display_type());
  }
  if (from.graphics_mode() != 0) {
    _internal_set_graphics_mode(from._internal_graphics_mode());
  }
  if (from.frame_rate_limit() != 0) {
    _internal_set_frame_rate_limit(from._internal_frame_rate_limit());
  }
  if (!(from.base_vehicle_fov() <= 0 && from.base_vehicle_fov() >= 0)) {
    _internal_set_base_vehicle_fov(from._internal_base_vehicle_fov());
  }
  if (from.graphics_quality() != 0) {
    _internal_set_graphics_quality(from._internal_graphics_quality());
  }
  if (from.anisotropic_filtering() != 0) {
    _internal_set_anisotropic_filtering(from._internal_anisotropic_filtering());
  }
  if (from.shadow_quality() != 0) {
    _internal_set_shadow_quality(from._internal_shadow_quality());
  }
  if (from.display_performance_stats() != 0) {
    _internal_set_display_performance_stats(from._internal_display_performance_stats());
  }
  if (from.texture_detail() != 0) {
    _internal_set_texture_detail(from._internal_texture_detail());
  }
  if (from.draw_distance() != 0) {
    _internal_set_draw_distance(from._internal_draw_distance());
  }
  if (from.clutter() != 0) {
    _internal_set_clutter(from._internal_clutter());
  }
  if (from.tessellation() != 0) {
    _internal_set_tessellation(from._internal_tessellation());
  }
  if (from.use_classic_gamepad_input() != 0) {
    _internal_set_use_classic_gamepad_input(from._internal_use_classic_gamepad_input());
  }
  if (from.foliage_shadows() != 0) {
    _internal_set_foliage_shadows(from._internal_foliage_shadows());
  }
  if (from.planar_reflections() != 0) {
    _internal_set_planar_reflections(from._internal_planar_reflections());
  }
  if (from.object_motion_blur() != 0) {
    _internal_set_object_motion_blur(from._internal_object_motion_blur());
  }
  if (from.foliage() != 0) {
    _internal_set_foliage(from._internal_foliage());
  }
  if (from.volumetric_fog() != 0) {
    _internal_set_volumetric_fog(from._internal_volumetric_fog());
  }
  if (from.screen_space_reflections() != 0) {
    _internal_set_screen_space_reflections(from._internal_screen_space_reflections());
  }
  if (from.character_texture_detail() != 0) {
    _internal_set_character_texture_detail(from._internal_character_texture_detail());
  }
  if (from.character_detail() != 0) {
    _internal_set_character_detail(from._internal_character_detail());
  }
  if (from.ambient_occlusion_quality() != 0) {
    _internal_set_ambient_occlusion_quality(from._internal_ambient_occlusion_quality());
  }
  if (from.lens_flare() != 0) {
    _internal_set_lens_flare(from._internal_lens_flare());
  }
  if (from.combat_number_long_format() != 0) {
    _internal_set_combat_number_long_format(from._internal_combat_number_long_format());
  }
  if (from.show_minimap_legendaries() != 0) {
    _internal_set_show_minimap_legendaries(from._internal_show_minimap_legendaries());
  }
  if (from.use_player_callouts() != 0) {
    _internal_set_use_player_callouts(from._internal_use_player_callouts());
  }
  if (from.friend_event_notification_lifetime() != 0) {
    _internal_set_friend_event_notification_lifetime(from._internal_friend_event_notification_lifetime());
  }
  if (from.friend_event_notification_frequency() != 0) {
    _internal_set_friend_event_notification_frequency(from._internal_friend_event_notification_frequency());
  }
  if (from.trade_request_reception_type() != 0) {
    _internal_set_trade_request_reception_type(from._internal_trade_request_reception_type());
  }
  if (!(from.head_bob_scale() <= 0 && from.head_bob_scale() >= 0)) {
    _internal_set_head_bob_scale(from._internal_head_bob_scale());
  }
  if (!(from.subs_cc_size() <= 0 && from.subs_cc_size() >= 0)) {
    _internal_set_subs_cc_size(from._internal_subs_cc_size());
  }
  if (!(from.cc_subs_background_opacity() <= 0 && from.cc_subs_background_opacity() >= 0)) {
    _internal_set_cc_subs_background_opacity(from._internal_cc_subs_background_opacity());
  }
  if (from.walking_button_scheme() != 0) {
    _internal_set_walking_button_scheme(from._internal_walking_button_scheme());
  }
  if (from.driving_button_scheme() != 0) {
    _internal_set_driving_button_scheme(from._internal_driving_button_scheme());
  }
  if (from.glyph_mode() != 0) {
    _internal_set_glyph_mode(from._internal_glyph_mode());
  }
  if (from.has_seen_first_boot() != 0) {
    _internal_set_has_seen_first_boot(from._internal_has_seen_first_boot());
  }
  if (from.use_mph() != 0) {
    _internal_set_use_mph(from._internal_use_mph());
  }
  if (from.auto_centering_enabled() != 0) {
    _internal_set_auto_centering_enabled(from._internal_auto_centering_enabled());
  }
  if (from.increased_chance_for_subscribers() != 0) {
    _internal_set_increased_chance_for_subscribers(from._internal_increased_chance_for_subscribers());
  }
  if (from.bcitizensciencehasseenintrovideo() != 0) {
    _internal_set_bcitizensciencehasseenintrovideo(from._internal_bcitizensciencehasseenintrovideo());
  }
  if (from.bcitizensciencetutorialdone() != 0) {
    _internal_set_bcitizensciencetutorialdone(from._internal_bcitizensciencetutorialdone());
  }
  if (from.fixed_initial_zonemap_rotation() != 0) {
    _internal_set_fixed_initial_zonemap_rotation(from._internal_fixed_initial_zonemap_rotation());
  }
  if (from.rare_chest_event_enabled() != 0) {
    _internal_set_rare_chest_event_enabled(from._internal_rare_chest_event_enabled());
  }
  if (from.badass_event_enabled() != 0) {
    _internal_set_badass_event_enabled(from._internal_badass_event_enabled());
  }
  if (from.pinata_event_enabled() != 0) {
    _internal_set_pinata_event_enabled(from._internal_pinata_event_enabled());
  }
  if (from.disable_spatial_audio() != 0) {
    _internal_set_disable_spatial_audio(from._internal_disable_spatial_audio());
  }
  if (from.min_time_between_badass_events() != 0) {
    _internal_set_min_time_between_badass_events(from._internal_min_time_between_badass_events());
  }
  if (!(from.hud_scale_multiplier() <= 0 && from.hud_scale_multiplier() >= 0)) {
    _internal_set_hud_scale_multiplier(from._internal_hud_scale_multiplier());
  }
  if (from.total_playtime_seconds() != 0) {
    _internal_set_total_playtime_seconds(from._internal_total_playtime_seconds());
  }
  if (from.moxxis_drink_event_bits_product_id() != 0) {
    _internal_set_moxxis_drink_event_bits_product_id(from._internal_moxxis_drink_event_bits_product_id());
  }
  if (from.moxxis_drink_event_enabled() != 0) {
    _internal_set_moxxis_drink_event_enabled(from._internal_moxxis_drink_event_enabled());
  }
  if (from.default_dead_zone_inner_updated() != 0) {
    _internal_set_default_dead_zone_inner_updated(from._internal_default_dead_zone_inner_updated());
  }
  if (from.disable_event_content() != 0) {
    _internal_set_disable_event_content(from._internal_disable_event_content());
  }
  if (from.needs_shift_first_boot() != 0) {
    _internal_set_needs_shift_first_boot(from._internal_needs_shift_first_boot());
  }
  if (from.desired_friend_sync_state() != 0) {
    _internal_set_desired_friend_sync_state(from._internal_desired_friend_sync_state());
  }
  if (from.citizenscienceactiveboosterindex() != 0) {
    _internal_set_citizenscienceactiveboosterindex(from._internal_citizenscienceactiveboosterindex());
  }
  if (!(from.citizenscienceactiveboosterremainingtime() <= 0 && from.citizenscienceactiveboosterremainingtime() >= 0)) {
    _internal_set_citizenscienceactiveboosterremainingtime(from._internal_citizenscienceactiveboosterremainingtime());
  }
  if (!(from.citizenscienceactiveboostertotaltime() <= 0 && from.citizenscienceactiveboostertotaltime() >= 0)) {
    _internal_set_citizenscienceactiveboostertotaltime(from._internal_citizenscienceactiveboostertotaltime());
  }
  if (from.streamerprimaryactiveboosterindex() != 0) {
    _internal_set_streamerprimaryactiveboosterindex(from._internal_streamerprimaryactiveboosterindex());
  }
  if (!(from.streamerprimaryactiveboosterremainingtime() <= 0 && from.streamerprimaryactiveboosterremainingtime() >= 0)) {
    _internal_set_streamerprimaryactiveboosterremainingtime(from._internal_streamerprimaryactiveboosterremainingtime());
  }
  if (!(from.streamerprimaryactiveboostertotaltime() <= 0 && from.streamerprimaryactiveboostertotaltime() >= 0)) {
    _internal_set_streamerprimaryactiveboostertotaltime(from._internal_streamerprimaryactiveboostertotaltime());
  }
  if (from.streamersecondaryactiveboosterindex() != 0) {
    _internal_set_streamersecondaryactiveboosterindex(from._internal_streamersecondaryactiveboosterindex());
  }
  if (!(from.streamersecondaryactiveboosterremainingtime() <= 0 && from.streamersecondaryactiveboosterremainingtime() >= 0)) {
    _internal_set_streamersecondaryactiveboosterremainingtime(from._internal_streamersecondaryactiveboosterremainingtime());
  }
  if (!(from.streamersecondaryactiveboostertotaltime() <= 0 && from.streamersecondaryactiveboostertotaltime() >= 0)) {
    _internal_set_streamersecondaryactiveboostertotaltime(from._internal_streamersecondaryactiveboostertotaltime());
  }
  if (from.streamerboostertier() != 0) {
    _internal_set_streamerboostertier(from._internal_streamerboostertier());
  }
  if (from.citizensciencecsbucksamount() != 0) {
    _internal_set_citizensciencecsbucksamount(from._internal_citizensciencecsbucksamount());
  }
}

void Profile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OakSave.Profile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Profile::CopyFrom(const Profile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OakSave.Profile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Profile::IsInitialized() const {
  return true;
}

void Profile::InternalSwap(Profile* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  news_hashes_.InternalSwap(&other->news_hashes_);
  inventory_screen_last_filter_.InternalSwap(&other->inventory_screen_last_filter_);
  friend_events_.InternalSwap(&other->friend_events_);
  friend_statuses_.InternalSwap(&other->friend_statuses_);
  friend_encounters_.InternalSwap(&other->friend_encounters_);
  profile_stats_data_.InternalSwap(&other->profile_stats_data_);
  bank_inventory_category_list_.InternalSwap(&other->bank_inventory_category_list_);
  bank_inventory_list_.InternalSwap(&other->bank_inventory_list_);
  lost_loot_inventory_list_.InternalSwap(&other->lost_loot_inventory_list_);
  npc_mail_items_.InternalSwap(&other->npc_mail_items_);
  mail_guids_.InternalSwap(&other->mail_guids_);
  unread_mail_guids_.InternalSwap(&other->unread_mail_guids_);
  gear_sold_by_friends_.InternalSwap(&other->gear_sold_by_friends_);
  profile_sdu_list_.InternalSwap(&other->profile_sdu_list_);
  unlocked_customizations_.InternalSwap(&other->unlocked_customizations_);
  unlocked_inventory_customization_parts_.InternalSwap(&other->unlocked_inventory_customization_parts_);
  unlocked_crew_quarters_decorations_.InternalSwap(&other->unlocked_crew_quarters_decorations_);
  unlocked_crew_quarters_rooms_.InternalSwap(&other->unlocked_crew_quarters_rooms_);
  registered_downloadable_entitlements_.InternalSwap(&other->registered_downloadable_entitlements_);
  seen_news_items_.InternalSwap(&other->seen_news_items_);
  challenge_data_.InternalSwap(&other->challenge_data_);
  citizensciencelevelprogression_.InternalSwap(&other->citizensciencelevelprogression_);
  recently_met_players_.InternalSwap(&other->recently_met_players_);
  last_status_menu_page_.Swap(&other->last_status_menu_page_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  matchmaking_region_.Swap(&other->matchmaking_region_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Profile, citizensciencecsbucksamount_)
      + sizeof(Profile::citizensciencecsbucksamount_)
      - PROTOBUF_FIELD_OFFSET(Profile, player_input_bindings_)>(
          reinterpret_cast<char*>(&player_input_bindings_),
          reinterpret_cast<char*>(&other->player_input_bindings_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Profile::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace OakSave
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::OakSave::PlayerInputBinding_Button* Arena::CreateMaybeMessage< ::OakSave::PlayerInputBinding_Button >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::PlayerInputBinding_Button >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::PlayerInputBinding_Axis_Key* Arena::CreateMaybeMessage< ::OakSave::PlayerInputBinding_Axis_Key >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::PlayerInputBinding_Axis_Key >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::PlayerInputBinding_Axis* Arena::CreateMaybeMessage< ::OakSave::PlayerInputBinding_Axis >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::PlayerInputBinding_Axis >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::PlayerInputBinding_Category* Arena::CreateMaybeMessage< ::OakSave::PlayerInputBinding_Category >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::PlayerInputBinding_Category >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::PlayerInputBindings* Arena::CreateMaybeMessage< ::OakSave::PlayerInputBindings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::PlayerInputBindings >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::OakProfileLastInventoryFilterInfo* Arena::CreateMaybeMessage< ::OakSave::OakProfileLastInventoryFilterInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::OakProfileLastInventoryFilterInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::OakProfileMenuTutorialInfo* Arena::CreateMaybeMessage< ::OakSave::OakProfileMenuTutorialInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::OakProfileMenuTutorialInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::OakFriendEncounterData* Arena::CreateMaybeMessage< ::OakSave::OakFriendEncounterData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::OakFriendEncounterData >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::OakMailItem* Arena::CreateMaybeMessage< ::OakSave::OakMailItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::OakMailItem >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::GearSoldByFriendData* Arena::CreateMaybeMessage< ::OakSave::GearSoldByFriendData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::GearSoldByFriendData >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::OakCustomizationSaveGameData* Arena::CreateMaybeMessage< ::OakSave::OakCustomizationSaveGameData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::OakCustomizationSaveGameData >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::OakInventoryCustomizationPartInfo* Arena::CreateMaybeMessage< ::OakSave::OakInventoryCustomizationPartInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::OakInventoryCustomizationPartInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::GuardianRankRewardSaveGameData* Arena::CreateMaybeMessage< ::OakSave::GuardianRankRewardSaveGameData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::GuardianRankRewardSaveGameData >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::GuardianRankProfileData* Arena::CreateMaybeMessage< ::OakSave::GuardianRankProfileData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::GuardianRankProfileData >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::CrewQuartersDecorationItemSaveGameData* Arena::CreateMaybeMessage< ::OakSave::CrewQuartersDecorationItemSaveGameData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::CrewQuartersDecorationItemSaveGameData >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::CrewQuartersRoomItemSaveGameData* Arena::CreateMaybeMessage< ::OakSave::CrewQuartersRoomItemSaveGameData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::CrewQuartersRoomItemSaveGameData >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::RecentlyMetPlayer* Arena::CreateMaybeMessage< ::OakSave::RecentlyMetPlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::RecentlyMetPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::Profile_FriendEncountersEntry* Arena::CreateMaybeMessage< ::OakSave::Profile_FriendEncountersEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::Profile_FriendEncountersEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::OakSave::Profile* Arena::CreateMaybeMessage< ::OakSave::Profile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OakSave::Profile >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
